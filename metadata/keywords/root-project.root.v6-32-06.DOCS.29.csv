id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/README.rst:310,Usability,simpl,simple,310,"===============================; lit - A Software Testing Tool; ===============================. About; =====. *lit* is a portable tool for executing LLVM and Clang style test suites,; summarizing their results, and providing indication of failures. *lit* is; designed to be a lightweight testing tool with as simple a user interface as; possible. Features; ========. * Portable!; * Flexible test discovery.; * Parallel test execution.; * Support for multiple test formats and test suite designs. Documentation; =============. The official *lit* documentation is in the man page, available online at the LLVM; Command Guide: http://llvm.org/cmds/lit.html. Source; ======. The *lit* source is available as part of LLVM, in the LLVM source repository:; https://github.com/llvm/llvm-project/tree/main/llvm/utils/lit. Contributing to lit; ===================. Please browse the issues labeled *tools:llvm-lit* in LLVM's issue tracker for; ideas on what to work on:; https://github.com/llvm/llvm-project/labels/tools%3Allvm-lit. Before submitting patches, run the test suite to ensure nothing has regressed::. # From within your LLVM source directory.; utils/lit/lit.py \; --path /path/to/your/llvm/build/bin \; utils/lit/tests. Note that lit's tests depend on ``not`` and ``FileCheck``, LLVM utilities.; You will need to have built LLVM tools in order to run lit's test suite; successfully. You'll also want to confirm that lit continues to work when testing LLVM.; Follow the instructions in http://llvm.org/docs/TestingGuide.html to run the; regression test suite:. make check-llvm. And be sure to run the llvm-lit wrapper script as well:. /path/to/your/llvm/build/bin/llvm-lit utils/lit/tests. Finally, make sure lit works when installed via setuptools:. python utils/lit/setup.py install; lit --path /path/to/your/llvm/build/bin utils/lit/tests. ",MatchSource.DOCS,interpreter/llvm-project/llvm/utils/lit/README.rst,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/README.rst
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:1312,Availability,error,error,1312,") to OLD; # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag; cmake_policy(SET CMP0091 OLD); set(CMAKE_SKIP_TEST_ALL_DEPENDENCY TRUE); endif(). if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT ALLOW_IN_SOURCE); message(FATAL_ERROR; "" ROOT must be built out-of-source.\n""; "" Please see README/INSTALL for more information.""); endif(). set(policy_new CMP0072 CMP0076 CMP0077 CMP0079); foreach(policy ${policy_new}); if(POLICY ${policy}); cmake_policy(SET ${policy} NEW); endif(); endforeach(). set(policy_old CMP0116 CMP0135 CMP0144); foreach(policy ${policy_old}); if(POLICY ${policy}); cmake_policy(SET ${policy} OLD); endif(); endforeach(). include(cmake/modules/CaptureCommandLine.cmake). project(ROOT). #---Set the locale to default C to prevent issued due to localization of commands---------------; # This is necessary as we for example call `clang -v` and parse its output. But on a localized; # program, the output parsing is much more error prone as certrain strings we're looking for; # could be missing or be in a different order. To prevent those errors, let's just force all; # output to use the default C locale which is more or less identical on all systems.; set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin). # Set permissions for installed folders and subfolders that come from the source tree in case; # the permissions in the source tree are wrong since the install command will preserve them; set(DIR_PERMISSIONS DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE). # Before setting ROOTSYS, make sure that the environment isn't polluted by a different; # ROOT build.",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:1427,Availability,error,errors,1427,"T_ALL_DEPENDENCY TRUE); endif(). if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT ALLOW_IN_SOURCE); message(FATAL_ERROR; "" ROOT must be built out-of-source.\n""; "" Please see README/INSTALL for more information.""); endif(). set(policy_new CMP0072 CMP0076 CMP0077 CMP0079); foreach(policy ${policy_new}); if(POLICY ${policy}); cmake_policy(SET ${policy} NEW); endif(); endforeach(). set(policy_old CMP0116 CMP0135 CMP0144); foreach(policy ${policy_old}); if(POLICY ${policy}); cmake_policy(SET ${policy} OLD); endif(); endforeach(). include(cmake/modules/CaptureCommandLine.cmake). project(ROOT). #---Set the locale to default C to prevent issued due to localization of commands---------------; # This is necessary as we for example call `clang -v` and parse its output. But on a localized; # program, the output parsing is much more error prone as certrain strings we're looking for; # could be missing or be in a different order. To prevent those errors, let's just force all; # output to use the default C locale which is more or less identical on all systems.; set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin). # Set permissions for installed folders and subfolders that come from the source tree in case; # the permissions in the source tree are wrong since the install command will preserve them; set(DIR_PERMISSIONS DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE). # Before setting ROOTSYS, make sure that the environment isn't polluted by a different; # ROOT build. This is significant e,g. for roottest, which will otherwise have libraries; # of a different ROOT build available / visible / reachable.; if(NOT ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:2434,Availability,avail,available,2434,"To prevent those errors, let's just force all; # output to use the default C locale which is more or less identical on all systems.; set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin). # Set permissions for installed folders and subfolders that come from the source tree in case; # the permissions in the source tree are wrong since the install command will preserve them; set(DIR_PERMISSIONS DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE). # Before setting ROOTSYS, make sure that the environment isn't polluted by a different; # ROOT build. This is significant e,g. for roottest, which will otherwise have libraries; # of a different ROOT build available / visible / reachable.; if(NOT $ENV{ROOTSYS} STREQUAL """"); string(REPLACE ""$ENV{ROOTSYS}/bin"" """" ENV_PATH ""$ENV{PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_LD_LIBRARY_PATH ""$ENV{LD_LIBRARY_PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_PYTHONPATH ""$ENV{PYTHONPATH}""); string(REPLACE ""$ENV{ROOTSYS}"" """" ENV_CMAKE_PREFIX_PATH ""$ENV{CMAKE_PREFIX_PATH}""); set(ENV{PATH} ""${ENV_PATH}""); set(ENV{LD_LIBRARY_PATH} ""${ENV_LD_LIBRARY_PATH}""); set(ENV{PYTHONPATH} ""${ENV_PYTHONPATH}""); set(ENV{CMAKE_PREFIX_PATH} ""${ENV_CMAKE_PREFIX_PATH}""); set(ENV{ROOTSYS} ${CMAKE_BINARY_DIR}); endif(). set(ROOTSYS ${CMAKE_BINARY_DIR}); set(HEADER_OUTPUT_PATH ${CMAKE_BINARY_DIR}/include). #---Set the ROOT version--------------------------------------------------------------------; include(cmake/modules/SetROOTVersion.cmake). message(STATUS ""Building ROOT version ${ROOT_FULL_VERSION}""). #---Where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked----",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:11871,Availability,avail,available,11871,"-----; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CMAKE_COMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:1931,Deployability,install,installed,1931,"(ROOT). #---Set the locale to default C to prevent issued due to localization of commands---------------; # This is necessary as we for example call `clang -v` and parse its output. But on a localized; # program, the output parsing is much more error prone as certrain strings we're looking for; # could be missing or be in a different order. To prevent those errors, let's just force all; # output to use the default C locale which is more or less identical on all systems.; set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin). # Set permissions for installed folders and subfolders that come from the source tree in case; # the permissions in the source tree are wrong since the install command will preserve them; set(DIR_PERMISSIONS DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE). # Before setting ROOTSYS, make sure that the environment isn't polluted by a different; # ROOT build. This is significant e,g. for roottest, which will otherwise have libraries; # of a different ROOT build available / visible / reachable.; if(NOT $ENV{ROOTSYS} STREQUAL """"); string(REPLACE ""$ENV{ROOTSYS}/bin"" """" ENV_PATH ""$ENV{PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_LD_LIBRARY_PATH ""$ENV{LD_LIBRARY_PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_PYTHONPATH ""$ENV{PYTHONPATH}""); string(REPLACE ""$ENV{ROOTSYS}"" """" ENV_CMAKE_PREFIX_PATH ""$ENV{CMAKE_PREFIX_PATH}""); set(ENV{PATH} ""${ENV_PATH}""); set(ENV{LD_LIBRARY_PATH} ""${ENV_LD_LIBRARY_PATH}""); set(ENV{PYTHONPATH} ""${ENV_PYTHONPATH}""); set(ENV{CMAKE_PREFIX_PATH} ""${ENV_CMAKE_PREFIX_PATH}""); set(ENV{ROOTSYS} ${CMAKE_BINARY_DIR}); endif(). set(ROOTSYS ${CMAKE_BINARY_DIR});",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:2061,Deployability,install,install,2061,"(ROOT). #---Set the locale to default C to prevent issued due to localization of commands---------------; # This is necessary as we for example call `clang -v` and parse its output. But on a localized; # program, the output parsing is much more error prone as certrain strings we're looking for; # could be missing or be in a different order. To prevent those errors, let's just force all; # output to use the default C locale which is more or less identical on all systems.; set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin). # Set permissions for installed folders and subfolders that come from the source tree in case; # the permissions in the source tree are wrong since the install command will preserve them; set(DIR_PERMISSIONS DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE). # Before setting ROOTSYS, make sure that the environment isn't polluted by a different; # ROOT build. This is significant e,g. for roottest, which will otherwise have libraries; # of a different ROOT build available / visible / reachable.; if(NOT $ENV{ROOTSYS} STREQUAL """"); string(REPLACE ""$ENV{ROOTSYS}/bin"" """" ENV_PATH ""$ENV{PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_LD_LIBRARY_PATH ""$ENV{LD_LIBRARY_PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_PYTHONPATH ""$ENV{PYTHONPATH}""); string(REPLACE ""$ENV{ROOTSYS}"" """" ENV_CMAKE_PREFIX_PATH ""$ENV{CMAKE_PREFIX_PATH}""); set(ENV{PATH} ""${ENV_PATH}""); set(ENV{LD_LIBRARY_PATH} ""${ENV_LD_LIBRARY_PATH}""); set(ENV{PYTHONPATH} ""${ENV_PYTHONPATH}""); set(ENV{CMAKE_PREFIX_PATH} ""${ENV_CMAKE_PREFIX_PATH}""); set(ENV{ROOTSYS} ${CMAKE_BINARY_DIR}); endif(). set(ROOTSYS ${CMAKE_BINARY_DIR});",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:4852,Deployability,patch,patches,4852," relatedrepo_GetClosestMatch(REPO_NAME <repo> ORIGIN_PREFIX <originp> UPSTREAM_PREFIX <upstreamp>; # FETCHURL_VARIABLE <output_url> FETCHREF_VARIABLE <output_ref>); # Return the clone URL and head/tag of the closest match for `repo` (e.g. roottest), based on the; # current head name.; function(relatedrepo_GetClosestMatch); cmake_parse_arguments(_ """" ""REPO_NAME;ORIGIN_PREFIX;UPSTREAM_PREFIX;FETCHURL_VARIABLE;FETCHREF_VARIABLE"" """" ${ARGN}). set(${__FETCHURL_VARIABLE} ${__UPSTREAM_PREFIX}/${__REPO_NAME} PARENT_SCOPE). if(NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git); set(${__FETCHREF_VARIABLE} v${ROOT_MAJOR_VERSION}-${ROOT_MINOR_VERSION}-${ROOT_PATCH_VERSION} PARENT_SCOPE); return(); endif(). execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; rev-parse --abbrev-ref HEAD; OUTPUT_VARIABLE current_head OUTPUT_STRIP_TRAILING_WHITESPACE); set(${__FETCHREF_VARIABLE} ${current_head} PARENT_SCOPE). # `current_head` is a well-known branch, e.g. master, or v6-28-00-patches. Use the matching branch; # upstream as the fork repository may be out-of-sync; string(REGEX MATCH ""^(master|latest-stable|v[0-9]+-[0-9]+-[0-9]+(-patches)?)$"" known_head ${current_head}); if(NOT ""${known_head}"" STREQUAL """"); if(""${current_head}"" STREQUAL ""latest-stable""); # Resolve the 'latest-stable' branch to the latest merged head/tag; execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; for-each-ref --points-at=latest-stable^2 --format=%\(refname:short\); OUTPUT_VARIABLE current_head OUTPUT_STRIP_TRAILING_WHITESPACE); set(${__FETCHREF_VARIABLE} ${current_head} PARENT_SCOPE); endif(); return(); endif(). # Otherwise, try to use a branch that matches `current_head` in the fork repository; execute_process(COMMAND ${GIT_EXECUTABLE} ls-remote --heads --tags; ${__ORIGIN_PREFIX}/${__REPO_NAME} ${current_head} OUTPUT_VARIABLE matching_refs); if(NOT ""${matching_refs}"" STREQUAL """"); set(${__FETCHURL_VARIABLE} ${__ORIGIN_PREFIX}/${__REPO_NAME} PAR",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:5006,Deployability,patch,patches,5006,"`repo` (e.g. roottest), based on the; # current head name.; function(relatedrepo_GetClosestMatch); cmake_parse_arguments(_ """" ""REPO_NAME;ORIGIN_PREFIX;UPSTREAM_PREFIX;FETCHURL_VARIABLE;FETCHREF_VARIABLE"" """" ${ARGN}). set(${__FETCHURL_VARIABLE} ${__UPSTREAM_PREFIX}/${__REPO_NAME} PARENT_SCOPE). if(NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git); set(${__FETCHREF_VARIABLE} v${ROOT_MAJOR_VERSION}-${ROOT_MINOR_VERSION}-${ROOT_PATCH_VERSION} PARENT_SCOPE); return(); endif(). execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; rev-parse --abbrev-ref HEAD; OUTPUT_VARIABLE current_head OUTPUT_STRIP_TRAILING_WHITESPACE); set(${__FETCHREF_VARIABLE} ${current_head} PARENT_SCOPE). # `current_head` is a well-known branch, e.g. master, or v6-28-00-patches. Use the matching branch; # upstream as the fork repository may be out-of-sync; string(REGEX MATCH ""^(master|latest-stable|v[0-9]+-[0-9]+-[0-9]+(-patches)?)$"" known_head ${current_head}); if(NOT ""${known_head}"" STREQUAL """"); if(""${current_head}"" STREQUAL ""latest-stable""); # Resolve the 'latest-stable' branch to the latest merged head/tag; execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; for-each-ref --points-at=latest-stable^2 --format=%\(refname:short\); OUTPUT_VARIABLE current_head OUTPUT_STRIP_TRAILING_WHITESPACE); set(${__FETCHREF_VARIABLE} ${current_head} PARENT_SCOPE); endif(); return(); endif(). # Otherwise, try to use a branch that matches `current_head` in the fork repository; execute_process(COMMAND ${GIT_EXECUTABLE} ls-remote --heads --tags; ${__ORIGIN_PREFIX}/${__REPO_NAME} ${current_head} OUTPUT_VARIABLE matching_refs); if(NOT ""${matching_refs}"" STREQUAL """"); set(${__FETCHURL_VARIABLE} ${__ORIGIN_PREFIX}/${__REPO_NAME} PARENT_SCOPE); return(); endif(). # Finally, try upstream using the closest head/tag below the parent commit of the current head; execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; describe --a",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:6831,Deployability,update,update,6831,"X}/${__REPO_NAME} PARENT_SCOPE); return(); endif(). # Finally, try upstream using the closest head/tag below the parent commit of the current head; execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; describe --all --abbrev=0 HEAD^; OUTPUT_VARIABLE closest_ref ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE); string(REGEX REPLACE ""^(heads|tags)/"" """" candidate_head ""${closest_ref}""); execute_process(COMMAND ${GIT_EXECUTABLE} ls-remote --heads --tags; ${__UPSTREAM_PREFIX}/${__REPO_NAME} ""${candidate_head}"" OUTPUT_VARIABLE matching_refs); if(NOT ""${matching_refs}"" STREQUAL """"); set(${__FETCHREF_VARIABLE} ${candidate_head} PARENT_SCOPE); return(); endif(); set(${__FETCHREF_VARIABLE} """" PARENT_SCOPE); endfunction(). # relaterepo_Checkout(REPO_NAME <repo> FETCHURL <url> FETCHREF <ref>; # [FORCE] [REPO_DIR_VARIABLE <repo_dir>]); # Clone/fetch and checkout the specified `ref` from the given repository at `url`. If a local clone of the; # repository is found, refuse to update it unless the `FORCE` option is in place.; function(relatedrepo_Checkout); cmake_parse_arguments(_ ""FORCE"" ""REPO_NAME;FETCHURL;FETCHREF;REPO_DIR_VARIABLE"" """" ${ARGN}). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/${__REPO_NAME}); set(repo_dir ${source_dir}/${__REPO_NAME}); elseif(IS_DIRECTORY ${source_dir}/../${__REPO_NAME}); set(repo_dir ${source_dir}/../${__REPO_NAME}); endif(). if(NOT DEFINED repo_dir); message(STATUS ""Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); if(NOT ""${__FETCHREF}"" STREQUAL """"); string(PREPEND __FETCHREF ""-b""); endif(); execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}; WORKING_DIRECTORY ${source_dir}); set(repo_dir ${source_dir}/${__REPO_NAME}); else(); message(STATUS ""Found ${__REPO_NAME}: ${repo_dir}""); if(${__FORCE}); message(STATUS ""Updating ${__REPO_NAME} from '${__FET",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:12274,Deployability,install,installed,12274,"---------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if((var MATCHES ""_(LIBRARIES|LIBRARY|INCLUDE|VERSION)"") AND; (NOT ${${var}} STREQUAL """") AND; (NOT ${var} MATCHES",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:15678,Deployability,install,install,15678,"imple.root; someone might have created it in the src dir, and the hsimple.root; # target below will interfere.; if (NOT (artifact_file STREQUAL ""tutorials/hsimple.root"")); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${artifact_file}; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/${artifact_file} ${CMAKE_BINARY_DIR}/${artifact_file}; COMMENT ""Copying ${CMAKE_SOURCE_DIR}/${artifact_file}""; DEPENDS ${CMAKE_SOURCE_DIR}/${artifact_file}); list(APPEND artifact_files_builddir ${CMAKE_BINARY_DIR}/${artifact_file}); endif(); endforeach(); add_custom_target(move_artifacts DEPENDS ${stamp_file} ${artifact_files_builddir}). add_subdirectory (interpreter). # Update etc/gitinfo.txt for every build.; add_custom_target(gitinfotxt; ALL; COMMAND ${CMAKE_COMMAND} -DSRCDIR=${CMAKE_SOURCE_DIR} -DBINDIR=${CMAKE_BINARY_DIR} -P ${CMAKE_SOURCE_DIR}/cmake/modules/UpdateGitInfo.cmake; COMMENT ""Updating etc/gitinfo.txt.""; BYPRODUCTS ${CMAKE_BINARY_DIR}/etc/gitinfo.txt; ); install(FILES ${CMAKE_BINARY_DIR}/etc/gitinfo.txt DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}). #---Recurse into the given subdirectories. This does not actually cause another cmake executable; # to run. The same process will walk through the project's entire directory structure.; add_subdirectory (core); add_subdirectory (math); add_subdirectory (hist); add_subdirectory (tree); add_subdirectory (io); add_subdirectory (net); add_subdirectory (graf2d); add_subdirectory (graf3d); add_subdirectory (gui); if(html); add_subdirectory (html); endif(); add_subdirectory (montecarlo); if(geom); add_subdirectory (geom); endif(); add_subdirectory (rootx); add_subdirectory (misc); add_subdirectory (main); add_subdirectory (bindings); add_subdirectory (sql); if(proof); add_subdirectory(proof); endif(); if(tmva); add_subdirectory(tmva); endif(); if(roofit); add_subdirectory(roofit); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(tutorials). get_property(__allHeaders GLOBAL PROPERTY ROOT_HEADER_TARGET",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:17636,Deployability,install,install,17636,"(tutorials). get_property(__allHeaders GLOBAL PROPERTY ROOT_HEADER_TARGETS); get_property(__allBuiltins GLOBAL PROPERTY ROOT_BUILTIN_TARGETS); add_custom_target(move_headers ALL DEPENDS ${__allHeaders} ${__allBuiltins} gitinfotxt). #---CXX MODULES-----------------------------------------------------------------------------------; if(MSVC); set(_os_cat ""type""); else(); set(_os_cat ""cat""); endif(); file(TO_NATIVE_PATH ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra"" _from_native); file(TO_NATIVE_PATH ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap"" _to_native). add_custom_target(copymodulemap DEPENDS ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap""); add_custom_command(; 		 OUTPUT ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap""; DEPENDS cmake/unix/module.modulemap ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; 		 COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_SOURCE_DIR}/cmake/unix/module.modulemap"" ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap""; COMMAND ${_os_cat} ""${_from_native}"" >> ""${_to_native}""; ); install(FILES ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap"" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers). add_dependencies(move_headers copymodulemap). # Take all the modulemap contents we collected from the packages and append them to our modulemap.; # We have to delay this because the ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT is filled in the; # add_subdirectory calls above.; get_property(__modulemap_extra_content GLOBAL PROPERTY ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT); string(REPLACE "";"" """" __modulemap_extra_content ""${__modulemap_extra_content}""); # Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra; # if it's unchanged.; file(WRITE ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp"" ""${__modulemap_extra_content}""); configure_file(""${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp""; ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; COPYONLY). # From now on we handled all exposed module and want to make a",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:19509,Deployability,update,updated,19509,"{CMAKE_BINARY_DIR}/include/module.modulemap.extra""; COPYONLY). # From now on we handled all exposed module and want to make all new modulemaps private to ROOT.; set(ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR ON). set (CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS}""). string(REGEX REPLACE ""[ ]-"" "";-"" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); if(MSVC); string(REPLACE ""-Zc:__cplusplus"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-nologo"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-EHsc-"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-GR"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-MDd"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); endif(). if(runtime_cxxmodules); # Dummy target that does nothing, we don't need a PCH for modules.; # Onepcm target has all dependencies needed for allDict.cxx.pch, which allow; # to test hsimple.C after all C++ modules are updated.; add_custom_target(onepcm); foreach(target_dependency ${ROOT_LIBRARY_TARGETS}); add_dependencies(onepcm ${target_dependency}); endforeach(); unset(ROOT_LIBRARY_TARGETS CACHE); else(); get_property(incdirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES). if(WIN32); list(APPEND incdirs; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/gdk; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/glib; ); endif(). foreach(d ${incdirs}); if(NOT ""${d}"" MATCHES ""AFTER|BEFORE|INTERFACE|PRIVATE|PUBLIC|SYSTEM""); set(__allIncludes ${__allIncludes} -I${d}); endif(); endforeach(). get_property(__cling_pch GLOBAL PROPERTY CLINGETCPCH); get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES); get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; ${Python3_EXECUTABLE} ${CMAKE_SOURCE_",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:21019,Deployability,install,install,21019,"TEM""); set(__allIncludes ${__allIncludes} -I${d}); endif(); endforeach(). get_property(__cling_pch GLOBAL PROPERTY CLINGETCPCH); get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES); get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR} . ${pyroot_legacy} ${__cling_pch}; COMMAND; ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ${Python3_EXECUTABLE}; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py etc/allDict.cxx.pch; ${__allIncludes} -I${CMAKE_BINARY_DIR}/include -I${CMAKE_SOURCE_DIR}/core; DEPENDS; rootcling ${__pch_dependencies} ${__pch_dictionaries}; ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py; ); add_custom_target(onepcm ALL DEPENDS etc/allDict.cxx.pch); install(FILES ${CMAKE_BINARY_DIR}/etc/allDict.cxx.pch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/dictpch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); endif(). # FIXME: move installation of PCMS in ROOT_GENERATE_DICTIONARY().; # We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..); install(; DIRECTORY ${CMAKE_BINARY_DIR}/lib/; DESTINATION ${CMAKE_INSTALL_LIBDIR}; FILES_MATCHING; PATTERN ""*.pcm""; PATTERN ""modules.idx""; PATTERN ""JupyROOT"" EXCLUDE; PATTERN ""JsMVA"" EXCLUDE; PATTERN ""python*"" EXCLUDE; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkgconfig"" EXCLUDE; ). if(Vc_INCLUDE_DIR); set(MODULES_ROOT_INCPATH ""ROOT_INCLUDE_PATH=${Vc_INCLUDE_DIR}:${ROOT_INCLUDE_PATH}""); endif(). # modules.idx; if(runtime_cxxmodules); ROOT_GET_LIBRARY_OUTPUT_DIR(library_output_dir); get_property(modules_idx_deps GLOBAL PROPERTY modules_idx_deps_property); if(WIN32); set(modules_idx_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${library_output_dir}\\",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:21115,Deployability,install,install,21115,"AL PROPERTY CLINGETCPCH); get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES); get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR} . ${pyroot_legacy} ${__cling_pch}; COMMAND; ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ${Python3_EXECUTABLE}; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py etc/allDict.cxx.pch; ${__allIncludes} -I${CMAKE_BINARY_DIR}/include -I${CMAKE_SOURCE_DIR}/core; DEPENDS; rootcling ${__pch_dependencies} ${__pch_dictionaries}; ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py; ); add_custom_target(onepcm ALL DEPENDS etc/allDict.cxx.pch); install(FILES ${CMAKE_BINARY_DIR}/etc/allDict.cxx.pch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/dictpch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); endif(). # FIXME: move installation of PCMS in ROOT_GENERATE_DICTIONARY().; # We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..); install(; DIRECTORY ${CMAKE_BINARY_DIR}/lib/; DESTINATION ${CMAKE_INSTALL_LIBDIR}; FILES_MATCHING; PATTERN ""*.pcm""; PATTERN ""modules.idx""; PATTERN ""JupyROOT"" EXCLUDE; PATTERN ""JsMVA"" EXCLUDE; PATTERN ""python*"" EXCLUDE; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkgconfig"" EXCLUDE; ). if(Vc_INCLUDE_DIR); set(MODULES_ROOT_INCPATH ""ROOT_INCLUDE_PATH=${Vc_INCLUDE_DIR}:${ROOT_INCLUDE_PATH}""); endif(). # modules.idx; if(runtime_cxxmodules); ROOT_GET_LIBRARY_OUTPUT_DIR(library_output_dir); get_property(modules_idx_deps GLOBAL PROPERTY modules_idx_deps_property); if(WIN32); set(modules_idx_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${library_output_dir}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); else(); set(modules_idx_cm",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:21230,Deployability,install,installation,21230,"erty(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR} . ${pyroot_legacy} ${__cling_pch}; COMMAND; ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ${Python3_EXECUTABLE}; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py etc/allDict.cxx.pch; ${__allIncludes} -I${CMAKE_BINARY_DIR}/include -I${CMAKE_SOURCE_DIR}/core; DEPENDS; rootcling ${__pch_dependencies} ${__pch_dictionaries}; ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py; ); add_custom_target(onepcm ALL DEPENDS etc/allDict.cxx.pch); install(FILES ${CMAKE_BINARY_DIR}/etc/allDict.cxx.pch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/dictpch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); endif(). # FIXME: move installation of PCMS in ROOT_GENERATE_DICTIONARY().; # We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..); install(; DIRECTORY ${CMAKE_BINARY_DIR}/lib/; DESTINATION ${CMAKE_INSTALL_LIBDIR}; FILES_MATCHING; PATTERN ""*.pcm""; PATTERN ""modules.idx""; PATTERN ""JupyROOT"" EXCLUDE; PATTERN ""JsMVA"" EXCLUDE; PATTERN ""python*"" EXCLUDE; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkgconfig"" EXCLUDE; ). if(Vc_INCLUDE_DIR); set(MODULES_ROOT_INCPATH ""ROOT_INCLUDE_PATH=${Vc_INCLUDE_DIR}:${ROOT_INCLUDE_PATH}""); endif(). # modules.idx; if(runtime_cxxmodules); ROOT_GET_LIBRARY_OUTPUT_DIR(library_output_dir); get_property(modules_idx_deps GLOBAL PROPERTY modules_idx_deps_property); if(WIN32); set(modules_idx_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${library_output_dir}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); else(); set(modules_idx_cmd COMMAND ${ld_library_path}=${library_output_dir}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:21371,Deployability,install,install,21371,"UT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR} . ${pyroot_legacy} ${__cling_pch}; COMMAND; ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ${Python3_EXECUTABLE}; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py etc/allDict.cxx.pch; ${__allIncludes} -I${CMAKE_BINARY_DIR}/include -I${CMAKE_SOURCE_DIR}/core; DEPENDS; rootcling ${__pch_dependencies} ${__pch_dictionaries}; ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py; ); add_custom_target(onepcm ALL DEPENDS etc/allDict.cxx.pch); install(FILES ${CMAKE_BINARY_DIR}/etc/allDict.cxx.pch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/dictpch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); endif(). # FIXME: move installation of PCMS in ROOT_GENERATE_DICTIONARY().; # We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..); install(; DIRECTORY ${CMAKE_BINARY_DIR}/lib/; DESTINATION ${CMAKE_INSTALL_LIBDIR}; FILES_MATCHING; PATTERN ""*.pcm""; PATTERN ""modules.idx""; PATTERN ""JupyROOT"" EXCLUDE; PATTERN ""JsMVA"" EXCLUDE; PATTERN ""python*"" EXCLUDE; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkgconfig"" EXCLUDE; ). if(Vc_INCLUDE_DIR); set(MODULES_ROOT_INCPATH ""ROOT_INCLUDE_PATH=${Vc_INCLUDE_DIR}:${ROOT_INCLUDE_PATH}""); endif(). # modules.idx; if(runtime_cxxmodules); ROOT_GET_LIBRARY_OUTPUT_DIR(library_output_dir); get_property(modules_idx_deps GLOBAL PROPERTY modules_idx_deps_property); if(WIN32); set(modules_idx_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${library_output_dir}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); else(); set(modules_idx_cmd COMMAND ${ld_library_path}=${library_output_dir}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); endif(); add_custom_command(OUTPUT ${library_output",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:21394,Deployability,install,install,21394,"fs.h; COMMAND; ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR} . ${pyroot_legacy} ${__cling_pch}; COMMAND; ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ${Python3_EXECUTABLE}; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py etc/allDict.cxx.pch; ${__allIncludes} -I${CMAKE_BINARY_DIR}/include -I${CMAKE_SOURCE_DIR}/core; DEPENDS; rootcling ${__pch_dependencies} ${__pch_dictionaries}; ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py; ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py; ); add_custom_target(onepcm ALL DEPENDS etc/allDict.cxx.pch); install(FILES ${CMAKE_BINARY_DIR}/etc/allDict.cxx.pch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/dictpch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); endif(). # FIXME: move installation of PCMS in ROOT_GENERATE_DICTIONARY().; # We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..); install(; DIRECTORY ${CMAKE_BINARY_DIR}/lib/; DESTINATION ${CMAKE_INSTALL_LIBDIR}; FILES_MATCHING; PATTERN ""*.pcm""; PATTERN ""modules.idx""; PATTERN ""JupyROOT"" EXCLUDE; PATTERN ""JsMVA"" EXCLUDE; PATTERN ""python*"" EXCLUDE; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkgconfig"" EXCLUDE; ). if(Vc_INCLUDE_DIR); set(MODULES_ROOT_INCPATH ""ROOT_INCLUDE_PATH=${Vc_INCLUDE_DIR}:${ROOT_INCLUDE_PATH}""); endif(). # modules.idx; if(runtime_cxxmodules); ROOT_GET_LIBRARY_OUTPUT_DIR(library_output_dir); get_property(modules_idx_deps GLOBAL PROPERTY modules_idx_deps_property); if(WIN32); set(modules_idx_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${library_output_dir}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); else(); set(modules_idx_cmd COMMAND ${ld_library_path}=${library_output_dir}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); endif(); add_custom_command(OUTPUT ${library_output_dir}/modules.idx; COMMAND ${CMAKE_COMMAND} -E remove -f modules.idx modules.timestamp; ${modules_idx_cmd}; WORK",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:23744,Deployability,install,install,23744,"T modules_idx PROPERTY modules_idx_file ${library_output_dir}/modules.idx); set_directory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES ""${library_output_dir}/modules.timestamp""); endif(). #---hsimple.root---------(use the executable for clearer dependencies and proper return code)---; add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root); add_dependencies(hsimple onepcm); if(WIN32); set(hsimple_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); else(); set(hsimple_cmd COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); endif(); add_custom_command(OUTPUT tutorials/hsimple.root; ${hsimple_cmd}; WORKING_DIRECTORY tutorials; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts); install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows----------------------------------------; if(WIN32); file(COPY cmake/win/w32pragma.h DESTINATION ${CMAKE_BINARY_DIR}/include/); file(COPY cmake/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConf",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:24769,Deployability,install,install,24769,"${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows----------------------------------------; if(WIN32); file(COPY cmake/win/w32pragma.h DESTINATION ${CMAKE_BINARY_DIR}/include/); file(COPY cmake/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINA",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25033,Deployability,install,install,25033,"e/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25109,Deployability,install,install,25109,"e/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25181,Deployability,install,install,25181,"e/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25253,Deployability,install,install,25253,"e/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25524,Deployability,install,install,25524,"ter and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25607,Deployability,install,install,25607,"ter and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25690,Deployability,install,install,25690,"ter and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25785,Deployability,install,install,25785,"ter and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:25888,Deployability,install,install,25888,"ter and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26163,Deployability,install,install,26163,"tc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${ro",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26260,Deployability,install,install,26260,"tc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${ro",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26362,Deployability,install,install,26362,"tc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${ro",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26485,Deployability,install,install,26485,"ot.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-----",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26598,Deployability,configurat,configuration,26598,"INATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are exp",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26970,Deployability,install,install,26970," OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27309,Deployability,install,install,27309," tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27451,Deployability,install,install,27451,"MAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origi",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27555,Deployability,install,install,27555,"MAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origi",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:580,Integrability,message,message,580,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.20 FATAL_ERROR). if(WIN32); # Set CMP0091 (MSVC runtime library flags are selected by an abstraction) to OLD; # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag; cmake_policy(SET CMP0091 OLD); set(CMAKE_SKIP_TEST_ALL_DEPENDENCY TRUE); endif(). if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT ALLOW_IN_SOURCE); message(FATAL_ERROR; "" ROOT must be built out-of-source.\n""; "" Please see README/INSTALL for more information.""); endif(). set(policy_new CMP0072 CMP0076 CMP0077 CMP0079); foreach(policy ${policy_new}); if(POLICY ${policy}); cmake_policy(SET ${policy} NEW); endif(); endforeach(). set(policy_old CMP0116 CMP0135 CMP0144); foreach(policy ${policy_old}); if(POLICY ${policy}); cmake_policy(SET ${policy} OLD); endif(); endforeach(). include(cmake/modules/CaptureCommandLine.cmake). project(ROOT). #---Set the locale to default C to prevent issued due to localization of commands---------------; # This is necessary as we for example call `clang -v` and parse its output. But on a localized; # program, the output parsing is much more error prone as certrain strings we're looking for; # could be missing or be in a different order. To prevent those errors, let's just force all; # output to use the default C locale which is more or less identical on all systems.; set(ENV{LANG} C). #---Set paths where to put the libraries, executables and headers------------------------------; file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races; set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin). # Set permissions for installed folders and subfolders that come from the source tree in cas",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:3261,Integrability,message,message,3261,"polluted by a different; # ROOT build. This is significant e,g. for roottest, which will otherwise have libraries; # of a different ROOT build available / visible / reachable.; if(NOT $ENV{ROOTSYS} STREQUAL """"); string(REPLACE ""$ENV{ROOTSYS}/bin"" """" ENV_PATH ""$ENV{PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_LD_LIBRARY_PATH ""$ENV{LD_LIBRARY_PATH}""); string(REPLACE ""$ENV{ROOTSYS}/lib"" """" ENV_PYTHONPATH ""$ENV{PYTHONPATH}""); string(REPLACE ""$ENV{ROOTSYS}"" """" ENV_CMAKE_PREFIX_PATH ""$ENV{CMAKE_PREFIX_PATH}""); set(ENV{PATH} ""${ENV_PATH}""); set(ENV{LD_LIBRARY_PATH} ""${ENV_LD_LIBRARY_PATH}""); set(ENV{PYTHONPATH} ""${ENV_PYTHONPATH}""); set(ENV{CMAKE_PREFIX_PATH} ""${ENV_CMAKE_PREFIX_PATH}""); set(ENV{ROOTSYS} ${CMAKE_BINARY_DIR}); endif(). set(ROOTSYS ${CMAKE_BINARY_DIR}); set(HEADER_OUTPUT_PATH ${CMAKE_BINARY_DIR}/include). #---Set the ROOT version--------------------------------------------------------------------; include(cmake/modules/SetROOTVersion.cmake). message(STATUS ""Building ROOT version ${ROOT_FULL_VERSION}""). #---Where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked-------------; set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules). #---Enable Folders in IDE like Visual Studio----------------------------------------------------; set_property(GLOBAL PROPERTY USE_FOLDERS ON). #---Load some basic macros which are needed later for the confiuration and build----------------; include(CheckCompiler); include(RootBuildOptions); include(RootMacros); include(CheckAssembler); include(CheckIntrinsics). # relatedrepo_GetClosestMatch(REPO_NAME <repo> ORIGIN_PREFIX <originp> UPSTREAM_PREFIX <upstreamp>; # FETCHURL_VARIABLE <output_url> FETCHREF_VARIABLE <output_ref>); # Return the clone URL and head/tag of the closest match for `repo` (e.g. roottest), based on the; # current head name.; function(relatedrepo_GetClosestMatch); cmake_parse_arguments(_ """" ""REPO_NAME;ORIGIN_PREFIX;UPSTREAM_PREFIX;FETCHURL_VARIABLE;FETCHREF_VARIABLE"" """" ${ARGN}). set",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:7383,Integrability,message,message,7383,"l clone of the; # repository is found, refuse to update it unless the `FORCE` option is in place.; function(relatedrepo_Checkout); cmake_parse_arguments(_ ""FORCE"" ""REPO_NAME;FETCHURL;FETCHREF;REPO_DIR_VARIABLE"" """" ${ARGN}). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/${__REPO_NAME}); set(repo_dir ${source_dir}/${__REPO_NAME}); elseif(IS_DIRECTORY ${source_dir}/../${__REPO_NAME}); set(repo_dir ${source_dir}/../${__REPO_NAME}); endif(). if(NOT DEFINED repo_dir); message(STATUS ""Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); if(NOT ""${__FETCHREF}"" STREQUAL """"); string(PREPEND __FETCHREF ""-b""); endif(); execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}; WORKING_DIRECTORY ${source_dir}); set(repo_dir ${source_dir}/${__REPO_NAME}); else(); message(STATUS ""Found ${__REPO_NAME}: ${repo_dir}""); if(${__FORCE}); message(STATUS ""Updating ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); execute_process(COMMAND ${GIT_EXECUTABLE} fetch -fu ${__FETCHURL} ${__FETCHREF}:${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); endif(); endif(); if(DEFINED __REPO_DIR_VARIABLE); set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCAC",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:7704,Integrability,message,message,7704,"l clone of the; # repository is found, refuse to update it unless the `FORCE` option is in place.; function(relatedrepo_Checkout); cmake_parse_arguments(_ ""FORCE"" ""REPO_NAME;FETCHURL;FETCHREF;REPO_DIR_VARIABLE"" """" ${ARGN}). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/${__REPO_NAME}); set(repo_dir ${source_dir}/${__REPO_NAME}); elseif(IS_DIRECTORY ${source_dir}/../${__REPO_NAME}); set(repo_dir ${source_dir}/../${__REPO_NAME}); endif(). if(NOT DEFINED repo_dir); message(STATUS ""Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); if(NOT ""${__FETCHREF}"" STREQUAL """"); string(PREPEND __FETCHREF ""-b""); endif(); execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}; WORKING_DIRECTORY ${source_dir}); set(repo_dir ${source_dir}/${__REPO_NAME}); else(); message(STATUS ""Found ${__REPO_NAME}: ${repo_dir}""); if(${__FORCE}); message(STATUS ""Updating ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); execute_process(COMMAND ${GIT_EXECUTABLE} fetch -fu ${__FETCHURL} ${__FETCHREF}:${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); endif(); endif(); if(DEFINED __REPO_DIR_VARIABLE); set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCAC",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:7773,Integrability,message,message,7773,"l clone of the; # repository is found, refuse to update it unless the `FORCE` option is in place.; function(relatedrepo_Checkout); cmake_parse_arguments(_ ""FORCE"" ""REPO_NAME;FETCHURL;FETCHREF;REPO_DIR_VARIABLE"" """" ${ARGN}). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/${__REPO_NAME}); set(repo_dir ${source_dir}/${__REPO_NAME}); elseif(IS_DIRECTORY ${source_dir}/../${__REPO_NAME}); set(repo_dir ${source_dir}/../${__REPO_NAME}); endif(). if(NOT DEFINED repo_dir); message(STATUS ""Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); if(NOT ""${__FETCHREF}"" STREQUAL """"); string(PREPEND __FETCHREF ""-b""); endif(); execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}; WORKING_DIRECTORY ${source_dir}); set(repo_dir ${source_dir}/${__REPO_NAME}); else(); message(STATUS ""Found ${__REPO_NAME}: ${repo_dir}""); if(${__FORCE}); message(STATUS ""Updating ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); execute_process(COMMAND ${GIT_EXECUTABLE} fetch -fu ${__FETCHURL} ${__FETCHREF}:${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); endif(); endif(); if(DEFINED __REPO_DIR_VARIABLE); set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCAC",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:8827,Integrability,message,message,8827,"{__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); endif(); endif(); if(DEFINED __REPO_DIR_VARIABLE); set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND}). if(EXISTS ${CCACHE_COMMAND}); message(STATUS ""Found ccache: ${CCACHE_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND}); execute_process(COMMAND ${CCACHE_COMMAND} ""-V"" OUTPUT_VARIABLE CCACHE_VERSION); string(REGEX REPLACE ""ccache version ([0-9\\.]+).*"" ""\\1"" CCACHE_VERSION ${CCACHE_VERSION}); else(); message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable distcc ------------------------------------------------------------------------------; if(distcc); find_program(DISTCC_COMMAND NAMES distcc); mark_as_advanced(DISTCC_COMMAND ${DISTCC_COMMAND}); if(EXISTS ${DISTCC_COMMAND}); message(STATUS ""Found distcc: ${DISTCC_COMMAND}""); if (ccache); # If ccache is enabled, use distcc as CCACHE_PREFIX; message(STATUS ""Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}""); else(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND}); endif(); execute_process(COMMAND ${DISTCC_",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:9128,Integrability,message,message,9128,"RENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND}). if(EXISTS ${CCACHE_COMMAND}); message(STATUS ""Found ccache: ${CCACHE_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND}); execute_process(COMMAND ${CCACHE_COMMAND} ""-V"" OUTPUT_VARIABLE CCACHE_VERSION); string(REGEX REPLACE ""ccache version ([0-9\\.]+).*"" ""\\1"" CCACHE_VERSION ${CCACHE_VERSION}); else(); message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable distcc ------------------------------------------------------------------------------; if(distcc); find_program(DISTCC_COMMAND NAMES distcc); mark_as_advanced(DISTCC_COMMAND ${DISTCC_COMMAND}); if(EXISTS ${DISTCC_COMMAND}); message(STATUS ""Found distcc: ${DISTCC_COMMAND}""); if (ccache); # If ccache is enabled, use distcc as CCACHE_PREFIX; message(STATUS ""Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}""); else(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND}); endif(); execute_process(COMMAND ${DISTCC_COMMAND} ""--version"" OUTPUT_VARIABLE DISTCC_VERSION); string(REGEX REPLACE ""distcc ([0-9\\.]+).*"" ""\\1"" DISTCC_VERSION ${DISTCC_VERSION}); else(); message(STATUS ""Could NOT find distcc""); set(distcc OFF CACHE BOOL ""Use distcc (disabled sinc",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:9507,Integrability,message,message,9507,"----------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND}). if(EXISTS ${CCACHE_COMMAND}); message(STATUS ""Found ccache: ${CCACHE_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND}); execute_process(COMMAND ${CCACHE_COMMAND} ""-V"" OUTPUT_VARIABLE CCACHE_VERSION); string(REGEX REPLACE ""ccache version ([0-9\\.]+).*"" ""\\1"" CCACHE_VERSION ${CCACHE_VERSION}); else(); message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable distcc ------------------------------------------------------------------------------; if(distcc); find_program(DISTCC_COMMAND NAMES distcc); mark_as_advanced(DISTCC_COMMAND ${DISTCC_COMMAND}); if(EXISTS ${DISTCC_COMMAND}); message(STATUS ""Found distcc: ${DISTCC_COMMAND}""); if (ccache); # If ccache is enabled, use distcc as CCACHE_PREFIX; message(STATUS ""Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}""); else(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND}); endif(); execute_process(COMMAND ${DISTCC_COMMAND} ""--version"" OUTPUT_VARIABLE DISTCC_VERSION); string(REGEX REPLACE ""distcc ([0-9\\.]+).*"" ""\\1"" DISTCC_VERSION ${DISTCC_VERSION}); else(); message(STATUS ""Could NOT find distcc""); set(distcc OFF CACHE BOOL ""Use distcc (disabled since distcc was not found)"" FORCE); endif(); endif(). #---Enable test coverage -----------------------------------------------------------------------; if(coverage); set(GCC_COVERAGE_COMPILE_FLAGS ""-fprofile-arcs -ftest-coverage""); set(GCC_COVERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SH",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:9624,Integrability,message,message,9624,"----------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND}). if(EXISTS ${CCACHE_COMMAND}); message(STATUS ""Found ccache: ${CCACHE_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND}); execute_process(COMMAND ${CCACHE_COMMAND} ""-V"" OUTPUT_VARIABLE CCACHE_VERSION); string(REGEX REPLACE ""ccache version ([0-9\\.]+).*"" ""\\1"" CCACHE_VERSION ${CCACHE_VERSION}); else(); message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable distcc ------------------------------------------------------------------------------; if(distcc); find_program(DISTCC_COMMAND NAMES distcc); mark_as_advanced(DISTCC_COMMAND ${DISTCC_COMMAND}); if(EXISTS ${DISTCC_COMMAND}); message(STATUS ""Found distcc: ${DISTCC_COMMAND}""); if (ccache); # If ccache is enabled, use distcc as CCACHE_PREFIX; message(STATUS ""Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}""); else(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND}); endif(); execute_process(COMMAND ${DISTCC_COMMAND} ""--version"" OUTPUT_VARIABLE DISTCC_VERSION); string(REGEX REPLACE ""distcc ([0-9\\.]+).*"" ""\\1"" DISTCC_VERSION ${DISTCC_VERSION}); else(); message(STATUS ""Could NOT find distcc""); set(distcc OFF CACHE BOOL ""Use distcc (disabled since distcc was not found)"" FORCE); endif(); endif(). #---Enable test coverage -----------------------------------------------------------------------; if(coverage); set(GCC_COVERAGE_COMPILE_FLAGS ""-fprofile-arcs -ftest-coverage""); set(GCC_COVERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SH",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:10081,Integrability,message,message,10081,"; message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable distcc ------------------------------------------------------------------------------; if(distcc); find_program(DISTCC_COMMAND NAMES distcc); mark_as_advanced(DISTCC_COMMAND ${DISTCC_COMMAND}); if(EXISTS ${DISTCC_COMMAND}); message(STATUS ""Found distcc: ${DISTCC_COMMAND}""); if (ccache); # If ccache is enabled, use distcc as CCACHE_PREFIX; message(STATUS ""Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}""); else(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND}); endif(); execute_process(COMMAND ${DISTCC_COMMAND} ""--version"" OUTPUT_VARIABLE DISTCC_VERSION); string(REGEX REPLACE ""distcc ([0-9\\.]+).*"" ""\\1"" DISTCC_VERSION ${DISTCC_VERSION}); else(); message(STATUS ""Could NOT find distcc""); set(distcc OFF CACHE BOOL ""Use distcc (disabled since distcc was not found)"" FORCE); endif(); endif(). #---Enable test coverage -----------------------------------------------------------------------; if(coverage); set(GCC_COVERAGE_COMPILE_FLAGS ""-fprofile-arcs -ftest-coverage""); set(GCC_COVERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS ""${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); endif(). #--- Enable build timing -----------------------------------------------------------------------; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_prope",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:11465,Integrability,message,message,11465,"ERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS ""${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); endif(). #--- Enable build timing -----------------------------------------------------------------------; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CMAKE_COMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to t",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:14418,Integrability,depend,dependency,14418,"); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---Copy files to the build area, with dependency---------------------------------; file(GLOB_RECURSE artifact_files RELATIVE ${CMAKE_SOURCE_DIR} tutorials/* etc/* test/* icons/* fonts/* macros/* ${jsroot_files} ${openui5_files}); set(artifact_files_builddir); foreach(artifact_file ${artifact_files}); # Filter out hsimple.root; someone might have created it in the src dir, and the hsimple.root; # target below will interfere.; if (NOT (artifact_file STREQUAL ""tutorials/hsimple.root"")); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${artifact_file}; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/${artifact_file} ${CMAKE_BINARY_DIR}/${artifact_file}; COMMENT ""Copying ${CMAKE_SOURCE_DIR}/${artifact_file}""; DEPENDS ${CMAKE_SOURCE_DIR}/${artifact_file}); list(APPEND artifact_files_builddir ${CMAKE_BINARY_DIR}/${artifact_file}); endif(); endforeach(); add_custom_target(move_artifacts DEPENDS ${stamp_file} ${artifact_files_builddir}). add_subdirectory (interpreter). # Update etc/gitinfo.txt for every build.; add_custom_target(gitinfotxt; ALL; COMMAND ${CMAKE_COMMAND} -DSRCDIR=${CMAKE_SOURCE_DIR} -DBINDIR=${CMAKE_BINARY_DIR} -P ${CMAK",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:19409,Integrability,depend,dependencies,19409,"content}""); configure_file(""${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp""; ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; COPYONLY). # From now on we handled all exposed module and want to make all new modulemaps private to ROOT.; set(ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR ON). set (CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS}""). string(REGEX REPLACE ""[ ]-"" "";-"" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); if(MSVC); string(REPLACE ""-Zc:__cplusplus"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-nologo"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-EHsc-"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-GR"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-MDd"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); endif(). if(runtime_cxxmodules); # Dummy target that does nothing, we don't need a PCH for modules.; # Onepcm target has all dependencies needed for allDict.cxx.pch, which allow; # to test hsimple.C after all C++ modules are updated.; add_custom_target(onepcm); foreach(target_dependency ${ROOT_LIBRARY_TARGETS}); add_dependencies(onepcm ${target_dependency}); endforeach(); unset(ROOT_LIBRARY_TARGETS CACHE); else(); get_property(incdirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES). if(WIN32); list(APPEND incdirs; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/gdk; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/glib; ); endif(). foreach(d ${incdirs}); if(NOT ""${d}"" MATCHES ""AFTER|BEFORE|INTERFACE|PRIVATE|PUBLIC|SYSTEM""); set(__allIncludes ${__allIncludes} -I${d}); endif(); endforeach(). get_property(__cling_pch GLOBAL PROPERTY CLINGETCPCH); get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES); get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:22985,Integrability,depend,dependencies,22985,"ATH=""${library_output_dir}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); else(); set(modules_idx_cmd COMMAND ${ld_library_path}=${library_output_dir}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); endif(); add_custom_command(OUTPUT ${library_output_dir}/modules.idx; COMMAND ${CMAKE_COMMAND} -E remove -f modules.idx modules.timestamp; ${modules_idx_cmd}; WORKING_DIRECTORY ${library_output_dir}; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts; ${modules_idx_deps}); add_custom_target(modules_idx ALL DEPENDS ${library_output_dir}/modules.idx); add_dependencies(modules_idx ${modules_idx_deps}); set_property(TARGET modules_idx PROPERTY modules_idx_file ${library_output_dir}/modules.idx); set_directory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES ""${library_output_dir}/modules.timestamp""); endif(). #---hsimple.root---------(use the executable for clearer dependencies and proper return code)---; add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root); add_dependencies(hsimple onepcm); if(WIN32); set(hsimple_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); else(); set(hsimple_cmd COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); endif(); add_custom_command(OUTPUT tutorials/hsimple.root; ${hsimple_cmd}; WORKING_DIRECTORY tutorials; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts); install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows---------------------------",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:29711,Integrability,message,message,29711,"/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE). else(); # The fetch URL of the 'origin' remote is used to determine the prefix for other repositories by; # removing the `/root(\.git)?` part. If `GITHUB_PR_ORIGIN` is defined in the environment, its; # value is used instead.; if(DEFINED ENV{GITHUB_PR_ORIGIN}); set(originurl $ENV{GITHUB_PR_ORIGIN}); else(); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE); endif(); endif(); string(REGEX REPLACE ""/root(test)?(\.git)?$"" """" originprefix ${originurl}); relatedrepo_GetClosestMatch(REPO_NAME roottest; ORIGIN_PREFIX ${originprefix} UPSTREAM_PREFIX ${upstreamprefix}; FETCHURL_VARIABLE roottest_url FETCHREF_VARIABLE roottest_ref); # Use `-Droottest_force_checkout=ON` to force fetch and checkout in an existing repository; if(roottest_force_checkout); set(roottest_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME roottest FETCHURL ${roottest_url} FETCHREF ""${roottest_ref}""; REPO_DIR_VARIABLE roottest_dir ${roottest_opts}); if(NOT IS_DIRECTORY ${roottest_dir}); message(FATAL_ERROR ""Expected roottest at '${roottest_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/roottest); add_subdirectory(${roottest_dir} roottest); endif(). if(rootbench); find_package(Git REQUIRED); if(rootbench_force_checkout); set(rootbench_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker"");",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:30199,Integrability,message,message,30199,""" """" originprefix ${originurl}); relatedrepo_GetClosestMatch(REPO_NAME roottest; ORIGIN_PREFIX ${originprefix} UPSTREAM_PREFIX ${upstreamprefix}; FETCHURL_VARIABLE roottest_url FETCHREF_VARIABLE roottest_ref); # Use `-Droottest_force_checkout=ON` to force fetch and checkout in an existing repository; if(roottest_force_checkout); set(roottest_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME roottest FETCHURL ${roottest_url} FETCHREF ""${roottest_ref}""; REPO_DIR_VARIABLE roottest_dir ${roottest_opts}); if(NOT IS_DIRECTORY ${roottest_dir}); message(FATAL_ERROR ""Expected roottest at '${roottest_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/roottest); add_subdirectory(${roottest_dir} roottest); endif(). if(rootbench); find_package(Git REQUIRED); if(rootbench_force_checkout); set(rootbench_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker""); endif(). cmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION). message(STATUS ""ROOT Configuration \n; System: ${CMAKE_SYSTEM}; ROOT Platform: ${ROOT_PLATFORM}; ROOT Architecture: ${ROOT_ARCHITECTURE}; Processor: ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR}); Build type: ${CMAKE_BUILD_TYPE}; Install path: ${CMAKE_INSTALL_PREFIX}; Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}; C++ standard: ${CMAKE_CXX_STANDARD}; Compiler flags:""); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific):; Debug: ${CMAKE_C_FLAGS_DEBUG}; Release:",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:30441,Integrability,message,message,30441,"itory; if(roottest_force_checkout); set(roottest_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME roottest FETCHURL ${roottest_url} FETCHREF ""${roottest_ref}""; REPO_DIR_VARIABLE roottest_dir ${roottest_opts}); if(NOT IS_DIRECTORY ${roottest_dir}); message(FATAL_ERROR ""Expected roottest at '${roottest_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/roottest); add_subdirectory(${roottest_dir} roottest); endif(). if(rootbench); find_package(Git REQUIRED); if(rootbench_force_checkout); set(rootbench_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker""); endif(). cmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION). message(STATUS ""ROOT Configuration \n; System: ${CMAKE_SYSTEM}; ROOT Platform: ${ROOT_PLATFORM}; ROOT Architecture: ${ROOT_ARCHITECTURE}; Processor: ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR}); Build type: ${CMAKE_BUILD_TYPE}; Install path: ${CMAKE_INSTALL_PREFIX}; Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}; C++ standard: ${CMAKE_CXX_STANDARD}; Compiler flags:""); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific):; Debug: ${CMAKE_C_FLAGS_DEBUG}; Release: ${CMAKE_C_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_C_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_C_FLAGS_RELWITHDEBINFO}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific):; Debug: ${CMAKE_CXX_FLAGS_DEBUG}; Release: ${CMAKE_CXX_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_CXX_FLAGS_MINSIZEREL}; RelWithD",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:30623,Integrability,message,message,30623,"po_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker""); endif(). cmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION). message(STATUS ""ROOT Configuration \n; System: ${CMAKE_SYSTEM}; ROOT Platform: ${ROOT_PLATFORM}; ROOT Architecture: ${ROOT_ARCHITECTURE}; Processor: ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR}); Build type: ${CMAKE_BUILD_TYPE}; Install path: ${CMAKE_INSTALL_PREFIX}; Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}; C++ standard: ${CMAKE_CXX_STANDARD}; Compiler flags:""); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific):; Debug: ${CMAKE_C_FLAGS_DEBUG}; Release: ${CMAKE_C_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_C_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_C_FLAGS_RELWITHDEBINFO}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific):; Debug: ${CMAKE_CXX_FLAGS_DEBUG}; Release: ${CMAKE_CXX_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_CXX_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); else(); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific): ${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific): ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(); message(STATUS ""Linker flags:; - Executable: ${CMAKE_EXE_LINKER_FLAGS}; - Module: ${CMAKE_MODULE_LINKER_FLAGS}; - Shared: ${CMAKE_SHARED_LINKER_FLAGS}\n""). ROOT_SHOW_ENABLED_OPTIONS(). #---Packaging-------------------------------------------------------------------------------------; include(RootCPack); ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:31056,Integrability,message,message,31056,"po_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker""); endif(). cmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION). message(STATUS ""ROOT Configuration \n; System: ${CMAKE_SYSTEM}; ROOT Platform: ${ROOT_PLATFORM}; ROOT Architecture: ${ROOT_ARCHITECTURE}; Processor: ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR}); Build type: ${CMAKE_BUILD_TYPE}; Install path: ${CMAKE_INSTALL_PREFIX}; Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}; C++ standard: ${CMAKE_CXX_STANDARD}; Compiler flags:""); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific):; Debug: ${CMAKE_C_FLAGS_DEBUG}; Release: ${CMAKE_C_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_C_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_C_FLAGS_RELWITHDEBINFO}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific):; Debug: ${CMAKE_CXX_FLAGS_DEBUG}; Release: ${CMAKE_CXX_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_CXX_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); else(); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific): ${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific): ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(); message(STATUS ""Linker flags:; - Executable: ${CMAKE_EXE_LINKER_FLAGS}; - Module: ${CMAKE_MODULE_LINKER_FLAGS}; - Shared: ${CMAKE_SHARED_LINKER_FLAGS}\n""). ROOT_SHOW_ENABLED_OPTIONS(). #---Packaging-------------------------------------------------------------------------------------; include(RootCPack); ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:31512,Integrability,message,message,31512,"po_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker""); endif(). cmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION). message(STATUS ""ROOT Configuration \n; System: ${CMAKE_SYSTEM}; ROOT Platform: ${ROOT_PLATFORM}; ROOT Architecture: ${ROOT_ARCHITECTURE}; Processor: ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR}); Build type: ${CMAKE_BUILD_TYPE}; Install path: ${CMAKE_INSTALL_PREFIX}; Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}; C++ standard: ${CMAKE_CXX_STANDARD}; Compiler flags:""); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific):; Debug: ${CMAKE_C_FLAGS_DEBUG}; Release: ${CMAKE_C_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_C_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_C_FLAGS_RELWITHDEBINFO}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific):; Debug: ${CMAKE_CXX_FLAGS_DEBUG}; Release: ${CMAKE_CXX_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_CXX_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); else(); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific): ${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific): ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(); message(STATUS ""Linker flags:; - Executable: ${CMAKE_EXE_LINKER_FLAGS}; - Module: ${CMAKE_MODULE_LINKER_FLAGS}; - Shared: ${CMAKE_SHARED_LINKER_FLAGS}\n""). ROOT_SHOW_ENABLED_OPTIONS(). #---Packaging-------------------------------------------------------------------------------------; include(RootCPack); ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:31727,Integrability,message,message,31727,"po_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master; REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts}); if(NOT IS_DIRECTORY ${rootbench_dir}); message(FATAL_ERROR ""Expected rootbench at '${rootbench_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench); add_subdirectory(${rootbench_dir} rootbench); endif(); endif(). if(LLVM_LINKER_IS_MOLD); message(FATAL_ERROR ""The mold linker is not supported by ROOT. Please use a different linker""); endif(). cmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION). message(STATUS ""ROOT Configuration \n; System: ${CMAKE_SYSTEM}; ROOT Platform: ${ROOT_PLATFORM}; ROOT Architecture: ${ROOT_ARCHITECTURE}; Processor: ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR}); Build type: ${CMAKE_BUILD_TYPE}; Install path: ${CMAKE_INSTALL_PREFIX}; Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}; C++ standard: ${CMAKE_CXX_STANDARD}; Compiler flags:""); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific):; Debug: ${CMAKE_C_FLAGS_DEBUG}; Release: ${CMAKE_C_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_C_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_C_FLAGS_RELWITHDEBINFO}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific):; Debug: ${CMAKE_CXX_FLAGS_DEBUG}; Release: ${CMAKE_CXX_FLAGS_RELEASE}; MinSizeRel: ${CMAKE_CXX_FLAGS_MINSIZEREL}; RelWithDebInfo: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); else(); message(STATUS ""; - C: ${CMAKE_C_FLAGS}; - C (build type specific): ${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}; - C++: ${CMAKE_CXX_FLAGS}; - C++ (build type specific): ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(); message(STATUS ""Linker flags:; - Executable: ${CMAKE_EXE_LINKER_FLAGS}; - Module: ${CMAKE_MODULE_LINKER_FLAGS}; - Shared: ${CMAKE_SHARED_LINKER_FLAGS}\n""). ROOT_SHOW_ENABLED_OPTIONS(). #---Packaging-------------------------------------------------------------------------------------; include(RootCPack); ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:13050,Modifiability,config,configure,13050,". #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if((var MATCHES ""_(LIBRARIES|LIBRARY|INCLUDE|VERSION)"") AND; (NOT ${${var}} STREQUAL """") AND; (NOT ${var} MATCHES ""NOTFOUND"")); if (var MATCHES ""^QT_""); # filter out the very long list of Qt libraries and include dirs; if (var MATCHES ""(QT_LIBRARY_DIR|QT_QTCORE_INCLUDE_DIR)""); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---C",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:13088,Modifiability,config,config,13088,". #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if((var MATCHES ""_(LIBRARIES|LIBRARY|INCLUDE|VERSION)"") AND; (NOT ${${var}} STREQUAL """") AND; (NOT ${var} MATCHES ""NOTFOUND"")); if (var MATCHES ""^QT_""); # filter out the very long list of Qt libraries and include dirs; if (var MATCHES ""(QT_LIBRARY_DIR|QT_QTCORE_INCLUDE_DIR)""); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---C",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:13097,Modifiability,config,config,13097,". #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if((var MATCHES ""_(LIBRARIES|LIBRARY|INCLUDE|VERSION)"") AND; (NOT ${${var}} STREQUAL """") AND; (NOT ${var} MATCHES ""NOTFOUND"")); if (var MATCHES ""^QT_""); # filter out the very long list of Qt libraries and include dirs; if (var MATCHES ""(QT_LIBRARY_DIR|QT_QTCORE_INCLUDE_DIR)""); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---C",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:13150,Modifiability,variab,variables,13150,". #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if((var MATCHES ""_(LIBRARIES|LIBRARY|INCLUDE|VERSION)"") AND; (NOT ${${var}} STREQUAL """") AND; (NOT ${var} MATCHES ""NOTFOUND"")); if (var MATCHES ""^QT_""); # filter out the very long list of Qt libraries and include dirs; if (var MATCHES ""(QT_LIBRARY_DIR|QT_QTCORE_INCLUDE_DIR)""); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---C",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:13192,Modifiability,variab,variables,13192,". #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if((var MATCHES ""_(LIBRARIES|LIBRARY|INCLUDE|VERSION)"") AND; (NOT ${${var}} STREQUAL """") AND; (NOT ${var} MATCHES ""NOTFOUND"")); if (var MATCHES ""^QT_""); # filter out the very long list of Qt libraries and include dirs; if (var MATCHES ""(QT_LIBRARY_DIR|QT_QTCORE_INCLUDE_DIR)""); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---C",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:24724,Modifiability,config,config,24724,"Cling Hist Tree Gpad Graf HistPainter move_artifacts); install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows----------------------------------------; if(WIN32); file(COPY cmake/win/w32pragma.h DESTINATION ${CMAKE_BINARY_DIR}/include/); file(COPY cmake/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients -----------------------------; include(RootConfiguration). #---Installation of project-wise artifacts-------------------------------------------------------; if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX); install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}); if(gnuinstall); install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR}); else(); install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR}); endif(); install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS});",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26598,Modifiability,config,configuration,26598,"INATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are exp",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27603,Modifiability,plugin,plugins,27603,"MAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origi",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27659,Modifiability,plugin,plugins,27659,"MAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origi",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:11300,Security,sanitiz,sanitizer,11300,"ERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS ""${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); endif(). #--- Enable build timing -----------------------------------------------------------------------; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CMAKE_COMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to t",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:11490,Security,sanitiz,sanitizer,11490,"ERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS ""${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); endif(). #--- Enable build timing -----------------------------------------------------------------------; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CMAKE_COMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to t",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:18591,Security,expose,exposed,18591,"e}"" >> ""${_to_native}""; ); install(FILES ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap"" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers). add_dependencies(move_headers copymodulemap). # Take all the modulemap contents we collected from the packages and append them to our modulemap.; # We have to delay this because the ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT is filled in the; # add_subdirectory calls above.; get_property(__modulemap_extra_content GLOBAL PROPERTY ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT); string(REPLACE "";"" """" __modulemap_extra_content ""${__modulemap_extra_content}""); # Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra; # if it's unchanged.; file(WRITE ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp"" ""${__modulemap_extra_content}""); configure_file(""${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp""; ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; COPYONLY). # From now on we handled all exposed module and want to make all new modulemaps private to ROOT.; set(ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR ON). set (CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS}""). string(REGEX REPLACE ""[ ]-"" "";-"" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); if(MSVC); string(REPLACE ""-Zc:__cplusplus"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-nologo"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-EHsc-"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-GR"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-MDd"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); endif(). if(runtime_cxxmodules); # Dummy target that does nothing, we don't need a PCH for modules.; # Onepcm target has all dependencies needed for allDict.cxx.pch, which allow; # to test hsimple.C after all C++ modules are updated.; add_custom_target(onepcm); foreach(target_dependency ${ROOT_LIBRARY_TARGETS}); add_dependen",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:8221,Testability,assert,asserts,8221,"/${__REPO_NAME}); set(repo_dir ${source_dir}/../${__REPO_NAME}); endif(). if(NOT DEFINED repo_dir); message(STATUS ""Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); if(NOT ""${__FETCHREF}"" STREQUAL """"); string(PREPEND __FETCHREF ""-b""); endif(); execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}; WORKING_DIRECTORY ${source_dir}); set(repo_dir ${source_dir}/${__REPO_NAME}); else(); message(STATUS ""Found ${__REPO_NAME}: ${repo_dir}""); if(${__FORCE}); message(STATUS ""Updating ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); execute_process(COMMAND ${GIT_EXECUTABLE} fetch -fu ${__FETCHURL} ${__FETCHREF}:${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); endif(); endif(); if(DEFINED __REPO_DIR_VARIABLE); set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND}). if(EXISTS ${CCACHE_COMMAND}); message(STATUS ""Found ccache: ${CCACHE_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND}); execute_process(COMMAND ${CCACHE_COMMAND} ""-V"" OUTPUT_VARIABLE CCACHE_VERSION); string(REGEX REPLACE ""ccache version ([0-9\\.]+).*"" ""\\1"" CCACHE_VERSION ${CCACHE_VERSION}); else(); message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:8311,Testability,assert,asserts,8311,"/${__REPO_NAME}); set(repo_dir ${source_dir}/../${__REPO_NAME}); endif(). if(NOT DEFINED repo_dir); message(STATUS ""Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); if(NOT ""${__FETCHREF}"" STREQUAL """"); string(PREPEND __FETCHREF ""-b""); endif(); execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}; WORKING_DIRECTORY ${source_dir}); set(repo_dir ${source_dir}/${__REPO_NAME}); else(); message(STATUS ""Found ${__REPO_NAME}: ${repo_dir}""); if(${__FORCE}); message(STATUS ""Updating ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})""); execute_process(COMMAND ${GIT_EXECUTABLE} fetch -fu ${__FETCHURL} ${__FETCHREF}:${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}; WORKING_DIRECTORY ${repo_dir}); endif(); endif(); if(DEFINED __REPO_DIR_VARIABLE); set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE); endif(); endfunction(). #---Enable asserts------------------------------------------------------------------------------; if(asserts); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}""); string(REGEX REPLACE ""-[UD]NDEBUG(=.*)?"" """" ""CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}"" ""${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}""); endif(). #---Enable CCache ------------------------------------------------------------------------------; if(ccache); find_program(CCACHE_COMMAND NAMES ccache ccache-swig); mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND}). if(EXISTS ${CCACHE_COMMAND}); message(STATUS ""Found ccache: ${CCACHE_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND}); execute_process(COMMAND ${CCACHE_COMMAND} ""-V"" OUTPUT_VARIABLE CCACHE_VERSION); string(REGEX REPLACE ""ccache version ([0-9\\.]+).*"" ""\\1"" CCACHE_VERSION ${CCACHE_VERSION}); else(); message(STATUS ""Could NOT find ccache""); set(ccache OFF CACHE BOOL ""Use ccache (disabled since ccache was not found)"" FORCE); endif(); endif(). #---Enable ",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:10236,Testability,test,test,10236,"""Found distcc: ${DISTCC_COMMAND}""); if (ccache); # If ccache is enabled, use distcc as CCACHE_PREFIX; message(STATUS ""Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}""); else(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND}); endif(); execute_process(COMMAND ${DISTCC_COMMAND} ""--version"" OUTPUT_VARIABLE DISTCC_VERSION); string(REGEX REPLACE ""distcc ([0-9\\.]+).*"" ""\\1"" DISTCC_VERSION ${DISTCC_VERSION}); else(); message(STATUS ""Could NOT find distcc""); set(distcc OFF CACHE BOOL ""Use distcc (disabled since distcc was not found)"" FORCE); endif(); endif(). #---Enable test coverage -----------------------------------------------------------------------; if(coverage); set(GCC_COVERAGE_COMPILE_FLAGS ""-fprofile-arcs -ftest-coverage""); set(GCC_COVERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS ""${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); endif(). #--- Enable build timing -----------------------------------------------------------------------; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CMAKE_COMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:11512,Testability,test,tested,11512,"ERAGE_LINK_FLAGS ""-fprofile-arcs""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}""); set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS ""${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}""); endif(). #--- Enable build timing -----------------------------------------------------------------------; if (build_timing); # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CMAKE_COMMAND} -E time""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CMAKE_COMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to t",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:12216,Testability,test,testing,12216,"OMMAND} -E time""); #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM ""${CMAKE_COMMAND} -E time""); endif(). #--- Set up address sanitizer builds ----------------------------------------------------------; if(asan); if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang); message(WARNING ""Address sanitizer builds only tested with gcc and Clang""); endif(). if(NOT MSVC); set(ASAN_EXTRA_LD_PRELOAD ""${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}""); endif(). foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS); add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>); endforeach(); #add_link_options() not available in our CMake version:; set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}""); endif(). #---Enable CTest package -----------------------------------------------------------------------; #include(CTest); if(testing); enable_testing(); endif(). #---Here we look for installed software and switch on and of the different build options--------; include(SearchInstalledSoftware). #---Here we add tcmalloc to the linker flags if needed------------------------------------------; if (TCMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}""); endif(). #---Here we add jemalloc to the linker flags if needed------------------------------------------; if (JEMALLOC_FOUND); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}""); endif(). #---Populate the configure arguments returned by 'root-config --config'-------------------------; get_cmake_property(variables CACHE_VARIABLES",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:14543,Testability,test,test,14543,"); endif(); else(); if ((NOT var MATCHES ""_(DOCS|TESTS|INSTALL)"") AND (NOT var MATCHES ""^_"")); set(ROOT_CONFIGARGS ""${ROOT_CONFIGARGS}${var}=${${var}} ""); endif(); endif(); endif(); endforeach(). #---Move (copy) directories to binary tree------------------------------------------------------; set(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE; COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; COMMENT ""Copying directories such as etc, icons, fonts, js, ui5, etc. to build area""). if(http); set(jsroot_files js/*); endif(); if(webgui); set(openui5_files ui5/*); endif(). #---Copy files to the build area, with dependency---------------------------------; file(GLOB_RECURSE artifact_files RELATIVE ${CMAKE_SOURCE_DIR} tutorials/* etc/* test/* icons/* fonts/* macros/* ${jsroot_files} ${openui5_files}); set(artifact_files_builddir); foreach(artifact_file ${artifact_files}); # Filter out hsimple.root; someone might have created it in the src dir, and the hsimple.root; # target below will interfere.; if (NOT (artifact_file STREQUAL ""tutorials/hsimple.root"")); add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${artifact_file}; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/${artifact_file} ${CMAKE_BINARY_DIR}/${artifact_file}; COMMENT ""Copying ${CMAKE_SOURCE_DIR}/${artifact_file}""; DEPENDS ${CMAKE_SOURCE_DIR}/${artifact_file}); list(APPEND artifact_files_builddir ${CMAKE_BINARY_DIR}/${artifact_file}); endif(); endforeach(); add_custom_target(move_artifacts DEPENDS ${stamp_file} ${artifact_files_builddir}). add_subdirectory (interpreter). # Update etc/gitinfo.txt for every build.; add_custom_target(gitinfotxt; ALL; COMMAND ${CMAKE_COMMAND} -DSRCDIR=${CMAKE_SOURCE_DIR} -DBINDIR=${CMAKE_BINARY_DIR} -P ${CMAK",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:16591,Testability,test,test,16591,"Updating etc/gitinfo.txt.""; BYPRODUCTS ${CMAKE_BINARY_DIR}/etc/gitinfo.txt; ); install(FILES ${CMAKE_BINARY_DIR}/etc/gitinfo.txt DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}). #---Recurse into the given subdirectories. This does not actually cause another cmake executable; # to run. The same process will walk through the project's entire directory structure.; add_subdirectory (core); add_subdirectory (math); add_subdirectory (hist); add_subdirectory (tree); add_subdirectory (io); add_subdirectory (net); add_subdirectory (graf2d); add_subdirectory (graf3d); add_subdirectory (gui); if(html); add_subdirectory (html); endif(); add_subdirectory (montecarlo); if(geom); add_subdirectory (geom); endif(); add_subdirectory (rootx); add_subdirectory (misc); add_subdirectory (main); add_subdirectory (bindings); add_subdirectory (sql); if(proof); add_subdirectory(proof); endif(); if(tmva); add_subdirectory(tmva); endif(); if(roofit); add_subdirectory(roofit); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(tutorials). get_property(__allHeaders GLOBAL PROPERTY ROOT_HEADER_TARGETS); get_property(__allBuiltins GLOBAL PROPERTY ROOT_BUILTIN_TARGETS); add_custom_target(move_headers ALL DEPENDS ${__allHeaders} ${__allBuiltins} gitinfotxt). #---CXX MODULES-----------------------------------------------------------------------------------; if(MSVC); set(_os_cat ""type""); else(); set(_os_cat ""cat""); endif(); file(TO_NATIVE_PATH ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra"" _from_native); file(TO_NATIVE_PATH ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap"" _to_native). add_custom_target(copymodulemap DEPENDS ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap""); add_custom_command(; 		 OUTPUT ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap""; DEPENDS cmake/unix/module.modulemap ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; 		 COMMAND ${CMAKE_COMMAND} -E copy ""${CMAKE_SOURCE_DIR}/cmake/unix/module.modulemap"" ""${CMAKE_BINARY_DIR}/include/ROOT.modulemap""; COMMAND ${_os_cat} ""${_f",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:19468,Testability,test,test,19468,"lude/module.modulemap.extra.tmp""; ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; COPYONLY). # From now on we handled all exposed module and want to make all new modulemaps private to ROOT.; set(ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR ON). set (CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS}""). string(REGEX REPLACE ""[ ]-"" "";-"" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); if(MSVC); string(REPLACE ""-Zc:__cplusplus"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-nologo"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-EHsc-"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-GR"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-MDd"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); endif(). if(runtime_cxxmodules); # Dummy target that does nothing, we don't need a PCH for modules.; # Onepcm target has all dependencies needed for allDict.cxx.pch, which allow; # to test hsimple.C after all C++ modules are updated.; add_custom_target(onepcm); foreach(target_dependency ${ROOT_LIBRARY_TARGETS}); add_dependencies(onepcm ${target_dependency}); endforeach(); unset(ROOT_LIBRARY_TARGETS CACHE); else(); get_property(incdirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES). if(WIN32); list(APPEND incdirs; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/gdk; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/glib; ); endif(). foreach(d ${incdirs}); if(NOT ""${d}"" MATCHES ""AFTER|BEFORE|INTERFACE|PRIVATE|PUBLIC|SYSTEM""); set(__allIncludes ${__allIncludes} -I${d}); endif(); endforeach(). get_property(__cling_pch GLOBAL PROPERTY CLINGETCPCH); get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES); get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; $",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:23847,Testability,test,tests,23847,"tory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES ""${library_output_dir}/modules.timestamp""); endif(). #---hsimple.root---------(use the executable for clearer dependencies and proper return code)---; add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root); add_dependencies(hsimple onepcm); if(WIN32); set(hsimple_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); else(); set(hsimple_cmd COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); endif(); add_custom_command(OUTPUT tutorials/hsimple.root; ${hsimple_cmd}; WORKING_DIRECTORY tutorials; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts); install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows----------------------------------------; if(WIN32); file(COPY cmake/win/w32pragma.h DESTINATION ${CMAKE_BINARY_DIR}/include/); file(COPY cmake/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients ------",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26354,Testability,test,tests,26354,"tc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${ro",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27702,Testability,test,tests,27702, with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE). else(); # The fetch URL of the 'origin' remote is used to determine the prefix for other repositories by; #,MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:27988,Testability,test,testing,27988,"IR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir}). #---install clad header files-------------------------------------------------------------------; if(clad); install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins); endif(). #---Set flag for PyROOT tests that are expected to fail; if(pyroot); set(PYTESTS_WILLFAIL WILLFAIL); endif(). #---Configure Testing using CTest----------------------------------------------------------------; configure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY); if(testing); include(RootCTest); set(upstreamprefix https://github.com/root-project). if(roottest); find_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE). else(); # The fetch URL of the 'origin' remote is used to determine the prefix for other repositories by; # removing the `/root(\.git)?` part. If `GITHUB_PR_ORIGIN` is defined in the environment, its; # value is used instead.; if(DEFINED ENV{GITHUB_PR_ORIGIN}); set(originurl $ENV{GITHUB_PR_ORIGIN}); else(); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURREN",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:29149,Testability,test,test,29149,"ind_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE). else(); # The fetch URL of the 'origin' remote is used to determine the prefix for other repositories by; # removing the `/root(\.git)?` part. If `GITHUB_PR_ORIGIN` is defined in the environment, its; # value is used instead.; if(DEFINED ENV{GITHUB_PR_ORIGIN}); set(originurl $ENV{GITHUB_PR_ORIGIN}); else(); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE); endif(); endif(); string(REGEX REPLACE ""/root(test)?(\.git)?$"" """" originprefix ${originurl}); relatedrepo_GetClosestMatch(REPO_NAME roottest; ORIGIN_PREFIX ${originprefix} UPSTREAM_PREFIX ${upstreamprefix}; FETCHURL_VARIABLE roottest_url FETCHREF_VARIABLE roottest_ref); # Use `-Droottest_force_checkout=ON` to force fetch and checkout in an existing repository; if(roottest_force_checkout); set(roottest_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME roottest FETCHURL ${roottest_url} FETCHREF ""${roottest_ref}""; REPO_DIR_VARIABLE roottest_dir ${roottest_opts}); if(NOT IS_DIRECTORY ${roottest_dir}); message(FATAL_ERROR ""Expected roottest at '${roottest_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/roottest); add_subdirectory(${roottest_dir} roottest); endif(). if(rootbench); find_package(Git REQUIRED); if(rootbench_force_checkout); set(rootbench_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME rootbench FETCHURL ${upstreampref",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:22977,Usability,clear,clearer,22977,"ATH=""${library_output_dir}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); else(); set(modules_idx_cmd COMMAND ${ld_library_path}=${library_output_dir}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b); endif(); add_custom_command(OUTPUT ${library_output_dir}/modules.idx; COMMAND ${CMAKE_COMMAND} -E remove -f modules.idx modules.timestamp; ${modules_idx_cmd}; WORKING_DIRECTORY ${library_output_dir}; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts; ${modules_idx_deps}); add_custom_target(modules_idx ALL DEPENDS ${library_output_dir}/modules.idx); add_dependencies(modules_idx ${modules_idx_deps}); set_property(TARGET modules_idx PROPERTY modules_idx_file ${library_output_dir}/modules.idx); set_directory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES ""${library_output_dir}/modules.timestamp""); endif(). #---hsimple.root---------(use the executable for clearer dependencies and proper return code)---; add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root); add_dependencies(hsimple onepcm); if(WIN32); set(hsimple_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); else(); set(hsimple_cmd COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); endif(); add_custom_command(OUTPUT tutorials/hsimple.root; ${hsimple_cmd}; WORKING_DIRECTORY tutorials; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts); install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows---------------------------",MatchSource.DOCS,CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:316,Deployability,release,released,316," GNU LESSER GENERAL PUBLIC LICENSE; Version 2.1, February 1999. Copyright (C) 1991, 1999 Free Software Foundation, Inc.; 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. [This is the first released version of the Lesser GPL. It also counts; as the successor of the GNU Library Public License, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights tha",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:7309,Deployability,install,installation,7309,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does.; ; 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may char",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:15899,Deployability,install,installs,15899,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:1364,Energy Efficiency,charge,charge,1364,"e, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:8223,Energy Efficiency,charge,charge,8223,"ntrol compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does.; ; 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee.; ; 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:8870,Energy Efficiency,charge,charge,8870,"s; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee.; ; 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be re",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:16171,Energy Efficiency,charge,charge,16171," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:7231,Integrability,interface,interface,7231,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does.; ; 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may char",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:7720,Integrability,depend,depends,7720,"der; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does.; ; 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee.; ; 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stati",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:15949,Integrability,interface,interface-compatible,15949,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:21411,Integrability,interface,interfaces,21411," the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation.; ; 14. ",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:10254,Modifiability,extend,extend,10254,"at,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote; it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Library. In addition, mere aggregation of another work not based on the Library; with the Library (or with a work based on the Library) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public; License instead of this License to a given copy of the Library. To do; this, you must alter all the notices that refer to this License, so; that they refer to the ordinary GNU General Public License, version 2,; instead of to this License. (If a newer version than version 2 of the; ordinary GN",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:9301,Performance,perform,performs,9301,"rranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee.; ; 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:16204,Performance,perform,performing,16204," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:2957,Security,threat,threat,2957,"u must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others.; ; Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certain libraries in order to permit linking those; libraries into non-free programs. When a program is linked with a library, whether statically or using; a shared library, the combination of the two is legally speaking a; combined work, a derivative of the original library. The ordinary; General Public License therefore permits such linking only if th",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:6187,Security,authoriz,authorized,6187,"permission to use the GNU C Library in; non-free programs enables many more people to use the whole GNU; operating system, as well as its variant, the GNU/Linux operating; system. Although the Lesser General Public License is Less protective of the; users' freedom, it does ensure that the user of a program that is; linked with the Library has the freedom and the wherewithal to run; that program using a modified version of the Library. The precise terms and conditions for copying, distribution and; modification follow. Pay close attention to the difference between a; ""work based on the library"" and a ""work that uses the library"". The; former contains code derived from the library, whereas the latter must; be combined with the library in order to run.; ; GNU LESSER GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License Agreement applies to any software library or other; program which contains a notice placed by the copyright holder or; other authorized party saying it may be distributed under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code fo",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:12096,Security,access,access,12096," Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices.; ; Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:12162,Security,access,access,12162," Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices.; ; Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:13503,Security,access,accessors,13503," Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the source code is not.; Whether this is true is especially significant if the work can be; linked without the Library, or if the work is itself a library. The; threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data; structure layouts and accessors, and small macros and small inline; functions (ten lines or less in length), then the use of the object; file is unrestricted, regardless of whether it is legally a derivative; work. (Executables containing this object code plus portions of the; Library will still fall under Section 6.). Otherwise, if the work is a derivative of the Library, you may; distribute the object code for the work under the terms of Section 6.; Any executables containing that work also fall under Section 6,; whether or not they are linked directly with the Library itself.; ; 6. As an exception to the Sections above, you may also combine or; link a ""work that uses the Library"" with the Library to produce a; work containing portions of the Library, and distribute that work; under terms of your choice, provided that the terms permit; modification of the work for the customer's own use and reverse; engineering for debugging such modifications. You must give prominent notice with each copy of the work that the; Library is used in it and that the Library and",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:16285,Security,access,access,16285,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute.; ; 7. You may place lib",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:16343,Security,access,access,16343,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute.; ; 7. You may place lib",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:20751,Security,integrity,integrity,20751,"der, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Library at all. For example, if a patent; license would not permit royalty-free redistribution of the Library by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorpora",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:2602,Usability,clear,clear,2602,"otect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others.; ; Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for c",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:21216,Usability,clear,clear,21216,"tisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt:22823,Usability,guid,guided,22823,".; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation.; ; 14. If you wish to incorporate parts of the Library into other free; programs whose distribution conditions are incompatible with these,; write to the author to ask for permission. For software which is; copyrighted by the Free Software Foundation, write to the Free; Software Foundation; we sometimes make exceptions for this. Our; decision will be guided by the two goals of preserving the free status; of all derivatives of our free software and of promoting the sharing; and reuse of software generally. NO WARRANTY. 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO; WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.; EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR; OTHER PARTIES PROVIDE THE LIBRARY ""AS IS"" WITHOUT WARRANTY OF ANY; KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE; LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME; THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN; WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY; AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES A",MatchSource.DOCS,LGPL2_1.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/LGPL2_1.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:186,Availability,avail,available,186,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:260,Availability,avail,available,260,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:469,Availability,avail,available,469,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:594,Availability,avail,available,594,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:985,Availability,down,download,985,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:311,Integrability,interface,interfaces,311,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:929,Safety,avoid,avoid,929,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/requirements.txt:330,Usability,learn,learn,330,"# ROOT requirements for third-party Python packages. # PyROOT: Interoperability with numpy arrays; numpy; pandas. # TMVA: SOFIE; dm-sonnet ; python_version < ""3.13"" # used for GNNs, not available for Python 3.13 yet; graph_nets ; python_version < ""3.13"" # not available for Python 3.13 yet; onnx. # TMVA: PyMVA interfaces; scikit-learn; tensorflow<2.16 ; python_version < ""3.12""; torch<2.5 ; python_version < ""3.13"" # no torch version that fullfills version constraint available for Python 3.13; xgboost. # PyROOT: ROOT.Numba.Declare decorator; numba>=0.48 ; python_version < ""3.13"" # no numba available for Python 3.13 yet; cffi>=1.9.1. # Notebooks: ROOT C++ kernel; notebook>=4.4.1; metakernel>=0.20.0. # Distributed RDataFrame; pyspark>=2.4 # Spark backend; dask>=2022.08.1 # Dask backend; distributed>=2022.08.1 # Dask backend. # JsMVA: Jupyter notebook magic for TMVA; ipywidgets. # Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.; -f https://download.pytorch.org/whl/cpu/torch_stable.html; ",MatchSource.DOCS,requirements.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/requirements.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/CMakeLists.txt:276,Integrability,message,message,276,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(pyroot); add_subdirectory(pyroot); add_subdirectory(jupyroot). if(dataframe); message(STATUS ""Distributed RDataFrame enabled""); add_subdirectory(experimental/distrdf); else(); message(STATUS ""Requirements to enable distributed RDataFrame:""); message(STATUS "" dataframe: required:ON, actual:${dataframe}""); endif(); endif(). if(tpython); add_subdirectory(tpython); endif(). if(r); add_subdirectory(r); endif(); ",MatchSource.DOCS,bindings/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/CMakeLists.txt:374,Integrability,message,message,374,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(pyroot); add_subdirectory(pyroot); add_subdirectory(jupyroot). if(dataframe); message(STATUS ""Distributed RDataFrame enabled""); add_subdirectory(experimental/distrdf); else(); message(STATUS ""Requirements to enable distributed RDataFrame:""); message(STATUS "" dataframe: required:ON, actual:${dataframe}""); endif(); endif(). if(tpython); add_subdirectory(tpython); endif(). if(r); add_subdirectory(r); endif(); ",MatchSource.DOCS,bindings/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/CMakeLists.txt:440,Integrability,message,message,440,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(pyroot); add_subdirectory(pyroot); add_subdirectory(jupyroot). if(dataframe); message(STATUS ""Distributed RDataFrame enabled""); add_subdirectory(experimental/distrdf); else(); message(STATUS ""Requirements to enable distributed RDataFrame:""); message(STATUS "" dataframe: required:ON, actual:${dataframe}""); endif(); endif(). if(tpython); add_subdirectory(tpython); endif(). if(r); add_subdirectory(r); endif(); ",MatchSource.DOCS,bindings/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt:1552,Security,sanitiz,sanitizer,1552,_command(OUTPUT ${CMAKE_BINARY_DIR}/include/RConfigure.h; COMMAND; ${CMAKE_COMMAND} -E copy_if_different; ${CMAKE_BINARY_DIR}/ginclude/RConfigure.h; ${CMAKE_BINARY_DIR}/include/RConfigure.h; DEPENDS; ${CMAKE_BINARY_DIR}/ginclude/RConfigure.h; ). add_custom_target(rconfigure ALL DEPENDS ${CMAKE_BINARY_DIR}/include/RConfigure.h). ROOT_LINKER_LIBRARY(Core BUILTINS LZMA). generateHeader(Core; ${CMAKE_SOURCE_DIR}/core/base/src/root-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/TApplicationCommandLineOptionsHelp.h; ). add_dependencies(Core CLING rconfigure). target_link_libraries(Core; PRIVATE; ${CMAKE_DL_LIBS}; ${CMAKE_THREAD_LIBS_INIT}; ${ROOT_ATOMIC_LIBS}; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(Core PUBLIC util procstat); endif(). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/ginclude>; ). # Must be first because it defines ROOTStaticSanitizerConfig which needs; # to be linked into rootcling_stage1 (via ROOT_EXECUTABLE).; add_subdirectory(sanitizer). add_subdirectory(rootcling_stage1). add_subdirectory(base); add_subdirectory(clib); add_subdirectory(clingutils); add_subdirectory(cont); add_subdirectory(dictgen); add_subdirectory(foundation); add_subdirectory(gui); add_subdirectory(imt); add_subdirectory(meta); add_subdirectory(metacling); add_subdirectory(multiproc); add_subdirectory(newdelete); add_subdirectory(rint); add_subdirectory(testsupport); add_subdirectory(textinput); add_subdirectory(thread); add_subdirectory(zip); add_subdirectory(lzma); add_subdirectory(lz4); add_subdirectory(zstd). add_subdirectory(macosx); add_subdirectory(unix); add_subdirectory(winnt). #-------------------------------------------------------------------------------. if (libcxx AND NOT APPLE); # In case we use libcxx and glibc together there is a mismatch of the; # signatures of functions in the header wchar.h. This macro tweaks the; # header in rootcling resource directory to be compatible with the one from; # libc++.; target_compil,MatchSource.DOCS,core/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt:2702,Security,expose,exposed,2702,"tory(cont); add_subdirectory(dictgen); add_subdirectory(foundation); add_subdirectory(gui); add_subdirectory(imt); add_subdirectory(meta); add_subdirectory(metacling); add_subdirectory(multiproc); add_subdirectory(newdelete); add_subdirectory(rint); add_subdirectory(testsupport); add_subdirectory(textinput); add_subdirectory(thread); add_subdirectory(zip); add_subdirectory(lzma); add_subdirectory(lz4); add_subdirectory(zstd). add_subdirectory(macosx); add_subdirectory(unix); add_subdirectory(winnt). #-------------------------------------------------------------------------------. if (libcxx AND NOT APPLE); # In case we use libcxx and glibc together there is a mismatch of the; # signatures of functions in the header wchar.h. This macro tweaks the; # header in rootcling resource directory to be compatible with the one from; # libc++.; target_compile_definitions(Core PRIVATE __CORRECT_ISO_CPP_WCHAR_H_PROTO); endif(). if(MSVC); # Definitions of MATH Macros (required in MathCore) like M_PI are only; # exposed on Windows after defining the _USE_MATH_DEFINES macro. By; # specifying it as a property for Core, we ensure that the macros are; # properly exposed when using Modules on Windows.; target_compile_definitions(Core PRIVATE _USE_MATH_DEFINES); endif(). # Inclusion of `complex.h` causes havoc: `complex` and `I` become CPP macros.; # Darwin's complex.h does not implement C11's __STDC_NO_COMPLEX__, use the; # header guard instead. This prevents inclusion of complex.h in Darwin.pcm.; # GCC <=5 has _COMPLEX_H but none of the others.; # __CLANG_STDATOMIC_H prevents inclusion of stdatomic in our Darwin.pcm: its; # macros cause conflics with boost.; target_compile_definitions(Core PRIVATE; __STDC_NO_COMPLEX__; __COMPLEX_H__; _COMPLEX_H. __CLANG_STDATOMIC_H; ). if (runtime_cxxmodules); list(APPEND core_implicit_modules ""-mSystemByproducts""); # Force generation of _Builtin_intrinsics from Core.; list(APPEND core_implicit_modules ""-m"" ""_Builtin_intrinsics"" ""-mByproduct"" ""_Builtin_",MatchSource.DOCS,core/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt:2851,Security,expose,exposed,2851,"); add_subdirectory(metacling); add_subdirectory(multiproc); add_subdirectory(newdelete); add_subdirectory(rint); add_subdirectory(testsupport); add_subdirectory(textinput); add_subdirectory(thread); add_subdirectory(zip); add_subdirectory(lzma); add_subdirectory(lz4); add_subdirectory(zstd). add_subdirectory(macosx); add_subdirectory(unix); add_subdirectory(winnt). #-------------------------------------------------------------------------------. if (libcxx AND NOT APPLE); # In case we use libcxx and glibc together there is a mismatch of the; # signatures of functions in the header wchar.h. This macro tweaks the; # header in rootcling resource directory to be compatible with the one from; # libc++.; target_compile_definitions(Core PRIVATE __CORRECT_ISO_CPP_WCHAR_H_PROTO); endif(). if(MSVC); # Definitions of MATH Macros (required in MathCore) like M_PI are only; # exposed on Windows after defining the _USE_MATH_DEFINES macro. By; # specifying it as a property for Core, we ensure that the macros are; # properly exposed when using Modules on Windows.; target_compile_definitions(Core PRIVATE _USE_MATH_DEFINES); endif(). # Inclusion of `complex.h` causes havoc: `complex` and `I` become CPP macros.; # Darwin's complex.h does not implement C11's __STDC_NO_COMPLEX__, use the; # header guard instead. This prevents inclusion of complex.h in Darwin.pcm.; # GCC <=5 has _COMPLEX_H but none of the others.; # __CLANG_STDATOMIC_H prevents inclusion of stdatomic in our Darwin.pcm: its; # macros cause conflics with boost.; target_compile_definitions(Core PRIVATE; __STDC_NO_COMPLEX__; __COMPLEX_H__; _COMPLEX_H. __CLANG_STDATOMIC_H; ). if (runtime_cxxmodules); list(APPEND core_implicit_modules ""-mSystemByproducts""); # Force generation of _Builtin_intrinsics from Core.; list(APPEND core_implicit_modules ""-m"" ""_Builtin_intrinsics"" ""-mByproduct"" ""_Builtin_intrinsics""); list(APPEND core_implicit_modules ""-mByproduct"" ""ROOT_Foundation_Stage1_NoRTTI""); list(APPEND core_implicit_modules ""-mByp",MatchSource.DOCS,core/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt:1957,Testability,test,testsupport,1957,"ude/RConfigure.h). ROOT_LINKER_LIBRARY(Core BUILTINS LZMA). generateHeader(Core; ${CMAKE_SOURCE_DIR}/core/base/src/root-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/TApplicationCommandLineOptionsHelp.h; ). add_dependencies(Core CLING rconfigure). target_link_libraries(Core; PRIVATE; ${CMAKE_DL_LIBS}; ${CMAKE_THREAD_LIBS_INIT}; ${ROOT_ATOMIC_LIBS}; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(Core PUBLIC util procstat); endif(). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/ginclude>; ). # Must be first because it defines ROOTStaticSanitizerConfig which needs; # to be linked into rootcling_stage1 (via ROOT_EXECUTABLE).; add_subdirectory(sanitizer). add_subdirectory(rootcling_stage1). add_subdirectory(base); add_subdirectory(clib); add_subdirectory(clingutils); add_subdirectory(cont); add_subdirectory(dictgen); add_subdirectory(foundation); add_subdirectory(gui); add_subdirectory(imt); add_subdirectory(meta); add_subdirectory(metacling); add_subdirectory(multiproc); add_subdirectory(newdelete); add_subdirectory(rint); add_subdirectory(testsupport); add_subdirectory(textinput); add_subdirectory(thread); add_subdirectory(zip); add_subdirectory(lzma); add_subdirectory(lz4); add_subdirectory(zstd). add_subdirectory(macosx); add_subdirectory(unix); add_subdirectory(winnt). #-------------------------------------------------------------------------------. if (libcxx AND NOT APPLE); # In case we use libcxx and glibc together there is a mismatch of the; # signatures of functions in the header wchar.h. This macro tweaks the; # header in rootcling resource directory to be compatible with the one from; # libc++.; target_compile_definitions(Core PRIVATE __CORRECT_ISO_CPP_WCHAR_H_PROTO); endif(). if(MSVC); # Definitions of MATH Macros (required in MathCore) like M_PI are only; # exposed on Windows after defining the _USE_MATH_DEFINES macro. By; # specifying it as a property for Core, we ensure that the macros are; # properly exposed ",MatchSource.DOCS,core/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/fonts/MANIFEST-TeX-Gyre-Heros.txt:847,Availability,mainten,maintenance,847,"###########################################################################; ############ The TeX Gyre Collection of Fonts ############; ############ The font Heros ############; ###########################################################################. Font: TeX Gyre Heros; Authors: Bogus\l{}aw Jackowski and Janusz M. Nowacki; Version: 2.004; Date: 30 X 2009; Downloads: http://www.gust.org.pl/projects/e-foundry/tex-gyre/heros. Copyright 2007--2009 for TeX Gyre extensions by B. Jackowski; and J.M. Nowacki (on behalf of TeX Users Groups). Vietnamese; characters were added by Han The Thanh. This work can be freely used and distributed under; the GUST Font License (GFL -- see GUST-FONT-LICENSE.txt); which is actually an instance of the LaTeX Project Public License; (LPPL -- see http://www.latex-project.org/lppl.txt ). This work has the maintenance status ""maintained"". The Current Maintainer; of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki. Below, in three sections required by the GUST Font License, ; font names and file names specific for the TeX Gyre Heros; Family of Fonts are listed. . NOTE: the names of the directories are not subject to the renaming ; restrictions. 1. Fonts whose names should be changed in derived works as requested; by clause 1 of GUST-FONT-LICENSE.txt. 1.1 PostScript names; 1.1.1 PostScript family names; TeXGyreHeros; TeXGyreHerosCondensed. 1.1.2 PostScript font and full names; TeXGyreHeros-Regular; TeXGyreHeros-Italic; TeXGyreHeros-Bold; TeXGyreHeros-BoldItalic; TeXGyreHerosCondensed-Regular; TeXGyreHerosCondensed-Italic; TeXGyreHerosCondensed-Bold; TeXGyreHerosCondensed-BoldItalic. 1.2 PFM names; TeXGyreHeros; TeXGyreHerosCondensed. 1.3 OTF full menu names; TeX Gyre Heros Regular; TeX Gyre Heros Italic; TeX Gyre Heros Bold; TeX Gyre Heros Bold Italic; TeX Gyre Heros Cn Regular; TeX Gyre Heros Cn Italic; TeX Gyre Heros Cn Bold; TeX Gyre Heros Cn Bold Italic. 1.4 OTF ATM menu names; TeXGyreHeros Regular; TeXGyreHeros Italic; TeXGyreH",MatchSource.DOCS,fonts/MANIFEST-TeX-Gyre-Heros.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/fonts/MANIFEST-TeX-Gyre-Heros.txt
https://github.com/root-project/root/tree/v6-32-06/fonts/MANIFEST-TeX-Gyre-Heros.txt:11109,Testability,test,test,11109,/tex-gyre/ts1-qhvcbi.tfm; fonts/tfm/public/tex-gyre/ts1-qhvcr.tfm; fonts/tfm/public/tex-gyre/ts1-qhvcri.tfm; fonts/type1/public/tex-gyre/qhvb.pfb; fonts/type1/public/tex-gyre/qhvb.pfm; fonts/type1/public/tex-gyre/qhvbi.pfb; fonts/type1/public/tex-gyre/qhvbi.pfm; fonts/type1/public/tex-gyre/qhvr.pfb; fonts/type1/public/tex-gyre/qhvr.pfm; fonts/type1/public/tex-gyre/qhvri.pfb; fonts/type1/public/tex-gyre/qhvri.pfm; fonts/type1/public/tex-gyre/qhvcb.pfb; fonts/type1/public/tex-gyre/qhvcb.pfm; fonts/type1/public/tex-gyre/qhvcbi.pfb; fonts/type1/public/tex-gyre/qhvcbi.pfm; fonts/type1/public/tex-gyre/qhvcr.pfb; fonts/type1/public/tex-gyre/qhvcr.pfm; fonts/type1/public/tex-gyre/qhvcri.pfb; fonts/type1/public/tex-gyre/qhvcri.pfm. 2.2 tex/latex/tex-gyre/il2qhv.fd; tex/latex/tex-gyre/il2qhvc.fd; tex/latex/tex-gyre/l7xqhv.fd; tex/latex/tex-gyre/l7xqhvc.fd; tex/latex/tex-gyre/ly1qhv.fd; tex/latex/tex-gyre/ly1qhvc.fd; tex/latex/tex-gyre/ot1qhv.fd; tex/latex/tex-gyre/ot1qhvc.fd; tex/latex/tex-gyre/ot4qhv.fd; tex/latex/tex-gyre/ot4qhvc.fd; tex/latex/tex-gyre/qswiss.sty; tex/latex/tex-gyre/qxqhv.fd; tex/latex/tex-gyre/qxqhvc.fd; tex/latex/tex-gyre/t1qhv.fd; tex/latex/tex-gyre/t1qhvc.fd; tex/latex/tex-gyre/t5qhv.fd; tex/latex/tex-gyre/t5qhvc.fd; tex/latex/tex-gyre/tgheros.sty; tex/latex/tex-gyre/ts1qhv.fd; tex/latex/tex-gyre/ts1qhvc.fd; ; 2.3 doc/fonts/tex-gyre/MANIFEST-TeX-Gyre-Heros.txt; doc/fonts/tex-gyre/README-TeX-Gyre-Heros.txt; doc/fonts/tex-gyre/goadb999.nam; doc/fonts/tex-gyre/qhv-hist.txt; doc/fonts/tex-gyre/qhv-info.pdf; doc/fonts/tex-gyre/qhv-test.tex; doc/fonts/tex-gyre/qhv-test.pdf; doc/fonts/tex-gyre/qhvb.fea; doc/fonts/tex-gyre/qhvbi.fea; doc/fonts/tex-gyre/qhvcr.fea; doc/fonts/tex-gyre/qhvcri.fea; doc/fonts/tex-gyre/qhvcb.fea; doc/fonts/tex-gyre/qhvcbi.fea; doc/fonts/tex-gyre/qhvr.fea; doc/fonts/tex-gyre/qhvri.fea. 3. Files whose names need not be changed in derived works as requested; by clause 1 of GUST-FONT-LICENSE.txt. doc/fonts/tex-gyre/GUST-FONT-LICENSE.txt. ,MatchSource.DOCS,fonts/MANIFEST-TeX-Gyre-Heros.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/fonts/MANIFEST-TeX-Gyre-Heros.txt
https://github.com/root-project/root/tree/v6-32-06/fonts/MANIFEST-TeX-Gyre-Heros.txt:11142,Testability,test,test,11142,/tex-gyre/ts1-qhvcbi.tfm; fonts/tfm/public/tex-gyre/ts1-qhvcr.tfm; fonts/tfm/public/tex-gyre/ts1-qhvcri.tfm; fonts/type1/public/tex-gyre/qhvb.pfb; fonts/type1/public/tex-gyre/qhvb.pfm; fonts/type1/public/tex-gyre/qhvbi.pfb; fonts/type1/public/tex-gyre/qhvbi.pfm; fonts/type1/public/tex-gyre/qhvr.pfb; fonts/type1/public/tex-gyre/qhvr.pfm; fonts/type1/public/tex-gyre/qhvri.pfb; fonts/type1/public/tex-gyre/qhvri.pfm; fonts/type1/public/tex-gyre/qhvcb.pfb; fonts/type1/public/tex-gyre/qhvcb.pfm; fonts/type1/public/tex-gyre/qhvcbi.pfb; fonts/type1/public/tex-gyre/qhvcbi.pfm; fonts/type1/public/tex-gyre/qhvcr.pfb; fonts/type1/public/tex-gyre/qhvcr.pfm; fonts/type1/public/tex-gyre/qhvcri.pfb; fonts/type1/public/tex-gyre/qhvcri.pfm. 2.2 tex/latex/tex-gyre/il2qhv.fd; tex/latex/tex-gyre/il2qhvc.fd; tex/latex/tex-gyre/l7xqhv.fd; tex/latex/tex-gyre/l7xqhvc.fd; tex/latex/tex-gyre/ly1qhv.fd; tex/latex/tex-gyre/ly1qhvc.fd; tex/latex/tex-gyre/ot1qhv.fd; tex/latex/tex-gyre/ot1qhvc.fd; tex/latex/tex-gyre/ot4qhv.fd; tex/latex/tex-gyre/ot4qhvc.fd; tex/latex/tex-gyre/qswiss.sty; tex/latex/tex-gyre/qxqhv.fd; tex/latex/tex-gyre/qxqhvc.fd; tex/latex/tex-gyre/t1qhv.fd; tex/latex/tex-gyre/t1qhvc.fd; tex/latex/tex-gyre/t5qhv.fd; tex/latex/tex-gyre/t5qhvc.fd; tex/latex/tex-gyre/tgheros.sty; tex/latex/tex-gyre/ts1qhv.fd; tex/latex/tex-gyre/ts1qhvc.fd; ; 2.3 doc/fonts/tex-gyre/MANIFEST-TeX-Gyre-Heros.txt; doc/fonts/tex-gyre/README-TeX-Gyre-Heros.txt; doc/fonts/tex-gyre/goadb999.nam; doc/fonts/tex-gyre/qhv-hist.txt; doc/fonts/tex-gyre/qhv-info.pdf; doc/fonts/tex-gyre/qhv-test.tex; doc/fonts/tex-gyre/qhv-test.pdf; doc/fonts/tex-gyre/qhvb.fea; doc/fonts/tex-gyre/qhvbi.fea; doc/fonts/tex-gyre/qhvcr.fea; doc/fonts/tex-gyre/qhvcri.fea; doc/fonts/tex-gyre/qhvcb.fea; doc/fonts/tex-gyre/qhvcbi.fea; doc/fonts/tex-gyre/qhvr.fea; doc/fonts/tex-gyre/qhvri.fea. 3. Files whose names need not be changed in derived works as requested; by clause 1 of GUST-FONT-LICENSE.txt. doc/fonts/tex-gyre/GUST-FONT-LICENSE.txt. ,MatchSource.DOCS,fonts/MANIFEST-TeX-Gyre-Heros.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/fonts/MANIFEST-TeX-Gyre-Heros.txt
https://github.com/root-project/root/tree/v6-32-06/geom/CMakeLists.txt:439,Deployability,install,install,439,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_subdirectory (geom) # special CMakeLists.txt; if(geombuilder); add_subdirectory (geombuilder) # special CMakeLists.txt; endif(); add_subdirectory (geompainter) # special CMakeLists.txt. if(gdml); add_subdirectory(gdml); if(NOT gnuinstall); install(DIRECTORY gdml/ DESTINATION geom/gdml; FILES_MATCHING PATTERN ""*.py""; PATTERN ""inc"" EXCLUDE; PATTERN ""src"" EXCLUDE); endif(); endif(). if(vecgeom); add_subdirectory(vecgeom); endif(). if(webgui); add_subdirectory(webviewer); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,geom/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/geom/CMakeLists.txt:708,Testability,test,test,708,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_subdirectory (geom) # special CMakeLists.txt; if(geombuilder); add_subdirectory (geombuilder) # special CMakeLists.txt; endif(); add_subdirectory (geompainter) # special CMakeLists.txt. if(gdml); add_subdirectory(gdml); if(NOT gnuinstall); install(DIRECTORY gdml/ DESTINATION geom/gdml; FILES_MATCHING PATTERN ""*.py""; PATTERN ""inc"" EXCLUDE; PATTERN ""src"" EXCLUDE); endif(); endif(). if(vecgeom); add_subdirectory(vecgeom); endif(). if(webgui); add_subdirectory(webviewer); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,geom/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:22682,Availability,avail,available,22682,"); endif(). # Set the flags in the parent scope for the rest of the cling-based libraries in ROOT.; set(CLING_CXXFLAGS ${CLING_CXXFLAGS} PARENT_SCOPE). string(APPEND CMAKE_CXX_FLAGS ${CLING_CXXFLAGS}); if (LLVM_ENABLE_PIC AND NOT MSVC); # FIXME: LLVM_ENABLE_PIC is ON by default, however not propagated to cling.; # FIXME: fPIC is required by the linker for libCling. Can we do that using; # cmake: set_property(TARGET clingInterpreter PROPERTY POSITION_INDEPENDENT_CODE ON)?; string(APPEND CMAKE_CXX_FLAGS "" -fPIC""); string(APPEND CMAKE_C_FLAGS "" -fPIC""); endif(LLVM_ENABLE_PIC AND NOT MSVC); # Avoid cling being installed under ROOTSYS/include.; set(CLING_ROOT_BUILD ON); add_subdirectory(cling EXCLUDE_FROM_ALL); add_dependencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/clang"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:257,Deployability,patch,patches,257,"# Do not depend on CMake scripts from the rest of the ROOT build; set(CMAKE_MODULE_PATH """"). #--- Check if we need to build llvm and clang ------------------------------------------------------; if (NOT builtin_clang); message(WARNING ""Due to ROOT-specific patches you need a special version of clang. You cannot use vanilla clang.""); endif(). #--Set the LLVM version required for ROOT-----------------------------------------------------------; set(ROOT_LLVM_VERSION_REQUIRED_MAJOR 18). #---Define the way we want to build and what of llvm/clang/cling------------------------------------; set(LLVM_ENABLE_RTTI ON CACHE BOOL """"); set(LLVM_APPEND_VC_REV OFF CACHE BOOL """"); set(LLVM_ENABLE_BINDINGS OFF CACHE BOOL """"); set(LLVM_ENABLE_FFI OFF CACHE BOOL """"); set(LLVM_ENABLE_OCAMLDOC OFF CACHE BOOL """"); set(LLVM_ENABLE_Z3_SOLVER OFF CACHE BOOL """"); set(LLVM_ENABLE_WARNINGS OFF CACHE BOOL """"); set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL """"); set(CLANG_ENABLE_ARCMT OFF CACHE BOOL """"); set(LLVM_INCLUDE_TESTS OFF CACHE BOOL """"); set(LLVM_INCLUDE_BENCHMARKS OFF CACHE BOOL """"); set(CLANG_INCLUDE_TESTS OFF CACHE BOOL """"); set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL """"); set(CLANG_BUILD_TOOLS OFF CACHE BOOL """"); # It looks like that turning off CLANG_BUILD_TOOLS is not enough.; set(CLANG_TOOL_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_CHECK_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FORMAT_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FORMAT_VS_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FUZZER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_IMPORT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_RENAME_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_INDEX_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_DIAGTOOL_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_LIBCLANG_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_BUILD_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:4234,Deployability,upgrade,upgrade,4234,"sibility-inlines-hidden, so we suddenly have a global weak symbol; # from LLVM in cling which our visiblity=hidden compiled LLVM libraries; # reference. This is triggering some build system warnings like this:; # ld: warning: direct access in function '(anonymous namespace)::NewGVN::runGVN()'; # from file 'interpreter/llvm-project/llvm/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol; # 'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm-project/llvm/lib/libclingUtils.a(AST.cpp.o)'; # means the weak symbol cannot be overridden at runtime. This was likely caused by different; # translation units being compiled with different visibility settings.; # There is no apparent reason why this is happening and it looks like a compiler bug,; # so let's just disable the part of the code that provides this symbol.; # As it's in the validation part of LLVM and not in something that providing functionality,; # this shouldn't cause any problems.; # TODO: We maybe can remove this code once we upgrade to LLVM>=6.0 as this symbol; # was introduced quite recently into LLVM 5.0 and probably is also causing problems; # for some other projects.; set(LLVM_ENABLE_ABI_BREAKING_CHECKS OFF CACHE BOOL """" FORCE); set(LLVM_ABI_BREAKING_CHECKS FORCE_OFF CACHE BOOL """" FORCE). set(CMAKE_REQUIRED_QUIET 1) # Make the configuration of LLVM quiet. if(ROOT_ARCHITECTURE MATCHES arm64); set(ROOT_CLING_TARGET ""AArch64""); elseif(ROOT_ARCHITECTURE MATCHES arm); set(ROOT_CLING_TARGET ""ARM""); elseif(ROOT_ARCHITECTURE MATCHES ppc64); set(ROOT_CLING_TARGET ""PowerPC""); elseif(ROOT_ARCHITECTURE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(ROOT_CLING_TARGET ""X86""); else(); set(ROOT_CLING_TARGET """,MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:4546,Deployability,configurat,configuration,4546,"lvm-project/llvm/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol; # 'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm-project/llvm/lib/libclingUtils.a(AST.cpp.o)'; # means the weak symbol cannot be overridden at runtime. This was likely caused by different; # translation units being compiled with different visibility settings.; # There is no apparent reason why this is happening and it looks like a compiler bug,; # so let's just disable the part of the code that provides this symbol.; # As it's in the validation part of LLVM and not in something that providing functionality,; # this shouldn't cause any problems.; # TODO: We maybe can remove this code once we upgrade to LLVM>=6.0 as this symbol; # was introduced quite recently into LLVM 5.0 and probably is also causing problems; # for some other projects.; set(LLVM_ENABLE_ABI_BREAKING_CHECKS OFF CACHE BOOL """" FORCE); set(LLVM_ABI_BREAKING_CHECKS FORCE_OFF CACHE BOOL """" FORCE). set(CMAKE_REQUIRED_QUIET 1) # Make the configuration of LLVM quiet. if(ROOT_ARCHITECTURE MATCHES arm64); set(ROOT_CLING_TARGET ""AArch64""); elseif(ROOT_ARCHITECTURE MATCHES arm); set(ROOT_CLING_TARGET ""ARM""); elseif(ROOT_ARCHITECTURE MATCHES ppc64); set(ROOT_CLING_TARGET ""PowerPC""); elseif(ROOT_ARCHITECTURE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(ROOT_CLING_TARGET ""X86""); else(); set(ROOT_CLING_TARGET ""all""); endif(). if(NOT ""${ROOT_CLING_TARGET}"" STREQUAL ""all""); string(APPEND ROOT_CLING_TARGET "";NVPTX""); endif(). if(MSVC); # FIXME: since Visual Studio v16.4.0 the /O2 optimization flag make many (25%) of the tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang; if (MSVC_VERSION GREATER_EQUAL 1924 ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:5479,Deployability,upgrade,upgrade,5479,"RE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(ROOT_CLING_TARGET ""X86""); else(); set(ROOT_CLING_TARGET ""all""); endif(). if(NOT ""${ROOT_CLING_TARGET}"" STREQUAL ""all""); string(APPEND ROOT_CLING_TARGET "";NVPTX""); endif(). if(MSVC); # FIXME: since Visual Studio v16.4.0 the /O2 optimization flag make many (25%) of the tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang; if (MSVC_VERSION GREATER_EQUAL 1924 AND MSVC_VERSION LESS 1929); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BIN",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:10045,Deployability,configurat,configuration,10045,"-indentation for GCC: Some LLVM source files; # are too large.; set(cxx_flags_prev ${CMAKE_CXX_FLAGS}); if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-misleading-indentation""); endif(). if(builtin_llvm); # Since debug builds of LLVM are quite large, we want to be able; # to control the build types of ROOT and LLVM independently. The; # logic below is to make that possible. LLVM is built in Release; # mode unless a different build type is chosen via LLVM_BUILD_TYPE. if(NOT DEFINED LLVM_BUILD_TYPE); set(LLVM_BUILD_TYPE Release CACHE STRING ""Build type used for LLVM""); endif(). message(STATUS ""Building LLVM in '${LLVM_BUILD_TYPE}' mode.""). if(NOT DEFINED LLVM_ENABLE_ASSERTIONS); if(CMAKE_BUILD_TYPE MATCHES ""Debug""; OR LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES}); string(TOUPPER ${CONFIG} CONFIG); set(CMAKE_C_FLAGS_${CONFIG} ${LLVM_C_FLAGS}); set(CMAKE_CXX_FLAGS_${CONFIG} ${LLVM_CXX_FLAGS}); endforeach(); endif(); elseif(NOT LLVM_BUILD_TYPE STREQUAL CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE ${LLVM_BUILD_TYPE}); endif(). set(BUILD_SHARED_LIBS FALSE). #---Remove the inherited include_directories(); set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES """"). set(LLVM_ENABLE_PROJECTS ""clang"" CACHE STRING """"). #---Add the sub-directory excluding all the targets from all-----------------------------------------; if(CMAKE_GENERATOR MATCHES ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:10139,Deployability,configurat,configurations,10139,"-indentation for GCC: Some LLVM source files; # are too large.; set(cxx_flags_prev ${CMAKE_CXX_FLAGS}); if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-misleading-indentation""); endif(). if(builtin_llvm); # Since debug builds of LLVM are quite large, we want to be able; # to control the build types of ROOT and LLVM independently. The; # logic below is to make that possible. LLVM is built in Release; # mode unless a different build type is chosen via LLVM_BUILD_TYPE. if(NOT DEFINED LLVM_BUILD_TYPE); set(LLVM_BUILD_TYPE Release CACHE STRING ""Build type used for LLVM""); endif(). message(STATUS ""Building LLVM in '${LLVM_BUILD_TYPE}' mode.""). if(NOT DEFINED LLVM_ENABLE_ASSERTIONS); if(CMAKE_BUILD_TYPE MATCHES ""Debug""; OR LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES}); string(TOUPPER ${CONFIG} CONFIG); set(CMAKE_C_FLAGS_${CONFIG} ${LLVM_C_FLAGS}); set(CMAKE_CXX_FLAGS_${CONFIG} ${LLVM_CXX_FLAGS}); endforeach(); endif(); elseif(NOT LLVM_BUILD_TYPE STREQUAL CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE ${LLVM_BUILD_TYPE}); endif(). set(BUILD_SHARED_LIBS FALSE). #---Remove the inherited include_directories(); set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES """"). set(LLVM_ENABLE_PROJECTS ""clang"" CACHE STRING """"). #---Add the sub-directory excluding all the targets from all-----------------------------------------; if(CMAKE_GENERATOR MATCHES ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:12026,Deployability,update,updated,12026,"_SHARED_LIBS FALSE). #---Remove the inherited include_directories(); set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES """"). set(LLVM_ENABLE_PROJECTS ""clang"" CACHE STRING """"). #---Add the sub-directory excluding all the targets from all-----------------------------------------; if(CMAKE_GENERATOR MATCHES ""Xcode""); add_subdirectory(llvm-project/llvm); else(); add_subdirectory(llvm-project/llvm EXCLUDE_FROM_ALL); endif(). set(LLVM_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/llvm-project/llvm/include; ${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm/include; CACHE STRING ""LLVM include directories.""; ); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/cmake/modules""); #---Set into parent scope LLVM_VERSION_MAJOR --------------------------------------------------------; get_directory_property(_llvm_version_major DIRECTORY llvm-project/llvm DEFINITION LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR ""${_llvm_version_major}"" PARENT_SCOPE); #---Forward LLVM_TARGET_TRIPLE for check-cling-------------------------------------------------------; get_directory_property(LLVM_TARGET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix"";",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:15647,Deployability,install,install,15647,"); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); else(); message(FATAL_ERROR ""Not found: ${LLVMCONFIG_FILE}""); endif(); # We already FORCE-d the CACHE value to OFF, but LLVMConfig.cmake might have; # set the variable to ON again...; set(LLVM_ENABLE_WARNINGS OFF). # They are used as destination of target generators.; # We try to keep these locations consistent with the builtin_llvm. This is important; # for the LLVMRES target.; # FIXME: In longer term, we do not really need this and may want to adjust LLVMRES.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib). if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF); option(CLANG_ENABLE_BOOTSTRAP ""Generate the clang bootstrap target"" OFF). include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""); if (${PACKAGE_VERSION} MATCHES ""${ROOT_LLVM_VERSION_REQUIRED_MAJOR}\\.1(|\\.[0-9]+)""); message(STATUS ""Using LLVM external library - ${PACKAGE_VERSION}""); else(); message(FATAL_ERROR ""LLVM version ${LLVM_PACKAGE_VERSION} different from ROOT supported, please try ${ROOT_LLVM_VERSION_REQUIRED_MAJOR}.1.x""); endif(). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_BINARY_DIR}/include"" ""${LLVM_MAIN_INCLUDE_DIR}""); link_directories(""${LLVM_LIBRARY_DIR}""). # set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); # set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINAR",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:18127,Deployability,install,installed,18127,"VIDED ON); endif(); set(ROOT_LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/""); if(EXISTS ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; set(LLVM_LIT ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py CACHE PATH ""The location of the lit test runner.""); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); # We do not run llvm tests in ROOT.; #set(UNITTEST_DIR ${ROOT_LLVM_MAIN_SRC_DIR}/utils/unittest); #if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h; # AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; # AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); # add_subdirectory(${UNITTEST_DIR} utils/unittest); #endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""); set(LIT_COMMAND ""${LLVM_LIT}"" CACHE STRING ""Path to the LLVM LIT.""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set(LLVM_INCLUDE_DIRS ${LLVM_MAIN_INCLUDE_DIR}; CACHE STRING ""System LLVM include directories.""; ). # We checked above that LLVM_VERSION is what we require in ROOT_LLVM_VERSION_REQUIRED_MAJOR.; # To simplify ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:19429,Deployability,install,install-clang-cpp,19429,"SVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""); set(LIT_COMMAND ""${LLVM_LIT}"" CACHE STRING ""Path to the LLVM LIT.""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set(LLVM_INCLUDE_DIRS ${LLVM_MAIN_INCLUDE_DIR}; CACHE STRING ""System LLVM include directories.""; ). # We checked above that LLVM_VERSION is what we require in ROOT_LLVM_VERSION_REQUIRED_MAJOR.; # To simplify code, just forward that requirement to the rest of ROOT, for example to; # construct the resource directory in core/clingutils.; set(LLVM_VERSION_MAJOR ${ROOT_LLVM_VERSION_REQUIRED_MAJOR} PARENT_SCOPE). # We are in the case of NOT builtin_llvm; if (builtin_clang); # remove clang-cpp from CLANG_LINKS_TO_CREATE to avoid clashes with; # install-clang-cpp target defined by LLVM's cmake module; set(CLANG_LINKS_TO_CREATE clang++ clang-cl). # Disable linking against shared LLVM; set(LLVM_LINK_LLVM_DYLIB OFF). add_subdirectory(llvm-project/clang EXCLUDE_FROM_ALL); endif(builtin_clang). set( CLANG_BUILT_STANDALONE 1 ); set(BACKEND_PACKAGE_STRING ""LLVM ${LLVM_PACKAGE_VERSION}""); endif(builtin_llvm). if (builtin_clang); if (builtin_llvm); # For builtin LLVM this is set in interpreter/llvm-project/llvm/CMakeLists.txt; set(Clang_DIR ""${LLVM_BINARY_DIR}/tools/clang/""); else(); set(Clang_DIR ""${CMAKE_BINARY_DIR}/interpreter/llvm-project/clang/""); set(Clang_Config_ExtraPathHints ""${Clang_DIR}cmake/modules/CMakeFiles""); endif(); set(CLANG_INCLUDE_DIRS; ${CMAKE_SOURCE_DIR}/interpreter/llvm-project/clang/include; ${Clang_DIR}/include; CACHE STRING ""Clang include directories.""); else(); set(Clang_DIR ""${LLVM_BINARY_DIR}/lib/cmake/clang/""); endif(). # Reset the compiler flags after compiling LLVM and Clang; set(CMAKE_CX",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:22151,Deployability,install,installed,22151,"DDEFINE1 -DDEFINE2; string (REPLACE "";"" "" -D"" LLVM_DEFS "";${LLVM_DEFS}""); endif(). # FIXME: Reduce the usage of CLING_CXXFLAGS by adding a cmake routine in; # RootMacros.cmake for all cling-dependent libraries; if(MSVC); set(CLING_CXXFLAGS "" ${LLVM_DEFS} -DNOMINMAX -D_XKEYCHECK_H""); else(); # FIXME: Work hard to remove -Wno-shadow and -Wno-unused-parameter; set(CLING_CXXFLAGS "" ${LLVM_DEFS} -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations""); endif(). # Set the flags in the parent scope for the rest of the cling-based libraries in ROOT.; set(CLING_CXXFLAGS ${CLING_CXXFLAGS} PARENT_SCOPE). string(APPEND CMAKE_CXX_FLAGS ${CLING_CXXFLAGS}); if (LLVM_ENABLE_PIC AND NOT MSVC); # FIXME: LLVM_ENABLE_PIC is ON by default, however not propagated to cling.; # FIXME: fPIC is required by the linker for libCling. Can we do that using; # cmake: set_property(TARGET clingInterpreter PROPERTY POSITION_INDEPENDENT_CODE ON)?; string(APPEND CMAKE_CXX_FLAGS "" -fPIC""); string(APPEND CMAKE_C_FLAGS "" -fPIC""); endif(LLVM_ENABLE_PIC AND NOT MSVC); # Avoid cling being installed under ROOTSYS/include.; set(CLING_ROOT_BUILD ON); add_subdirectory(cling EXCLUDE_FROM_ALL); add_dependencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/li",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:9,Integrability,depend,depend,9,"# Do not depend on CMake scripts from the rest of the ROOT build; set(CMAKE_MODULE_PATH """"). #--- Check if we need to build llvm and clang ------------------------------------------------------; if (NOT builtin_clang); message(WARNING ""Due to ROOT-specific patches you need a special version of clang. You cannot use vanilla clang.""); endif(). #--Set the LLVM version required for ROOT-----------------------------------------------------------; set(ROOT_LLVM_VERSION_REQUIRED_MAJOR 18). #---Define the way we want to build and what of llvm/clang/cling------------------------------------; set(LLVM_ENABLE_RTTI ON CACHE BOOL """"); set(LLVM_APPEND_VC_REV OFF CACHE BOOL """"); set(LLVM_ENABLE_BINDINGS OFF CACHE BOOL """"); set(LLVM_ENABLE_FFI OFF CACHE BOOL """"); set(LLVM_ENABLE_OCAMLDOC OFF CACHE BOOL """"); set(LLVM_ENABLE_Z3_SOLVER OFF CACHE BOOL """"); set(LLVM_ENABLE_WARNINGS OFF CACHE BOOL """"); set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL """"); set(CLANG_ENABLE_ARCMT OFF CACHE BOOL """"); set(LLVM_INCLUDE_TESTS OFF CACHE BOOL """"); set(LLVM_INCLUDE_BENCHMARKS OFF CACHE BOOL """"); set(CLANG_INCLUDE_TESTS OFF CACHE BOOL """"); set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL """"); set(CLANG_BUILD_TOOLS OFF CACHE BOOL """"); # It looks like that turning off CLANG_BUILD_TOOLS is not enough.; set(CLANG_TOOL_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_CHECK_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FORMAT_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FORMAT_VS_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FUZZER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_IMPORT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_RENAME_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_INDEX_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_DIAGTOOL_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_LIBCLANG_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_BUILD_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:219,Integrability,message,message,219,"# Do not depend on CMake scripts from the rest of the ROOT build; set(CMAKE_MODULE_PATH """"). #--- Check if we need to build llvm and clang ------------------------------------------------------; if (NOT builtin_clang); message(WARNING ""Due to ROOT-specific patches you need a special version of clang. You cannot use vanilla clang.""); endif(). #--Set the LLVM version required for ROOT-----------------------------------------------------------; set(ROOT_LLVM_VERSION_REQUIRED_MAJOR 18). #---Define the way we want to build and what of llvm/clang/cling------------------------------------; set(LLVM_ENABLE_RTTI ON CACHE BOOL """"); set(LLVM_APPEND_VC_REV OFF CACHE BOOL """"); set(LLVM_ENABLE_BINDINGS OFF CACHE BOOL """"); set(LLVM_ENABLE_FFI OFF CACHE BOOL """"); set(LLVM_ENABLE_OCAMLDOC OFF CACHE BOOL """"); set(LLVM_ENABLE_Z3_SOLVER OFF CACHE BOOL """"); set(LLVM_ENABLE_WARNINGS OFF CACHE BOOL """"); set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL """"); set(CLANG_ENABLE_ARCMT OFF CACHE BOOL """"); set(LLVM_INCLUDE_TESTS OFF CACHE BOOL """"); set(LLVM_INCLUDE_BENCHMARKS OFF CACHE BOOL """"); set(CLANG_INCLUDE_TESTS OFF CACHE BOOL """"); set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL """"); set(CLANG_BUILD_TOOLS OFF CACHE BOOL """"); # It looks like that turning off CLANG_BUILD_TOOLS is not enough.; set(CLANG_TOOL_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_CHECK_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FORMAT_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FORMAT_VS_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_FUZZER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_IMPORT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_RENAME_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_INDEX_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_DIAGTOOL_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_LIBCLANG_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_BUILD_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:6383,Integrability,message,message,6383,"ang; if (MSVC_VERSION GREATER_EQUAL 1924 AND MSVC_VERSION LESS 1929); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin/cling); endif(); ROOT_ADD_TEST(clingtest-check-cling COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target check-cling; ENVIRONMENT ${CLINGTEST_EXECUTABLE}); else(); #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------; set(CMAKE_CXX_VISIBILITY_PRESET hidden); set(CMAKE_C_VISIBILITY_PRESET hidden); endif(); if (NOT MSVC AND NOT APPLE); # Requires the linker to resolve the symbol internally and prevents; # conflicts when linked with another software using also LLVM like in; # the problem reported for Julia in; # https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-8827",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:8032,Integrability,depend,dependency,8032,"VIRONMENT ${CLINGTEST_EXECUTABLE}); else(); #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------; set(CMAKE_CXX_VISIBILITY_PRESET hidden); set(CMAKE_C_VISIBILITY_PRESET hidden); endif(); if (NOT MSVC AND NOT APPLE); # Requires the linker to resolve the symbol internally and prevents; # conflicts when linked with another software using also LLVM like in; # the problem reported for Julia in; # https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-882719292; # Only needed for Linux: Mac uses linker namespaces and Windows explicit export/import; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -Wl,-Bsymbolic""); ROOT_ADD_CXX_FLAG(CMAKE_CXX_FLAGS ""-fno-semantic-interposition""); endif(); set(CMAKE_VISIBILITY_INLINES_HIDDEN ""ON""). #--- Build LLVM/Clang with modules -----------------------------------------------------------------; if(cxxmodules); # LLVM knows how to configure its modules builds. We cannot just add the flags; # because the cxxmodules builds in llvm have different build dependency order.; string(REPLACE ""${ROOT_CXXMODULES_CXXFLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${ROOT_CXXMODULES_CFLAGS}"" """" CMAKE_C_FLAGS ${CMAKE_C_FLAGS}); if(libcxx); # FIXME: We cannot build LLVM/clang with modules on with libstdc++, yet.; # FIXME: We cannot build LLVM/clang with modules on with libc++, too.; #set (LLVM_ENABLE_MODULES ON CACHE BOOL ""Override the default LLVM_ENABLE_MODULES option value."" ); endif(libcxx); endif(cxxmodules). if(gcctoolchain); ROOT_ADD_CXX_FLAG(CMAKE_CXX_FLAGS --gcc-toolchain=${gcctoolchain}); endif(). # We will not fix llvm or clang.; string(REPLACE ""-Werror "" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ""); # Turn off coverage - we don't need this for llvm.; string(REPLACE ""${GCC_COVERAGE_COMPILE_FLAGS}"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""). if(LLVM_SHARED_LINKER_FLAGS); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${LLVM_SHARED_LINKER_FLAGS}""); endif(); if(LLVM_EXE_LINKER_F",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:9748,Integrability,message,message,9748,"_COVERAGE_COMPILE_FLAGS}"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""). if(LLVM_SHARED_LINKER_FLAGS); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${LLVM_SHARED_LINKER_FLAGS}""); endif(); if(LLVM_EXE_LINKER_FLAGS); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${LLVM_EXE_LINKER_FLAGS}""); endif(). # Explicitly disable -Wmisleading-indentation for GCC: Some LLVM source files; # are too large.; set(cxx_flags_prev ${CMAKE_CXX_FLAGS}); if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-misleading-indentation""); endif(). if(builtin_llvm); # Since debug builds of LLVM are quite large, we want to be able; # to control the build types of ROOT and LLVM independently. The; # logic below is to make that possible. LLVM is built in Release; # mode unless a different build type is chosen via LLVM_BUILD_TYPE. if(NOT DEFINED LLVM_BUILD_TYPE); set(LLVM_BUILD_TYPE Release CACHE STRING ""Build type used for LLVM""); endif(). message(STATUS ""Building LLVM in '${LLVM_BUILD_TYPE}' mode.""). if(NOT DEFINED LLVM_ENABLE_ASSERTIONS); if(CMAKE_BUILD_TYPE MATCHES ""Debug""; OR LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES}); string(TOUPPER ${CONFIG} CONFIG); set(CMAKE_C_FLAGS_${CONFIG} ${LLVM_C_FLAGS}); set(CMAKE_CXX_FLAGS_${CONFIG} ${LLVM_CXX_FLAGS}); endforeach(); endif(); elseif(NOT LLVM_BUILD_TYPE STREQUAL CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE $",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:12654,Integrability,message,message,12654,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13139,Integrability,message,message,13139,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13180,Integrability,message,message,13180,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13265,Integrability,message,message,13265,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13679,Integrability,message,message,13679,"et(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH ""Path to llvm/lib""); set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH ""Path to llvm/include""); set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH ""Path to LLVM build tree""). set(LLVM_DIR ""${LLVM_BINARY_DIR}""). # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.; # CMake assumes slashes as PATH.; file(TO_CMAKE_PATH ${LLVM_CONFIG_CMAKE_PATH} LLVM_CMAKE_PATH). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); else(); ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:14710,Integrability,message,message,14710,"vm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH ""Path to llvm/lib""); set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH ""Path to llvm/include""); set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH ""Path to LLVM build tree""). set(LLVM_DIR ""${LLVM_BINARY_DIR}""). # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.; # CMake assumes slashes as PATH.; file(TO_CMAKE_PATH ${LLVM_CONFIG_CMAKE_PATH} LLVM_CMAKE_PATH). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); else(); message(FATAL_ERROR ""Not found: ${LLVMCONFIG_FILE}""); endif(); # We already FORCE-d the CACHE value to OFF, but LLVMConfig.cmake might have; # set the variable to ON again...; set(LLVM_ENABLE_WARNINGS OFF). # They are used as destination of target generators.; # We try to keep these locations consistent with the builtin_llvm. This is important; # for the LLVMRES target.; # FIXME: In longer term, we do not really need this and may want to adjust LLVMRES.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib). if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_HOST_TOOLC",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:16081,Integrability,message,message,16081,"TIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib). if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF); option(CLANG_ENABLE_BOOTSTRAP ""Generate the clang bootstrap target"" OFF). include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""); if (${PACKAGE_VERSION} MATCHES ""${ROOT_LLVM_VERSION_REQUIRED_MAJOR}\\.1(|\\.[0-9]+)""); message(STATUS ""Using LLVM external library - ${PACKAGE_VERSION}""); else(); message(FATAL_ERROR ""LLVM version ${LLVM_PACKAGE_VERSION} different from ROOT supported, please try ${ROOT_LLVM_VERSION_REQUIRED_MAJOR}.1.x""); endif(). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_BINARY_DIR}/include"" ""${LLVM_MAIN_INCLUDE_DIR}""); link_directories(""${LLVM_LIBRARY_DIR}""). # set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); # set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); # set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS OR clingtest); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(); set(ROOT_LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/l",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:16157,Integrability,message,message,16157,"TIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib). if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF); option(CLANG_ENABLE_BOOTSTRAP ""Generate the clang bootstrap target"" OFF). include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""); if (${PACKAGE_VERSION} MATCHES ""${ROOT_LLVM_VERSION_REQUIRED_MAJOR}\\.1(|\\.[0-9]+)""); message(STATUS ""Using LLVM external library - ${PACKAGE_VERSION}""); else(); message(FATAL_ERROR ""LLVM version ${LLVM_PACKAGE_VERSION} different from ROOT supported, please try ${ROOT_LLVM_VERSION_REQUIRED_MAJOR}.1.x""); endif(). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_BINARY_DIR}/include"" ""${LLVM_MAIN_INCLUDE_DIR}""); link_directories(""${LLVM_LIBRARY_DIR}""). # set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); # set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); # set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS OR clingtest); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(); set(ROOT_LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/l",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:21188,Integrability,rout,routine,21188,"rpreter/llvm-project/clang/include; ${Clang_DIR}/include; CACHE STRING ""Clang include directories.""); else(); set(Clang_DIR ""${LLVM_BINARY_DIR}/lib/cmake/clang/""); endif(). # Reset the compiler flags after compiling LLVM and Clang; set(CMAKE_CXX_FLAGS ${cxx_flags_prev}); unset(cxx_flags_prev). add_custom_target(CLING); set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"); if (builtin_cling). # Extract the compilation flags from LLVM and make them public to the; # rest of ROOT so that we can compile against LLVM with matching flags. # LLVM doesn't really give us a API to get this with an in-source build; # so we just use the normal way of doing this and read the llvm directory; # compilation properties.; if (builtin_llvm); get_directory_property(LLVM_DEFS DIRECTORY llvm-project/llvm COMPILE_DEFINITIONS); # Turns DEFINE1;DEFINE2 to -DDEFINE1 -DDEFINE2; string (REPLACE "";"" "" -D"" LLVM_DEFS "";${LLVM_DEFS}""); endif(). # FIXME: Reduce the usage of CLING_CXXFLAGS by adding a cmake routine in; # RootMacros.cmake for all cling-dependent libraries; if(MSVC); set(CLING_CXXFLAGS "" ${LLVM_DEFS} -DNOMINMAX -D_XKEYCHECK_H""); else(); # FIXME: Work hard to remove -Wno-shadow and -Wno-unused-parameter; set(CLING_CXXFLAGS "" ${LLVM_DEFS} -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations""); endif(). # Set the flags in the parent scope for the rest of the cling-based libraries in ROOT.; set(CLING_CXXFLAGS ${CLING_CXXFLAGS} PARENT_SCOPE). string(APPEND CMAKE_CXX_FLAGS ${CLING_CXXFLAGS}); if (LLVM_ENABLE_PIC AND NOT MSVC); # FIXME: LLVM_ENABLE_PIC is ON by default, however not propagated to cling.; # FIXME: fPIC is required by the linker for libCling. Can we do that using; # cmake: set_property(TARGET clingInterpreter PROPERTY POSITION_INDEPENDENT_CODE ON)?; string(APPEND CMAKE_CXX_FLAGS "" -fPIC""); string(APPEND CMAKE_C_FLAGS "" -fPIC""); endif(LLVM_ENABLE_PIC AND NOT MSVC); # Avoid cling being installed under RO",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:21233,Integrability,depend,dependent,21233,"ling LLVM and Clang; set(CMAKE_CXX_FLAGS ${cxx_flags_prev}); unset(cxx_flags_prev). add_custom_target(CLING); set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"); if (builtin_cling). # Extract the compilation flags from LLVM and make them public to the; # rest of ROOT so that we can compile against LLVM with matching flags. # LLVM doesn't really give us a API to get this with an in-source build; # so we just use the normal way of doing this and read the llvm directory; # compilation properties.; if (builtin_llvm); get_directory_property(LLVM_DEFS DIRECTORY llvm-project/llvm COMPILE_DEFINITIONS); # Turns DEFINE1;DEFINE2 to -DDEFINE1 -DDEFINE2; string (REPLACE "";"" "" -D"" LLVM_DEFS "";${LLVM_DEFS}""); endif(). # FIXME: Reduce the usage of CLING_CXXFLAGS by adding a cmake routine in; # RootMacros.cmake for all cling-dependent libraries; if(MSVC); set(CLING_CXXFLAGS "" ${LLVM_DEFS} -DNOMINMAX -D_XKEYCHECK_H""); else(); # FIXME: Work hard to remove -Wno-shadow and -Wno-unused-parameter; set(CLING_CXXFLAGS "" ${LLVM_DEFS} -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations""); endif(). # Set the flags in the parent scope for the rest of the cling-based libraries in ROOT.; set(CLING_CXXFLAGS ${CLING_CXXFLAGS} PARENT_SCOPE). string(APPEND CMAKE_CXX_FLAGS ${CLING_CXXFLAGS}); if (LLVM_ENABLE_PIC AND NOT MSVC); # FIXME: LLVM_ENABLE_PIC is ON by default, however not propagated to cling.; # FIXME: fPIC is required by the linker for libCling. Can we do that using; # cmake: set_property(TARGET clingInterpreter PROPERTY POSITION_INDEPENDENT_CODE ON)?; string(APPEND CMAKE_CXX_FLAGS "" -fPIC""); string(APPEND CMAKE_C_FLAGS "" -fPIC""); endif(LLVM_ENABLE_PIC AND NOT MSVC); # Avoid cling being installed under ROOTSYS/include.; set(CLING_ROOT_BUILD ON); add_subdirectory(cling EXCLUDE_FROM_ALL); add_dependencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:23145,Integrability,depend,dependencies,23145," installed under ROOTSYS/include.; set(CLING_ROOT_BUILD ON); add_subdirectory(cling EXCLUDE_FROM_ALL); add_dependencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/clang"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_lib",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:23191,Integrability,depend,dependencies,23191," installed under ROOTSYS/include.; set(CLING_ROOT_BUILD ON); add_subdirectory(cling EXCLUDE_FROM_ALL); add_dependencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/clang"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_lib",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:23251,Integrability,depend,dependencies,23251,"dencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/clang"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:23274,Integrability,depend,dependencies,23274,"dencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/clang"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:23296,Integrability,depend,dependencies,23296,"dencies(CLING ${CLING_LIBRARIES}). set(CLING_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/cling/include CACHE STRING """"). #---These are the libraries that we link ROOT with CLING---------------------------; if (builtin_llvm); add_dependencies(CLING intrinsics_gen); endif(); if (builtin_clang); add_dependencies(CLING clang-headers clang-resource-headers); # Windows (and some other LLVM setups) do not have that target available.; if (TARGET clang-cmake-exports); add_dependencies(CLING clang-cmake-exports); endif(); endif(); else(); set(Cling_DIR ${LLVM_BINARY_DIR}/lib/cmake/cling/); find_package(Cling REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/cling"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH); find_package(Clang REQUIRED CONFIG PATHS ${Cling_DIR} ""${Cling_DIR}/lib/cmake/clang"" ""${Cling_DIR}/cmake"" NO_DEFAULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:24207,Integrability,depend,dependencies,24207,"ULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without modifying the LLVM code----------; if(CMAKE_SYSTEM_NAME STREQUAL Darwin); get_target_property(__libs LLVMSupport INTERFACE_LINK_LIBRARIES); list(REMOVE_ITEM __libs atomic); set_target_properties(LLVMSupport PROPERTIES INTERFACE_LINK_LIBRARIES ""${__libs}""); endif(). #---Mark the LLVM/CLANG variables as advanced--------------------------------------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if(var MATCHES ""^(CLANG|LLVM|CLING)_""); mark_as_advanced(FORCE ${var}); endif(); endforeach(); mark_as_advanced(FORCE BUG_REPORT_URL BUILD_CLANG_FORMAT_VS_PLUGIN BUILD_SHARED_LIBS BUILD_TESTING; C_INCLUDE_DIRS DEFAULT_SYSROOT FFI_INCLUDE_DIR FFI_LIBRARY_DIR; GCC_INSTALL_PREFIX LIBCLANG_BUILD_STATIC TOOL_INFO_PLIST); mark_as_advanced(CLEAR LLVM_ENABLE_ASSERTIONS LLVM_BUILD_TYPE); ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:4546,Modifiability,config,configuration,4546,"lvm-project/llvm/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol; # 'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm-project/llvm/lib/libclingUtils.a(AST.cpp.o)'; # means the weak symbol cannot be overridden at runtime. This was likely caused by different; # translation units being compiled with different visibility settings.; # There is no apparent reason why this is happening and it looks like a compiler bug,; # so let's just disable the part of the code that provides this symbol.; # As it's in the validation part of LLVM and not in something that providing functionality,; # this shouldn't cause any problems.; # TODO: We maybe can remove this code once we upgrade to LLVM>=6.0 as this symbol; # was introduced quite recently into LLVM 5.0 and probably is also causing problems; # for some other projects.; set(LLVM_ENABLE_ABI_BREAKING_CHECKS OFF CACHE BOOL """" FORCE); set(LLVM_ABI_BREAKING_CHECKS FORCE_OFF CACHE BOOL """" FORCE). set(CMAKE_REQUIRED_QUIET 1) # Make the configuration of LLVM quiet. if(ROOT_ARCHITECTURE MATCHES arm64); set(ROOT_CLING_TARGET ""AArch64""); elseif(ROOT_ARCHITECTURE MATCHES arm); set(ROOT_CLING_TARGET ""ARM""); elseif(ROOT_ARCHITECTURE MATCHES ppc64); set(ROOT_CLING_TARGET ""PowerPC""); elseif(ROOT_ARCHITECTURE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(ROOT_CLING_TARGET ""X86""); else(); set(ROOT_CLING_TARGET ""all""); endif(). if(NOT ""${ROOT_CLING_TARGET}"" STREQUAL ""all""); string(APPEND ROOT_CLING_TARGET "";NVPTX""); endif(). if(MSVC); # FIXME: since Visual Studio v16.4.0 the /O2 optimization flag make many (25%) of the tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang; if (MSVC_VERSION GREATER_EQUAL 1924 ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:6570,Modifiability,variab,variable,6570,"ang; if (MSVC_VERSION GREATER_EQUAL 1924 AND MSVC_VERSION LESS 1929); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin/cling); endif(); ROOT_ADD_TEST(clingtest-check-cling COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target check-cling; ENVIRONMENT ${CLINGTEST_EXECUTABLE}); else(); #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------; set(CMAKE_CXX_VISIBILITY_PRESET hidden); set(CMAKE_C_VISIBILITY_PRESET hidden); endif(); if (NOT MSVC AND NOT APPLE); # Requires the linker to resolve the symbol internally and prevents; # conflicts when linked with another software using also LLVM like in; # the problem reported for Julia in; # https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-8827",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:7911,Modifiability,config,configure,7911,"IR}/bin/cling); endif(); ROOT_ADD_TEST(clingtest-check-cling COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target check-cling; ENVIRONMENT ${CLINGTEST_EXECUTABLE}); else(); #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------; set(CMAKE_CXX_VISIBILITY_PRESET hidden); set(CMAKE_C_VISIBILITY_PRESET hidden); endif(); if (NOT MSVC AND NOT APPLE); # Requires the linker to resolve the symbol internally and prevents; # conflicts when linked with another software using also LLVM like in; # the problem reported for Julia in; # https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-882719292; # Only needed for Linux: Mac uses linker namespaces and Windows explicit export/import; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -Wl,-Bsymbolic""); ROOT_ADD_CXX_FLAG(CMAKE_CXX_FLAGS ""-fno-semantic-interposition""); endif(); set(CMAKE_VISIBILITY_INLINES_HIDDEN ""ON""). #--- Build LLVM/Clang with modules -----------------------------------------------------------------; if(cxxmodules); # LLVM knows how to configure its modules builds. We cannot just add the flags; # because the cxxmodules builds in llvm have different build dependency order.; string(REPLACE ""${ROOT_CXXMODULES_CXXFLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${ROOT_CXXMODULES_CFLAGS}"" """" CMAKE_C_FLAGS ${CMAKE_C_FLAGS}); if(libcxx); # FIXME: We cannot build LLVM/clang with modules on with libstdc++, yet.; # FIXME: We cannot build LLVM/clang with modules on with libc++, too.; #set (LLVM_ENABLE_MODULES ON CACHE BOOL ""Override the default LLVM_ENABLE_MODULES option value."" ); endif(libcxx); endif(cxxmodules). if(gcctoolchain); ROOT_ADD_CXX_FLAG(CMAKE_CXX_FLAGS --gcc-toolchain=${gcctoolchain}); endif(). # We will not fix llvm or clang.; string(REPLACE ""-Werror "" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ""); # Turn off coverage - we don't need this for llvm.; string(REPLACE ""${GCC_COVERAGE_COMPILE_FLAGS}"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""). if(LLVM_SHA",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:10045,Modifiability,config,configuration,10045,"-indentation for GCC: Some LLVM source files; # are too large.; set(cxx_flags_prev ${CMAKE_CXX_FLAGS}); if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-misleading-indentation""); endif(). if(builtin_llvm); # Since debug builds of LLVM are quite large, we want to be able; # to control the build types of ROOT and LLVM independently. The; # logic below is to make that possible. LLVM is built in Release; # mode unless a different build type is chosen via LLVM_BUILD_TYPE. if(NOT DEFINED LLVM_BUILD_TYPE); set(LLVM_BUILD_TYPE Release CACHE STRING ""Build type used for LLVM""); endif(). message(STATUS ""Building LLVM in '${LLVM_BUILD_TYPE}' mode.""). if(NOT DEFINED LLVM_ENABLE_ASSERTIONS); if(CMAKE_BUILD_TYPE MATCHES ""Debug""; OR LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES}); string(TOUPPER ${CONFIG} CONFIG); set(CMAKE_C_FLAGS_${CONFIG} ${LLVM_C_FLAGS}); set(CMAKE_CXX_FLAGS_${CONFIG} ${LLVM_CXX_FLAGS}); endforeach(); endif(); elseif(NOT LLVM_BUILD_TYPE STREQUAL CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE ${LLVM_BUILD_TYPE}); endif(). set(BUILD_SHARED_LIBS FALSE). #---Remove the inherited include_directories(); set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES """"). set(LLVM_ENABLE_PROJECTS ""clang"" CACHE STRING """"). #---Add the sub-directory excluding all the targets from all-----------------------------------------; if(CMAKE_GENERATOR MATCHES ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:10139,Modifiability,config,configurations,10139,"-indentation for GCC: Some LLVM source files; # are too large.; set(cxx_flags_prev ${CMAKE_CXX_FLAGS}); if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-misleading-indentation""); endif(). if(builtin_llvm); # Since debug builds of LLVM are quite large, we want to be able; # to control the build types of ROOT and LLVM independently. The; # logic below is to make that possible. LLVM is built in Release; # mode unless a different build type is chosen via LLVM_BUILD_TYPE. if(NOT DEFINED LLVM_BUILD_TYPE); set(LLVM_BUILD_TYPE Release CACHE STRING ""Build type used for LLVM""); endif(). message(STATUS ""Building LLVM in '${LLVM_BUILD_TYPE}' mode.""). if(NOT DEFINED LLVM_ENABLE_ASSERTIONS); if(CMAKE_BUILD_TYPE MATCHES ""Debug""; OR LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES}); string(TOUPPER ${CONFIG} CONFIG); set(CMAKE_C_FLAGS_${CONFIG} ${LLVM_C_FLAGS}); set(CMAKE_CXX_FLAGS_${CONFIG} ${LLVM_CXX_FLAGS}); endforeach(); endif(); elseif(NOT LLVM_BUILD_TYPE STREQUAL CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE ${LLVM_BUILD_TYPE}); endif(). set(BUILD_SHARED_LIBS FALSE). #---Remove the inherited include_directories(); set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES """"). set(LLVM_ENABLE_PROJECTS ""clang"" CACHE STRING """"). #---Add the sub-directory excluding all the targets from all-----------------------------------------; if(CMAKE_GENERATOR MATCHES ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:10851,Modifiability,inherit,inherited,10851,"R LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES}); string(TOUPPER ${CONFIG} CONFIG); set(CMAKE_C_FLAGS_${CONFIG} ${LLVM_C_FLAGS}); set(CMAKE_CXX_FLAGS_${CONFIG} ${LLVM_CXX_FLAGS}); endforeach(); endif(); elseif(NOT LLVM_BUILD_TYPE STREQUAL CMAKE_BUILD_TYPE); set(CMAKE_BUILD_TYPE ${LLVM_BUILD_TYPE}); endif(). set(BUILD_SHARED_LIBS FALSE). #---Remove the inherited include_directories(); set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES """"). set(LLVM_ENABLE_PROJECTS ""clang"" CACHE STRING """"). #---Add the sub-directory excluding all the targets from all-----------------------------------------; if(CMAKE_GENERATOR MATCHES ""Xcode""); add_subdirectory(llvm-project/llvm); else(); add_subdirectory(llvm-project/llvm EXCLUDE_FROM_ALL); endif(). set(LLVM_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/interpreter/llvm-project/llvm/include; ${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm/include; CACHE STRING ""LLVM include directories.""; ); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/cmake/modules""); #---Set into parent scope LLVM_VERSION_MAJOR --------------------------------------------------------; get_directory_property(_llvm_version_major DIRECTORY llvm-project/llvm DEFINITION LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR ""${_llvm_version_major}"" PARENT_SCOPE); #---Forward LLVM_TARGET_TRIPLE for check-cling----------------------------------------------------",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:12511,Modifiability,config,config,12511,"TH ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/cmake/modules""); #---Set into parent scope LLVM_VERSION_MAJOR --------------------------------------------------------; get_directory_property(_llvm_version_major DIRECTORY llvm-project/llvm DEFINITION LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR ""${_llvm_version_major}"" PARENT_SCOPE); #---Forward LLVM_TARGET_TRIPLE for check-cling-------------------------------------------------------; get_directory_property(LLVM_TARGET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBR",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:12577,Modifiability,config,config,12577,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:12627,Modifiability,config,config,12627,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13206,Modifiability,config,config,13206,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13291,Modifiability,config,config,13291,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13878,Modifiability,config,config,13878,"""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH ""Path to llvm/lib""); set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH ""Path to llvm/include""); set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH ""Path to LLVM build tree""). set(LLVM_DIR ""${LLVM_BINARY_DIR}""). # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.; # CMake assumes slashes as PATH.; file(TO_CMAKE_PATH ${LLVM_CONFIG_CMAKE_PATH} LLVM_CMAKE_PATH). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); else(); message(FATAL_ERROR ""Not found: ${LLVMCONFIG_FILE}""); endif(); # We already FORCE-d the CACHE value to OFF",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:14861,Modifiability,variab,variable,14861,"s should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH ""Path to llvm/lib""); set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH ""Path to llvm/include""); set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH ""Path to LLVM build tree""). set(LLVM_DIR ""${LLVM_BINARY_DIR}""). # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.; # CMake assumes slashes as PATH.; file(TO_CMAKE_PATH ${LLVM_CONFIG_CMAKE_PATH} LLVM_CMAKE_PATH). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); else(); message(FATAL_ERROR ""Not found: ${LLVMCONFIG_FILE}""); endif(); # We already FORCE-d the CACHE value to OFF, but LLVMConfig.cmake might have; # set the variable to ON again...; set(LLVM_ENABLE_WARNINGS OFF). # They are used as destination of target generators.; # We try to keep these locations consistent with the builtin_llvm. This is important; # for the LLVMRES target.; # FIXME: In longer term, we do not really need this and may want to adjust LLVMRES.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib). if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF); option(CLANG_ENABLE_BOOTSTRAP ""Generate the clang bootstrap target"" OFF). in",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:24552,Modifiability,variab,variables,24552,"ULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without modifying the LLVM code----------; if(CMAKE_SYSTEM_NAME STREQUAL Darwin); get_target_property(__libs LLVMSupport INTERFACE_LINK_LIBRARIES); list(REMOVE_ITEM __libs atomic); set_target_properties(LLVMSupport PROPERTIES INTERFACE_LINK_LIBRARIES ""${__libs}""); endif(). #---Mark the LLVM/CLANG variables as advanced--------------------------------------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if(var MATCHES ""^(CLANG|LLVM|CLING)_""); mark_as_advanced(FORCE ${var}); endif(); endforeach(); mark_as_advanced(FORCE BUG_REPORT_URL BUILD_CLANG_FORMAT_VS_PLUGIN BUILD_SHARED_LIBS BUILD_TESTING; C_INCLUDE_DIRS DEFAULT_SYSROOT FFI_INCLUDE_DIR FFI_LIBRARY_DIR; GCC_INSTALL_PREFIX LIBCLANG_BUILD_STATIC TOOL_INFO_PLIST); mark_as_advanced(CLEAR LLVM_ENABLE_ASSERTIONS LLVM_BUILD_TYPE); ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:24650,Modifiability,variab,variables,24650,"ULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without modifying the LLVM code----------; if(CMAKE_SYSTEM_NAME STREQUAL Darwin); get_target_property(__libs LLVMSupport INTERFACE_LINK_LIBRARIES); list(REMOVE_ITEM __libs atomic); set_target_properties(LLVMSupport PROPERTIES INTERFACE_LINK_LIBRARIES ""${__libs}""); endif(). #---Mark the LLVM/CLANG variables as advanced--------------------------------------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if(var MATCHES ""^(CLANG|LLVM|CLING)_""); mark_as_advanced(FORCE ${var}); endif(); endforeach(); mark_as_advanced(FORCE BUG_REPORT_URL BUILD_CLANG_FORMAT_VS_PLUGIN BUILD_SHARED_LIBS BUILD_TESTING; C_INCLUDE_DIRS DEFAULT_SYSROOT FFI_INCLUDE_DIR FFI_LIBRARY_DIR; GCC_INSTALL_PREFIX LIBCLANG_BUILD_STATIC TOOL_INFO_PLIST); mark_as_advanced(CLEAR LLVM_ENABLE_ASSERTIONS LLVM_BUILD_TYPE); ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:24692,Modifiability,variab,variables,24692,"ULT_PATH). # We need to consider not just the direct link dependencies, but also the; # transitive link dependencies. Do this by starting with the set of direct; # dependencies, then the dependencies of those dependencies, and so on.; set(new_libs ""clingMetaProcessor""); set(link_libs ${new_libs}); while(NOT ""${new_libs}"" STREQUAL """"); foreach(lib ${new_libs}); if(TARGET ${lib}); get_target_property(lib_type ${lib} TYPE); if(""${lib_type}"" STREQUAL ""STATIC_LIBRARY""); list(APPEND static_libs ${lib}); else(); list(APPEND other_libs ${lib}); endif(); get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES); if (NOT transitive_libs); continue(); endif(); foreach(transitive_lib ${transitive_libs}); list(FIND link_libs ${transitive_lib} idx); #if(TARGET ${transitive_lib} AND idx EQUAL -1); if(idx EQUAL -1); list(APPEND newer_libs ${transitive_lib}); list(APPEND link_libs ${transitive_lib}); endif(); endforeach(transitive_lib); endif(); endforeach(lib); set(new_libs ${newer_libs}); set(newer_libs """"); endwhile(); set(CLING_DEPEND_LIBS ${link_libs} CACHE STRING """"); endif(builtin_cling). #---Avoid to dependencies to system (e.g. atomic) libraries without modifying the LLVM code----------; if(CMAKE_SYSTEM_NAME STREQUAL Darwin); get_target_property(__libs LLVMSupport INTERFACE_LINK_LIBRARIES); list(REMOVE_ITEM __libs atomic); set_target_properties(LLVMSupport PROPERTIES INTERFACE_LINK_LIBRARIES ""${__libs}""); endif(). #---Mark the LLVM/CLANG variables as advanced--------------------------------------------------------; get_cmake_property(variables CACHE_VARIABLES); foreach(var ${variables}); if(var MATCHES ""^(CLANG|LLVM|CLING)_""); mark_as_advanced(FORCE ${var}); endif(); endforeach(); mark_as_advanced(FORCE BUG_REPORT_URL BUILD_CLANG_FORMAT_VS_PLUGIN BUILD_SHARED_LIBS BUILD_TESTING; C_INCLUDE_DIRS DEFAULT_SYSROOT FFI_INCLUDE_DIR FFI_LIBRARY_DIR; GCC_INSTALL_PREFIX LIBCLANG_BUILD_STATIC TOOL_INFO_PLIST); mark_as_advanced(CLEAR LLVM_ENABLE_ASSERTIONS LLVM_BUILD_TYPE); ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:5390,Performance,optimiz,optimization,5390,"RE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(ROOT_CLING_TARGET ""X86""); else(); set(ROOT_CLING_TARGET ""all""); endif(). if(NOT ""${ROOT_CLING_TARGET}"" STREQUAL ""all""); string(APPEND ROOT_CLING_TARGET "";NVPTX""); endif(). if(MSVC); # FIXME: since Visual Studio v16.4.0 the /O2 optimization flag make many (25%) of the tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang; if (MSVC_VERSION GREATER_EQUAL 1924 AND MSVC_VERSION LESS 1929); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BIN",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:19407,Safety,avoid,avoid,19407,"SVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""); set(LIT_COMMAND ""${LLVM_LIT}"" CACHE STRING ""Path to the LLVM LIT.""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set(LLVM_INCLUDE_DIRS ${LLVM_MAIN_INCLUDE_DIR}; CACHE STRING ""System LLVM include directories.""; ). # We checked above that LLVM_VERSION is what we require in ROOT_LLVM_VERSION_REQUIRED_MAJOR.; # To simplify code, just forward that requirement to the rest of ROOT, for example to; # construct the resource directory in core/clingutils.; set(LLVM_VERSION_MAJOR ${ROOT_LLVM_VERSION_REQUIRED_MAJOR} PARENT_SCOPE). # We are in the case of NOT builtin_llvm; if (builtin_clang); # remove clang-cpp from CLANG_LINKS_TO_CREATE to avoid clashes with; # install-clang-cpp target defined by LLVM's cmake module; set(CLANG_LINKS_TO_CREATE clang++ clang-cl). # Disable linking against shared LLVM; set(LLVM_LINK_LLVM_DYLIB OFF). add_subdirectory(llvm-project/clang EXCLUDE_FROM_ALL); endif(builtin_clang). set( CLANG_BUILT_STANDALONE 1 ); set(BACKEND_PACKAGE_STRING ""LLVM ${LLVM_PACKAGE_VERSION}""); endif(builtin_llvm). if (builtin_clang); if (builtin_llvm); # For builtin LLVM this is set in interpreter/llvm-project/llvm/CMakeLists.txt; set(Clang_DIR ""${LLVM_BINARY_DIR}/tools/clang/""); else(); set(Clang_DIR ""${CMAKE_BINARY_DIR}/interpreter/llvm-project/clang/""); set(Clang_Config_ExtraPathHints ""${Clang_DIR}cmake/modules/CMakeFiles""); endif(); set(CLANG_INCLUDE_DIRS; ${CMAKE_SOURCE_DIR}/interpreter/llvm-project/clang/include; ${Clang_DIR}/include; CACHE STRING ""Clang include directories.""); else(); set(Clang_DIR ""${LLVM_BINARY_DIR}/lib/cmake/clang/""); endif(). # Reset the compiler flags after compiling LLVM and Clang; set(CMAKE_CX",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:2913,Security,access,access,2913,"D OFF CACHE BOOL """"); set(CLANG_TOOL_LIBCLANG_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_BUILD_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_VIEW_BUILD OFF CACHE BOOL """"); set(LLVM_BUILD_TOOLS OFF CACHE BOOL """"); set(LLVM_TOOL_LLVM_AR_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD OFF CACHE BOOL """"); set(LLVM_FORCE_USE_OLD_TOOLCHAIN ON CACHE BOOL """"). # Prevent Clang from finding CUDA just to determine the architecture for OpenMP; # offloading, which we are not interested in. If the CUDA package was already; # found before (because the user turned on cuda or tmva-gpu), this will not have; # an effect, which is fine.; # (Note that the option is very counter-intuitive: We turn *on* disabling it...); set(CMAKE_DISABLE_FIND_PACKAGE_CUDA ON). # will be set again in case NOT builtin_llvm; set(LLVM_DIR ""${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm""); if (clad); set(CLING_BUILD_PLUGINS ON); endif(). # We only use llvm/clang through TCling which is (with the help of core/meta) already taking a lock; # to serialize access to llvm. We can later review how to make this finer grained by using llvm's own locking; # mechanism.; set(LLVM_ENABLE_THREADS OFF CACHE BOOL """"). # The llvm::ReverseIterate<bool>::value symbol from llvm's SmallPtrSet.h; # somehow lands in our cling libraries on OS X and doesn't get hidden; # by visibility-inlines-hidden, so we suddenly have a global weak symbol; # from LLVM in cling which our visiblity=hidden compiled LLVM libraries; # reference. This is triggering some build system warnings like this:; # ld: warning: direct access in function '(anonymous namespace)::NewGVN::runGVN()'; # from file 'interpreter/llvm-project/llvm/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol; # 'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm-project/llvm/lib/libclingUtils.a(AST.cpp.o)'; # means the weak symbol cannot be overridden at runtime. This was likely caused by different; # translation units being compiled wi",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:3452,Security,access,access,3452,"t have; # an effect, which is fine.; # (Note that the option is very counter-intuitive: We turn *on* disabling it...); set(CMAKE_DISABLE_FIND_PACKAGE_CUDA ON). # will be set again in case NOT builtin_llvm; set(LLVM_DIR ""${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm""); if (clad); set(CLING_BUILD_PLUGINS ON); endif(). # We only use llvm/clang through TCling which is (with the help of core/meta) already taking a lock; # to serialize access to llvm. We can later review how to make this finer grained by using llvm's own locking; # mechanism.; set(LLVM_ENABLE_THREADS OFF CACHE BOOL """"). # The llvm::ReverseIterate<bool>::value symbol from llvm's SmallPtrSet.h; # somehow lands in our cling libraries on OS X and doesn't get hidden; # by visibility-inlines-hidden, so we suddenly have a global weak symbol; # from LLVM in cling which our visiblity=hidden compiled LLVM libraries; # reference. This is triggering some build system warnings like this:; # ld: warning: direct access in function '(anonymous namespace)::NewGVN::runGVN()'; # from file 'interpreter/llvm-project/llvm/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol; # 'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm-project/llvm/lib/libclingUtils.a(AST.cpp.o)'; # means the weak symbol cannot be overridden at runtime. This was likely caused by different; # translation units being compiled with different visibility settings.; # There is no apparent reason why this is happening and it looks like a compiler bug,; # so let's just disable the part of the code that provides this symbol.; # As it's in the validation part of LLVM and not in something that providing functionality,; # this shouldn't cause any problems.; # TODO: We maybe can remove this code once we upgrade to LLVM>=6.0 as this symbol; # was introduced quite recently into LLVM 5.0 and probably is also causing problems; # for some other projects.; set(LLVM_ENABLE_ABI_BREAKING_CHECKS OFF CACHE BOOL """" FORCE); set(LLVM_ABI_BREAKING_CHECKS ",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:4074,Security,validat,validation,4074,"lvm's SmallPtrSet.h; # somehow lands in our cling libraries on OS X and doesn't get hidden; # by visibility-inlines-hidden, so we suddenly have a global weak symbol; # from LLVM in cling which our visiblity=hidden compiled LLVM libraries; # reference. This is triggering some build system warnings like this:; # ld: warning: direct access in function '(anonymous namespace)::NewGVN::runGVN()'; # from file 'interpreter/llvm-project/llvm/lib/libLLVMScalarOpts.a(NewGVN.cpp.o)' to global weak symbol; # 'llvm::ReverseIterate<bool>::value' from file 'interpreter/llvm-project/llvm/lib/libclingUtils.a(AST.cpp.o)'; # means the weak symbol cannot be overridden at runtime. This was likely caused by different; # translation units being compiled with different visibility settings.; # There is no apparent reason why this is happening and it looks like a compiler bug,; # so let's just disable the part of the code that provides this symbol.; # As it's in the validation part of LLVM and not in something that providing functionality,; # this shouldn't cause any problems.; # TODO: We maybe can remove this code once we upgrade to LLVM>=6.0 as this symbol; # was introduced quite recently into LLVM 5.0 and probably is also causing problems; # for some other projects.; set(LLVM_ENABLE_ABI_BREAKING_CHECKS OFF CACHE BOOL """" FORCE); set(LLVM_ABI_BREAKING_CHECKS FORCE_OFF CACHE BOOL """" FORCE). set(CMAKE_REQUIRED_QUIET 1) # Make the configuration of LLVM quiet. if(ROOT_ARCHITECTURE MATCHES arm64); set(ROOT_CLING_TARGET ""AArch64""); elseif(ROOT_ARCHITECTURE MATCHES arm); set(ROOT_CLING_TARGET ""ARM""); elseif(ROOT_ARCHITECTURE MATCHES ppc64); set(ROOT_CLING_TARGET ""PowerPC""); elseif(ROOT_ARCHITECTURE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:5431,Testability,test,tests,5431,"RE MATCHES s390); set(ROOT_CLING_TARGET ""SystemZ""); elseif(ROOT_ARCHITECTURE MATCHES riscv64); set(ROOT_CLING_TARGET ""RISCV""); elseif(ROOT_ARCHITECTURE MATCHES freebsd OR ROOT_ARCHITECTURE MATCHES linux OR ROOT_ARCHITECTURE MATCHES macosx); set(ROOT_CLING_TARGET ""X86""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(ROOT_CLING_TARGET ""X86""); else(); set(ROOT_CLING_TARGET ""all""); endif(). if(NOT ""${ROOT_CLING_TARGET}"" STREQUAL ""all""); string(APPEND ROOT_CLING_TARGET "";NVPTX""); endif(). if(MSVC); # FIXME: since Visual Studio v16.4.0 the /O2 optimization flag make many (25%) of the tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang; if (MSVC_VERSION GREATER_EQUAL 1924 AND MSVC_VERSION LESS 1929); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BIN",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:6401,Testability,test,test,6401,"ang; if (MSVC_VERSION GREATER_EQUAL 1924 AND MSVC_VERSION LESS 1929); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin/cling); endif(); ROOT_ADD_TEST(clingtest-check-cling COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target check-cling; ENVIRONMENT ${CLINGTEST_EXECUTABLE}); else(); #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------; set(CMAKE_CXX_VISIBILITY_PRESET hidden); set(CMAKE_C_VISIBILITY_PRESET hidden); endif(); if (NOT MSVC AND NOT APPLE); # Requires the linker to resolve the symbol internally and prevents; # conflicts when linked with another software using also LLVM like in; # the problem reported for Julia in; # https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-8827",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:6655,Testability,test,testsuite,6655," CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(); # replace dashes in the -EH* and -GR* flags with slashes (/EH* /GR*); string(REPLACE "" -EH"" "" /EH"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); string(REPLACE "" -GR"" "" /GR"" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); set(CMAKE_MODULE_LINKER_FLAGS ""${CMAKE_MODULE_LINKER_FLAGS} /ignore:4049,4206,4217,4221""); endif(). set(LLVM_TARGETS_TO_BUILD ${ROOT_CLING_TARGET} CACHE STRING ""Semicolon-separated list of targets to build, or \""all\"".""). if(clingtest); message(""-- cling test suite enabled: llvm / clang symbols in libCling will be visible!""); set(CLING_INCLUDE_TESTS ON CACHE BOOL """" FORCE); # The path to cling passed through environment variable only relevant when building; # against external llvm. In that case, cling's testsuite cannot deduce the binary; # of cling relatively to the llvm tools folder.; if (NOT builtin_llvm); set(CLINGTEST_EXECUTABLE CLING=${CMAKE_CURRENT_BINARY_DIR}/llvm-project/llvm/${CMAKE_CFG_INTDIR}/bin/cling); endif(); ROOT_ADD_TEST(clingtest-check-cling COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target check-cling; ENVIRONMENT ${CLINGTEST_EXECUTABLE}); else(); #---Build LLVM/Clang with symbol visibility=hidden--------------------------------------------------; set(CMAKE_CXX_VISIBILITY_PRESET hidden); set(CMAKE_C_VISIBILITY_PRESET hidden); endif(); if (NOT MSVC AND NOT APPLE); # Requires the linker to resolve the symbol internally and prevents; # conflicts when linked with another software using also LLVM like in; # the problem reported for Julia in; # https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-882719292; # Only needed for Linux: Mac uses linker namespaces and Windows explicit export/import; string(APPEND CMAKE_SHARED_LINKER_FLAGS "" -Wl,-Bsymbolic""); ROOT_ADD_CXX_FLAG(CMAKE_CXX_FL",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:9504,Testability,log,logic,9504,"ain); ROOT_ADD_CXX_FLAG(CMAKE_CXX_FLAGS --gcc-toolchain=${gcctoolchain}); endif(). # We will not fix llvm or clang.; string(REPLACE ""-Werror "" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ""); # Turn off coverage - we don't need this for llvm.; string(REPLACE ""${GCC_COVERAGE_COMPILE_FLAGS}"" """" CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS}""). if(LLVM_SHARED_LINKER_FLAGS); set(CMAKE_SHARED_LINKER_FLAGS ""${CMAKE_SHARED_LINKER_FLAGS} ${LLVM_SHARED_LINKER_FLAGS}""); endif(); if(LLVM_EXE_LINKER_FLAGS); set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} ${LLVM_EXE_LINKER_FLAGS}""); endif(). # Explicitly disable -Wmisleading-indentation for GCC: Some LLVM source files; # are too large.; set(cxx_flags_prev ${CMAKE_CXX_FLAGS}); if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-misleading-indentation""); endif(). if(builtin_llvm); # Since debug builds of LLVM are quite large, we want to be able; # to control the build types of ROOT and LLVM independently. The; # logic below is to make that possible. LLVM is built in Release; # mode unless a different build type is chosen via LLVM_BUILD_TYPE. if(NOT DEFINED LLVM_BUILD_TYPE); set(LLVM_BUILD_TYPE Release CACHE STRING ""Build type used for LLVM""); endif(). message(STATUS ""Building LLVM in '${LLVM_BUILD_TYPE}' mode.""). if(NOT DEFINED LLVM_ENABLE_ASSERTIONS); if(CMAKE_BUILD_TYPE MATCHES ""Debug""; OR LLVM_BUILD_TYPE MATCHES ""(Debug|RelWithDebInfo)""); set(LLVM_ENABLE_ASSERTIONS TRUE); else(); set(LLVM_ENABLE_ASSERTIONS FALSE); endif(); endif(). # Multi-configuration generators ignore CMAKE_BUILD_TYPE, so; # in that case we set the flags for all configurations to the; # flags of the build type assigned to LLVM_BUILD_TYPE. if(MSVC OR XCODE); string(TOUPPER ${LLVM_BUILD_TYPE} LLVM_BUILD_TYPE); set(LLVM_C_FLAGS ${CMAKE_C_FLAGS_${LLVM_BUILD_TYPE}}); set(LLVM_CXX_FLAGS ${CMAKE_CXX_FLAGS_${LLVM_BUILD_TYPE}}); # On Windows, use the same compiler flags than ROOT and not; # the other way around; if(NOT MSVC); foreach(CONFIG ${C",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:12747,Testability,assert,assertion-mode,12747,"ET_TRIPLE DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGET_TRIPLE); #---Get back the potentially updated LLVM_TARGETS_TO_BUILD (expanding all/host/Native)---------------; get_directory_property(LLVM_TARGETS_TO_BUILD DIRECTORY llvm-project/llvm DEFINITION LLVM_TARGETS_TO_BUILD). if(MSVC); if(CMAKE_GENERATOR MATCHES Ninja); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen.exe""); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/$<CONFIG>/bin/llvm-tblgen.exe""); endif(); else(); set(LLVM_TABLEGEN_EXE ""${LLVM_BINARY_DIR}/bin/llvm-tblgen""); endif(); else(); # Rely on llvm-config.; set(CONFIG_OUTPUT); find_program(LLVM_CONFIG NAMES ""llvm-config-${ROOT_LLVM_VERSION_REQUIRED_MAJOR}"" ""llvm-config""); if(LLVM_CONFIG); message(STATUS ""Found LLVM_CONFIG as ${LLVM_CONFIG}""); set(CONFIG_COMMAND ${LLVM_CONFIG}; ""--assertion-mode""; ""--bindir""; ""--libdir""; ""--includedir""; ""--prefix""; ""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:13832,Testability,assert,assertions,13832,"""--cmakedir""; ""--build-mode""; ""--version""); execute_process(; COMMAND ${CONFIG_COMMAND}; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE CONFIG_OUTPUT; ); if(NOT HAD_ERROR); string(REGEX REPLACE; ""[ \t]*[\r\n]+[ \t]*"" "";""; CONFIG_OUTPUT ${CONFIG_OUTPUT}); else(); string(REPLACE "";"" "" "" CONFIG_COMMAND_STR ""${CONFIG_COMMAND}""); message(STATUS ""${CONFIG_COMMAND_STR}""); message(FATAL_ERROR ""llvm-config failed with status ${HAD_ERROR}""); endif(); else(); message(FATAL_ERROR ""llvm-config not found -- ${LLVM_CONFIG}""); endif(). list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS); list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR); list(GET CONFIG_OUTPUT 2 LIBRARY_DIR); list(GET CONFIG_OUTPUT 3 INCLUDE_DIR); list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT); list(GET CONFIG_OUTPUT 5 LLVM_CONFIG_CMAKE_PATH); list(GET CONFIG_OUTPUT 6 LLVM_BUILD_MODE); list(GET CONFIG_OUTPUT 7 LLVM_VERSION). message(STATUS ""External llvm built in ${LLVM_BUILD_MODE} mode.""). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH ""Path to llvm/lib""); set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH ""Path to llvm/include""); set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH ""Path to LLVM build tree""). set(LLVM_DIR ""${LLVM_BINARY_DIR}""). # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.; # CMake assumes slashes as PATH.; file(TO_CMAKE_PATH ${LLVM_CONFIG_CMAKE_PATH} LLVM_CMAKE_PATH). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); else(); message(FATAL_ERROR ""Not found: ${LLVMCONFIG_FILE}""); endif(); # We already FORCE-d the CACHE value to OFF",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:17405,Testability,test,test,17405,"directories(""${LLVM_BINARY_DIR}/include"" ""${LLVM_MAIN_INCLUDE_DIR}""); link_directories(""${LLVM_LIBRARY_DIR}""). # set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); # set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); # set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS OR clingtest); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(); set(ROOT_LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/""); if(EXISTS ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; set(LLVM_LIT ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py CACHE PATH ""The location of the lit test runner.""); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); # We do not run llvm tests in ROOT.; #set(UNITTEST_DIR ${ROOT_LLVM_MAIN_SRC_DIR}/utils/unittest); #if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h; # AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; # AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); # add_subdirectory(${UNITTEST_DIR} utils/unittest); #endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_D",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:17762,Testability,test,tests,17762,"IRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); # set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS OR clingtest); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(); set(ROOT_LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/""); if(EXISTS ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; set(LLVM_LIT ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py CACHE PATH ""The location of the lit test runner.""); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); # We do not run llvm tests in ROOT.; #set(UNITTEST_DIR ${ROOT_LLVM_MAIN_SRC_DIR}/utils/unittest); #if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h; # AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; # AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); # add_subdirectory(${UNITTEST_DIR} utils/unittest); #endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""); set(LIT_COMMAND """,MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:2552,Usability,intuit,intuitive,2552," set(CLANG_TOOL_CLANG_IMPORT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_RENAME_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_ARCMT_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_C_INDEX_TEST_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_DIAGTOOL_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_LIBCLANG_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_BUILD_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_SCAN_VIEW_BUILD OFF CACHE BOOL """"); set(LLVM_BUILD_TOOLS OFF CACHE BOOL """"); set(LLVM_TOOL_LLVM_AR_BUILD OFF CACHE BOOL """"); set(CLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD OFF CACHE BOOL """"); set(LLVM_FORCE_USE_OLD_TOOLCHAIN ON CACHE BOOL """"). # Prevent Clang from finding CUDA just to determine the architecture for OpenMP; # offloading, which we are not interested in. If the CUDA package was already; # found before (because the user turned on cuda or tmva-gpu), this will not have; # an effect, which is fine.; # (Note that the option is very counter-intuitive: We turn *on* disabling it...); set(CMAKE_DISABLE_FIND_PACKAGE_CUDA ON). # will be set again in case NOT builtin_llvm; set(LLVM_DIR ""${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm""); if (clad); set(CLING_BUILD_PLUGINS ON); endif(). # We only use llvm/clang through TCling which is (with the help of core/meta) already taking a lock; # to serialize access to llvm. We can later review how to make this finer grained by using llvm's own locking; # mechanism.; set(LLVM_ENABLE_THREADS OFF CACHE BOOL """"). # The llvm::ReverseIterate<bool>::value symbol from llvm's SmallPtrSet.h; # somehow lands in our cling libraries on OS X and doesn't get hidden; # by visibility-inlines-hidden, so we suddenly have a global weak symbol; # from LLVM in cling which our visiblity=hidden compiled LLVM libraries; # reference. This is triggering some build system warnings like this:; # ld: warning: direct access in function '(anonymous namespace)::NewGVN::runGVN()'; # from file 'interpreter/llvm-projec",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:19084,Usability,simpl,simplify,19084,"program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""); set(LIT_COMMAND ""${LLVM_LIT}"" CACHE STRING ""Path to the LLVM LIT.""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set(LLVM_INCLUDE_DIRS ${LLVM_MAIN_INCLUDE_DIR}; CACHE STRING ""System LLVM include directories.""; ). # We checked above that LLVM_VERSION is what we require in ROOT_LLVM_VERSION_REQUIRED_MAJOR.; # To simplify code, just forward that requirement to the rest of ROOT, for example to; # construct the resource directory in core/clingutils.; set(LLVM_VERSION_MAJOR ${ROOT_LLVM_VERSION_REQUIRED_MAJOR} PARENT_SCOPE). # We are in the case of NOT builtin_llvm; if (builtin_clang); # remove clang-cpp from CLANG_LINKS_TO_CREATE to avoid clashes with; # install-clang-cpp target defined by LLVM's cmake module; set(CLANG_LINKS_TO_CREATE clang++ clang-cl). # Disable linking against shared LLVM; set(LLVM_LINK_LLVM_DYLIB OFF). add_subdirectory(llvm-project/clang EXCLUDE_FROM_ALL); endif(builtin_clang). set( CLANG_BUILT_STANDALONE 1 ); set(BACKEND_PACKAGE_STRING ""LLVM ${LLVM_PACKAGE_VERSION}""); endif(builtin_llvm). if (builtin_clang); if (builtin_llvm); # For builtin LLVM this is set in interpreter/llvm-project/llvm/CMakeLists.txt; set(Clang_DIR ""${LLVM_BINARY_DIR}/tools/clang/""); else(); set(Clang_DIR ""${CMAKE_BINARY_DIR}/interpreter/llvm-project/clang/""); set(Clang_Config_ExtraPathHints ""${Clang_DIR}cmake/modules/CMakeFiles""); endif(); set(CLANG_INCLUDE_DIRS; ${CM",MatchSource.DOCS,interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:2741,Deployability,install,install,2741,"----------------------------------------------------; generateHeader(hadd; ${CMAKE_SOURCE_DIR}/main/src/hadd-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/haddCommandLineOptionsHelp.h; ). if(fortran AND CMAKE_Fortran_COMPILER); ROOT_EXECUTABLE(g2root g2root.f LIBRARIES minicern); set_target_properties(g2root PROPERTIES COMPILE_FLAGS ""-w""); ROOT_EXECUTABLE(h2root h2root.cxx LIBRARIES Core RIO Net Hist Graf Graf3d Gpad Tree Matrix MathCore Thread minicern); endif(). file(GLOB utils RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} python/root*); foreach(rawUtilName ${utils}); get_filename_component(utilName ${rawUtilName} NAME); if(NOT WIN32); # We need the .py only on Windows; string(REPLACE "".py"" """" utilName ${utilName}); set(python python3); else(); set(python python); endif(); configure_file(${rawUtilName} ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName} @ONLY). install(FILES ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName}; DESTINATION ${CMAKE_INSTALL_BINDIR}; RENAME ${utilName}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; COMPONENT applications); endforeach(). install(FILES python/cmdLineUtils.py DESTINATION ${runtimedir}); if(IS_ABSOLUTE ${runtimedir}); set(absruntimedir ${runtimedir}); else(); set(absruntimedir \${CMAKE_INSTALL_PREFIX}/${runtimedir}); endif(); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); configure_file(python/cmdLineUtils.py ${localruntimedir}/cmdLineUtils.py @ONLY). set_source_files_properties(src/rootcling.cxx PROPERTIES; COMPILE_FLAGS ""${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_EXECUTABLE(rootcling src/rootcling.cxx LIBRARIES RIO Cling Core Rint). # rootcling includes the ROOT complex header which would build the complex; # dictionary with modules. To make sure that ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:3010,Deployability,install,install,3010,"addCommandLineOptionsHelp.h; ). if(fortran AND CMAKE_Fortran_COMPILER); ROOT_EXECUTABLE(g2root g2root.f LIBRARIES minicern); set_target_properties(g2root PROPERTIES COMPILE_FLAGS ""-w""); ROOT_EXECUTABLE(h2root h2root.cxx LIBRARIES Core RIO Net Hist Graf Graf3d Gpad Tree Matrix MathCore Thread minicern); endif(). file(GLOB utils RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} python/root*); foreach(rawUtilName ${utils}); get_filename_component(utilName ${rawUtilName} NAME); if(NOT WIN32); # We need the .py only on Windows; string(REPLACE "".py"" """" utilName ${utilName}); set(python python3); else(); set(python python); endif(); configure_file(${rawUtilName} ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName} @ONLY). install(FILES ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName}; DESTINATION ${CMAKE_INSTALL_BINDIR}; RENAME ${utilName}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; COMPONENT applications); endforeach(). install(FILES python/cmdLineUtils.py DESTINATION ${runtimedir}); if(IS_ABSOLUTE ${runtimedir}); set(absruntimedir ${runtimedir}); else(); set(absruntimedir \${CMAKE_INSTALL_PREFIX}/${runtimedir}); endif(); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); configure_file(python/cmdLineUtils.py ${localruntimedir}/cmdLineUtils.py @ONLY). set_source_files_properties(src/rootcling.cxx PROPERTIES; COMPILE_FLAGS ""${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_EXECUTABLE(rootcling src/rootcling.cxx LIBRARIES RIO Cling Core Rint). # rootcling includes the ROOT complex header which would build the complex; # dictionary with modules. To make sure that rootcling_stage1 builds this; # dict before we use it, we add a dependency here.; add_dependencies(rootcling complexDict). target_include_directories(ro",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:3216,Deployability,install,install,3216,"S COMPILE_FLAGS ""-w""); ROOT_EXECUTABLE(h2root h2root.cxx LIBRARIES Core RIO Net Hist Graf Graf3d Gpad Tree Matrix MathCore Thread minicern); endif(). file(GLOB utils RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} python/root*); foreach(rawUtilName ${utils}); get_filename_component(utilName ${rawUtilName} NAME); if(NOT WIN32); # We need the .py only on Windows; string(REPLACE "".py"" """" utilName ${utilName}); set(python python3); else(); set(python python); endif(); configure_file(${rawUtilName} ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName} @ONLY). install(FILES ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName}; DESTINATION ${CMAKE_INSTALL_BINDIR}; RENAME ${utilName}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; COMPONENT applications); endforeach(). install(FILES python/cmdLineUtils.py DESTINATION ${runtimedir}); if(IS_ABSOLUTE ${runtimedir}); set(absruntimedir ${runtimedir}); else(); set(absruntimedir \${CMAKE_INSTALL_PREFIX}/${runtimedir}); endif(); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); configure_file(python/cmdLineUtils.py ${localruntimedir}/cmdLineUtils.py @ONLY). set_source_files_properties(src/rootcling.cxx PROPERTIES; COMPILE_FLAGS ""${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_EXECUTABLE(rootcling src/rootcling.cxx LIBRARIES RIO Cling Core Rint). # rootcling includes the ROOT complex header which would build the complex; # dictionary with modules. To make sure that rootcling_stage1 builds this; # dict before we use it, we add a dependency here.; add_dependencies(rootcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:3341,Deployability,install,install,3341,"/root*); foreach(rawUtilName ${utils}); get_filename_component(utilName ${rawUtilName} NAME); if(NOT WIN32); # We need the .py only on Windows; string(REPLACE "".py"" """" utilName ${utilName}); set(python python3); else(); set(python python); endif(); configure_file(${rawUtilName} ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName} @ONLY). install(FILES ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}/${utilName}; DESTINATION ${CMAKE_INSTALL_BINDIR}; RENAME ${utilName}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; COMPONENT applications); endforeach(). install(FILES python/cmdLineUtils.py DESTINATION ${runtimedir}); if(IS_ABSOLUTE ${runtimedir}); set(absruntimedir ${runtimedir}); else(); set(absruntimedir \${CMAKE_INSTALL_PREFIX}/${runtimedir}); endif(); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); configure_file(python/cmdLineUtils.py ${localruntimedir}/cmdLineUtils.py @ONLY). set_source_files_properties(src/rootcling.cxx PROPERTIES; COMPILE_FLAGS ""${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_EXECUTABLE(rootcling src/rootcling.cxx LIBRARIES RIO Cling Core Rint). # rootcling includes the ROOT complex header which would build the complex; # dictionary with modules. To make sure that rootcling_stage1 builds this; # dict before we use it, we add a dependency here.; add_dependencies(rootcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # C",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:5002,Deployability,install,install,5002,"otcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint;${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex""). if(CMAKE_HOST_UNIX); install(CODE ""execute_process(COMMAND ln -f rootcling rootcint WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); install(CODE ""execute_process(COMMAND ln -f rootcling genreflex WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); else(); if(MSVC); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcling.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); else(); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rlibmap; DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); endif(); endif(); ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:5173,Deployability,install,install,5173,"otcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint;${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex""). if(CMAKE_HOST_UNIX); install(CODE ""execute_process(COMMAND ln -f rootcling rootcint WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); install(CODE ""execute_process(COMMAND ln -f rootcling genreflex WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); else(); if(MSVC); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcling.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); else(); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rlibmap; DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); endif(); endif(); ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:5363,Deployability,install,install,5363,"otcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint;${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex""). if(CMAKE_HOST_UNIX); install(CODE ""execute_process(COMMAND ln -f rootcling rootcint WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); install(CODE ""execute_process(COMMAND ln -f rootcling genreflex WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); else(); if(MSVC); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcling.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); else(); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rlibmap; DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); endif(); endif(); ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:5489,Deployability,install,install,5489,"otcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint;${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex""). if(CMAKE_HOST_UNIX); install(CODE ""execute_process(COMMAND ln -f rootcling rootcint WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); install(CODE ""execute_process(COMMAND ln -f rootcling genreflex WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); else(); if(MSVC); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcling.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); else(); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rlibmap; DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); endif(); endif(); ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:5614,Deployability,install,install,5614,"otcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint;${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex""). if(CMAKE_HOST_UNIX); install(CODE ""execute_process(COMMAND ln -f rootcling rootcint WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); install(CODE ""execute_process(COMMAND ln -f rootcling genreflex WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); else(); if(MSVC); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcling.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); else(); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rlibmap; DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); endif(); endif(); ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:5748,Deployability,install,install,5748,"otcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint;${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex""). if(CMAKE_HOST_UNIX); install(CODE ""execute_process(COMMAND ln -f rootcling rootcint WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); install(CODE ""execute_process(COMMAND ln -f rootcling genreflex WORKING_DIRECTORY \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})"" COMPONENT applications); else(); if(MSVC); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcling.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex.exe DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); else(); install(PROGRAMS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rootcint; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/genreflex; ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rlibmap; DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT applications); endif(); endif(); ",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt:3939,Integrability,depend,dependency,3939,"E OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; COMPONENT applications); endforeach(). install(FILES python/cmdLineUtils.py DESTINATION ${runtimedir}); if(IS_ABSOLUTE ${runtimedir}); set(absruntimedir ${runtimedir}); else(); set(absruntimedir \${CMAKE_INSTALL_PREFIX}/${runtimedir}); endif(); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile \$ENV{DESTDIR}${absruntimedir}/cmdLineUtils.py)""); configure_file(python/cmdLineUtils.py ${localruntimedir}/cmdLineUtils.py @ONLY). set_source_files_properties(src/rootcling.cxx PROPERTIES; COMPILE_FLAGS ""${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_EXECUTABLE(rootcling src/rootcling.cxx LIBRARIES RIO Cling Core Rint). # rootcling includes the ROOT complex header which would build the complex; # dictionary with modules. To make sure that rootcling_stage1 builds this; # dict before we use it, we add a dependency here.; add_dependencies(rootcling complexDict). target_include_directories(rootcling PRIVATE; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/io/rootpcm/res); set_property(TARGET rootcling PROPERTY ENABLE_EXPORTS 1); if(WIN32); set_target_properties(rootcling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); set_property(TARGET rootcling APPEND_STRING PROPERTY LINK_FLAGS "" -STACK:4000000""); endif(). # Create aliases: rootcint, genreflex.; if(WIN32); add_custom_command(TARGET rootcling POST_BUILD; COMMAND copy /y rootcling.exe rootcint.exe; COMMAND copy /y rootcling.exe genreflex.exe; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); else(); add_custom_command(TARGET rootcling POST_BUILD; COMMAND ln -f rootcling rootcint; COMMAND ln -f rootcling genreflex; WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); endif(); set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES; ""${CMAKE_RUNTIME",MatchSource.DOCS,main/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/CMakeLists.txt:557,Testability,test,test,557,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_subdirectory(mathcore); if(mathmore); add_subdirectory(mathmore); endif(); add_subdirectory(matrix); add_subdirectory(minuit); add_subdirectory(minuit2); add_subdirectory(fumili); add_subdirectory(physics); add_subdirectory(mlp); add_subdirectory(quadp); add_subdirectory(foam); add_subdirectory(smatrix); add_subdirectory(splot); #add_subdirectory(mathcore/test EXCLUDE_FROM_ALL); add_subdirectory(genvector); if(tmva); add_subdirectory(genetic); endif(); if(unuran); add_subdirectory(unuran); endif(); if(fftw3); add_subdirectory(fftw); endif(). if(r); add_subdirectory(rtools); endif(). add_subdirectory(vecops); ",MatchSource.DOCS,math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/CMakeLists.txt:1135,Deployability,install,install,1135,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(roofit_legacy_eval_backend ON CACHE BOOL """" FORCE). add_subdirectory(batchcompute); if (roofit_multiprocess); add_subdirectory(roofitZMQ); add_subdirectory(multiprocess); endif(); add_subdirectory(roofitcore); add_subdirectory(roofit); if(mathmore); add_subdirectory(roofitmore); endif(); add_subdirectory(roostats); add_subdirectory(histfactory); add_subdirectory(jsoninterface); add_subdirectory(hs3); if(roofit_legacy_eval_backend AND NOT MSVC); add_subdirectory(xroofit); endif(). generateManual(hist2workspaceMan; ${CMAKE_CURRENT_SOURCE_DIR}/histfactory/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/man/hist2workspace.1). set(roofit_etc_files; etc/HistFactorySchema.dtd; etc/RooFitHS3_wsfactoryexpressions.json; etc/RooFitHS3_wsexportkeys.json; ). foreach(roofit_etc_file ${roofit_etc_files}); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/${roofit_etc_file}"" ""${CMAKE_BINARY_DIR}/${roofit_etc_file}"" COPYONLY); endforeach(). install(FILES ${roofit_etc_files} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS}); ",MatchSource.DOCS,roofit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/CMakeLists.txt:1211,Deployability,install,install,1211,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(roofit_legacy_eval_backend ON CACHE BOOL """" FORCE). add_subdirectory(batchcompute); if (roofit_multiprocess); add_subdirectory(roofitZMQ); add_subdirectory(multiprocess); endif(); add_subdirectory(roofitcore); add_subdirectory(roofit); if(mathmore); add_subdirectory(roofitmore); endif(); add_subdirectory(roostats); add_subdirectory(histfactory); add_subdirectory(jsoninterface); add_subdirectory(hs3); if(roofit_legacy_eval_backend AND NOT MSVC); add_subdirectory(xroofit); endif(). generateManual(hist2workspaceMan; ${CMAKE_CURRENT_SOURCE_DIR}/histfactory/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/man/hist2workspace.1). set(roofit_etc_files; etc/HistFactorySchema.dtd; etc/RooFitHS3_wsfactoryexpressions.json; etc/RooFitHS3_wsexportkeys.json; ). foreach(roofit_etc_file ${roofit_etc_files}); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/${roofit_etc_file}"" ""${CMAKE_BINARY_DIR}/${roofit_etc_file}"" COPYONLY); endforeach(). install(FILES ${roofit_etc_files} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS}); ",MatchSource.DOCS,roofit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/rootx/CMakeLists.txt:933,Availability,error,errors,933,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootx package; # @author Pere Mato, CERN; ############################################################################. if(x11); ROOT_EXECUTABLE(root; src/rootx.cxx; src/rootxx.cxx; ../core/clib/src/strlcpy.c; ); target_include_directories(root; PRIVATE; ${X11_INCLUDE_DIR}; ); target_link_libraries(root; PRIVATE; ${X11_Xft_LIB}; ${X11_Xpm_LIB}; ${X11_LIBRARIES}; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(root PRIVATE util procstat); endif(). elseif(cocoa); if (cxxmodules); # FIXME: Disable modules for ObjC/ObjC++. It has problems when compiling; # rootxx-cocoa.mm with a lots of warnings and errors such as:; # rootxx-cocoa.mm:884:48: error: property 'length' not found on object of type 'NSMutableAttributedString *'; #; # FIXME: We should disable building with modules on only the TU of rootxx-cocoa.mm; # Unfortunately, cmake cannot reliably remove flags from a single TU.; # as COMPILE_OPTIONS and COMPILE_FLAGS could be overriden causing tricky to; # debug problems.; string(REPLACE ""${ROOT_CXXMODULES_CXXFLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${ROOT_CXXMODULES_CFLAGS}"" """" CMAKE_C_FLAGS ${CMAKE_C_FLAGS}); endif(cxxmodules). # FIXME: rootxx-cocoa.mm should be compiled with -ObjC++ flag. Here we rely; # that the compiler will recognise the extension mm and switch to the correct; # language mode.; ROOT_EXECUTABLE(root; src/rootx.cxx; src/rootxx-cocoa.mm; LIBRARIES; ""-framework Cocoa""; ); set(cocoa_incl ${CMAKE_SOURCE_DIR}/core/macosx/inc); endif(). if(x11 OR cocoa); generateHeader(root; ${CMAKE_SOURCE_DIR}/core/base/src/root-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/rootCommandLineOptionsHelp.h; ). target_include_director",MatchSource.DOCS,rootx/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/rootx/CMakeLists.txt:976,Availability,error,error,976,"rs.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootx package; # @author Pere Mato, CERN; ############################################################################. if(x11); ROOT_EXECUTABLE(root; src/rootx.cxx; src/rootxx.cxx; ../core/clib/src/strlcpy.c; ); target_include_directories(root; PRIVATE; ${X11_INCLUDE_DIR}; ); target_link_libraries(root; PRIVATE; ${X11_Xft_LIB}; ${X11_Xpm_LIB}; ${X11_LIBRARIES}; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(root PRIVATE util procstat); endif(). elseif(cocoa); if (cxxmodules); # FIXME: Disable modules for ObjC/ObjC++. It has problems when compiling; # rootxx-cocoa.mm with a lots of warnings and errors such as:; # rootxx-cocoa.mm:884:48: error: property 'length' not found on object of type 'NSMutableAttributedString *'; #; # FIXME: We should disable building with modules on only the TU of rootxx-cocoa.mm; # Unfortunately, cmake cannot reliably remove flags from a single TU.; # as COMPILE_OPTIONS and COMPILE_FLAGS could be overriden causing tricky to; # debug problems.; string(REPLACE ""${ROOT_CXXMODULES_CXXFLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${ROOT_CXXMODULES_CFLAGS}"" """" CMAKE_C_FLAGS ${CMAKE_C_FLAGS}); endif(cxxmodules). # FIXME: rootxx-cocoa.mm should be compiled with -ObjC++ flag. Here we rely; # that the compiler will recognise the extension mm and switch to the correct; # language mode.; ROOT_EXECUTABLE(root; src/rootx.cxx; src/rootxx-cocoa.mm; LIBRARIES; ""-framework Cocoa""; ); set(cocoa_incl ${CMAKE_SOURCE_DIR}/core/macosx/inc); endif(). if(x11 OR cocoa); generateHeader(root; ${CMAKE_SOURCE_DIR}/core/base/src/root-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/rootCommandLineOptionsHelp.h; ). target_include_directories(root PRIVATE; ${CMAKE_SOURCE_DIR}/core/foundation",MatchSource.DOCS,rootx/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/rootx/CMakeLists.txt:1177,Availability,reliab,reliably,1177,"README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootx package; # @author Pere Mato, CERN; ############################################################################. if(x11); ROOT_EXECUTABLE(root; src/rootx.cxx; src/rootxx.cxx; ../core/clib/src/strlcpy.c; ); target_include_directories(root; PRIVATE; ${X11_INCLUDE_DIR}; ); target_link_libraries(root; PRIVATE; ${X11_Xft_LIB}; ${X11_Xpm_LIB}; ${X11_LIBRARIES}; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(root PRIVATE util procstat); endif(). elseif(cocoa); if (cxxmodules); # FIXME: Disable modules for ObjC/ObjC++. It has problems when compiling; # rootxx-cocoa.mm with a lots of warnings and errors such as:; # rootxx-cocoa.mm:884:48: error: property 'length' not found on object of type 'NSMutableAttributedString *'; #; # FIXME: We should disable building with modules on only the TU of rootxx-cocoa.mm; # Unfortunately, cmake cannot reliably remove flags from a single TU.; # as COMPILE_OPTIONS and COMPILE_FLAGS could be overriden causing tricky to; # debug problems.; string(REPLACE ""${ROOT_CXXMODULES_CXXFLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${ROOT_CXXMODULES_CFLAGS}"" """" CMAKE_C_FLAGS ${CMAKE_C_FLAGS}); endif(cxxmodules). # FIXME: rootxx-cocoa.mm should be compiled with -ObjC++ flag. Here we rely; # that the compiler will recognise the extension mm and switch to the correct; # language mode.; ROOT_EXECUTABLE(root; src/rootx.cxx; src/rootxx-cocoa.mm; LIBRARIES; ""-framework Cocoa""; ); set(cocoa_incl ${CMAKE_SOURCE_DIR}/core/macosx/inc); endif(). if(x11 OR cocoa); generateHeader(root; ${CMAKE_SOURCE_DIR}/core/base/src/root-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/rootCommandLineOptionsHelp.h; ). target_include_directories(root PRIVATE; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc # for snprintf.h; ${CMAKE_SOURCE_DIR}/core/meta/inc",MatchSource.DOCS,rootx/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:19808,Availability,error,error,19808,"{Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PRE",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:19829,Availability,error,error,19829,"{Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PRE",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:20270,Availability,error,error,20270,"----------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests-------------------------------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:1247,Deployability,install,installation,1247,"e and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx LINKDEF EventLinkDef.h; DEPENDENCIES Hist MathCore); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if(NOT runtime_cxxmodules); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libEvent_rdict.pcm; ${CMAKE_CURRENT_BINAR",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:21187,Deployability,canary,canary,21187,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:549,Modifiability,variab,variables,549,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT test programs.; # This shows nicely how to compile and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx L",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:912,Safety,avoid,avoid,912,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT test programs.; # This shows nicely how to compile and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx L",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:1270,Security,access,access,1270,"e and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx LINKDEF EventLinkDef.h; DEPENDENCIES Hist MathCore); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if(NOT runtime_cxxmodules); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libEvent_rdict.pcm; ${CMAKE_CURRENT_BINAR",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:19647,Security,access,access,19647,"----------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TE",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:225,Testability,test,test,225,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT test programs.; # This shows nicely how to compile and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx L",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:449,Testability,test,test,449,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT test programs.; # This shows nicely how to compile and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx L",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:955,Testability,test,test,955,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT test programs.; # This shows nicely how to compile and link applications; # using the ROOT libraries on all supported platforms.; #; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(test). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). #---Copy the CTestCustom.cmake file into the build directory---------------------------------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); enable_testing(). if(CMAKE_SYSTEM_NAME MATCHES Darwin); # To avoid to set ld_Library_path to locate the test libraries; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@loader_path/.""); endif(). if(DEFINED ROOT_SOURCE_DIR); # Testing using the binary tree; set(ROOT_root_CMD ${ROOT_BINDIR}/root.exe); include_directories(${ROOT_SOURCE_DIR}/tutorials); else(); # Testing using an installation (assuming access to ROOT CMake modules); include_directories(${ROOT_INCLUDE_DIRS}); include_directories(${ROOT_INCLUDE_DIRS}/../tutorials); add_definitions(${ROOT_DEFINITIONS}); include(RootMacros); endif(). #---environment-------------------------------------------------------------------------------; ROOT_ADD_TEST(show-environment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx L",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:2605,Testability,test,test-event,2605,"ronment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx LINKDEF EventLinkDef.h; DEPENDENCIES Hist MathCore); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if(NOT runtime_cxxmodules); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libEvent_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libEvent_rdict.pcm); else(); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/Event.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/Event.pcm); endif(); endif(); ROOT_EXECUTABLE(eventexe MainEvent.cxx LIBRARIES Event RIO Tree TreePlayer Hist Net); ROOT_ADD_TEST(test-event COMMAND eventexe). #---guitest------------------------------------------------------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam----------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:2973,Testability,test,test-hsimple,2973,"CE_DIR}/Event.h; SOURCES Event.cxx LINKDEF EventLinkDef.h; DEPENDENCIES Hist MathCore); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if(NOT runtime_cxxmodules); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libEvent_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libEvent_rdict.pcm); else(); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/Event.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/Event.pcm); endif(); endif(); ROOT_EXECUTABLE(eventexe MainEvent.cxx LIBRARIES Event RIO Tree TreePlayer Hist Net); ROOT_ADD_TEST(test-event COMMAND eventexe). #---guitest------------------------------------------------------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tst",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:3192,Testability,test,test-check-nullptr,3192,"_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libEvent_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libEvent_rdict.pcm); else(); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/Event.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/Event.pcm); endif(); endif(); ROOT_EXECUTABLE(eventexe MainEvent.cxx LIBRARIES Event RIO Tree TreePlayer Hist Net); ROOT_ADD_TEST(test-event COMMAND eventexe). #---guitest------------------------------------------------------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:3376,Testability,test,test-check-invalidptr,3376,"ent.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/Event.pcm); endif(); endif(); ROOT_EXECUTABLE(eventexe MainEvent.cxx LIBRARIES Event RIO Tree TreePlayer Hist Net); ROOT_ADD_TEST(test-event COMMAND eventexe). #---guitest------------------------------------------------------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector-------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:3697,Testability,test,test-minexam,3697,"-------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix-------------------------------------------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:3942,Testability,test,test-tstring,3942,"RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARI",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:4137,Testability,test,test-tcollex,4137,"OCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARIES Core Matrix); ROOT_ADD_TEST(test-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CM",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:4340,Testability,test,test-tcollbm,4340,"broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARIES Core Matrix); ROOT_ADD_TEST(test-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CMAKE_CURRENT_SOURCE_DIR}/Hello.h MODULE Hello DEPENDENCIES Gpad Graf Hist MathCore Matrix); ROOT_LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso----------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:4574,Testability,test,test-vvector,4574,------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARIES Core Matrix); ROOT_ADD_TEST(test-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CMAKE_CURRENT_SOURCE_DIR}/Hello.h MODULE Hello DEPENDENCIES Gpad Graf Hist MathCore Matrix); ROOT_LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx ,MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:4779,Testability,test,test-vmatrix,4779,----------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARIES Core Matrix); ROOT_ADD_TEST(test-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CMAKE_CURRENT_SOURCE_DIR}/Hello.h MODULE Hello DEPENDENCIES Gpad Graf Hist MathCore Matrix); ROOT_LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx LIBRARIES Graf Gpad). #--bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LIN,MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:4974,Testability,test,test-vlazy,4974,ring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARIES Core Matrix); ROOT_ADD_TEST(test-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CMAKE_CURRENT_SOURCE_DIR}/Hello.h MODULE Hello DEPENDENCIES Gpad Graf Hist MathCore Matrix); ROOT_LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx LIBRARIES Graf Gpad). #--bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROO,MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:5977,Testability,test,test-bench,5977,"-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CMAKE_CURRENT_SOURCE_DIR}/Hello.h MODULE Hello DEPENDENCIES Gpad Graf Hist MathCore Matrix); ROOT_LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx LIBRARIES Graf Gpad). #--bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROOT_ADD_TEST(test-bench COMMAND bench -s LABELS longtest). #--stress------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAN",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:6219,Testability,test,test-stress,6219,"LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx LIBRARIES Graf Gpad). #--bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROOT_ADD_TEST(test-bench COMMAND bench -s LABELS longtest). #--stress------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LA",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:6286,Testability,test,test-event,6286,"LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx LIBRARIES Graf Gpad). #--bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROOT_ADD_TEST(test-bench COMMAND bench -s LABELS longtest). #--stress------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LA",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:6523,Testability,test,test-stressshapes,6523,"bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROOT_ADD_TEST(test-bench COMMAND bench -s LABELS longtest). #--stress------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_ro",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:6609,Testability,test,test-stressshapes-interpreted,6609,"bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROOT_ADD_TEST(test-bench COMMAND bench -s LABELS longtest). #--stress------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_ro",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:6953,Testability,test,test-stressgeometry,6953,"-----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:7059,Testability,test,test-stressgeometry-interpreted,7059,"-----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stress stress.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); ROOT_ADD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:7209,Testability,test,test-stressgeometry,7209,"DD_TEST(test-stress COMMAND stress -b FAILREGEX ""FAILED|Error in""; DEPENDS test-event LABELS longtest). if(geom); #--stressShapes------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressShapes stressShapes.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:7445,Testability,test,test-stresslinear,7445,"est-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMA",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:7544,Testability,test,test-stresslinear-interpreted,7544,"est-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMA",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:7690,Testability,test,test-stresslinear,7690,"T_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-int",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:8470,Testability,test,test-stressgraphics,8470," ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram C",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:8664,Testability,test,test-stressgraphics-interpreted,8664," ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram C",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:8816,Testability,test,test-stressgraphics,8816,"r compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif().",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:8875,Testability,test,test-stressgraphics-chrome,8875,"r compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif().",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:9148,Testability,test,test-stressgraphics-firefox-,9148,"r compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif().",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:9586,Testability,test,test-stresshistogram,9586,"sgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector-------------------------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:9691,Testability,test,test-stresshistogram-interpreted,9691,"sgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector-------------------------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:9843,Testability,test,test-stresshistogram,9843,"s); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILR",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10296,Testability,test,test-stressspectrum,10296,"dif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmor",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10402,Testability,test,test-stressspectrum-interpreted,10402,"dif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmor",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10552,Testability,test,test-stressspectrum,10552,"RARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10790,Testability,test,test-stressvector,10790,"ram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVect",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10873,Testability,test,test-stressvector-interpreted,10873,"ram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVect",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:11019,Testability,test,test-stressvector,11019,"stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E cop",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:11258,Testability,test,test-stressmathmore,11258,"b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:11361,Testability,test,test-stressmathmore-interpreted,11361,"b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:11511,Testability,test,test-stressmathmore,11511,"xx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressm",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12247,Testability,test,test-stressmathcore,12247,"ror in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12350,Testability,test,test-stressmathcore-interpreted,12350,"ror in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12500,Testability,test,test-stressmathcore,12500,"ED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12699,Testability,test,test-stressfit,12699,"/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12792,Testability,test,test-stressfit-interpreted,12792,"/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12932,Testability,test,test-stressfit,12932,"; add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""F",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13177,Testability,test,test-stresshistofit,13177,"MAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COM",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13317,Testability,test,test-stresshistofit-interpreted,13317,"MAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COM",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13467,Testability,test,test-stresshistofit,13467,"ILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter--------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13700,Testability,test,test-stressentrylist,13700," ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy $",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13792,Testability,test,test-stressentrylist-interpreted,13792," ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy $",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13944,Testability,test,test-stressentrylist,13944,"st-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--st",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:14145,Testability,test,test-stressiterators,14145,"EX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof----------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:14234,Testability,test,test-stressiterators-interpreted,14234,"EX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof----------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:14386,Testability,test,test-stressiterators,14386," -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:14661,Testability,test,test-stressinterpreter,14661,"T_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOU",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15101,Testability,test,test-stressHepix,15101,"BRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture-----------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15521,Testability,test,test-stressproof,15521,"iles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads t",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15734,Testability,log,log,15734,"E_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15864,Testability,test,testbits,15864,"ED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(te",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15972,Testability,test,testbits,15972,"ED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(te",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15981,Testability,test,testbits,15981,"ED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(te",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16025,Testability,test,test-testbits,16025,"; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROO",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16047,Testability,test,testbits,16047,"; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROO",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16226,Testability,test,test-ctorture,16226,"---------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16436,Testability,test,test-qprandom,16436,"BLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16656,Testability,test,test-threads,16656,"KE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16923,Testability,test,test-stressIOPlugins-xroot,16923,"s.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE P",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17054,Testability,test,test-stressIOPlugins-http,17054,"s.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE P",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17338,Testability,test,test-delaunay,17338,"---------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(tes",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17674,Testability,test,test-TFormulaTests,17674,"ad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17757,Testability,test,test,17757,"IOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Phy",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17881,Testability,test,testVc,17881,"IOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Phy",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17888,Testability,test,testVc,17888,"IOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Phy",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:17966,Testability,test,testVc,17966,"LED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND te",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18030,Testability,test,test-Vc,18030,"LED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND te",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18046,Testability,test,testVc,18046,"LED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND te",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18109,Testability,test,test,18109,"------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18233,Testability,test,test-veccore,18233,"------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18246,Testability,test,test-veccore,18246,"------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18340,Testability,test,test-veccore,18340,"---------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSY",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18421,Testability,test,test-veccore,18421,"---------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSY",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18519,Testability,test,test-veccore,18519,"---------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSY",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18583,Testability,test,test-veccore,18583,"---------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSY",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18647,Testability,test,test,18647,"AILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18771,Testability,test,testGenVectorVc,18771,"AILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18787,Testability,test,testGenVectorVc,18787,"AILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18892,Testability,test,testGenVectorVc,18892," BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cann",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18965,Testability,test,test-GenVector-Vc,18965," BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cann",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:18991,Testability,test,testGenVectorVc,18991," BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-Vc COMMAND testVc FAILREGEX ""FAILED|Error in""); endif(). #--VecCore basic test------------------------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cann",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:19180,Testability,test,test-,19180,"------------------------------------------------------------; if(ROOT_veccore_FOUND); ROOT_EXECUTABLE(test-veccore test-veccore.cxx LIBRARIES ${VecCore_LIBRARIES} BUILTINS VECCORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate modul",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:19375,Testability,test,test,19375,"CORE); target_include_directories(test-veccore BEFORE PRIVATE ${VecCore_INCLUDE_DIRS}); target_compile_definitions(test-veccore PRIVATE ${VecCore_DEFINITIONS}); if(VecCore_Vc_FOUND); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Vc""); else(); ROOT_ADD_TEST(VecCore COMMAND test-veccore REGEX ""Scalar""); endif(); endif(). #--Vc GenVector test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:19628,Testability,test,test,19628,"----------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testGenVectorVc testGenVectorVc.cxx LIBRARIES Physics GenVector ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testGenVectorVc SYSTEM BEFORE PRIVATE ${Vc_INCLUDE_DIRS}); ROOT_ADD_TEST(test-GenVector-Vc COMMAND testGenVectorVc FAILREGEX ""FAILED|Error in""); endif(). #--g2root------------------------------------------------------------------------------------------; if(TARGET g2root); ROOT_ADD_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TE",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:20155,Testability,test,test,20155,"D_TEST(test-g2root COMMAND g2root); endif(). #--periodic----------------------------------------------------------------------------------------; if (NOT cxxmodules); # There are two problems with this test and cxxmodules. First, it picks up a; # header files from $ROOTSYS/include and builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif();",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:20662,Testability,test,test-periodic-build,20662,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:20751,Testability,test,test,20751,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:20891,Testability,test,test-periodic-build,20891,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:21048,Testability,test,test,21048,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:21194,Testability,test,tests,21194,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:21288,Testability,assert,asserts,21288,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/CMakeLists.txt:516,Integrability,depend,depends,516,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_subdirectory(tmva); add_subdirectory(tmvagui). # Build pyMVA. Allows users to call python mva's from c++ ROOT/TMVA.; if(tmva-pymva); add_subdirectory(pymva); endif(). # Build RMVA. Allows users to call R mva's from c++ ROOT/TMVA.; if(r OR tmva-rmva); add_subdirectory(rmva); endif(). add_subdirectory(sofie); #parser depends on protobuf ; #found if flag tmva-sofie is on; if (tmva-sofie); add_subdirectory(sofie_parsers); endif(); ",MatchSource.DOCS,tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:3417,Availability,error,errors,3417,"DIR}/rootlogoff.C ""{}""); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/.rootrc ""; Proof.Sandbox: /tmp/proof; Rint.History: .root_hist; ACLiC.LinkLibs: 1; ""). #---Tutorials that need substantial network to work------------------; set(need_network dataframe/df027_SQliteDependencyOverVersion.C). #---Tutorials disabled depending on the build components-------------. if(NOT clad); set(clad_veto fit/minuit2GausFit.C; # TODO: the next veto should not be necessary!; # The tutorial should also work without clad.; # See https://github.com/root-project/root/issues/15091.; fit/exampleFit3D.C; ); endif(). if(MSVC AND NOT win_broken_tests); # RBatchGenerator tutorials don't work on Windows at the moment.; list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # df036* and df037* seem to trigger OS errors when trying to delete the; # test files created in the tutorials. It is unclear why.; list(APPEND dataframe_veto dataframe/df036_missingBranches.C); list(APPEND dataframe_veto dataframe/df036_missingBranches.py); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.C); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.py); # The RooFit SBI tutorials fail on Windows for unknown reasons; list(APPEND roofit_veto roofit/rf617_simulation_based_inference_multidimensional.py); endif(). # TODO: fix the problem and re-enable the tutorial test. The rf615 tutorial; # occasionally fails on cleanup on different platforms, hinting to a PyROOT; # issue. We disable the rf617 tutorial for now. as the covered RooFit; # functionality is also covered by rf617 (the multidimensional case).; list(APPEND roofit_veto roofit/rf615_simulation_based_inference.py). if (NOT dataframe); # RDataFrame; list(APPEND dataframe_veto dataframe/*.C dataframe/*.py); # RDataFrame tutorial in graphs; list(APPEND ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:6074,Availability,error,error,6074,"lite); # RDF+SQlite tutorials; list(APPEND dataframe_veto dataframe/*SQlite*); endif(); if(NOT davix); list(APPEND dataframe_veto dataframe/df027_SQliteDependencyOverVersion.C); list(APPEND dataframe_veto dataframe/df028_SQliteIPLocation.C); list(APPEND dataframe_veto dataframe/df029_SQlitePlatformDistribution.C); list(APPEND dataframe_veto dataframe/df030_SQliteVersionsOfROOT.C); endif(). if(MACOSX_VERSION VERSION_EQUAL 10.13); list(APPEND dataframe_veto dataframe/df103_NanoAODHiggsAnalysis.*); endif(). if(NOT geom); set(geom_veto geom/*.C); endif(). if(NOT ROOT_proof_FOUND); set(proof_veto roostats/StandardFrequentistDiscovery.C); endif(). if(NOT ROOT_spectrum_FOUND); set(spectrum_veto spectrum/*.C); endif(). if(NOT ROOT_roofit_FOUND); set(roofit_veto roofit/*.C roofit/*.py; roostats/*.C roostats/*.py; histfactory/*.C histfactory/*.py); else(); if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The following tutorials are failing with this error:; # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!; # on Windows 32 bit and Visual Studio v17.8; list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C); # The following tutorial fails with a segfault (see #15364); list(APPEND roofit_veto roostats/rs101_limitexample.py); endif(); endif(). if(NOT ROOT_unuran_FOUND); set(unuran_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:22375,Availability,error,error,22375,"running}); #--List multithreaded tutorials to run them serially; set(NProcessors 4); set (multithreaded_all_cores; dataframe/df10[2-7]*; rcanvas/df10*; ); set (multithreaded; ${multithreaded_all_cores}; multicore/mp103*; tmva/TMVAMulticlass.C; tmva/TMVA_CNN_Classification.C; tmva/TMVA_Higgs_Classification.C; tmva/TMVA_RNN_Classification.C; tmva/TMVA_CNN_Classification.py; tmva/TMVA_Higgs_Classification.py; tmva/TMVA_RNN_Classification.py; ); file(GLOB multithreaded_all_cores RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded_all_cores}); file(GLOB multithreaded RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded}). #---Loop over all tutorials and define the corresponding test---------. #---Define the primordial tutorials-----------------------------------; ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif(). #---Loop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND l",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:22617,Availability,error,error,22617,"on.C; tmva/TMVA_RNN_Classification.C; tmva/TMVA_CNN_Classification.py; tmva/TMVA_Higgs_Classification.py; tmva/TMVA_RNN_Classification.py; ); file(GLOB multithreaded_all_cores RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded_all_cores}); file(GLOB multithreaded RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded}). #---Loop over all tutorials and define the corresponding test---------. #---Define the primordial tutorials-----------------------------------; ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif(). #---Loop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:22984,Availability,error,error,22984,"ATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded}). #---Loop over all tutorials and define the corresponding test---------. #---Define the primordial tutorials-----------------------------------; ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif(). #---Loop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on A",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24430,Availability,error,error,24430,"nning); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 m",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25836,Availability,error,error,25836,"y a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics for the Python tutorials; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.rootlogon.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); # Copy .enableImplicitMTWrapper.py file into the build directory. It can limit the size of the thread pool; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.enableImplicitMTWrapper.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). file(GLOB_RECURSE pytutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.py). # Now python-specific vetos:; set(pyveto pyroot/demo.py # requires GUI; pyroot/fit1_py.py # not a tutorial; pyroot/gui_ex.py # requires GUI; pyroot/mrt.py # not really a tutorial; pyroot/na49geomfile.p",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:28318,Availability,error,errors,28318,"_NUMBA_PY3}; OR (MSVC AND NOT win_broken_tests)); list(APPEND pyveto pyroot/pyroot004_NumbaDeclare.py); endif(). if(dataframe AND DEFINED ENV{ROOTTEST_IGNORE_PANDAS_PY3}); list(APPEND pyveto dataframe/df026_AsNumpyArrays.py); endif(). # Rules specific to distributed RDataFrame; # Disable distributed RDF tutorials if we didn't check dependencies in the environment first; if(NOT test_distrdf_pyspark); list(APPEND pyveto dataframe/distrdf001_spark_connection.py); endif(); if(NOT test_distrdf_dask); list(APPEND pyveto dataframe/distrdf002_dask_connection.py); list(APPEND pyveto dataframe/distrdf003_live_visualization.py); endif(); # Use main Python executable to run in PySpark driver and executors; if(test_distrdf_pyspark); list(APPEND TUTORIAL_ENV PYSPARK_PYTHON=${Python3_EXECUTABLE}); if(MACOSX_VERSION VERSION_GREATER_EQUAL 10.13); # MacOS has changed rules about forking processes after 10.13; # Running pyspark tests with XCode Python3 throws crashes with errors like:; # `objc[17271]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called.`; # This issue should have been fixed after Python 3.8 (see https://bugs.python.org/issue33725); # Indeed, any other Python 3.8+ executable does not show this crash. It is; # specifically the XCode Python executable that triggers this.; # For now, there seems no other way than this workaround,; # which effectively sets the behaviour of `fork` back to MacOS 10.12; list(APPEND TUTORIAL_ENV OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES); endif(); endif(); # These lists keep track of distrdf tutorials, so we can add specific properties later; file(GLOB distrdf_spark_tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} dataframe/*spark*); file(GLOB distrdf_dask_tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} dataframe/*dask*). # Disable tutorial showing connection to the HTCondor service at CERN; list(APPEND pyveto dataframe/distrdf004_dask_lxbatch.py). find_python_module(xgboost QUIET); if(NOT PY_XGBOOST",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:34407,Availability,error,error,34407," creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(setThreadPoolSize "".enableImplicitMTWrapper.py""); set(thisTestPoolSize ${NProcessors}); endif(); else(); unset(setThreadPoolSize); unset(thisTestPoolSize); endif(). string(REPLACE "".py"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fixtureList ${fixtureLists}); if(${t} IN_LIST ${fixtureList}); string(REPLACE ""requires_"" """" fixture ${fixtureList}); list(APPEND python_deps ${fixture}); list(APPEND labels python_runtime_deps); endif(); endforeach(). ROOT_ADD_TEST(${tutorial_name}; COMMAND ${Python3_EXECUTABLE} ${setThreadPoolSize} ${thisTestPoolSize} ${CMAKE_CURRENT_SOURCE_DIR}/${t}; PASSRC ${rc} FAILREGEX ""Error in"" "": error:"" ""segmentation violation""; LABELS ${labels}; DEPENDS ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; PYTHON_DEPS ${python_deps}; ${py_will_fail}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_spark_tutorials); # Create a resource lock for the creation of a Spark cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK spark_resource_lock PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_d",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:1038,Deployability,install,installation,1038,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT tutorials programs.; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(tutorials). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). if(DEFINED ROOT_SOURCE_DIR) # Testing using the binary tree; set(ROOT_root_CMD root.exe); if(NOT MSVC) # Ignore environment on Windows; set(ROOT_environ PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; ${ld_library_path}=${CMAKE_BINARY_DIR}/lib:$ENV{${ld_library_path}}; ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/lib:$ENV{PYTHONPATH}); else(); set(ROOT_environ ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/bin;$ENV{PYTHONPATH}); endif(); else() # testing using an installation; include(${ROOT_USE_FILE}); if(DEFINED ROOT_CONFIG_EXECUTABLE) #---If ROOT was built with the classic configure/make---; set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules); include(RootMacros); set(ROOT_root_CMD root.exe); endif(); enable_testing(); endif(). # Set the environment for the tutorials, which is the eventual ROOT_environ; # plus some environment variables related to limiting the number of threads; # used by NumPy.; # See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy; set(TUTORIAL_ENV ${ROOT_environ} OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1). #---Copy the CTestCustom.cmake file into the build directory--------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). #---Provide a rootlogon.C file in the current build directory that; # will affect the way we run all tutorials.; # This overwrites ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24971,Energy Efficiency,reduce,reduce,24971,"dif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial;",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:34895,Energy Efficiency,reduce,reduce,34895,"name ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fixtureList ${fixtureLists}); if(${t} IN_LIST ${fixtureList}); string(REPLACE ""requires_"" """" fixture ${fixtureList}); list(APPEND python_deps ${fixture}); list(APPEND labels python_runtime_deps); endif(); endforeach(). ROOT_ADD_TEST(${tutorial_name}; COMMAND ${Python3_EXECUTABLE} ${setThreadPoolSize} ${thisTestPoolSize} ${CMAKE_CURRENT_SOURCE_DIR}/${t}; PASSRC ${rc} FAILREGEX ""Error in"" "": error:"" ""segmentation violation""; LABELS ${labels}; DEPENDS ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; PYTHON_DEPS ${python_deps}; ${py_will_fail}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_spark_tutorials); # Create a resource lock for the creation of a Spark cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK spark_resource_lock PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_dask_tutorials); # Create a resource lock for the creation of a Dask cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK dask_resource_lock PROCESSORS ${NProcessors}); endif(). endforeach(); endif(); ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:2741,Integrability,depend,depending,2741,"irectory--------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). #---Provide a rootlogon.C file in the current build directory that; # will affect the way we run all tutorials.; # This overwrites the existing rootlogon.C and rootalias.C in the; # tutorials directory which is copied to the build area.; #-------------------------------------------------------------------; file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/rootlogon.C ""{; // Needed by ACLiC to use the current directory for scratch area; gSystem->SetBuildDir(\"".\"", kTRUE);; }""); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/rootalias.C """"); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/rootlogoff.C ""{}""); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/.rootrc ""; Proof.Sandbox: /tmp/proof; Rint.History: .root_hist; ACLiC.LinkLibs: 1; ""). #---Tutorials that need substantial network to work------------------; set(need_network dataframe/df027_SQliteDependencyOverVersion.C). #---Tutorials disabled depending on the build components-------------. if(NOT clad); set(clad_veto fit/minuit2GausFit.C; # TODO: the next veto should not be necessary!; # The tutorial should also work without clad.; # See https://github.com/root-project/root/issues/15091.; fit/exampleFit3D.C; ); endif(). if(MSVC AND NOT win_broken_tests); # RBatchGenerator tutorials don't work on Windows at the moment.; list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # df036* and df037* seem to trigger OS errors when trying to delete the; # test files created in the tutorials. It is unclear why.; list(APPEND dataframe_veto dataframe/df036_missingBranches.C); list(APPEND dataframe_veto dataframe/df036_missingBranches.py); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.C); list(APPEND dataframe_veto dataframe/df037_TTreeEv",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:4496,Integrability,depend,dependent,4496,"PEND dataframe_veto dataframe/df036_missingBranches.C); list(APPEND dataframe_veto dataframe/df036_missingBranches.py); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.C); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.py); # The RooFit SBI tutorials fail on Windows for unknown reasons; list(APPEND roofit_veto roofit/rf617_simulation_based_inference_multidimensional.py); endif(). # TODO: fix the problem and re-enable the tutorial test. The rf615 tutorial; # occasionally fails on cleanup on different platforms, hinting to a PyROOT; # issue. We disable the rf617 tutorial for now. as the covered RooFit; # functionality is also covered by rf617 (the multidimensional case).; list(APPEND roofit_veto roofit/rf615_simulation_based_inference.py). if (NOT dataframe); # RDataFrame; list(APPEND dataframe_veto dataframe/*.C dataframe/*.py); # RDataFrame tutorial in graphs; list(APPEND dataframe_veto graphs/timeSeriesFromCSV_TDF.C); # TMVA tutorials dependent on RDataFrame; list(APPEND dataframe_veto tmva/tmva*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.py); list(APPEND dataframe_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # RooFit tutorial depending on RDataFrame; list(APPEND dataframe_veto roofit/rf408*); endif(). if(NOT sqlite); # RDF+SQlite tutorials; list(APPEND dataframe_veto dataframe/*SQlite*); endif(); if(NOT davix); list(APPEND dataframe_veto dataframe/df027_SQliteDependencyOverVersion.C); list(APPEND dataframe_veto dataframe/df028_SQliteIPLocation.C); list(APPEND dataframe_veto dataframe/df029_SQlitePlatformDistribution.C); list(APPEND dataframe_veto dataframe/df030_SQliteVersionsOfROOT.C); endif(). if(MACOSX_VERSION VERSION_E",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:5011,Integrability,depend,depending,5011," on different platforms, hinting to a PyROOT; # issue. We disable the rf617 tutorial for now. as the covered RooFit; # functionality is also covered by rf617 (the multidimensional case).; list(APPEND roofit_veto roofit/rf615_simulation_based_inference.py). if (NOT dataframe); # RDataFrame; list(APPEND dataframe_veto dataframe/*.C dataframe/*.py); # RDataFrame tutorial in graphs; list(APPEND dataframe_veto graphs/timeSeriesFromCSV_TDF.C); # TMVA tutorials dependent on RDataFrame; list(APPEND dataframe_veto tmva/tmva*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.py); list(APPEND dataframe_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # RooFit tutorial depending on RDataFrame; list(APPEND dataframe_veto roofit/rf408*); endif(). if(NOT sqlite); # RDF+SQlite tutorials; list(APPEND dataframe_veto dataframe/*SQlite*); endif(); if(NOT davix); list(APPEND dataframe_veto dataframe/df027_SQliteDependencyOverVersion.C); list(APPEND dataframe_veto dataframe/df028_SQliteIPLocation.C); list(APPEND dataframe_veto dataframe/df029_SQlitePlatformDistribution.C); list(APPEND dataframe_veto dataframe/df030_SQliteVersionsOfROOT.C); endif(). if(MACOSX_VERSION VERSION_EQUAL 10.13); list(APPEND dataframe_veto dataframe/df103_NanoAODHiggsAnalysis.*); endif(). if(NOT geom); set(geom_veto geom/*.C); endif(). if(NOT ROOT_proof_FOUND); set(proof_veto roostats/StandardFrequentistDiscovery.C); endif(). if(NOT ROOT_spectrum_FOUND); set(spectrum_veto spectrum/*.C); endif(). if(NOT ROOT_roofit_FOUND); set(roofit_veto roofit/*.C roofit/*.py; roostats/*.C roostats/*.py; histfactory/*.C histfactory/*.py); else(); if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The follow",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:6187,Integrability,interface,interface,6187,"lite); # RDF+SQlite tutorials; list(APPEND dataframe_veto dataframe/*SQlite*); endif(); if(NOT davix); list(APPEND dataframe_veto dataframe/df027_SQliteDependencyOverVersion.C); list(APPEND dataframe_veto dataframe/df028_SQliteIPLocation.C); list(APPEND dataframe_veto dataframe/df029_SQlitePlatformDistribution.C); list(APPEND dataframe_veto dataframe/df030_SQliteVersionsOfROOT.C); endif(). if(MACOSX_VERSION VERSION_EQUAL 10.13); list(APPEND dataframe_veto dataframe/df103_NanoAODHiggsAnalysis.*); endif(). if(NOT geom); set(geom_veto geom/*.C); endif(). if(NOT ROOT_proof_FOUND); set(proof_veto roostats/StandardFrequentistDiscovery.C); endif(). if(NOT ROOT_spectrum_FOUND); set(spectrum_veto spectrum/*.C); endif(). if(NOT ROOT_roofit_FOUND); set(roofit_veto roofit/*.C roofit/*.py; roostats/*.C roostats/*.py; histfactory/*.C histfactory/*.py); else(); if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The following tutorials are failing with this error:; # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!; # on Windows 32 bit and Visual Studio v17.8; list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C); # The following tutorial fails with a segfault (see #15364); list(APPEND roofit_veto roostats/rs101_limitexample.py); endif(); endif(). if(NOT ROOT_unuran_FOUND); set(unuran_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:7500,Integrability,depend,depends,7500,"an_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C; dataframe/df103_NanoAODHiggsAnalysis.C; dataframe/df106_HiggsToFourLeptons.C; tmva/tmva103_Application.C; dataframe/df033_Describe.py; dataframe/df102_NanoAODDimuonAnalysis.py; dataframe/df103_NanoAODHiggsAnalysis.py; dataframe/df104_HiggsToTwoPhotons.py; dataframe/df105_WBosonAnalysis.py; dataframe/df106_HiggsToFourLeptons.py; dataframe/df107_SingleTopAnalysis.py; roofit/rf618_mixture_models.py # depends on df106_HiggsToFourLeptons.py; rcanvas/df104.py; rcanvas/df105.py; ); endif(). # variables identifying the package must have the package name in lower case (it corresponds to the CMake option name); if(NOT ROOT_r_FOUND); set(r_veto r/*.C); endif(). set(histfactory_veto histfactory/makeExample.C). if(NOT ROOT_fitsio_FOUND); set(fitsio_veto fitsio/*.C); endif(). if(NOT ROOT_mathmore_FOUND); set(mathmore_veto; math/quasirandom.C; math/exampleMultiRoot.C; math/Bessel.C; math/LegendreAssoc.C; math/Legendre.C; math/mathmoreIntegration.C; math/multivarGaus.C; math/tStudent.C; math/normalDist.C; roostats/TestNonCentral.C; roostats/TestNonCentral.py; math/Legendre.py; math/Bessel.py; math/tStudent.py); endif(). if(NOT ROOT_fftw3_FOUND); set(fftw3_veto roofit/rf208_convolution.C; roofit/rf210_angularconv.C; roofit/rf211_paramconv.C; roofit/rf512_wsfactory_oper.C; roofit/rf208_convolution.py; roofit/rf210_angularconv.py; roofit/rf211_paramconv.py; roofit/rf512_wsfactory_oper.py; fft/FFT.C; fit/fitConvol",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:10306,Integrability,depend,depends,10306,rExercise.C gl/glViewerLOD.C gl/gviz3d.C gl/nucleus.C gl/viewer3DLocal.C gl/viewer3DMaster.C; gui/*.C; hist/exec1.C; hist/exec2.C; hist/tprofile2polyRealistic.C; hist/tprofile2polyRealisticModuleError.C; image/*.C; graphics/psview.C graphics/gtime.C; graphics/graph_edit_playback.C; roostats/ModelInspector.C; tree/tvdemo.C; eve/*.C; webgui/geom/geom_threejs.cxx; webgui/panel/webpanel.cxx; webgui/webwindow/webwindow.cxx); if (NOT webgui); list(APPEND gui_veto graphics/save_batch.C rcanvas/df104.py rcanvas/df105.py); endif(). if (NOT ROOT_tmva_FOUND); list(APPEND tmva_veto tmva/*.C tmva/*.py tmva/envelope/*.C tmva/keras/*.C tmva/keras/*.py tmva/pytorch/*.py ); else(); #---These do not need to run for TMVA; list(APPEND tmva_veto tmva/createData.C); if(MSVC AND NOT win_broken_tests); list(APPEND tmva_veto tmva/envelope/classification.C); endif(); #these depends on external packages; if (tmva-pymva); find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(sonnet QUIET); find_python_module(graph_nets QUIET); find_python_module(sklearn QUIET); endif(); if (NOT PY_KERAS_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_Keras.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_Keras_HiggsModel.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame_JIT.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_RSofieReader.C); list(APPEND tmva_veto tmva/RBatchGenerator_TensorFlow.py); endif(); if (NOT PY_SKLEARN_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py); endif(); if (NOT PY_TORCH_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_PyTorch.C); list(APPEND tmva_veto tmva/RBatchGenerator_PyTorch.py); endif(); #veto this tutorial since it is added directly; list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN_Parser.py); if (NOT PY_SONNET_FOUND OR NOT PY_GRAPH_NETS_FOUND); list(AP,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:15939,Integrability,message,message,15939,"ore_veto}; ${fftw3_veto}; ${opengl_veto}; ${gviz_veto}; ${r_veto}; ${runtime_cxxmodules_veto}; ${histfactory_veto}; ${tbb_veto}; ${imt_veto}; ${classic_veto}; ${geom_veto}; ${pythia_veto}; ${vecgeom_veto}; ${root7_veto}; ${xrootd_veto}; ${spectrum_veto}; ${dataframe_veto}; ${macm1_veto}; ${clad_veto}; ${proof_veto}; ). file(GLOB_RECURSE tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.C); if(webgui); file(GLOB_RECURSE tutorials_webcanv RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} webcanv/*.cxx); list(APPEND tutorials ${tutorials_webcanv}); endif(); if(root7 AND webgui); file(GLOB_RECURSE tutorials_v7 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} v7/*.cxx); list(APPEND tutorials ${tutorials_v7}); file(GLOB_RECURSE tutorials_rcanvas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} rcanvas/*.cxx); list(APPEND tutorials ${tutorials_rcanvas}); endif(); file(GLOB tutorials_veto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${all_veto}). list(LENGTH tutorials nTotal); list(REMOVE_ITEM tutorials ${tutorials_veto}); list(LENGTH tutorials nAfterVeto); message(STATUS ""${nAfterVeto}/${nTotal} C++ tutorials have been activated.""). if(mpi); set (temp_list ${tutorials}); list(FILTER tutorials INCLUDE REGEX ""MPI""); set(mpi_tutorials ${tutorials}); set(tutorials ${temp_list}); list(REMOVE_ITEM tutorials ${mpi_tutorials}); endif(). #---Special return code------------------------------------------------; set(returncode_1 fit/fit2a.C; graphics/earth.C; graphics/pavetext.C; graphics/tmathtext.C graphics/tmathtext2.C; graphs/exclusiongraph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:16731,Integrability,depend,depends,16731,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:16794,Integrability,depend,depends,16794,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:16857,Integrability,depend,depends,16857,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:16920,Integrability,depend,depends,16920,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:16983,Integrability,depend,depends,16983,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17046,Integrability,depend,depends,17046,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17107,Integrability,depend,depends,17107,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17161,Integrability,depend,depends,17161,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17223,Integrability,depend,depends,17223,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17283,Integrability,depend,depends,17283,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17329,Integrability,depend,depends,17329,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17378,Integrability,depend,depends,17378,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17435,Integrability,depend,depends,17435,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17484,Integrability,depend,depends,17484,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17537,Integrability,depend,depends,17537,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17586,Integrability,depend,depends,17586,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17635,Integrability,depend,depends,17635,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17907,Integrability,depend,depends,17907,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17988,Integrability,depend,depends,17988,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:18083,Integrability,depend,depends,18083,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:18167,Integrability,depend,depends,18167,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:18255,Integrability,depend,depending,18255,depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInspector; roostats-OneSidedFrequentistUpperLimitWithBands; roostats-OneSidedFrequentistUpperLimitWithBands; roostats-StandardBayesianMCMCDemo; roostats-StandardBayesianNumericalDemo; roostats-StandardFeldmanCousinsDemo; roostats-StandardFrequentistDiscovery; roostats-StandardHistFactoryPlotsWithCategories; roostats-StandardHypoTestDemo; roostats-StandardHypoTestInvDemo; roostats-StandardProfileInspectorDemo; roostats-StandardProfileLikelihoodDemo; roostats-StandardTestStatDistributionDemo; roostats-TwoSidedFrequentistUpperLimitWithBands); set(${tname}-depends tutorial-roostats-CreateExampleFile); set(${tname}-py-depends tutorial-roostats-CreateExampleFile); endforeach(). #--dependency for TMVA tutorials; set (tmva-TMVAClassificationApplication-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategory-depends tutorial-tmva-TMVAClassi,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:18976,Integrability,depend,depends,18976,w; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInspector; roostats-OneSidedFrequentistUpperLimitWithBands; roostats-OneSidedFrequentistUpperLimitWithBands; roostats-StandardBayesianMCMCDemo; roostats-StandardBayesianNumericalDemo; roostats-StandardFeldmanCousinsDemo; roostats-StandardFrequentistDiscovery; roostats-StandardHistFactoryPlotsWithCategories; roostats-StandardHypoTestDemo; roostats-StandardHypoTestInvDemo; roostats-StandardProfileInspectorDemo; roostats-StandardProfileLikelihoodDemo; roostats-StandardTestStatDistributionDemo; roostats-TwoSidedFrequentistUpperLimitWithBands); set(${tname}-depends tutorial-roostats-CreateExampleFile); set(${tname}-py-depends tutorial-roostats-CreateExampleFile); endforeach(). #--dependency for TMVA tutorials; set (tmva-TMVAClassificationApplication-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategory-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVA,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19038,Integrability,depend,depends,19038,w; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInspector; roostats-OneSidedFrequentistUpperLimitWithBands; roostats-OneSidedFrequentistUpperLimitWithBands; roostats-StandardBayesianMCMCDemo; roostats-StandardBayesianNumericalDemo; roostats-StandardFeldmanCousinsDemo; roostats-StandardFrequentistDiscovery; roostats-StandardHistFactoryPlotsWithCategories; roostats-StandardHypoTestDemo; roostats-StandardHypoTestInvDemo; roostats-StandardProfileInspectorDemo; roostats-StandardProfileLikelihoodDemo; roostats-StandardTestStatDistributionDemo; roostats-TwoSidedFrequentistUpperLimitWithBands); set(${tname}-depends tutorial-roostats-CreateExampleFile); set(${tname}-py-depends tutorial-roostats-CreateExampleFile); endforeach(). #--dependency for TMVA tutorials; set (tmva-TMVAClassificationApplication-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategory-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVA,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19101,Integrability,depend,dependency,19101,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19172,Integrability,depend,depends,19172,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19252,Integrability,depend,depends,19252,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19343,Integrability,depend,depends,19343,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19419,Integrability,depend,depends,19419,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19509,Integrability,depend,depends,19509,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19584,Integrability,depend,depends,19584,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19663,Integrability,depend,depends,19663,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19754,Integrability,depend,depends,19754,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19825,Integrability,depend,depends,19825,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19902,Integrability,depend,depends,19902,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:19972,Integrability,depend,depends,19972,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20049,Integrability,depend,depends,20049,,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20161,Integrability,depend,depends,20161,cation-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategory-depends tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-p,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20254,Integrability,depend,depends,20254,s tutorial-tmva-TMVAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-Classification,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20369,Integrability,depend,depends,20369,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20486,Integrability,depend,depends,20486,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20572,Integrability,depend,depends,20572,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20658,Integrability,depend,depends,20658,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20740,Integrability,depend,depends,20740,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20823,Integrability,depend,depends,20823,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:20922,Integrability,depend,depends,20922,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:21011,Integrability,depend,depends,21011,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:21120,Integrability,depend,depends,21120,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:21216,Integrability,depend,depends,21216,VAClassification); set (tmva-TMVAClassificationCategoryApplication-depends tutorial-tmva-TMVAClassificationCategory); set (tmva-TMVAMulticlass-depends tutorial-tmva-TMVAMultipleBackgroundExample); set (tmva-TMVAMulticlassApplication-depends tutorial-tmva-TMVAMulticlass); set (tmva-TMVARegressionApplication-depends tutorial-tmva-TMVARegression); set (tmva-TMVACrossValidationRegression-depends tutorial-tmva-TMVARegressionApplication); set (tmva-TMVACrossValidationApplication-depends tutorial-tmva-TMVACrossValidation); set (tmva-tmva101_Training-depends tutorial-tmva-tmva100_DataPreparation-py); set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py); set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification); set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader); if (PY_TORCH_FOUND); set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py); set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py); endif(); if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_RSofieReader); set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT); set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_SOFIE_RDataFrame); if (PY_TORCH_FOUND); set (tmva-keras-RegressionKeras-depends tutorial-tmva-pytorch-RegressionPyTorch-py); set (tmva-keras-ClassificationKeras-depends tutorial-tmva-pytorch-ClassificationPyTorch-py); endif(); set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif().,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:23075,Integrability,depend,depends,23075,"ATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded}). #---Loop over all tutorials and define the corresponding test---------. #---Define the primordial tutorials-----------------------------------; ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif(). #---Loop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on A",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24571,Integrability,depend,depends,24571,"nning); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 m",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25976,Integrability,depend,depends,25976,"y a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics for the Python tutorials; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.rootlogon.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); # Copy .enableImplicitMTWrapper.py file into the build directory. It can limit the size of the thread pool; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.enableImplicitMTWrapper.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). file(GLOB_RECURSE pytutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.py). # Now python-specific vetos:; set(pyveto pyroot/demo.py # requires GUI; pyroot/fit1_py.py # not a tutorial; pyroot/gui_ex.py # requires GUI; pyroot/mrt.py # not really a tutorial; pyroot/na49geomfile.p",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:27684,Integrability,depend,dependencies,27684,"y # requires GUI; pyroot/fit1_py.py # not a tutorial; pyroot/gui_ex.py # requires GUI; pyroot/mrt.py # not really a tutorial; pyroot/na49geomfile.py # ????; pyroot/na49visible.py # ????; pyroot/parse_CSV_file_with_TTree_ReadStream.py # not a tutorial; pyroot/numberEntry.py # requires GUI; legacy/pyroot/*py # legacy ...; histfactory/makeQuickModel.py # not a tutorial; eve/lineset.py # requires GUI; sql/sqlcreatedb.py # same as the C++ case; sql/sqlfilldb.py # same as the C++ case; sql/sqlselect.py # same as the C++ case; launcher.py # Not a tutorial; .enableImplicitMTWrapper.py # Not a tutorial; ). if(NOT dataframe; OR DEFINED ENV{ROOTTEST_IGNORE_NUMBA_PY3}; OR (MSVC AND NOT win_broken_tests)); list(APPEND pyveto pyroot/pyroot004_NumbaDeclare.py); endif(). if(dataframe AND DEFINED ENV{ROOTTEST_IGNORE_PANDAS_PY3}); list(APPEND pyveto dataframe/df026_AsNumpyArrays.py); endif(). # Rules specific to distributed RDataFrame; # Disable distributed RDF tutorials if we didn't check dependencies in the environment first; if(NOT test_distrdf_pyspark); list(APPEND pyveto dataframe/distrdf001_spark_connection.py); endif(); if(NOT test_distrdf_dask); list(APPEND pyveto dataframe/distrdf002_dask_connection.py); list(APPEND pyveto dataframe/distrdf003_live_visualization.py); endif(); # Use main Python executable to run in PySpark driver and executors; if(test_distrdf_pyspark); list(APPEND TUTORIAL_ENV PYSPARK_PYTHON=${Python3_EXECUTABLE}); if(MACOSX_VERSION VERSION_GREATER_EQUAL 10.13); # MacOS has changed rules about forking processes after 10.13; # Running pyspark tests with XCode Python3 throws crashes with errors like:; # `objc[17271]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called.`; # This issue should have been fixed after Python 3.8 (see https://bugs.python.org/issue33725); # Indeed, any other Python 3.8+ executable does not show this crash. It is; # specifically the XCode Python executable that triggers this.; # For now",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:29998,Integrability,depend,depends,29998," distrdf_spark_tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} dataframe/*spark*); file(GLOB distrdf_dask_tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} dataframe/*dask*). # Disable tutorial showing connection to the HTCondor service at CERN; list(APPEND pyveto dataframe/distrdf004_dask_lxbatch.py). find_python_module(xgboost QUIET); if(NOT PY_XGBOOST_FOUND OR NOT dataframe); file(GLOB tmva_veto_py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/tmva10*.py); list(APPEND pyveto ${tmva_veto_py}); endif(). if(NOT PY_KERAS_FOUND); file(GLOB tmva_veto_py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/keras/*.py); list(APPEND pyveto ${tmva_veto_py}); elseif(ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; list(APPEND pyveto tmva/keras/RegressionKeras.py); list(APPEND pyveto tmva/keras/ApplicationRegressionKeras.py); list(APPEND pyveto tmva/keras/MultiClassKeras.py); endif(). if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RDataFrame-py-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); endif(). if(NOT PY_TORCH_FOUND); file(GLOB tmva_veto_py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depe",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30702,Integrability,message,message,30702,"ng eager execution on macos; list(APPEND pyveto tmva/keras/RegressionKeras.py); list(APPEND pyveto tmva/keras/ApplicationRegressionKeras.py); list(APPEND pyveto tmva/keras/MultiClassKeras.py); endif(). if (PY_KERAS_FOUND); set (tmva-TMVA_SOFIE_RDataFrame-py-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel); endif(). if(NOT PY_TORCH_FOUND); file(GLOB tmva_veto_py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classificatio",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30804,Integrability,depend,dependencies,30804,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30875,Integrability,depend,depends,30875,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30937,Integrability,depend,depends,30937,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30996,Integrability,depend,depends,30996,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31165,Integrability,depend,depends,31165,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31223,Integrability,depend,depends,31223,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31289,Integrability,depend,depends,31289,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31368,Integrability,depend,depends,31368,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31534,Integrability,depend,depends,31534,"list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/k",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31611,Integrability,depend,depends,31611,"list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/k",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31694,Integrability,depend,depends,31694,"list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/k",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31778,Integrability,depend,depends,31778,"list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/k",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31860,Integrability,depend,depends,31860,"list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/k",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:34478,Integrability,depend,depends,34478," creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(setThreadPoolSize "".enableImplicitMTWrapper.py""); set(thisTestPoolSize ${NProcessors}); endif(); else(); unset(setThreadPoolSize); unset(thisTestPoolSize); endif(). string(REPLACE "".py"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fixtureList ${fixtureLists}); if(${t} IN_LIST ${fixtureList}); string(REPLACE ""requires_"" """" fixture ${fixtureList}); list(APPEND python_deps ${fixture}); list(APPEND labels python_runtime_deps); endif(); endforeach(). ROOT_ADD_TEST(${tutorial_name}; COMMAND ${Python3_EXECUTABLE} ${setThreadPoolSize} ${thisTestPoolSize} ${CMAKE_CURRENT_SOURCE_DIR}/${t}; PASSRC ${rc} FAILREGEX ""Error in"" "": error:"" ""segmentation violation""; LABELS ${labels}; DEPENDS ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; PYTHON_DEPS ${python_deps}; ${py_will_fail}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_spark_tutorials); # Create a resource lock for the creation of a Spark cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK spark_resource_lock PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_d",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:442,Modifiability,variab,variables,442,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT tutorials programs.; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(tutorials). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). if(DEFINED ROOT_SOURCE_DIR) # Testing using the binary tree; set(ROOT_root_CMD root.exe); if(NOT MSVC) # Ignore environment on Windows; set(ROOT_environ PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; ${ld_library_path}=${CMAKE_BINARY_DIR}/lib:$ENV{${ld_library_path}}; ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/lib:$ENV{PYTHONPATH}); else(); set(ROOT_environ ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/bin;$ENV{PYTHONPATH}); endif(); else() # testing using an installation; include(${ROOT_USE_FILE}); if(DEFINED ROOT_CONFIG_EXECUTABLE) #---If ROOT was built with the classic configure/make---; set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules); include(RootMacros); set(ROOT_root_CMD root.exe); endif(); enable_testing(); endif(). # Set the environment for the tutorials, which is the eventual ROOT_environ; # plus some environment variables related to limiting the number of threads; # used by NumPy.; # See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy; set(TUTORIAL_ENV ${ROOT_environ} OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1). #---Copy the CTestCustom.cmake file into the build directory--------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). #---Provide a rootlogon.C file in the current build directory that; # will affect the way we run all tutorials.; # This overwrites ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:1153,Modifiability,config,configure,1153,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT tutorials programs.; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(tutorials). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). if(DEFINED ROOT_SOURCE_DIR) # Testing using the binary tree; set(ROOT_root_CMD root.exe); if(NOT MSVC) # Ignore environment on Windows; set(ROOT_environ PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; ${ld_library_path}=${CMAKE_BINARY_DIR}/lib:$ENV{${ld_library_path}}; ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/lib:$ENV{PYTHONPATH}); else(); set(ROOT_environ ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/bin;$ENV{PYTHONPATH}); endif(); else() # testing using an installation; include(${ROOT_USE_FILE}); if(DEFINED ROOT_CONFIG_EXECUTABLE) #---If ROOT was built with the classic configure/make---; set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules); include(RootMacros); set(ROOT_root_CMD root.exe); endif(); enable_testing(); endif(). # Set the environment for the tutorials, which is the eventual ROOT_environ; # plus some environment variables related to limiting the number of threads; # used by NumPy.; # See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy; set(TUTORIAL_ENV ${ROOT_environ} OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1). #---Copy the CTestCustom.cmake file into the build directory--------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). #---Provide a rootlogon.C file in the current build directory that; # will affect the way we run all tutorials.; # This overwrites ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:1449,Modifiability,variab,variables,1449,"OT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). if(DEFINED ROOT_SOURCE_DIR) # Testing using the binary tree; set(ROOT_root_CMD root.exe); if(NOT MSVC) # Ignore environment on Windows; set(ROOT_environ PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; ${ld_library_path}=${CMAKE_BINARY_DIR}/lib:$ENV{${ld_library_path}}; ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/lib:$ENV{PYTHONPATH}); else(); set(ROOT_environ ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/bin;$ENV{PYTHONPATH}); endif(); else() # testing using an installation; include(${ROOT_USE_FILE}); if(DEFINED ROOT_CONFIG_EXECUTABLE) #---If ROOT was built with the classic configure/make---; set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules); include(RootMacros); set(ROOT_root_CMD root.exe); endif(); enable_testing(); endif(). # Set the environment for the tutorials, which is the eventual ROOT_environ; # plus some environment variables related to limiting the number of threads; # used by NumPy.; # See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy; set(TUTORIAL_ENV ${ROOT_environ} OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1). #---Copy the CTestCustom.cmake file into the build directory--------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). #---Provide a rootlogon.C file in the current build directory that; # will affect the way we run all tutorials.; # This overwrites the existing rootlogon.C and rootalias.C in the; # tutorials directory which is copied to the build area.; #-------------------------------------------------------------------; file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/rootlogon.C ""{; // Needed by ACLiC to use the current directory for scratch area; gSystem->SetBuildDir(\"".\"", kTRUE);; }""); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/rootalias.C """"); file(WRITE ${CMAKE_CURRENT_BINARY_DI",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:7590,Modifiability,variab,variables,7590," histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C; dataframe/df103_NanoAODHiggsAnalysis.C; dataframe/df106_HiggsToFourLeptons.C; tmva/tmva103_Application.C; dataframe/df033_Describe.py; dataframe/df102_NanoAODDimuonAnalysis.py; dataframe/df103_NanoAODHiggsAnalysis.py; dataframe/df104_HiggsToTwoPhotons.py; dataframe/df105_WBosonAnalysis.py; dataframe/df106_HiggsToFourLeptons.py; dataframe/df107_SingleTopAnalysis.py; roofit/rf618_mixture_models.py # depends on df106_HiggsToFourLeptons.py; rcanvas/df104.py; rcanvas/df105.py; ); endif(). # variables identifying the package must have the package name in lower case (it corresponds to the CMake option name); if(NOT ROOT_r_FOUND); set(r_veto r/*.C); endif(). set(histfactory_veto histfactory/makeExample.C). if(NOT ROOT_fitsio_FOUND); set(fitsio_veto fitsio/*.C); endif(). if(NOT ROOT_mathmore_FOUND); set(mathmore_veto; math/quasirandom.C; math/exampleMultiRoot.C; math/Bessel.C; math/LegendreAssoc.C; math/Legendre.C; math/mathmoreIntegration.C; math/multivarGaus.C; math/tStudent.C; math/normalDist.C; roostats/TestNonCentral.C; roostats/TestNonCentral.py; math/Legendre.py; math/Bessel.py; math/tStudent.py); endif(). if(NOT ROOT_fftw3_FOUND); set(fftw3_veto roofit/rf208_convolution.C; roofit/rf210_angularconv.C; roofit/rf211_paramconv.C; roofit/rf512_wsfactory_oper.C; roofit/rf208_convolution.py; roofit/rf210_angularconv.py; roofit/rf211_paramconv.py; roofit/rf512_wsfactory_oper.py; fft/FFT.C; fit/fitConvolution.C; fit/fitConvolution.py); endif(). if(NOT ROOT_opengl_FOUND); set(opengl_veto tree/staff.C; gl/*.C); endif(). if(NOT GRAPHVIZ_FOUND); set(gviz_",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:31435,Performance,race condition,race condition,31435,"list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/k",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24089,Safety,timeout,timeout,24089,"oop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over al",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25467,Safety,timeout,timeout,25467,"l""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics for the Python tutorials; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.rootlogon.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); # Copy .enableImplicitMTWrapper.py file into the build directory. It can limit the size of the thread pool; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.enableImpli",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:1021,Testability,test,testing,1021,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # CMakeLists.txt for the ROOT tutorials programs.; # Author: Pere Mato, 25/10/2010; cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(tutorials). # Sergey: make no sence while CMakeLists.txt file cannot be used separately from ROOT; # but variables like ROOT_asimage_FOUND used here and produced in ROOTConfig.cmake; find_package(ROOT REQUIRED). if(DEFINED ROOT_SOURCE_DIR) # Testing using the binary tree; set(ROOT_root_CMD root.exe); if(NOT MSVC) # Ignore environment on Windows; set(ROOT_environ PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; ${ld_library_path}=${CMAKE_BINARY_DIR}/lib:$ENV{${ld_library_path}}; ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/lib:$ENV{PYTHONPATH}); else(); set(ROOT_environ ROOTSYS=${CMAKE_BINARY_DIR}; PYTHONPATH=${CMAKE_BINARY_DIR}/bin;$ENV{PYTHONPATH}); endif(); else() # testing using an installation; include(${ROOT_USE_FILE}); if(DEFINED ROOT_CONFIG_EXECUTABLE) #---If ROOT was built with the classic configure/make---; set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules); include(RootMacros); set(ROOT_root_CMD root.exe); endif(); enable_testing(); endif(). # Set the environment for the tutorials, which is the eventual ROOT_environ; # plus some environment variables related to limiting the number of threads; # used by NumPy.; # See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy; set(TUTORIAL_ENV ${ROOT_environ} OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1). #---Copy the CTestCustom.cmake file into the build directory--------; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_CURRENT_BINARY_DIR} COPYONLY). #---Provide a rootlogon.C file in the current build directory that; # will affect the way we run all tutorials.; # This overwrites ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:3453,Testability,test,test,3453,"DIR}/rootlogoff.C ""{}""); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/.rootrc ""; Proof.Sandbox: /tmp/proof; Rint.History: .root_hist; ACLiC.LinkLibs: 1; ""). #---Tutorials that need substantial network to work------------------; set(need_network dataframe/df027_SQliteDependencyOverVersion.C). #---Tutorials disabled depending on the build components-------------. if(NOT clad); set(clad_veto fit/minuit2GausFit.C; # TODO: the next veto should not be necessary!; # The tutorial should also work without clad.; # See https://github.com/root-project/root/issues/15091.; fit/exampleFit3D.C; ); endif(). if(MSVC AND NOT win_broken_tests); # RBatchGenerator tutorials don't work on Windows at the moment.; list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # df036* and df037* seem to trigger OS errors when trying to delete the; # test files created in the tutorials. It is unclear why.; list(APPEND dataframe_veto dataframe/df036_missingBranches.C); list(APPEND dataframe_veto dataframe/df036_missingBranches.py); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.C); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.py); # The RooFit SBI tutorials fail on Windows for unknown reasons; list(APPEND roofit_veto roofit/rf617_simulation_based_inference_multidimensional.py); endif(). # TODO: fix the problem and re-enable the tutorial test. The rf615 tutorial; # occasionally fails on cleanup on different platforms, hinting to a PyROOT; # issue. We disable the rf617 tutorial for now. as the covered RooFit; # functionality is also covered by rf617 (the multidimensional case).; list(APPEND roofit_veto roofit/rf615_simulation_based_inference.py). if (NOT dataframe); # RDataFrame; list(APPEND dataframe_veto dataframe/*.C dataframe/*.py); # RDataFrame tutorial in graphs; list(APPEND ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:3980,Testability,test,test,3980,"om/root-project/root/issues/15091.; fit/exampleFit3D.C; ); endif(). if(MSVC AND NOT win_broken_tests); # RBatchGenerator tutorials don't work on Windows at the moment.; list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # df036* and df037* seem to trigger OS errors when trying to delete the; # test files created in the tutorials. It is unclear why.; list(APPEND dataframe_veto dataframe/df036_missingBranches.C); list(APPEND dataframe_veto dataframe/df036_missingBranches.py); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.C); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.py); # The RooFit SBI tutorials fail on Windows for unknown reasons; list(APPEND roofit_veto roofit/rf617_simulation_based_inference_multidimensional.py); endif(). # TODO: fix the problem and re-enable the tutorial test. The rf615 tutorial; # occasionally fails on cleanup on different platforms, hinting to a PyROOT; # issue. We disable the rf617 tutorial for now. as the covered RooFit; # functionality is also covered by rf617 (the multidimensional case).; list(APPEND roofit_veto roofit/rf615_simulation_based_inference.py). if (NOT dataframe); # RDataFrame; list(APPEND dataframe_veto dataframe/*.C dataframe/*.py); # RDataFrame tutorial in graphs; list(APPEND dataframe_veto graphs/timeSeriesFromCSV_TDF.C); # TMVA tutorials dependent on RDataFrame; list(APPEND dataframe_veto tmva/tmva*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.py); list(APPEND dataframe_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/R",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:6528,Testability,test,testrandom,6528,"ERSION_EQUAL 10.13); list(APPEND dataframe_veto dataframe/df103_NanoAODHiggsAnalysis.*); endif(). if(NOT geom); set(geom_veto geom/*.C); endif(). if(NOT ROOT_proof_FOUND); set(proof_veto roostats/StandardFrequentistDiscovery.C); endif(). if(NOT ROOT_spectrum_FOUND); set(spectrum_veto spectrum/*.C); endif(). if(NOT ROOT_roofit_FOUND); set(roofit_veto roofit/*.C roofit/*.py; roostats/*.C roostats/*.py; histfactory/*.C histfactory/*.py); else(); if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The following tutorials are failing with this error:; # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!; # on Windows 32 bit and Visual Studio v17.8; list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C); # The following tutorial fails with a segfault (see #15364); list(APPEND roofit_veto roostats/rs101_limitexample.py); endif(); endif(). if(NOT ROOT_unuran_FOUND); set(unuran_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C; dataframe/df103_NanoAODHiggsAnalysis.C; dataframe/df106_HiggsToFourLeptons.C; tmva/tmva103_Application.C; dataframe/df033_Describe.py; dataframe/df102_NanoAODDimuonAnalysis.py; dataframe/df103_NanoAODHiggsAnalysis.py; dataframe/df104_HiggsToTwoPhotons.py; dataframe/df105_WBosonAnalysis.py; dataframe/df106_HiggsToFourLeptons.py; dataframe/df107_SingleTopAnalysis.py; roofit/rf618_mixture_models.py # depends o",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:6823,Testability,test,test,6823,"T_roofit_FOUND); set(roofit_veto roofit/*.C roofit/*.py; roostats/*.C roostats/*.py; histfactory/*.C histfactory/*.py); else(); if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The following tutorials are failing with this error:; # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!; # on Windows 32 bit and Visual Studio v17.8; list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C); # The following tutorial fails with a segfault (see #15364); list(APPEND roofit_veto roostats/rs101_limitexample.py); endif(); endif(). if(NOT ROOT_unuran_FOUND); set(unuran_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C; dataframe/df103_NanoAODHiggsAnalysis.C; dataframe/df106_HiggsToFourLeptons.C; tmva/tmva103_Application.C; dataframe/df033_Describe.py; dataframe/df102_NanoAODDimuonAnalysis.py; dataframe/df103_NanoAODHiggsAnalysis.py; dataframe/df104_HiggsToTwoPhotons.py; dataframe/df105_WBosonAnalysis.py; dataframe/df106_HiggsToFourLeptons.py; dataframe/df107_SingleTopAnalysis.py; roofit/rf618_mixture_models.py # depends on df106_HiggsToFourLeptons.py; rcanvas/df104.py; rcanvas/df105.py; ); endif(). # variables identifying the package must have the package name in lower case (it corresponds to the CMake option name); if(NOT ROOT_r_FOUND); set(r_veto r/*.C); endif(). set(histfactory_veto histfactory/makeExample.C). if(NOT ROOT_fitsio_FO",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:6970,Testability,test,testTMPIFile,6970,"if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The following tutorials are failing with this error:; # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!; # on Windows 32 bit and Visual Studio v17.8; list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C); # The following tutorial fails with a segfault (see #15364); list(APPEND roofit_veto roostats/rs101_limitexample.py); endif(); endif(). if(NOT ROOT_unuran_FOUND); set(unuran_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C; dataframe/df103_NanoAODHiggsAnalysis.C; dataframe/df106_HiggsToFourLeptons.C; tmva/tmva103_Application.C; dataframe/df033_Describe.py; dataframe/df102_NanoAODDimuonAnalysis.py; dataframe/df103_NanoAODHiggsAnalysis.py; dataframe/df104_HiggsToTwoPhotons.py; dataframe/df105_WBosonAnalysis.py; dataframe/df106_HiggsToFourLeptons.py; dataframe/df107_SingleTopAnalysis.py; roofit/rf618_mixture_models.py # depends on df106_HiggsToFourLeptons.py; rcanvas/df104.py; rcanvas/df105.py; ); endif(). # variables identifying the package must have the package name in lower case (it corresponds to the CMake option name); if(NOT ROOT_r_FOUND); set(r_veto r/*.C); endif(). set(histfactory_veto histfactory/makeExample.C). if(NOT ROOT_fitsio_FOUND); set(fitsio_veto fitsio/*.C); endif(). if(NOT ROOT_mathmore_FOUND); set(mathmore_veto; math/quasirandom.C; math/exampleMult",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:9138,Testability,test,testoptical,9138,ral.C; roostats/TestNonCentral.py; math/Legendre.py; math/Bessel.py; math/tStudent.py); endif(). if(NOT ROOT_fftw3_FOUND); set(fftw3_veto roofit/rf208_convolution.C; roofit/rf210_angularconv.C; roofit/rf211_paramconv.C; roofit/rf512_wsfactory_oper.C; roofit/rf208_convolution.py; roofit/rf210_angularconv.py; roofit/rf211_paramconv.py; roofit/rf512_wsfactory_oper.py; fft/FFT.C; fit/fitConvolution.C; fit/fitConvolution.py); endif(). if(NOT ROOT_opengl_FOUND); set(opengl_veto tree/staff.C; gl/*.C); endif(). if(NOT GRAPHVIZ_FOUND); set(gviz_veto graphs/graphstruct.C); endif(). if(NOT TBB_FOUND AND NOT builtin_tbb); set(tbb_veto multicore/mtbb*.C); endif(). if(NOT ROOT_imt_FOUND); set(imt_veto multicore/imt*.C multicore/mt*.C); endif(); if(MSVC); #---Multiproc is not supported on Windows; set(imt_veto ${imt_veto} multicore/mp*.C multicore/mtbb201_parallelHistoFill.C); endif(). if(ROOT_CLASSIC_BUILD); set(classic_veto multicore/mp104_*.C multicore/mp105_*.C); endif(). if(NOT gdml); set(gdml_veto geom/gdml/testoptical.C); endif(). #---These ones requires a display to run-----------------------------; set(gui_veto fit/fitpanel_playback.C; cocoa/*.C; geom/building.C geom/cheongwadae.C geom/geom*.C geom/lego.C geom/robot.C geom/south_gate.C geom/station*.C geom/tank.C geom/webdemo.C geom/web_cms.cxx; gl/glViewerExercise.C gl/glViewerLOD.C gl/gviz3d.C gl/nucleus.C gl/viewer3DLocal.C gl/viewer3DMaster.C; gui/*.C; hist/exec1.C; hist/exec2.C; hist/tprofile2polyRealistic.C; hist/tprofile2polyRealisticModuleError.C; image/*.C; graphics/psview.C graphics/gtime.C; graphics/graph_edit_playback.C; roostats/ModelInspector.C; tree/tvdemo.C; eve/*.C; webgui/geom/geom_threejs.cxx; webgui/panel/webpanel.cxx; webgui/webwindow/webwindow.cxx); if (NOT webgui); list(APPEND gui_veto graphics/save_batch.C rcanvas/df104.py rcanvas/df105.py); endif(). if (NOT ROOT_tmva_FOUND); list(APPEND tmva_veto tmva/*.C tmva/*.py tmva/envelope/*.C tmva/keras/*.C tmva/keras/*.py tmva/pytorch/*.py ); else(); #---Th,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:11715,Testability,test,test,11715,"tmva_veto tmva/TMVA_SOFIE_RDataFrame.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame_JIT.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_RSofieReader.C); list(APPEND tmva_veto tmva/RBatchGenerator_TensorFlow.py); endif(); if (NOT PY_SKLEARN_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py); endif(); if (NOT PY_TORCH_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_PyTorch.C); list(APPEND tmva_veto tmva/RBatchGenerator_PyTorch.py); endif(); #veto this tutorial since it is added directly; list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN_Parser.py); if (NOT PY_SONNET_FOUND OR NOT PY_GRAPH_NETS_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN_Application.C); endif(); if (NOT tmva-sofie); list(APPEND tmva_veto tmva/TMVA_SOFIE_ONNX.C); else(); #copy ONNX file needed for the tutorial; configure_file(${CMAKE_SOURCE_DIR}/tmva/sofie/test/input_models/Linear_16.onnx ${CMAKE_BINARY_DIR}/tutorials/tmva/Linear_16.onnx COPYONLY); endif(). endif(). if (NOT ROOT_pythia8_FOUND); set(pythia_veto pythia/pythia8.C); else(); if(""$ENV{PYTHIA8}"" STREQUAL """"); get_filename_component(pythia8dir ""${PYTHIA8_INCLUDE_DIR}"" DIRECTORY); list(APPEND TUTORIAL_ENV PYTHIA8=${pythia8dir}); endif(); if(""$ENV{PYTHIA8DATA}"" STREQUAL """" AND PYTHIA8_DATA); list(APPEND TUTORIAL_ENV PYTHIA8DATA=${PYTHIA8_DATA}); endif(); endif(). if (NOT ROOT_vecgeom_FOUND); set(vecgeom_veto geom/tessellatedNav.C); endif(). if(root7); set(root7_veto dataframe/df013_InspectAnalysis.C; v7/browser.cxx; v7/filedialog.cxx; v7/fitpanel.cxx; v7/fitpanel6.cxx; ); if(NOT davix); list(APPEND root7_veto v7/ntuple/ntpl004_dimuon.C); list(APPEND root7_veto v7/ntuple/ntpl011_global_temperatures.C); endif(); if(NOT dataframe); list(APPEND root7_veto v7/ntuple/ntpl011_global_temperatures.C); list(APPEND root7_veto v7/ntuple/ntpl004_dimuon.C); li",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:13535,Testability,benchmark,benchmarks,13535,/ntuple/ntpl011_global_temperatures.C); endif(); if(NOT dataframe); list(APPEND root7_veto v7/ntuple/ntpl011_global_temperatures.C); list(APPEND root7_veto v7/ntuple/ntpl004_dimuon.C); list(APPEND root7_veto v7/ntuple/ntpl008_import.C); list(APPEND root7_veto rcanvas/df104.py); list(APPEND root7_veto rcanvas/df105.py); endif(); if(MSVC AND NOT win_broken_tests); #---EOS is not supported on Windows; list(APPEND root7_veto rcanvas/df104.py); list(APPEND root7_veto rcanvas/df105.py); list(APPEND root7_veto rcanvas/rbox.py); endif(); else(); if(MSVC AND NOT win_broken_tests); list(APPEND root7_veto dataframe/df013_InspectAnalysis.C); endif(); file(GLOB v7_veto_files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/ v7/*.py v7/*.cxx v7/*/*.cxx v7/*.C v7/*/*.C rcanvas/*.py rcanvas/*.cxx); list(APPEND root7_veto ${v7_veto_files}); endif(). if (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64); set(macm1_veto dataframe/df107_SingleTopAnalysis.py); endif(). #---These ones are disabled !!! ------------------------------------; set(extra_veto; legacy/benchmarks.C; legacy/htmlex.C; legacy/rootalias.C # Helper macro; rootlogon.C # Helper macro; rootlogoff.C # Helper macro; legacy/rootmarks.C # Instrumentation. Not a standalone tutorial; multicore/mp_H1_lambdas.C # not a tutorial; used by mp104_processH1.C et al.; html/*.C; net/*.C; proof/*.C; sql/*.C; tree/hsimpleProxy.C # A driver uses this macro which cannot be executed directly; tree/tree0.C; tree/tree2a.C; tree/tree4.C; roostats/rs401d_FeldmanCousins.C # Takes too much time; histfactory/ModifyInterpolation.C; tree/copytree2.C; tree/copytree3.C; tree/copytree.C; tree/h1analysis*.C # these are not a tutorial but classes used in run_h1analysis.C; tree/h1chain.C; http/*.C; eve7/*.C; r/rootlogon.C). if(MSVC AND NOT llvm13_broken_tests); list(APPEND extra_veto; math/exampleFunction.py; dataframe/df002_dataModel.C; dataframe/df016_vecOps.C; dataframe/df017_vecOpsHEP.C; dataframe/df002_dataModel.py; dataframe/df016_vecOps.py; dataframe/df017_vecOp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:17624,Testability,benchmark,benchmarks-depends,17624,aph.C; graphs/graphstruct.C; hist/ContourList.C; hist/hbars.C; hist/th2polyBoxes.C; hist/statsEditing.C; hist/cumulative.C; hist/hlabels1.C; hist/hlabels2.C; tree/h1analysis.C; math/chi2test.C; r/SimpleFitting.C); #---Dependencies------------------------------------------------------; set(unfold-testUnfold5d-depends tutorial-unfold-testUnfold5c); set(unfold-testUnfold5c-depends tutorial-unfold-testUnfold5b); set(unfold-testUnfold5b-depends tutorial-unfold-testUnfold5a); set(unfold-testUnfold7d-depends tutorial-unfold-testUnfold7c); set(unfold-testUnfold7c-depends tutorial-unfold-testUnfold7b); set(unfold-testUnfold7b-depends tutorial-unfold-testUnfold7a); set(xml-xmlmodifyfile-depends tutorial-xml-xmlnewfile); set(xml-xmlreadfile-depends tutorial-xml-xmlnewfile); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite); set(io-readCode-depends tutorial-io-importCode); set(fit-fit1-depends tutorial-hist-fillrandom); set(fit-myfit-depends tutorial-fit-fitslicesy); set(foam-foam_demopers-depends tutorial-foam-foam_demo); set(tree-staff-depends tutorial-tree-cernbuild); set(tree-cernstaff-depends tutorial-tree-cernbuild); set(hist-hbars-depends tutorial-tree-cernbuild); set(benchmarks-depends tutorial-hsimple; tutorial-fit-fit1; tutorial-fit-myfit; tutorial-hist-h1ReadAndDraw; tutorial-hist-FirstContour; tutorial-geom-na49view; tutorial-tree-ntuple1; tutorial-tree-spider; tutorial-io-hadd; tutorial-io-loopdir; tutorial-io-copyFiles); set(geom-na49view-depends tutorial-geom-geometry); set(multicore-mt102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mt101_fillNtuples); set(multicore-mp102_readNtuplesFillHistosAndFit-depends tutorial-multicore-mp101_fillNtuples); set(multicore-mp105_processEntryList-depends tutorial-multicore-mp104_processH1). #--many histfactory and roostats tutorials depending on having creating the file first with histfactory and example_combined_GaussExample_model.root; foreach(tname histfactory-hf001_example; roostats-ModelInsp,MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:22148,Testability,test,test,22148,"s tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif(). #--List long-running tutorials to label them as ""longtest""; set (long_running; dataframe/df10[2-7]*; multicore/mp103*); file(GLOB long_running RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${long_running}); #--List multithreaded tutorials to run them serially; set(NProcessors 4); set (multithreaded_all_cores; dataframe/df10[2-7]*; rcanvas/df10*; ); set (multithreaded; ${multithreaded_all_cores}; multicore/mp103*; tmva/TMVAMulticlass.C; tmva/TMVA_CNN_Classification.C; tmva/TMVA_Higgs_Classification.C; tmva/TMVA_RNN_Classification.C; tmva/TMVA_CNN_Classification.py; tmva/TMVA_Higgs_Classification.py; tmva/TMVA_RNN_Classification.py; ); file(GLOB multithreaded_all_cores RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded_all_cores}); file(GLOB multithreaded RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded}). #---Loop over all tutorials and define the corresponding test---------. #---Define the primordial tutorials-----------------------------------; ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:23187,Testability,test,test,23187,"ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif(). #---Loop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24028,Testability,test,tests,24028,"oop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over al",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24801,Testability,test,tests,24801,"s a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${R",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25181,Testability,test,test,25181,"t 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics ",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25406,Testability,test,tests,25406,"l""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics for the Python tutorials; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.rootlogon.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); # Copy .enableImplicitMTWrapper.py file into the build directory. It can limit the size of the thread pool; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.enableImpli",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:28273,Testability,test,tests,28273,"_NUMBA_PY3}; OR (MSVC AND NOT win_broken_tests)); list(APPEND pyveto pyroot/pyroot004_NumbaDeclare.py); endif(). if(dataframe AND DEFINED ENV{ROOTTEST_IGNORE_PANDAS_PY3}); list(APPEND pyveto dataframe/df026_AsNumpyArrays.py); endif(). # Rules specific to distributed RDataFrame; # Disable distributed RDF tutorials if we didn't check dependencies in the environment first; if(NOT test_distrdf_pyspark); list(APPEND pyveto dataframe/distrdf001_spark_connection.py); endif(); if(NOT test_distrdf_dask); list(APPEND pyveto dataframe/distrdf002_dask_connection.py); list(APPEND pyveto dataframe/distrdf003_live_visualization.py); endif(); # Use main Python executable to run in PySpark driver and executors; if(test_distrdf_pyspark); list(APPEND TUTORIAL_ENV PYSPARK_PYTHON=${Python3_EXECUTABLE}); if(MACOSX_VERSION VERSION_GREATER_EQUAL 10.13); # MacOS has changed rules about forking processes after 10.13; # Running pyspark tests with XCode Python3 throws crashes with errors like:; # `objc[17271]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called.`; # This issue should have been fixed after Python 3.8 (see https://bugs.python.org/issue33725); # Indeed, any other Python 3.8+ executable does not show this crash. It is; # specifically the XCode Python executable that triggers this.; # For now, there seems no other way than this workaround,; # which effectively sets the behaviour of `fork` back to MacOS 10.12; list(APPEND TUTORIAL_ENV OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES); endif(); endif(); # These lists keep track of distrdf tutorials, so we can add specific properties later; file(GLOB distrdf_spark_tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} dataframe/*spark*); file(GLOB distrdf_dask_tutorials RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} dataframe/*dask*). # Disable tutorial showing connection to the HTCondor service at CERN; list(APPEND pyveto dataframe/distrdf004_dask_lxbatch.py). find_python_module(xgboost QUIET); if(NOT PY_XGBOOST",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30985,Testability,benchmark,benchmarks-depends,30985,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:32975,Testability,test,tests,32975,"ials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/keras/*.py); file(GLOB requires_torch RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); file(GLOB requires_xgboost RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/tmva10*.py); set(fixtureLists requires_numpy requires_numba requires_pandas requires_keras requires_xgboost requires_torch). # Now set up all the tests; foreach(t ${pytutorials}); if (${t} IN_LIST returncode_1); set(rc 255); else(); set(rc 0); endif(). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(setThreadPoolSize "".enableImplicitMTWrapper.py""); set(thisTestPoolSize ${NProcessors}); endif(); else(); unset(setThreadPoolSize); unset(thisTestPoolSize); endif(). string(REPLACE "".py"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fix",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:34725,Testability,test,tests,34725,"thisTestPoolSize); endif(). string(REPLACE "".py"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fixtureList ${fixtureLists}); if(${t} IN_LIST ${fixtureList}); string(REPLACE ""requires_"" """" fixture ${fixtureList}); list(APPEND python_deps ${fixture}); list(APPEND labels python_runtime_deps); endif(); endforeach(). ROOT_ADD_TEST(${tutorial_name}; COMMAND ${Python3_EXECUTABLE} ${setThreadPoolSize} ${thisTestPoolSize} ${CMAKE_CURRENT_SOURCE_DIR}/${t}; PASSRC ${rc} FAILREGEX ""Error in"" "": error:"" ""segmentation violation""; LABELS ${labels}; DEPENDS ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; PYTHON_DEPS ${python_deps}; ${py_will_fail}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_spark_tutorials); # Create a resource lock for the creation of a Spark cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK spark_resource_lock PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_dask_tutorials); # Create a resource lock for the creation of a Dask cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOU",MatchSource.DOCS,tutorials/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/buildconfig/global.txt:53,Testability,assert,asserts,53,alien=OFF; all=OFF; arrow=OFF; asan=OFF; asimage=ON; asserts=OFF; builtin_cfitsio=OFF; builtin_clang=ON; builtin_cling=ON; builtin_cppzmq=ON; builtin_davix=OFF; builtin_fftw3=OFF; builtin_freetype=OFF; builtin_ftgl=OFF; builtin_gl2ps=OFF; builtin_glew=OFF; builtin_gsl=OFF; builtin_llvm=ON; builtin_lz4=OFF; builtin_lzma=OFF; builtin_nlohmannjson=OFF; builtin_openssl=OFF; builtin_openui5=ON; builtin_pcre=OFF; builtin_tbb=OFF; builtin_unuran=ON; builtin_vc=OFF; builtin_vdt=OFF; builtin_veccore=OFF; builtin_xrootd=OFF; builtin_xxhash=OFF; builtin_zeromq=ON; builtin_zlib=OFF; builtin_zstd=OFF; ccache=OFF; cefweb=OFF; clad=ON; clingtest=OFF; cocoa=OFF; coverage=OFF; cuda=OFF; cxxmodules=OFF; daos=OFF; dataframe=ON; davix=ON; dcache=OFF; dev=OFF; distcc=OFF; fail-on-missing=On; fcgi=OFF; fftw3=ON; fitsio=ON; fortran=ON; gdml=ON; gminimal=OFF; gnuinstall=OFF; gsl_shared=OFF; gviz=OFF; http=ON; imt=ON; jemalloc=OFF; libcxx=OFF; macos_native=OFF; mathmore=ON; memory_termination=OFF; minimal=OFF; mpi=OFF; mysql=ON; odbc=OFF; opengl=ON; pgsql=ON; pyroot=ON; pythia8=ON; qt5web=OFF; qt6web=OFF; r=OFF; roofit=ON; roofit_multiprocess=ON; root7=ON; rootbench=OFF; roottest=ON; roottest_force_checkout=OFF; rpath=ON; runtime_cxxmodules=ON; shadowpw=OFF; shared=ON; soversion=OFF; spectrum=ON; sqlite=ON; ssl=ON; tcmalloc=OFF; test_distrdf_dask=ON; test_distrdf_pyspark=ON; testing=ON; tmva-cpu=ON; tmva-gpu=OFF; tmva-cudnn=OFF; tmva-pymva=ON; tmva-rmva=OFF; tmva-sofie=OFF; tmva=ON; unfold=ON; unuran=ON; uring=OFF; vc=OFF; vdt=ON; veccore=OFF; vecgeom=OFF; webgui=ON; win_broken_tests=OFF; winrtdebug=OFF; x11=ON; xml=ON; xrootd=ON; ,MatchSource.DOCS,.github/workflows/root-ci-config/buildconfig/global.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/buildconfig/global.txt
https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/buildconfig/global.txt:1373,Testability,test,testing,1373,alien=OFF; all=OFF; arrow=OFF; asan=OFF; asimage=ON; asserts=OFF; builtin_cfitsio=OFF; builtin_clang=ON; builtin_cling=ON; builtin_cppzmq=ON; builtin_davix=OFF; builtin_fftw3=OFF; builtin_freetype=OFF; builtin_ftgl=OFF; builtin_gl2ps=OFF; builtin_glew=OFF; builtin_gsl=OFF; builtin_llvm=ON; builtin_lz4=OFF; builtin_lzma=OFF; builtin_nlohmannjson=OFF; builtin_openssl=OFF; builtin_openui5=ON; builtin_pcre=OFF; builtin_tbb=OFF; builtin_unuran=ON; builtin_vc=OFF; builtin_vdt=OFF; builtin_veccore=OFF; builtin_xrootd=OFF; builtin_xxhash=OFF; builtin_zeromq=ON; builtin_zlib=OFF; builtin_zstd=OFF; ccache=OFF; cefweb=OFF; clad=ON; clingtest=OFF; cocoa=OFF; coverage=OFF; cuda=OFF; cxxmodules=OFF; daos=OFF; dataframe=ON; davix=ON; dcache=OFF; dev=OFF; distcc=OFF; fail-on-missing=On; fcgi=OFF; fftw3=ON; fitsio=ON; fortran=ON; gdml=ON; gminimal=OFF; gnuinstall=OFF; gsl_shared=OFF; gviz=OFF; http=ON; imt=ON; jemalloc=OFF; libcxx=OFF; macos_native=OFF; mathmore=ON; memory_termination=OFF; minimal=OFF; mpi=OFF; mysql=ON; odbc=OFF; opengl=ON; pgsql=ON; pyroot=ON; pythia8=ON; qt5web=OFF; qt6web=OFF; r=OFF; roofit=ON; roofit_multiprocess=ON; root7=ON; rootbench=OFF; roottest=ON; roottest_force_checkout=OFF; rpath=ON; runtime_cxxmodules=ON; shadowpw=OFF; shared=ON; soversion=OFF; spectrum=ON; sqlite=ON; ssl=ON; tcmalloc=OFF; test_distrdf_dask=ON; test_distrdf_pyspark=ON; testing=ON; tmva-cpu=ON; tmva-gpu=OFF; tmva-cudnn=OFF; tmva-pymva=ON; tmva-rmva=OFF; tmva-sofie=OFF; tmva=ON; unfold=ON; unuran=ON; uring=OFF; vc=OFF; vdt=ON; veccore=OFF; vecgeom=OFF; webgui=ON; win_broken_tests=OFF; winrtdebug=OFF; x11=ON; xml=ON; xrootd=ON; ,MatchSource.DOCS,.github/workflows/root-ci-config/buildconfig/global.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/.github/workflows/root-ci-config/buildconfig/global.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/CMakeLists.txt:1028,Deployability,install,install,1028,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ###########################################################; # CMakeLists.txt file for building JupyROOT; ###########################################################. set(py_sources; JupyROOT/__init__.py; JupyROOT/helpers/__init__.py; JupyROOT/helpers/cppcompleter.py; JupyROOT/helpers/handlers.py; JupyROOT/helpers/utils.py; JupyROOT/html/__init__.py; JupyROOT/html/cpphighlighter.py; JupyROOT/kernel/__init__.py; JupyROOT/kernel/rootkernel.py; JupyROOT/kernel/utils.py; JupyROOT/kernel/magics/__init__.py; JupyROOT/kernel/magics/cppmagic.py; JupyROOT/kernel/magics/jsrootmagic.py; JupyROOT/magics/__init__.py; JupyROOT/magics/cppmagic.py; JupyROOT/magics/jsrootmagic.py; ). set(JupyROOTPySrcDir python/JupyROOT); file(COPY ${JupyROOTPySrcDir} DESTINATION ${localruntimedir}). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/JupyROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/jupyroot/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/CMakeLists.txt:1138,Deployability,install,install,1138,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ###########################################################; # CMakeLists.txt file for building JupyROOT; ###########################################################. set(py_sources; JupyROOT/__init__.py; JupyROOT/helpers/__init__.py; JupyROOT/helpers/cppcompleter.py; JupyROOT/helpers/handlers.py; JupyROOT/helpers/utils.py; JupyROOT/html/__init__.py; JupyROOT/html/cpphighlighter.py; JupyROOT/kernel/__init__.py; JupyROOT/kernel/rootkernel.py; JupyROOT/kernel/utils.py; JupyROOT/kernel/magics/__init__.py; JupyROOT/kernel/magics/cppmagic.py; JupyROOT/kernel/magics/jsrootmagic.py; JupyROOT/magics/__init__.py; JupyROOT/magics/cppmagic.py; JupyROOT/magics/jsrootmagic.py; ). set(JupyROOTPySrcDir python/JupyROOT); file(COPY ${JupyROOTPySrcDir} DESTINATION ${localruntimedir}). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/JupyROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/jupyroot/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/CMakeLists.txt:1304,Deployability,install,install,1304,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ###########################################################; # CMakeLists.txt file for building JupyROOT; ###########################################################. set(py_sources; JupyROOT/__init__.py; JupyROOT/helpers/__init__.py; JupyROOT/helpers/cppcompleter.py; JupyROOT/helpers/handlers.py; JupyROOT/helpers/utils.py; JupyROOT/html/__init__.py; JupyROOT/html/cpphighlighter.py; JupyROOT/kernel/__init__.py; JupyROOT/kernel/rootkernel.py; JupyROOT/kernel/utils.py; JupyROOT/kernel/magics/__init__.py; JupyROOT/kernel/magics/cppmagic.py; JupyROOT/kernel/magics/jsrootmagic.py; JupyROOT/magics/__init__.py; JupyROOT/magics/cppmagic.py; JupyROOT/magics/jsrootmagic.py; ). set(JupyROOTPySrcDir python/JupyROOT); file(COPY ${JupyROOTPySrcDir} DESTINATION ${localruntimedir}). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/JupyROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/jupyroot/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/jupyroot/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/CMakeLists.txt:1309,Testability,test,test,1309,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ###########################################################; # CMakeLists.txt file for building TPython; ###########################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTPython; HEADERS; TPyArg.h; TPyReturn.h; TPython.h; SOURCES; src/TPyArg.cxx; src/TPyClassGenerator.cxx; src/TPyReturn.cxx; src/TPython.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; LIBRARIES; cppyy; # We link libTPython against Python libraries to compensate for the fact that libcppyy; # is built with unresolved symbols. If we didn't do this, invoking TPython from C++; # would not work.; Python3::Python; ). # Disables warnings originating from deprecated register keyword in Python; if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" AND CMAKE_CXX_STANDARD GREATER_EQUAL 11); target_compile_options(ROOTTPython PRIVATE -Wno-register); endif(); if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" AND CMAKE_CXX_STANDARD GREATER_EQUAL 11); target_compile_options(ROOTTPython PRIVATE -Wno-register); target_compile_options(ROOTTPython PRIVATE -Wno-deprecated-register); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,bindings/tpython/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:1845,Deployability,install,install,1845,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:1955,Deployability,install,install,1955,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:2121,Deployability,install,install,2121,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:1353,Integrability,depend,depends,1353,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:1447,Integrability,depend,dependency,1447,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:2256,Testability,test,test,2256,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt:2290,Testability,test,test,2290,"######################################################. set(py_sources; DistRDF/__init__.py; DistRDF/_graph_cache.py; DistRDF/ComputationGraphGenerator.py; DistRDF/DataFrame.py; DistRDF/HeadNode.py; DistRDF/Node.py; DistRDF/Operation.py; DistRDF/Proxy.py; DistRDF/PythonMergeables.py; DistRDF/Ranges.py; DistRDF/Backends/__init__.py; DistRDF/Backends/Base.py; DistRDF/Backends/Utils.py; DistRDF/Backends/Spark/__init__.py; DistRDF/Backends/Spark/Backend.py; DistRDF/Backends/Dask/__init__.py; DistRDF/Backends/Dask/Backend.py; DistRDF/LiveVisualize.py; ). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(DistRDF ALL DEPENDS ${py_sources_in_localruntimedir}). # Compile .py files; # We include DistRDF in the build only if Python 3.8+ is used,; # so we can directly use the main Python executable to compile the sources; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/DistRDF; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/backend); ",MatchSource.DOCS,bindings/experimental/distrdf/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/CMakeLists.txt:266,Availability,avail,available,266,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Don't bother testing the distributed layer of RDataFrame if it's not available; # in the build. Also don't test on windows; if (dataframe AND NOT MSVC). ROOT_ADD_PYUNITTEST(distrdf_unit_test_callable_generator test_callable_generator.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_friendinfo test_friendinfo.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_headnode test_headnode.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_init test_init.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_node test_node.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_operation test_operation.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_proxy test_proxy.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_ranges test_ranges.py). endif(); ",MatchSource.DOCS,bindings/experimental/distrdf/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/CMakeLists.txt:210,Testability,test,testing,210,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Don't bother testing the distributed layer of RDataFrame if it's not available; # in the build. Also don't test on windows; if (dataframe AND NOT MSVC). ROOT_ADD_PYUNITTEST(distrdf_unit_test_callable_generator test_callable_generator.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_friendinfo test_friendinfo.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_headnode test_headnode.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_init test_init.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_node test_node.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_operation test_operation.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_proxy test_proxy.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_ranges test_ranges.py). endif(); ",MatchSource.DOCS,bindings/experimental/distrdf/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/CMakeLists.txt:304,Testability,test,test,304,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Don't bother testing the distributed layer of RDataFrame if it's not available; # in the build. Also don't test on windows; if (dataframe AND NOT MSVC). ROOT_ADD_PYUNITTEST(distrdf_unit_test_callable_generator test_callable_generator.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_friendinfo test_friendinfo.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_headnode test_headnode.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_init test_init.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_node test_node.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_operation test_operation.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_proxy test_proxy.py); ROOT_ADD_PYUNITTEST(distrdf_unit_test_ranges test_ranges.py). endif(); ",MatchSource.DOCS,bindings/experimental/distrdf/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/CMakeLists.txt:266,Availability,avail,available,266,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Don't bother testing the distributed layer of RDataFrame if it's not available; # in the build; if (dataframe AND NOT MSVC). file(COPY test_headers DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 2clusters.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 4clusters.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 1000clusters.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Slimmed_ntuple.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 1cluster_20entries.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). ROOT_ADD_PYUNITTEST(distrdf_unit_backend_test_common test_common.py); ROOT_ADD_PYUNITTEST(distrdf_unit_backend_test_dist test_dist.py); ROOT_ADD_PYUNITTEST(distrdf_unit_backend_test_graph_caching test_graph_caching.py). endif(); ",MatchSource.DOCS,bindings/experimental/distrdf/test/backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/CMakeLists.txt:210,Testability,test,testing,210,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Don't bother testing the distributed layer of RDataFrame if it's not available; # in the build; if (dataframe AND NOT MSVC). file(COPY test_headers DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 2clusters.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 4clusters.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 1000clusters.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Slimmed_ntuple.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY 1cluster_20entries.root DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). ROOT_ADD_PYUNITTEST(distrdf_unit_backend_test_common test_common.py); ROOT_ADD_PYUNITTEST(distrdf_unit_backend_test_dist test_dist.py); ROOT_ADD_PYUNITTEST(distrdf_unit_backend_test_graph_caching test_graph_caching.py). endif(); ",MatchSource.DOCS,bindings/experimental/distrdf/test/backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/experimental/distrdf/test/backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:6801,Deployability,install,install,6801,"get_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling PyROOT source ${py_source} for Python ${Python3_VERSION}""); endforeach(). # Create meta-target PyROOT3 (INTERFACE library); # Export of targets are not supported for custom targets(add_custom_targets()); add_library(PyROOT INTERFACE); target_link_libraries(PyROOT INTERFACE cppyy_backend cppyy ROOTPythonizations). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install meta-target PyROOT3 (INTERFACE library); # Install library; install(TARGETS PyROOT EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/ROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). # Install headers required by pythonizations; install(FILES ${PYROOT_EXTRA_HEADERS}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ROOT; COMPONENT headers). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:7137,Deployability,install,install,7137,"get_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling PyROOT source ${py_source} for Python ${Python3_VERSION}""); endforeach(). # Create meta-target PyROOT3 (INTERFACE library); # Export of targets are not supported for custom targets(add_custom_targets()); add_library(PyROOT INTERFACE); target_link_libraries(PyROOT INTERFACE cppyy_backend cppyy ROOTPythonizations). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install meta-target PyROOT3 (INTERFACE library); # Install library; install(TARGETS PyROOT EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/ROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). # Install headers required by pythonizations; install(FILES ${PYROOT_EXTRA_HEADERS}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ROOT; COMPONENT headers). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:7438,Deployability,install,install,7438,"get_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling PyROOT source ${py_source} for Python ${Python3_VERSION}""); endforeach(). # Create meta-target PyROOT3 (INTERFACE library); # Export of targets are not supported for custom targets(add_custom_targets()); add_library(PyROOT INTERFACE); target_link_libraries(PyROOT INTERFACE cppyy_backend cppyy ROOTPythonizations). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install meta-target PyROOT3 (INTERFACE library); # Install library; install(TARGETS PyROOT EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/ROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). # Install headers required by pythonizations; install(FILES ${PYROOT_EXTRA_HEADERS}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ROOT; COMPONENT headers). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:7589,Deployability,install,install,7589,"get_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling PyROOT source ${py_source} for Python ${Python3_VERSION}""); endforeach(). # Create meta-target PyROOT3 (INTERFACE library); # Export of targets are not supported for custom targets(add_custom_targets()); add_library(PyROOT INTERFACE); target_link_libraries(PyROOT INTERFACE cppyy_backend cppyy ROOTPythonizations). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install meta-target PyROOT3 (INTERFACE library); # Install library; install(TARGETS PyROOT EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/ROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). # Install headers required by pythonizations; install(FILES ${PYROOT_EXTRA_HEADERS}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ROOT; COMPONENT headers). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:4599,Integrability,depend,depends,4599,"/_pythonization/_tstring.py; ROOT/_pythonization/_ttree.py; ROOT/_pythonization/_tvector3.py; ROOT/_pythonization/_tvectort.py; ${PYROOT_EXTRA_PYTHON_SOURCES}; ). set(cpp_sources; src/PyROOTModule.cxx; src/PyROOTWrapper.cxx; src/RPyROOTApplication.cxx; src/GenericPyz.cxx; src/TClassPyz.cxx; src/TMemoryRegulator.cxx; src/TObjectPyz.cxx; src/TTreePyz.cxx; src/CPPInstancePyz.cxx; src/TPyDispatcher.cxx; inc/TPyDispatcher.h; ). set(ROOTPySrcDir python/ROOT); set(ROOT_headers_dir inc). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(ROOTPythonizationsPySources ALL DEPENDS ${py_sources_in_localruntimedir}). # Copy headers inside build_dir/include/ROOT; file(COPY ${ROOT_headers_dir}/ DESTINATION ${CMAKE_BINARY_DIR}/include/ROOT). set(libname ROOTPythonizations). add_library(${libname} SHARED ${cpp_sources}). # Insert the ROOTPythonizationsPySources in the dependency graph; add_dependencies(${libname} ROOTPythonizationsPySources). # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES_NO_VERSION}); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); set_target_properties(${libname} PROPERTIES SUFFIX "".pyd""); target_link_libraries(${libname} PUBLIC Core Tree cppyy); elseif(APPLE); target_link_libraries(",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:4693,Integrability,depend,dependency,4693,".py; ${PYROOT_EXTRA_PYTHON_SOURCES}; ). set(cpp_sources; src/PyROOTModule.cxx; src/PyROOTWrapper.cxx; src/RPyROOTApplication.cxx; src/GenericPyz.cxx; src/TClassPyz.cxx; src/TMemoryRegulator.cxx; src/TObjectPyz.cxx; src/TTreePyz.cxx; src/CPPInstancePyz.cxx; src/TPyDispatcher.cxx; inc/TPyDispatcher.h; ). set(ROOTPySrcDir python/ROOT); set(ROOT_headers_dir inc). # Add custom rules to copy the Python sources into the build directory; foreach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(ROOTPythonizationsPySources ALL DEPENDS ${py_sources_in_localruntimedir}). # Copy headers inside build_dir/include/ROOT; file(COPY ${ROOT_headers_dir}/ DESTINATION ${CMAKE_BINARY_DIR}/include/ROOT). set(libname ROOTPythonizations). add_library(${libname} SHARED ${cpp_sources}). # Insert the ROOTPythonizationsPySources in the dependency graph; add_dependencies(${libname} ROOTPythonizationsPySources). # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES_NO_VERSION}); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); set_target_properties(${libname} PROPERTIES SUFFIX "".pyd""); target_link_libraries(${libname} PUBLIC Core Tree cppyy); elseif(APPLE); target_link_libraries(${libname} PUBLIC -Wl,-bind_at_load -Wl,-w -Wl,-undefined -Wl,dynamic_lookup Core Tree cppyy); else(); target_link_librarie",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:5168,Integrability,depend,dependency,5168,"reach(py_source ${py_sources}); add_custom_command(; OUTPUT ${localruntimedir}/${py_source}; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}; ${localruntimedir}/${py_source}; DEPENDS python/${py_source}; COMMENT ""Copying ${CMAKE_CURRENT_SOURCE_DIR}/python/${py_source}""); list(APPEND py_sources_in_localruntimedir ${localruntimedir}/${py_source}); endforeach(). # A custom target that depends on the Python sources being present in the build; # directory. This will be used as a dependency of the pythonization libraries,; # such that the Python sources get re-copied to the build directory when; # changed.; add_custom_target(ROOTPythonizationsPySources ALL DEPENDS ${py_sources_in_localruntimedir}). # Copy headers inside build_dir/include/ROOT; file(COPY ${ROOT_headers_dir}/ DESTINATION ${CMAKE_BINARY_DIR}/include/ROOT). set(libname ROOTPythonizations). add_library(${libname} SHARED ${cpp_sources}). # Insert the ROOTPythonizationsPySources in the dependency graph; add_dependencies(${libname} ROOTPythonizationsPySources). # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES_NO_VERSION}); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); set_target_properties(${libname} PROPERTIES SUFFIX "".pyd""); target_link_libraries(${libname} PUBLIC Core Tree cppyy); elseif(APPLE); target_link_libraries(${libname} PUBLIC -Wl,-bind_at_load -Wl,-w -Wl,-undefined -Wl,dynamic_lookup Core Tree cppyy); else(); target_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; for",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:7721,Testability,test,test,7721,"get_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling PyROOT source ${py_source} for Python ${Python3_VERSION}""); endforeach(). # Create meta-target PyROOT3 (INTERFACE library); # Export of targets are not supported for custom targets(add_custom_targets()); add_library(PyROOT INTERFACE); target_link_libraries(PyROOT INTERFACE cppyy_backend cppyy ROOTPythonizations). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install meta-target PyROOT3 (INTERFACE library); # Install library; install(TARGETS PyROOT EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/ROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). # Install headers required by pythonizations; install(FILES ${PYROOT_EXTRA_HEADERS}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ROOT; COMPONENT headers). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,bindings/pyroot/pythonizations/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/CMakeLists.txt:601,Deployability,install,install,601,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(py_sources; cppyy/_stdcpp_fix.py; cppyy/__init__.py; cppyy/_cpython_cppyy.py; cppyy/_pypy_cppyy.py; cppyy/_pythonization.py; cppyy/_typemap.py; cppyy/_version.py; cppyy/interactive.py; cppyy/ll.py; cppyy/numba_ext.py; cppyy/reflex.py; cppyy/types.py; ). set(cppyyPySrcDir python/cppyy); file(COPY ${cppyyPySrcDir} DESTINATION ${localruntimedir}). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/CMakeLists.txt:711,Deployability,install,install,711,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(py_sources; cppyy/_stdcpp_fix.py; cppyy/__init__.py; cppyy/_cpython_cppyy.py; cppyy/_pypy_cppyy.py; cppyy/_pythonization.py; cppyy/_typemap.py; cppyy/_version.py; cppyy/interactive.py; cppyy/ll.py; cppyy/numba_ext.py; cppyy/reflex.py; cppyy/types.py; ). set(cppyyPySrcDir python/cppyy); file(COPY ${cppyyPySrcDir} DESTINATION ${localruntimedir}). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/CMakeLists.txt:877,Deployability,install,install,877,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(py_sources; cppyy/_stdcpp_fix.py; cppyy/__init__.py; cppyy/_cpython_cppyy.py; cppyy/_pypy_cppyy.py; cppyy/_pythonization.py; cppyy/_typemap.py; cppyy/_version.py; cppyy/interactive.py; cppyy/ll.py; cppyy/numba_ext.py; cppyy/reflex.py; cppyy/types.py; ). set(cppyyPySrcDir python/cppyy); file(COPY ${cppyyPySrcDir} DESTINATION ${localruntimedir}). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt:1965,Availability,avail,available,1965,"d from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by ; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. Lucio Asnaghi; Simone Bacchio; Aditi Dutta; Shaheed Haque; Aaron Jomy; Toby StClere-Smithe; Stefan Wunsch. Conda-forge recipes were provided by Julian Rueth and Isuru Fernando.; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt:1800,Deployability,patch,patches,1800,"d from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by ; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. Lucio Asnaghi; Simone Bacchio; Aditi Dutta; Shaheed Haque; Aaron Jomy; Toby StClere-Smithe; Stefan Wunsch. Conda-forge recipes were provided by Julian Rueth and Isuru Fernando.; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt:1812,Deployability,upgrade,upgrades,1812,"d from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by ; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. Lucio Asnaghi; Simone Bacchio; Aditi Dutta; Shaheed Haque; Aaron Jomy; Toby StClere-Smithe; Stefan Wunsch. Conda-forge recipes were provided by Julian Rueth and Isuru Fernando.; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt:2223,Deployability,install,install,2223,"d from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by ; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. Lucio Asnaghi; Simone Bacchio; Aditi Dutta; Shaheed Haque; Aaron Jomy; Toby StClere-Smithe; Stefan Wunsch. Conda-forge recipes were provided by Julian Rueth and Isuru Fernando.; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt:1855,Performance,perform,performance,1855,"d from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by ; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. Lucio Asnaghi; Simone Bacchio; Aditi Dutta; Shaheed Haque; Aaron Jomy; Toby StClere-Smithe; Stefan Wunsch. Conda-forge recipes were provided by Julian Rueth and Isuru Fernando.; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt:1298,Deployability,install,install,1298,"py; cppyy_backend/bindings_utils.py; cppyy_backend/loader.py; cppyy_backend/_get_cppflags.py; ). set(cppyy_backendPySrcDir cling/python/cppyy_backend); file(COPY ${cppyy_backendPySrcDir}; DESTINATION ${localruntimedir}; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkg_templates"" EXCLUDE). file(RELATIVE_PATH PYTHONDIR_TO_LIBDIR ""${CMAKE_INSTALL_FULL_PYTHONDIR}"" ""${CMAKE_INSTALL_FULL_LIBDIR}""). set(libname cppyy_backend). add_library(${libname} SHARED clingwrapper/src/clingwrapper.cxx); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES}); target_link_libraries(${libname} Core ${CMAKE_DL_LIBS}). # cppyy uses ROOT headers from binary directory; add_dependencies(${libname} move_headers). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy_backend; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt:1757,Deployability,install,install,1757,"py; cppyy_backend/bindings_utils.py; cppyy_backend/loader.py; cppyy_backend/_get_cppflags.py; ). set(cppyy_backendPySrcDir cling/python/cppyy_backend); file(COPY ${cppyy_backendPySrcDir}; DESTINATION ${localruntimedir}; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkg_templates"" EXCLUDE). file(RELATIVE_PATH PYTHONDIR_TO_LIBDIR ""${CMAKE_INSTALL_FULL_PYTHONDIR}"" ""${CMAKE_INSTALL_FULL_LIBDIR}""). set(libname cppyy_backend). add_library(${libname} SHARED clingwrapper/src/clingwrapper.cxx); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES}); target_link_libraries(${libname} Core ${CMAKE_DL_LIBS}). # cppyy uses ROOT headers from binary directory; add_dependencies(${libname} move_headers). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy_backend; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt:1969,Deployability,install,install,1969,"py; cppyy_backend/bindings_utils.py; cppyy_backend/loader.py; cppyy_backend/_get_cppflags.py; ). set(cppyy_backendPySrcDir cling/python/cppyy_backend); file(COPY ${cppyy_backendPySrcDir}; DESTINATION ${localruntimedir}; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkg_templates"" EXCLUDE). file(RELATIVE_PATH PYTHONDIR_TO_LIBDIR ""${CMAKE_INSTALL_FULL_PYTHONDIR}"" ""${CMAKE_INSTALL_FULL_LIBDIR}""). set(libname cppyy_backend). add_library(${libname} SHARED clingwrapper/src/clingwrapper.cxx); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES}); target_link_libraries(${libname} Core ${CMAKE_DL_LIBS}). # cppyy uses ROOT headers from binary directory; add_dependencies(${libname} move_headers). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy_backend; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt:2079,Deployability,install,install,2079,"py; cppyy_backend/bindings_utils.py; cppyy_backend/loader.py; cppyy_backend/_get_cppflags.py; ). set(cppyy_backendPySrcDir cling/python/cppyy_backend); file(COPY ${cppyy_backendPySrcDir}; DESTINATION ${localruntimedir}; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkg_templates"" EXCLUDE). file(RELATIVE_PATH PYTHONDIR_TO_LIBDIR ""${CMAKE_INSTALL_FULL_PYTHONDIR}"" ""${CMAKE_INSTALL_FULL_LIBDIR}""). set(libname cppyy_backend). add_library(${libname} SHARED clingwrapper/src/clingwrapper.cxx); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES}); target_link_libraries(${libname} Core ${CMAKE_DL_LIBS}). # cppyy uses ROOT headers from binary directory; add_dependencies(${libname} move_headers). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy_backend; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt:2245,Deployability,install,install,2245,"py; cppyy_backend/bindings_utils.py; cppyy_backend/loader.py; cppyy_backend/_get_cppflags.py; ). set(cppyy_backendPySrcDir cling/python/cppyy_backend); file(COPY ${cppyy_backendPySrcDir}; DESTINATION ${localruntimedir}; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkg_templates"" EXCLUDE). file(RELATIVE_PATH PYTHONDIR_TO_LIBDIR ""${CMAKE_INSTALL_FULL_PYTHONDIR}"" ""${CMAKE_INSTALL_FULL_LIBDIR}""). set(libname cppyy_backend). add_library(${libname} SHARED clingwrapper/src/clingwrapper.cxx); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES}); target_link_libraries(${libname} Core ${CMAKE_DL_LIBS}). # cppyy uses ROOT headers from binary directory; add_dependencies(${libname} move_headers). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/cppyy_backend; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries); ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt:410,Performance,load,loader,410,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(py_sources; cppyy_backend/__init__.py; cppyy_backend/_cling_config.py; cppyy_backend/_cppyy_generator.py; cppyy_backend/_genreflex.py; cppyy_backend/_rootcling.py; cppyy_backend/bindings_utils.py; cppyy_backend/loader.py; cppyy_backend/_get_cppflags.py; ). set(cppyy_backendPySrcDir cling/python/cppyy_backend); file(COPY ${cppyy_backendPySrcDir}; DESTINATION ${localruntimedir}; PATTERN ""cmake"" EXCLUDE; PATTERN ""pkg_templates"" EXCLUDE). file(RELATIVE_PATH PYTHONDIR_TO_LIBDIR ""${CMAKE_INSTALL_FULL_PYTHONDIR}"" ""${CMAKE_INSTALL_FULL_LIBDIR}""). set(libname cppyy_backend). add_library(${libname} SHARED clingwrapper/src/clingwrapper.cxx); if(MSVC); set_target_properties(${libname} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); # Set the suffix to '.so' and the prefix to 'lib'; set_target_properties(${libname} PROPERTIES ${ROOT_LIBRARY_PROPERTIES}); target_link_libraries(${libname} Core ${CMAKE_DL_LIBS}). # cppyy uses ROOT headers from binary directory; add_dependencies(${libname} move_headers). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(CO",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt:3193,Deployability,install,install,3193,"_CXX_COMPILER_ID}"" MATCHES ""Clang"" AND NOT MSVC); target_compile_options(${libname} PRIVATE; -Wno-unused-but-set-parameter); endif(). # Disables warnings coming from PyCFunction casts; if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL 8); target_compile_options(${libname} PRIVATE -Wno-cast-function-type); endif(). # Disables warnings in Python 3.8 caused by the temporary extra filed for tp_print compatibility; # (see https://github.com/python/cpython/blob/3.8/Include/cpython/object.h#L260).; # Note that Python 3.8 is the lowers Python version that is still supported by; # ROOT, so this compile option can be completely removed soon.; if(NOT MSVC AND Python3_VERSION VERSION_LESS 3.9); target_compile_options(${libname} PRIVATE -Wno-missing-field-initializers); endif(). target_compile_definitions(${libname} PRIVATE NO_CPPYY_LEGACY_NAMESPACE). target_include_directories(${libname}; SYSTEM PUBLIC ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PRIVATE; ${CMAKE_BINARY_DIR}/ginclude; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>; ). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). file(COPY ${headers} DESTINATION ${CMAKE_BINARY_DIR}/include/CPyCppyy); install(FILES ${headers}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/CPyCppyy; COMPONENT headers); ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt:3652,Deployability,install,install,3652,"_CXX_COMPILER_ID}"" MATCHES ""Clang"" AND NOT MSVC); target_compile_options(${libname} PRIVATE; -Wno-unused-but-set-parameter); endif(). # Disables warnings coming from PyCFunction casts; if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL 8); target_compile_options(${libname} PRIVATE -Wno-cast-function-type); endif(). # Disables warnings in Python 3.8 caused by the temporary extra filed for tp_print compatibility; # (see https://github.com/python/cpython/blob/3.8/Include/cpython/object.h#L260).; # Note that Python 3.8 is the lowers Python version that is still supported by; # ROOT, so this compile option can be completely removed soon.; if(NOT MSVC AND Python3_VERSION VERSION_LESS 3.9); target_compile_options(${libname} PRIVATE -Wno-missing-field-initializers); endif(). target_compile_definitions(${libname} PRIVATE NO_CPPYY_LEGACY_NAMESPACE). target_include_directories(${libname}; SYSTEM PUBLIC ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PRIVATE; ${CMAKE_BINARY_DIR}/ginclude; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>; ). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). file(COPY ${headers} DESTINATION ${CMAKE_BINARY_DIR}/include/CPyCppyy); install(FILES ${headers}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/CPyCppyy; COMPONENT headers); ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt:3881,Deployability,install,install,3881,"_CXX_COMPILER_ID}"" MATCHES ""Clang"" AND NOT MSVC); target_compile_options(${libname} PRIVATE; -Wno-unused-but-set-parameter); endif(). # Disables warnings coming from PyCFunction casts; if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""GNU"" AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL 8); target_compile_options(${libname} PRIVATE -Wno-cast-function-type); endif(). # Disables warnings in Python 3.8 caused by the temporary extra filed for tp_print compatibility; # (see https://github.com/python/cpython/blob/3.8/Include/cpython/object.h#L260).; # Note that Python 3.8 is the lowers Python version that is still supported by; # ROOT, so this compile option can be completely removed soon.; if(NOT MSVC AND Python3_VERSION VERSION_LESS 3.9); target_compile_options(${libname} PRIVATE -Wno-missing-field-initializers); endif(). target_compile_definitions(${libname} PRIVATE NO_CPPYY_LEGACY_NAMESPACE). target_include_directories(${libname}; SYSTEM PUBLIC ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PRIVATE; ${CMAKE_BINARY_DIR}/ginclude; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>; ). set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries); if (NOT MSVC AND NOT CMAKE_INSTALL_LIBDIR STREQUAL CMAKE_INSTALL_PYTHONDIR); # add a symlink to ${libname} in CMAKE_INSTALL_PYTHONDIR; set(LIB_FILE_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}.so); install(CODE ""file(CREATE_LINK ${PYTHONDIR_TO_LIBDIR}/${LIB_FILE_NAME}; \$ENV{DESTDIR}${CMAKE_INSTALL_FULL_PYTHONDIR}/${LIB_FILE_NAME} SYMBOLIC)""); endif(). file(COPY ${headers} DESTINATION ${CMAKE_BINARY_DIR}/include/CPyCppyy); install(FILES ${headers}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/CPyCppyy; COMPONENT headers); ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt:1965,Availability,avail,available,1965,"tors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Lucio Asnaghi; Torok Attila; Simone Bacchio; Niko Fink; Aaron Jomy; Mac Kolin; Baidyanath Kundu; Toby StClere-Smithe; ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt:1800,Deployability,patch,patches,1800,"tors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Lucio Asnaghi; Torok Attila; Simone Bacchio; Niko Fink; Aaron Jomy; Mac Kolin; Baidyanath Kundu; Toby StClere-Smithe; ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt:1812,Deployability,upgrade,upgrades,1812,"tors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Lucio Asnaghi; Torok Attila; Simone Bacchio; Niko Fink; Aaron Jomy; Mac Kolin; Baidyanath Kundu; Toby StClere-Smithe; ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt:2223,Deployability,install,install,2223,"tors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Lucio Asnaghi; Torok Attila; Simone Bacchio; Niko Fink; Aaron Jomy; Mac Kolin; Baidyanath Kundu; Toby StClere-Smithe; ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt:1855,Performance,perform,performance,1855,"tors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Lucio Asnaghi; Torok Attila; Simone Bacchio; Niko Fink; Aaron Jomy; Mac Kolin; Baidyanath Kundu; Toby StClere-Smithe; ",MatchSource.DOCS,bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/INSTALL.txt:33,Deployability,patch,patch,33,"Download ROOT sources, strip and patch them:. $ python setup.py egg_info; $ python create_src_directory.py. Build wheel (optional: use --keep-temp during development):. $ MAKE_NPROCS=32 python setup.py bdist_wheel. Build source distribution:. $ python setup.py sdist. Sign:. $ gpg --detach-sign -a dist/*cppyy*.tar.gz. ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt:1965,Availability,avail,available,1965,"RANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Simone Bacchio; Robert Bradshaw; Ellis Breen; Antonio Cuni; Aditi Dutta; Shaheed Haque; Jonsomi; Alvaro Moran; Tarmo Pikaro; Matti Picus; Camille Scott. External code; -------------. The create_src_directory.py script will pull in ROOT and LLVM sources, which; are licensed differently:. LLVM: distributed under University of Illinois/NCSA Open S",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt:1800,Deployability,patch,patches,1800,"RANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Simone Bacchio; Robert Bradshaw; Ellis Breen; Antonio Cuni; Aditi Dutta; Shaheed Haque; Jonsomi; Alvaro Moran; Tarmo Pikaro; Matti Picus; Camille Scott. External code; -------------. The create_src_directory.py script will pull in ROOT and LLVM sources, which; are licensed differently:. LLVM: distributed under University of Illinois/NCSA Open S",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt:1812,Deployability,upgrade,upgrades,1812,"RANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Simone Bacchio; Robert Bradshaw; Ellis Breen; Antonio Cuni; Aditi Dutta; Shaheed Haque; Jonsomi; Alvaro Moran; Tarmo Pikaro; Matti Picus; Camille Scott. External code; -------------. The create_src_directory.py script will pull in ROOT and LLVM sources, which; are licensed differently:. LLVM: distributed under University of Illinois/NCSA Open S",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt:2223,Deployability,install,install,2223,"RANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Simone Bacchio; Robert Bradshaw; Ellis Breen; Antonio Cuni; Aditi Dutta; Shaheed Haque; Jonsomi; Alvaro Moran; Tarmo Pikaro; Matti Picus; Camille Scott. External code; -------------. The create_src_directory.py script will pull in ROOT and LLVM sources, which; are licensed differently:. LLVM: distributed under University of Illinois/NCSA Open S",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt:3245,Deployability,patch,patched,3245,"DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Simone Bacchio; Robert Bradshaw; Ellis Breen; Antonio Cuni; Aditi Dutta; Shaheed Haque; Jonsomi; Alvaro Moran; Tarmo Pikaro; Matti Picus; Camille Scott. External code; -------------. The create_src_directory.py script will pull in ROOT and LLVM sources, which; are licensed differently:. LLVM: distributed under University of Illinois/NCSA Open Source License; https://opensource.org/licenses/UoI-NCSA.php; ROOT: distributed under LGPL 2.1; https://root.cern.ch/license. The ROOT and LLVM/Clang codes are modified/patched, as part of the build; process.; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt:1855,Performance,perform,performance,1855,"RANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Simone Bacchio; Robert Bradshaw; Ellis Breen; Antonio Cuni; Aditi Dutta; Shaheed Haque; Jonsomi; Alvaro Moran; Tarmo Pikaro; Matti Picus; Camille Scott. External code; -------------. The create_src_directory.py script will pull in ROOT and LLVM sources, which; are licensed differently:. LLVM: distributed under University of Illinois/NCSA Open S",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt:1965,Availability,avail,available,1965,"ley; National Laboratory, U.S. Dept. of Energy nor the names of its contributors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Antonio Cuni; Aditi Dutta; Shaheed Haque; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt:1800,Deployability,patch,patches,1800,"ley; National Laboratory, U.S. Dept. of Energy nor the names of its contributors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Antonio Cuni; Aditi Dutta; Shaheed Haque; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt:1812,Deployability,upgrade,upgrades,1812,"ley; National Laboratory, U.S. Dept. of Energy nor the names of its contributors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Antonio Cuni; Aditi Dutta; Shaheed Haque; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt:2223,Deployability,install,install,2223,"ley; National Laboratory, U.S. Dept. of Energy nor the names of its contributors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Antonio Cuni; Aditi Dutta; Shaheed Haque; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt:1855,Performance,perform,performance,1855,"ley; National Laboratory, U.S. Dept. of Energy nor the names of its contributors; may be used to endorse or promote products derived from this software without; specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE; GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; SUCH DAMAGE. You are under no obligation whatsoever to provide any bug fixes,; patches, or upgrades to the features, functionality or performance of; the source code (""Enhancements"") to anyone; however, if you choose to; make your Enhancements available either publicly, or directly to; Lawrence Berkeley National Laboratory, without imposing a separate; written license agreement for such Enhancements, then you hereby grant; the following license: a non-exclusive, royalty-free perpetual license; to install, use, modify, prepare derivative works, incorporate into; other computer software, distribute, and sublicense such Enhancements; or derivative works thereof, in binary and source code form. Additional copyright holders; ----------------------------. In addition to LBNL/UC Berkeley, this package contains files copyrighted by; one or more of the following people and organizations, and licensed under; the same conditions (except for some compatible licenses as retained in the; source code):. CERN; Antonio Cuni; Aditi Dutta; Shaheed Haque; ",MatchSource.DOCS,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt:2517,Availability,error,error,2517,"ttrsyntax.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectoryfile_attrsyntax_get tdirectoryfile_attrsyntax_get.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_attrsyntax_get_writeobject_open tfile_attrsyntax_get_writeobject_open.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_constructor tfile_constructor.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_context_manager tfile_context_manager.py). # TTree and subclasses pythonizations; file(COPY TreeHelper.h DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch_attr ttree_branch_attr.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_iterable ttree_iterable.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_setbranchaddress ttree_setbranchaddress.py PYTHON_DEPS numpy); ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy). # TH1 and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_th1_operators th1_operators.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_th2 th2.py). # TGraph, TGraph2D and error subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tgraph_getters tgraph_getters.py). # TCollection and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tcollection_len tcollection_len.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tcollection_listmethods tcollection_listmethods.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tcollection_operators tcollection_operators.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tcollection_iterable tcollection_iterable.py). # TSeqCollection and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tseqcollection_itemaccess tseqcollection_itemaccess.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tseqcollection_listmethods tseqcollection_listmethods.py). # TIter pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_titer_iterator titer_iterator.py). # TArray and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tarray_len tarray_len.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tarray_getitem tarray_getitem.py). # TVectorT pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tvectort_len tvectort_len.py); ROOT_ADD_PYU",MatchSource.DOCS,bindings/pyroot/pythonizations/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt:7518,Integrability,wrap,wrapping,7518,"); ROOT_ADD_PYUNITTEST(pyroot_roofit_rooarglist roofit/rooarglist.py). # RooDataHist pythonisations; ROOT_ADD_PYUNITTEST(pyroot_roofit_roodatahist_ploton roofit/roodatahist_ploton.py). # RooDataSet pythonisations; ROOT_ADD_PYUNITTEST(pyroot_roofit_roodataset roofit/roodataset.py). # RooWorkspace pythonizations; ROOT_ADD_PYUNITTEST(pyroot_roofit_rooabspdf_fitto roofit/rooabspdf_fitto.py); ROOT_ADD_PYUNITTEST(pyroot_roofit_rooabsreal_ploton roofit/rooabsreal_ploton.py). ROOT_ADD_PYUNITTEST(pyroot_roofit_roolinkedlist roofit/roolinkedlist.py). if(NOT MSVC OR win_broken_tests); # Test pythonizations for the RooFitHS3 package, which is not built on Windows.; ROOT_ADD_PYUNITTEST(pyroot_roofit_roojsonfactorywstool roofit/roojsonfactorywstool.py). # Other pythonizations that fail on Windows for unknown reasons; ROOT_ADD_PYUNITTEST(pyroot_roofit_rooglobalfunc roofit/rooglobalfunc.py); ROOT_ADD_PYUNITTEST(pyroot_roofit_roosimultaneous roofit/roosimultaneous.py). # RooWorkspace pythonization that fails on Windows; ROOT_ADD_PYUNITTEST(pyroot_roofit_rooworkspace roofit/rooworkspace.py); endif(). # NumPy compatibility; ROOT_ADD_PYUNITTEST(pyroot_roofit_roodataset_numpy roofit/roodataset_numpy.py PYTHON_DEPS numpy); ROOT_ADD_PYUNITTEST(pyroot_roofit_roodatahist_numpy roofit/roodatahist_numpy.py PYTHON_DEPS numpy). endif(). if (dataframe); # std::string_view in CPyCppyy; ROOT_ADD_PYUNITTEST(pyroot_string_view string_view.py); if(NOT MSVC OR win_broken_tests); if(NOT DEFINED ENV{ROOTTEST_IGNORE_NUMBA_PY3}); # Test wrapping Python callables for use in C++ using numba; ROOT_ADD_PYUNITTEST(pyroot_numbadeclare numbadeclare.py PYTHON_DEPS numba); ROOT_ADD_PYUNITTEST(pyroot_rdf_filter_pyz rdf_filter_pyz.py PYTHON_DEPS numba); ROOT_ADD_PYUNITTEST(pyroot_rdf_define_pyz rdf_define_pyz.py PYTHON_DEPS numba); endif(); endif(); endif(). # TComplex pythonizations; ROOT_ADD_PYUNITTEST(pyroot_tcomplex tcomplex_operators.py). # Tests with memory usage; ROOT_ADD_PYUNITTEST(pyroot_memory memory.py); ",MatchSource.DOCS,bindings/pyroot/pythonizations/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt:210,Performance,load,loads,210,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Test library loads during importing ROOT; # Testing only the Linux systems is sufficient to detect unwanted links to libraries at import time.; # Mac (and potentially Windows) pull in many system libraries which makes this test very complex.; if (NOT APPLE AND NOT WIN32); ROOT_ADD_PYUNITTEST(pyroot_import_load_libs import_load_libs.py); endif(). # Test ROOT module; ROOT_ADD_PYUNITTEST(pyroot_root_module root_module.py). # @pythonization decorator; ROOT_ADD_PYUNITTEST(pyroot_pyz_decorator pythonization_decorator.py). # General pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_pretty_printing pretty_printing.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_array_interface array_interface.py PYTHON_DEPS numpy). # STL containers pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_stl_vector stl_vector.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_stl_set stl_set.py). # TObject and subclasses pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tobject_contains tobject_contains.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tobject_comparisonops tobject_comparisonops.py). # TClass pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tclass_dynamiccast tclass_dynamiccast.py). # TContext pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tcontext_contextmanager tcontext_contextmanager.py). # TDirectory and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectory_attrsyntax tdirectory_attrsyntax.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectoryfile_attrsyntax_get tdirectoryfile_attrsyntax_get.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_attrsyntax_get_writeobject_open tfile_attrsyntax_get_writeobject_open.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_constructor tfile_constructor.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_context_manager tfile_context_manager.py). # TTree and subclasses pythonizations; file(COPY TreeHelper.h DESTINATION ",MatchSource.DOCS,bindings/pyroot/pythonizations/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt:289,Safety,detect,detect,289,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Test library loads during importing ROOT; # Testing only the Linux systems is sufficient to detect unwanted links to libraries at import time.; # Mac (and potentially Windows) pull in many system libraries which makes this test very complex.; if (NOT APPLE AND NOT WIN32); ROOT_ADD_PYUNITTEST(pyroot_import_load_libs import_load_libs.py); endif(). # Test ROOT module; ROOT_ADD_PYUNITTEST(pyroot_root_module root_module.py). # @pythonization decorator; ROOT_ADD_PYUNITTEST(pyroot_pyz_decorator pythonization_decorator.py). # General pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_pretty_printing pretty_printing.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_array_interface array_interface.py PYTHON_DEPS numpy). # STL containers pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_stl_vector stl_vector.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_stl_set stl_set.py). # TObject and subclasses pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tobject_contains tobject_contains.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tobject_comparisonops tobject_comparisonops.py). # TClass pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tclass_dynamiccast tclass_dynamiccast.py). # TContext pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tcontext_contextmanager tcontext_contextmanager.py). # TDirectory and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectory_attrsyntax tdirectory_attrsyntax.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectoryfile_attrsyntax_get tdirectoryfile_attrsyntax_get.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_attrsyntax_get_writeobject_open tfile_attrsyntax_get_writeobject_open.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_constructor tfile_constructor.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_context_manager tfile_context_manager.py). # TTree and subclasses pythonizations; file(COPY TreeHelper.h DESTINATION ",MatchSource.DOCS,bindings/pyroot/pythonizations/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt:420,Testability,test,test,420,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Test library loads during importing ROOT; # Testing only the Linux systems is sufficient to detect unwanted links to libraries at import time.; # Mac (and potentially Windows) pull in many system libraries which makes this test very complex.; if (NOT APPLE AND NOT WIN32); ROOT_ADD_PYUNITTEST(pyroot_import_load_libs import_load_libs.py); endif(). # Test ROOT module; ROOT_ADD_PYUNITTEST(pyroot_root_module root_module.py). # @pythonization decorator; ROOT_ADD_PYUNITTEST(pyroot_pyz_decorator pythonization_decorator.py). # General pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_pretty_printing pretty_printing.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_array_interface array_interface.py PYTHON_DEPS numpy). # STL containers pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_stl_vector stl_vector.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_stl_set stl_set.py). # TObject and subclasses pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tobject_contains tobject_contains.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tobject_comparisonops tobject_comparisonops.py). # TClass pythonisations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tclass_dynamiccast tclass_dynamiccast.py). # TContext pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tcontext_contextmanager tcontext_contextmanager.py). # TDirectory and subclasses pythonizations; ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectory_attrsyntax tdirectory_attrsyntax.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tdirectoryfile_attrsyntax_get tdirectoryfile_attrsyntax_get.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_attrsyntax_get_writeobject_open tfile_attrsyntax_get_writeobject_open.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_constructor tfile_constructor.py); ROOT_ADD_PYUNITTEST(pyroot_pyz_tfile_context_manager tfile_context_manager.py). # TTree and subclasses pythonizations; file(COPY TreeHelper.h DESTINATION ",MatchSource.DOCS,bindings/pyroot/pythonizations/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt:806,Availability,error,error,806,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Jonas Rembser CERN, 2024. # Even for the C++ tests, we need to setup the right environment to use PyROOT,; # because we are using PyROOT from C++. This environment mimics the one used in; # ROOT_ADD_PYUNITTEST.; if(MSVC); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PYTHONPATH=${ROOTSYS}/bin;$ENV{PYTHONPATH}); else(); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PATH=${ROOTSYS}/bin:$ENV{PATH}; LD_LIBRARY_PATH=${ROOTSYS}/lib:$ENV{LD_LIBRARY_PATH}; PYTHONPATH=${ROOTSYS}/lib:$ENV{PYTHONPATH}); endif(). if(NOT MSVC); # These tests fail on Windows because of a problem with std::any; # input_line_33:7:52: error: address of overloaded function 'make_any' does not match required type 'std::any (int &&)'; # new (ret) (std::any) (((std::any (&)(int &&))std::make_any<int, int, 0>)((int&&)*(int*)args[0]));; ROOT_ADD_GTEST(testTPython testTPython.cxx LIBRARIES ROOTTPython ENVIRONMENT ${tpython_gtest_env}); ROOT_ADD_PYUNITTEST(test_tpython test_tpython.py); endif(); ",MatchSource.DOCS,bindings/tpython/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt:250,Testability,test,tests,250,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Jonas Rembser CERN, 2024. # Even for the C++ tests, we need to setup the right environment to use PyROOT,; # because we are using PyROOT from C++. This environment mimics the one used in; # ROOT_ADD_PYUNITTEST.; if(MSVC); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PYTHONPATH=${ROOTSYS}/bin;$ENV{PYTHONPATH}); else(); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PATH=${ROOTSYS}/bin:$ENV{PATH}; LD_LIBRARY_PATH=${ROOTSYS}/lib:$ENV{LD_LIBRARY_PATH}; PYTHONPATH=${ROOTSYS}/lib:$ENV{PYTHONPATH}); endif(). if(NOT MSVC); # These tests fail on Windows because of a problem with std::any; # input_line_33:7:52: error: address of overloaded function 'make_any' does not match required type 'std::any (int &&)'; # new (ret) (std::any) (((std::any (&)(int &&))std::make_any<int, int, 0>)((int&&)*(int*)args[0]));; ROOT_ADD_GTEST(testTPython testTPython.cxx LIBRARIES ROOTTPython ENVIRONMENT ${tpython_gtest_env}); ROOT_ADD_PYUNITTEST(test_tpython test_tpython.py); endif(); ",MatchSource.DOCS,bindings/tpython/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt:726,Testability,test,tests,726,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Jonas Rembser CERN, 2024. # Even for the C++ tests, we need to setup the right environment to use PyROOT,; # because we are using PyROOT from C++. This environment mimics the one used in; # ROOT_ADD_PYUNITTEST.; if(MSVC); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PYTHONPATH=${ROOTSYS}/bin;$ENV{PYTHONPATH}); else(); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PATH=${ROOTSYS}/bin:$ENV{PATH}; LD_LIBRARY_PATH=${ROOTSYS}/lib:$ENV{LD_LIBRARY_PATH}; PYTHONPATH=${ROOTSYS}/lib:$ENV{PYTHONPATH}); endif(). if(NOT MSVC); # These tests fail on Windows because of a problem with std::any; # input_line_33:7:52: error: address of overloaded function 'make_any' does not match required type 'std::any (int &&)'; # new (ret) (std::any) (((std::any (&)(int &&))std::make_any<int, int, 0>)((int&&)*(int*)args[0]));; ROOT_ADD_GTEST(testTPython testTPython.cxx LIBRARIES ROOTTPython ENVIRONMENT ${tpython_gtest_env}); ROOT_ADD_PYUNITTEST(test_tpython test_tpython.py); endif(); ",MatchSource.DOCS,bindings/tpython/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt:1021,Testability,test,testTPython,1021,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Jonas Rembser CERN, 2024. # Even for the C++ tests, we need to setup the right environment to use PyROOT,; # because we are using PyROOT from C++. This environment mimics the one used in; # ROOT_ADD_PYUNITTEST.; if(MSVC); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PYTHONPATH=${ROOTSYS}/bin;$ENV{PYTHONPATH}); else(); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PATH=${ROOTSYS}/bin:$ENV{PATH}; LD_LIBRARY_PATH=${ROOTSYS}/lib:$ENV{LD_LIBRARY_PATH}; PYTHONPATH=${ROOTSYS}/lib:$ENV{PYTHONPATH}); endif(). if(NOT MSVC); # These tests fail on Windows because of a problem with std::any; # input_line_33:7:52: error: address of overloaded function 'make_any' does not match required type 'std::any (int &&)'; # new (ret) (std::any) (((std::any (&)(int &&))std::make_any<int, int, 0>)((int&&)*(int*)args[0]));; ROOT_ADD_GTEST(testTPython testTPython.cxx LIBRARIES ROOTTPython ENVIRONMENT ${tpython_gtest_env}); ROOT_ADD_PYUNITTEST(test_tpython test_tpython.py); endif(); ",MatchSource.DOCS,bindings/tpython/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt:1033,Testability,test,testTPython,1033,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Jonas Rembser CERN, 2024. # Even for the C++ tests, we need to setup the right environment to use PyROOT,; # because we are using PyROOT from C++. This environment mimics the one used in; # ROOT_ADD_PYUNITTEST.; if(MSVC); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PYTHONPATH=${ROOTSYS}/bin;$ENV{PYTHONPATH}); else(); set(tpython_gtest_env ROOTSYS=${ROOTSYS}; PATH=${ROOTSYS}/bin:$ENV{PATH}; LD_LIBRARY_PATH=${ROOTSYS}/lib:$ENV{LD_LIBRARY_PATH}; PYTHONPATH=${ROOTSYS}/lib:$ENV{PYTHONPATH}); endif(). if(NOT MSVC); # These tests fail on Windows because of a problem with std::any; # input_line_33:7:52: error: address of overloaded function 'make_any' does not match required type 'std::any (int &&)'; # new (ret) (std::any) (((std::any (&)(int &&))std::make_any<int, int, 0>)((int&&)*(int*)args[0]));; ROOT_ADD_GTEST(testTPython testTPython.cxx LIBRARIES ROOTTPython ENVIRONMENT ${tpython_gtest_env}); ROOT_ADD_PYUNITTEST(test_tpython test_tpython.py); endif(); ",MatchSource.DOCS,bindings/tpython/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt:1629,Deployability,install,install,1629,"ibutors see $ROOTSYS/README/CREDITS. set(CFITSIO_VERSION 4.4.0). set(CFITSIO_PREFIX ${CMAKE_BINARY_DIR}/CFITSIO-prefix); set(CFITSIO_LIBRARIES ${CFITSIO_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}cfitsio${CMAKE_STATIC_LIBRARY_SUFFIX}). if(NOT WIN32); set(CFITSIO_C_FLAGS -fPIC); endif(). if(WIN32 AND NOT CMAKE_GENERATOR MATCHES Ninja); if(winrtdebug); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Debug""); else(); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Release""); endif(); endif(). ExternalProject_Add(; BUILTIN_CFITSIO; PREFIX ${CFITSIO_PREFIX}; URL https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-${CFITSIO_VERSION}.tar.gz; URL_HASH SHA256=95900cf95ae760839e7cb9678a7b2fad0858d6ac12234f934bd1cb6bfc246ba9; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_FLAGS=${CFITSIO_C_FLAGS}; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_INSTALL_LIBDIR=<INSTALL_DIR>/lib; -DBUILD_SHARED_LIBS=OFF; -DUSE_CURL=OFF; -DZLIB_FOUND=TRUE; -DZLIB_INCLUDE_DIR=${ZLIB_INCLUDE_DIRS}; -DZLIB_LIBRARIES=$<TARGET_FILE:ZLIB::ZLIB>; # Skip the find_package(ZLIB REQUIRED), because we feed CFITSIO our own ZLIB flags.; PATCH_COMMAND git apply --ignore-space-change --ignore-whitespace; ${CMAKE_CURRENT_SOURCE_DIR}/cfitsio-no-find-zlib.diff; ${CMAKE_CURRENT_SOURCE_DIR}/no-fortran-wrapper.diff; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS} --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${CFITSIO_LIBRARIES}; TIMEOUT 600; ). add_dependencies(BUILTIN_CFITSIO ZLIB::ZLIB). add_dependencies(CFITSIO::CFITSIO BUILTIN_CFITSIO); set(CFITSIO_INCLUDE_DIRS ${CFITSIO_PREFIX}/include); file(MAKE_DIRECTORY ${CFITSIO_INCLUDE_DIRS}); set_target_properties(CFITSIO::CFITSIO PROPERTIES; IMPORTED_LOCATION ${CFITSIO_LIBRARIES}; INTERFACE_INCLUDE_DIRECTORIES ${CFITSIO_INCLUDE_DIRS}; INTERFACE_LINK_LIBRARIES ZLIB::ZLIB; ); ",MatchSource.DOCS,builtins/cfitsio/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt:1459,Integrability,wrap,wrapper,1459,"ibutors see $ROOTSYS/README/CREDITS. set(CFITSIO_VERSION 4.4.0). set(CFITSIO_PREFIX ${CMAKE_BINARY_DIR}/CFITSIO-prefix); set(CFITSIO_LIBRARIES ${CFITSIO_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}cfitsio${CMAKE_STATIC_LIBRARY_SUFFIX}). if(NOT WIN32); set(CFITSIO_C_FLAGS -fPIC); endif(). if(WIN32 AND NOT CMAKE_GENERATOR MATCHES Ninja); if(winrtdebug); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Debug""); else(); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Release""); endif(); endif(). ExternalProject_Add(; BUILTIN_CFITSIO; PREFIX ${CFITSIO_PREFIX}; URL https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-${CFITSIO_VERSION}.tar.gz; URL_HASH SHA256=95900cf95ae760839e7cb9678a7b2fad0858d6ac12234f934bd1cb6bfc246ba9; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_FLAGS=${CFITSIO_C_FLAGS}; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_INSTALL_LIBDIR=<INSTALL_DIR>/lib; -DBUILD_SHARED_LIBS=OFF; -DUSE_CURL=OFF; -DZLIB_FOUND=TRUE; -DZLIB_INCLUDE_DIR=${ZLIB_INCLUDE_DIRS}; -DZLIB_LIBRARIES=$<TARGET_FILE:ZLIB::ZLIB>; # Skip the find_package(ZLIB REQUIRED), because we feed CFITSIO our own ZLIB flags.; PATCH_COMMAND git apply --ignore-space-change --ignore-whitespace; ${CMAKE_CURRENT_SOURCE_DIR}/cfitsio-no-find-zlib.diff; ${CMAKE_CURRENT_SOURCE_DIR}/no-fortran-wrapper.diff; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS} --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${CFITSIO_LIBRARIES}; TIMEOUT 600; ). add_dependencies(BUILTIN_CFITSIO ZLIB::ZLIB). add_dependencies(CFITSIO::CFITSIO BUILTIN_CFITSIO); set(CFITSIO_INCLUDE_DIRS ${CFITSIO_PREFIX}/include); file(MAKE_DIRECTORY ${CFITSIO_INCLUDE_DIRS}); set_target_properties(CFITSIO::CFITSIO PROPERTIES; IMPORTED_LOCATION ${CFITSIO_LIBRARIES}; INTERFACE_INCLUDE_DIRECTORIES ${CFITSIO_INCLUDE_DIRS}; INTERFACE_LINK_LIBRARIES ZLIB::ZLIB; ); ",MatchSource.DOCS,builtins/cfitsio/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt:545,Modifiability,config,config,545,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(CFITSIO_VERSION 4.4.0). set(CFITSIO_PREFIX ${CMAKE_BINARY_DIR}/CFITSIO-prefix); set(CFITSIO_LIBRARIES ${CFITSIO_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}cfitsio${CMAKE_STATIC_LIBRARY_SUFFIX}). if(NOT WIN32); set(CFITSIO_C_FLAGS -fPIC); endif(). if(WIN32 AND NOT CMAKE_GENERATOR MATCHES Ninja); if(winrtdebug); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Debug""); else(); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Release""); endif(); endif(). ExternalProject_Add(; BUILTIN_CFITSIO; PREFIX ${CFITSIO_PREFIX}; URL https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-${CFITSIO_VERSION}.tar.gz; URL_HASH SHA256=95900cf95ae760839e7cb9678a7b2fad0858d6ac12234f934bd1cb6bfc246ba9; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_FLAGS=${CFITSIO_C_FLAGS}; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_INSTALL_LIBDIR=<INSTALL_DIR>/lib; -DBUILD_SHARED_LIBS=OFF; -DUSE_CURL=OFF; -DZLIB_FOUND=TRUE; -DZLIB_INCLUDE_DIR=${ZLIB_INCLUDE_DIRS}; -DZLIB_LIBRARIES=$<TARGET_FILE:ZLIB::ZLIB>; # Skip the find_package(ZLIB REQUIRED), because we feed CFITSIO our own ZLIB flags.; PATCH_COMMAND git apply --ignore-space-change --ignore-whitespace; ${CMAKE_CURRENT_SOURCE_DIR}/cfitsio-no-find-zlib.diff; ${CMAKE_CURRENT_SOURCE_DIR}/no-fortran-wrapper.diff; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS} --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${CFITSIO_LIBRARIES}; TIMEOUT 600; ). add_dependencies(BUILTIN_CFITSIO ZLIB::ZLIB). add_dependencies(CFITSIO::CFITSIO BUILTIN_CFITSIO); set(CFITSIO_INCLUDE_DIRS ${CFITSIO_PREFIX}/include); file(MAKE_DIRECTORY ${CFITSIO_INCLUDE_DIRS}); set_target_properties(CFITSIO",MatchSource.DOCS,builtins/cfitsio/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt:604,Modifiability,config,config,604,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(CFITSIO_VERSION 4.4.0). set(CFITSIO_PREFIX ${CMAKE_BINARY_DIR}/CFITSIO-prefix); set(CFITSIO_LIBRARIES ${CFITSIO_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}cfitsio${CMAKE_STATIC_LIBRARY_SUFFIX}). if(NOT WIN32); set(CFITSIO_C_FLAGS -fPIC); endif(). if(WIN32 AND NOT CMAKE_GENERATOR MATCHES Ninja); if(winrtdebug); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Debug""); else(); set(CFITSIO_BUILD_COMMAND_FLAGS ""--config Release""); endif(); endif(). ExternalProject_Add(; BUILTIN_CFITSIO; PREFIX ${CFITSIO_PREFIX}; URL https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-${CFITSIO_VERSION}.tar.gz; URL_HASH SHA256=95900cf95ae760839e7cb9678a7b2fad0858d6ac12234f934bd1cb6bfc246ba9; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_FLAGS=${CFITSIO_C_FLAGS}; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_INSTALL_LIBDIR=<INSTALL_DIR>/lib; -DBUILD_SHARED_LIBS=OFF; -DUSE_CURL=OFF; -DZLIB_FOUND=TRUE; -DZLIB_INCLUDE_DIR=${ZLIB_INCLUDE_DIRS}; -DZLIB_LIBRARIES=$<TARGET_FILE:ZLIB::ZLIB>; # Skip the find_package(ZLIB REQUIRED), because we feed CFITSIO our own ZLIB flags.; PATCH_COMMAND git apply --ignore-space-change --ignore-whitespace; ${CMAKE_CURRENT_SOURCE_DIR}/cfitsio-no-find-zlib.diff; ${CMAKE_CURRENT_SOURCE_DIR}/no-fortran-wrapper.diff; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${CFITSIO_BUILD_COMMAND_FLAGS} --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${CFITSIO_LIBRARIES}; TIMEOUT 600; ). add_dependencies(BUILTIN_CFITSIO ZLIB::ZLIB). add_dependencies(CFITSIO::CFITSIO BUILTIN_CFITSIO); set(CFITSIO_INCLUDE_DIRS ${CFITSIO_PREFIX}/include); file(MAKE_DIRECTORY ${CFITSIO_INCLUDE_DIRS}); set_target_properties(CFITSIO",MatchSource.DOCS,builtins/cfitsio/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/cfitsio/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt:849,Deployability,install,install,849,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject). find_package(libuuid REQUIRED); find_package(LibXml2 REQUIRED); find_package(OpenSSL REQUIRED). set(DAVIX_VERSION ""0.8.7""); set(DAVIX_URL ""http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources""); set(DAVIX_URLHASH ""SHA256=78c24e14edd7e4e560392d67147ec8658c2aa0d3640415bdf6bc513afcf695e6""); set(DAVIX_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/DAVIX-prefix); set(DAVIX_LIBNAME ${CMAKE_STATIC_LIBRARY_PREFIX}davix${CMAKE_STATIC_LIBRARY_SUFFIX}). list(APPEND DAVIX_LIBRARIES ${DAVIX_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}davix${CMAKE_STATIC_LIBRARY_SUFFIX}); list(APPEND DAVIX_LIBRARIES ${DAVIX_PREFIX}/src/DAVIX-build/deps/curl-install/usr/lib/${CMAKE_STATIC_LIBRARY_PREFIX}curl${CMAKE_STATIC_LIBRARY_SUFFIX}). string(REPLACE ""-Werror "" """" DAVIX_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ""). ExternalProject_Add(DAVIX; URL ${DAVIX_URL}/davix-${DAVIX_VERSION}.tar.gz; URL_HASH ${DAVIX_URLHASH}; CMAKE_CACHE_ARGS; -DCMAKE_PREFIX_PATH:STRING=${OPENSSL_PREFIX}; -DUUID_INCLUDE_DIR:STRING=${UUID_INCLUDE_DIR}; -DUUID_LIBRARY:STRING=${UUID_LIBRARY}; -DLIBXML2_INCLUDE_DIR:PATH=${LIBXML2_INCLUDE_DIR}; -DLIBXML2_INCLUDE_DIRS:STRING=${LIBXML2_INCLUDE_DIRS}; -DLIBXML2_LIBRARY:PATH=${LIBXML2_LIBRARY}; -DLIBXML2_LIBRARIES:STRING=${LIBXML2_LIBRARIES}; CMAKE_ARGS; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DENABLE_HTML_DOCS=OFF; -DENABLE_IPV6=OFF; -DSTATIC_LIBRARY=ON; -DSHARED_LIBRARY=OFF; -DENABLE_TOOLS=OFF; -DDAVIX_TESTS=OFF; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS=${DAVIX_CXX_FLAGS}\ -fPIC; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DLIB_SUFFIX=; PATCH_COMMAND sed -i """" -e ""s|sed -i '| sed -i \""\"" '",MatchSource.DOCS,builtins/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt:2021,Deployability,patch,patch-curl-clock-gettime,2021,"R}/DAVIX-prefix); set(DAVIX_LIBNAME ${CMAKE_STATIC_LIBRARY_PREFIX}davix${CMAKE_STATIC_LIBRARY_SUFFIX}). list(APPEND DAVIX_LIBRARIES ${DAVIX_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}davix${CMAKE_STATIC_LIBRARY_SUFFIX}); list(APPEND DAVIX_LIBRARIES ${DAVIX_PREFIX}/src/DAVIX-build/deps/curl-install/usr/lib/${CMAKE_STATIC_LIBRARY_PREFIX}curl${CMAKE_STATIC_LIBRARY_SUFFIX}). string(REPLACE ""-Werror "" """" DAVIX_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ""). ExternalProject_Add(DAVIX; URL ${DAVIX_URL}/davix-${DAVIX_VERSION}.tar.gz; URL_HASH ${DAVIX_URLHASH}; CMAKE_CACHE_ARGS; -DCMAKE_PREFIX_PATH:STRING=${OPENSSL_PREFIX}; -DUUID_INCLUDE_DIR:STRING=${UUID_INCLUDE_DIR}; -DUUID_LIBRARY:STRING=${UUID_LIBRARY}; -DLIBXML2_INCLUDE_DIR:PATH=${LIBXML2_INCLUDE_DIR}; -DLIBXML2_INCLUDE_DIRS:STRING=${LIBXML2_INCLUDE_DIRS}; -DLIBXML2_LIBRARY:PATH=${LIBXML2_LIBRARY}; -DLIBXML2_LIBRARIES:STRING=${LIBXML2_LIBRARIES}; CMAKE_ARGS; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DENABLE_HTML_DOCS=OFF; -DENABLE_IPV6=OFF; -DSTATIC_LIBRARY=ON; -DSHARED_LIBRARY=OFF; -DENABLE_TOOLS=OFF; -DDAVIX_TESTS=OFF; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS=${DAVIX_CXX_FLAGS}\ -fPIC; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DLIB_SUFFIX=; PATCH_COMMAND sed -i """" -e ""s|sed -i '| sed -i \""\"" '|g"" -e ""s/gcc/cc/g"" patch-curl-clock-gettime.sh; LOG_BUILD 1 LOG_CONFIGURE 1 LOG_DOWNLOAD 1 LOG_INSTALL 1; BUILD_BYPRODUCTS ${DAVIX_LIBRARIES}; TIMEOUT 600). if(builtin_openssl); add_dependencies(DAVIX OPENSSL); endif(). if(APPLE); find_library(FOUND_CoreFoundation CoreFoundation); if(NOT FOUND_CoreFoundation); message(FATAL_ERROR ""Missing macOS CoreFoundation framework!""); endif(); list(APPEND DAVIX_LIBRARIES ${FOUND_CoreFoundation}). find_library(FOUND_Security Security); if(NOT FOUND_Security); message(FATAL_ERROR ""Missing macOS Security framework!""",MatchSource.DOCS,builtins/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt:2314,Integrability,message,message,2314,"ING=${LIBXML2_INCLUDE_DIRS}; -DLIBXML2_LIBRARY:PATH=${LIBXML2_LIBRARY}; -DLIBXML2_LIBRARIES:STRING=${LIBXML2_LIBRARIES}; CMAKE_ARGS; -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DENABLE_HTML_DOCS=OFF; -DENABLE_IPV6=OFF; -DSTATIC_LIBRARY=ON; -DSHARED_LIBRARY=OFF; -DENABLE_TOOLS=OFF; -DDAVIX_TESTS=OFF; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS=${DAVIX_CXX_FLAGS}\ -fPIC; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DLIB_SUFFIX=; PATCH_COMMAND sed -i """" -e ""s|sed -i '| sed -i \""\"" '|g"" -e ""s/gcc/cc/g"" patch-curl-clock-gettime.sh; LOG_BUILD 1 LOG_CONFIGURE 1 LOG_DOWNLOAD 1 LOG_INSTALL 1; BUILD_BYPRODUCTS ${DAVIX_LIBRARIES}; TIMEOUT 600). if(builtin_openssl); add_dependencies(DAVIX OPENSSL); endif(). if(APPLE); find_library(FOUND_CoreFoundation CoreFoundation); if(NOT FOUND_CoreFoundation); message(FATAL_ERROR ""Missing macOS CoreFoundation framework!""); endif(); list(APPEND DAVIX_LIBRARIES ${FOUND_CoreFoundation}). find_library(FOUND_Security Security); if(NOT FOUND_Security); message(FATAL_ERROR ""Missing macOS Security framework!""); endif(); list(APPEND DAVIX_LIBRARIES ${FOUND_Security}); endif(). list(APPEND DAVIX_LIBRARIES uuid::uuid OpenSSL::SSL ZLIB::ZLIB ${LIBXML2_LIBRARIES} ${CMAKE_DL_LIBS}). check_cxx_symbol_exists(""clock_gettime"" ""time.h"" _have_clock_gettime). if(NOT _have_clock_gettime); check_library_exists(rt clock_gettime """" _have_rt_library); if(_have_rt_library); list(APPEND DAVIX_LIBRARIES rt); endif(); endif(). unset(DAVIX_FOUND CACHE); unset(DAVIX_FOUND PARENT_SCOPE); set(DAVIX_FOUND TRUE CACHE BOOL """" FORCE). set(DAVIX_INCLUDE_DIR ${DAVIX_PREFIX}/include/davix CACHE INTERNAL """" FORCE); set(DAVIX_INCLUDE_DIRS ${DAVIX_PREFIX}/include/davix CACHE INTERNAL """" FORCE); set(DAVIX_LIBRARY ${DAVIX_PREFIX}/lib/${DAVIX_LIBNAME} CACHE INTERNAL """" FORCE); set(DAVIX_LIBRARIES ${DAVIX",MatchSource.DOCS,builtins/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt:2504,Integrability,message,message,2504,"_TYPE}; -DENABLE_HTML_DOCS=OFF; -DENABLE_IPV6=OFF; -DSTATIC_LIBRARY=ON; -DSHARED_LIBRARY=OFF; -DENABLE_TOOLS=OFF; -DDAVIX_TESTS=OFF; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS=${DAVIX_CXX_FLAGS}\ -fPIC; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DLIB_SUFFIX=; PATCH_COMMAND sed -i """" -e ""s|sed -i '| sed -i \""\"" '|g"" -e ""s/gcc/cc/g"" patch-curl-clock-gettime.sh; LOG_BUILD 1 LOG_CONFIGURE 1 LOG_DOWNLOAD 1 LOG_INSTALL 1; BUILD_BYPRODUCTS ${DAVIX_LIBRARIES}; TIMEOUT 600). if(builtin_openssl); add_dependencies(DAVIX OPENSSL); endif(). if(APPLE); find_library(FOUND_CoreFoundation CoreFoundation); if(NOT FOUND_CoreFoundation); message(FATAL_ERROR ""Missing macOS CoreFoundation framework!""); endif(); list(APPEND DAVIX_LIBRARIES ${FOUND_CoreFoundation}). find_library(FOUND_Security Security); if(NOT FOUND_Security); message(FATAL_ERROR ""Missing macOS Security framework!""); endif(); list(APPEND DAVIX_LIBRARIES ${FOUND_Security}); endif(). list(APPEND DAVIX_LIBRARIES uuid::uuid OpenSSL::SSL ZLIB::ZLIB ${LIBXML2_LIBRARIES} ${CMAKE_DL_LIBS}). check_cxx_symbol_exists(""clock_gettime"" ""time.h"" _have_clock_gettime). if(NOT _have_clock_gettime); check_library_exists(rt clock_gettime """" _have_rt_library); if(_have_rt_library); list(APPEND DAVIX_LIBRARIES rt); endif(); endif(). unset(DAVIX_FOUND CACHE); unset(DAVIX_FOUND PARENT_SCOPE); set(DAVIX_FOUND TRUE CACHE BOOL """" FORCE). set(DAVIX_INCLUDE_DIR ${DAVIX_PREFIX}/include/davix CACHE INTERNAL """" FORCE); set(DAVIX_INCLUDE_DIRS ${DAVIX_PREFIX}/include/davix CACHE INTERNAL """" FORCE); set(DAVIX_LIBRARY ${DAVIX_PREFIX}/lib/${DAVIX_LIBNAME} CACHE INTERNAL """" FORCE); set(DAVIX_LIBRARIES ${DAVIX_LIBRARIES} CACHE INTERNAL """" FORCE). add_library(davix INTERFACE); target_include_directories(davix SYSTEM INTERFACE $<BUILD_INTERFACE:${DAVIX_INCLUDE_DIR}>); target_link_libraries(davix INTERFACE $<BUI",MatchSource.DOCS,builtins/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/glew/CMakeLists.txt:1504,Deployability,install,install,1504,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(GLEW C). find_package(OpenGL REQUIRED). include_directories (${CMAKE_CURRENT_SOURCE_DIR}/inc). set(GLEW_HEADERS; inc/GL/glew.h; inc/GL/glxew.h; inc/GL/wglew.h; ). set(GLEW_SOURCES; src/glew.c; ). unset(GLEW_FOUND CACHE); unset(GLEW_FOUND PARENT_SCOPE); set(GLEW_FOUND TRUE CACHE BOOL """" FORCE). set(GLEW_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/inc CACHE INTERNAL """" FORCE); set(GLEW_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/inc CACHE INTERNAL """" FORCE). if(APPLE); if(NOT cocoa); set(GLEW_DEFINITIONS -DGLEW_APPLE_GLX); endif(); endif(). if(NOT MSVC); add_library(GLEW SHARED ${GLEW_HEADERS} ${GLEW_SOURCES}); target_compile_options(GLEW PRIVATE -fPIC); else(); add_library(GLEW STATIC ${GLEW_HEADERS} ${GLEW_SOURCES}); set_target_properties(GLEW PROPERTIES COMPILE_DEFINITIONS ""GLEW_STATIC"" PREFIX ""lib""); target_compile_definitions (GLEW PRIVATE ""GLEW_STATIC""); endif(); target_compile_options(GLEW PRIVATE ${GLEW_DEFINITIONS}); target_include_directories(GLEW INTERFACE $<BUILD_INTERFACE:${GLEW_INCLUDE_DIR}>); target_link_libraries(GLEW PRIVATE OpenGL::GL OpenGL::GLU). target_link_libraries(GLEW::GLEW INTERFACE GLEW). set(GLEW_LIBRARY $<TARGET_FILE:GLEW> CACHE INTERNAL """"); set(GLEW_LIBRARIES GLEW::GLEW CACHE INTERNAL """"). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS GLEW::GLEW). install(TARGETS GLEW; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib; ). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,builtins/glew/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/glew/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/nlohmann/CMakeLists.txt:1260,Deployability,install,install,1260,"# Install nlohmann/json.hpp include to have it. # file only used when ACLiC or ROOT macros will include REve headers,; # it is not used for ROOT compilation. # extract version from existing header file; file(STRINGS ""json.hpp"" JSON_H REGEX ""^#define NLOHMANN_JSON_VERSION_[A-Z]+[ ]+[0-9]+.*$""); string(REGEX REPLACE "".+NLOHMANN_JSON_VERSION_MAJOR[ ]+([0-9]+).*$"" ""\\1"" JSON_VERSION_MAJOR ""${JSON_H}""); string(REGEX REPLACE "".+NLOHMANN_JSON_VERSION_MINOR[ ]+([0-9]+).*$"" ""\\1"" JSON_VERSION_MINOR ""${JSON_H}""); string(REGEX REPLACE "".+NLOHMANN_JSON_VERSION_PATCH[ ]+([0-9]+).*$"" ""\\1"" JSON_VERSION_PATCH ""${JSON_H}""); set(nlohmann_json_VERSION ""${JSON_VERSION_MAJOR}.${JSON_VERSION_MINOR}.${JSON_VERSION_PATCH}"" PARENT_SCOPE); unset(JSON_H). add_custom_command(; OUTPUT ${CMAKE_BINARY_DIR}/include/nlohmann/json.hpp; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/builtins/nlohmann/json.hpp ${CMAKE_BINARY_DIR}/include/nlohmann/json.hpp; COMMENT ""Copying nlohmann/json.hpp header to ${CMAKE_BINARY_DIR}/include""; DEPENDS ${CMAKE_SOURCE_DIR}/builtins/nlohmann/json.hpp). add_custom_target(builtin_nlohmann_json_incl DEPENDS ${CMAKE_BINARY_DIR}/include/nlohmann/json.hpp). set_property(GLOBAL APPEND PROPERTY ROOT_HEADER_TARGETS builtin_nlohmann_json_incl). install(FILES ${CMAKE_SOURCE_DIR}/builtins/nlohmann/json.hpp DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/nlohmann/). ",MatchSource.DOCS,builtins/nlohmann/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/nlohmann/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/openssl/CMakeLists.txt:330,Modifiability,variab,variables,330,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject); include(FindPackageHandleStandardArgs). # find_package(OpenSSL) may not have found it,; # clear parent scope variables set to NOTFOUND; foreach(suffix FOUND INCLUDE_DIR INCLUDE_DIRS CRYPTO_LIBRARY SSL_LIBRARY LIBRARY LIBRARIES VERSION); unset(OPENSSL_${suffix} PARENT_SCOPE); endforeach(). set(OPENSSL_VERSION ""3.0.13""); set(OPENSSL_URL ""http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/openssl-${OPENSSL_VERSION}.tar.gz""); set(OPENSSL_URLHASH ""SHA256=88525753f79d3bec27d2fa7c66aa0b92b3aa9498dafd93d7cfa4b3780cdae313""); set(OPENSSL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/OPENSSL-prefix). foreach(lib ssl crypto); string(TOUPPER ${lib} libupper); set(libname ${CMAKE_STATIC_LIBRARY_PREFIX}${lib}${CMAKE_STATIC_LIBRARY_SUFFIX}); set(OPENSSL_${libupper}_LIBRARY ${OPENSSL_PREFIX}/lib/${libname}); endforeach(). if(APPLE); if(${ROOT_ARCHITECTURE} MATCHES ""macosxarm64""); set(OPENSSL_CONFIG_CMD ./Configure darwin64-arm64-cc); else(); set(OPENSSL_CONFIG_CMD ./Configure darwin64-x86_64-cc); endif(); if (CMAKE_OSX_SYSROOT); set(OSX_SYSROOT ""-isysroot ${CMAKE_OSX_SYSROOT}""); endif(); else(); set(OPENSSL_CONFIG_CMD ./config); endif(). ExternalProject_Add(OPENSSL; URL ${OPENSSL_URL} URL_HASH ${OPENSSL_URLHASH}; CONFIGURE_COMMAND ${OPENSSL_CONFIG_CMD} no-shared --prefix=<INSTALL_DIR>; BUILD_COMMAND make -j1 CC=${CMAKE_C_COMPILER}\ -fPIC\ ${OSX_SYSROOT}; INSTALL_COMMAND make install_sw; BUILD_IN_SOURCE 1; LOG_BUILD 1 LOG_CONFIGURE 1 LOG_DOWNLOAD 1 LOG_INSTALL 1; BUILD_BYPRODUCTS ${OPENSSL_CRYPTO_LIBRARY} ${OPENSSL_SSL_LIBRARY}; TIMEOUT 600). set(OPENSSL_FOUND TRUE CACHE BOOL """" FORCE); set(OPENSSL_VERSION ${OPENSSL_VERSION} CACHE INTERNAL """" FORCE); set(OPENSSL_VERSION_STRING ""${OPENSSL_VERSION}"" CACHE INTERNAL """" FORCE); set(OPENSSL_PREFIX ${OPENSSL_PREFIX} CACHE INTE",MatchSource.DOCS,builtins/openssl/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/openssl/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/openssl/CMakeLists.txt:1340,Modifiability,config,config,1340,"OTFOUND; foreach(suffix FOUND INCLUDE_DIR INCLUDE_DIRS CRYPTO_LIBRARY SSL_LIBRARY LIBRARY LIBRARIES VERSION); unset(OPENSSL_${suffix} PARENT_SCOPE); endforeach(). set(OPENSSL_VERSION ""3.0.13""); set(OPENSSL_URL ""http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/openssl-${OPENSSL_VERSION}.tar.gz""); set(OPENSSL_URLHASH ""SHA256=88525753f79d3bec27d2fa7c66aa0b92b3aa9498dafd93d7cfa4b3780cdae313""); set(OPENSSL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/OPENSSL-prefix). foreach(lib ssl crypto); string(TOUPPER ${lib} libupper); set(libname ${CMAKE_STATIC_LIBRARY_PREFIX}${lib}${CMAKE_STATIC_LIBRARY_SUFFIX}); set(OPENSSL_${libupper}_LIBRARY ${OPENSSL_PREFIX}/lib/${libname}); endforeach(). if(APPLE); if(${ROOT_ARCHITECTURE} MATCHES ""macosxarm64""); set(OPENSSL_CONFIG_CMD ./Configure darwin64-arm64-cc); else(); set(OPENSSL_CONFIG_CMD ./Configure darwin64-x86_64-cc); endif(); if (CMAKE_OSX_SYSROOT); set(OSX_SYSROOT ""-isysroot ${CMAKE_OSX_SYSROOT}""); endif(); else(); set(OPENSSL_CONFIG_CMD ./config); endif(). ExternalProject_Add(OPENSSL; URL ${OPENSSL_URL} URL_HASH ${OPENSSL_URLHASH}; CONFIGURE_COMMAND ${OPENSSL_CONFIG_CMD} no-shared --prefix=<INSTALL_DIR>; BUILD_COMMAND make -j1 CC=${CMAKE_C_COMPILER}\ -fPIC\ ${OSX_SYSROOT}; INSTALL_COMMAND make install_sw; BUILD_IN_SOURCE 1; LOG_BUILD 1 LOG_CONFIGURE 1 LOG_DOWNLOAD 1 LOG_INSTALL 1; BUILD_BYPRODUCTS ${OPENSSL_CRYPTO_LIBRARY} ${OPENSSL_SSL_LIBRARY}; TIMEOUT 600). set(OPENSSL_FOUND TRUE CACHE BOOL """" FORCE); set(OPENSSL_VERSION ${OPENSSL_VERSION} CACHE INTERNAL """" FORCE); set(OPENSSL_VERSION_STRING ""${OPENSSL_VERSION}"" CACHE INTERNAL """" FORCE); set(OPENSSL_PREFIX ${OPENSSL_PREFIX} CACHE INTERNAL """" FORCE) # needed by Davix; set(OPENSSL_INCLUDE_DIR ${OPENSSL_PREFIX}/include CACHE INTERNAL """" FORCE); set(OPENSSL_INCLUDE_DIRS ${OPENSSL_PREFIX}/include CACHE INTERNAL """" FORCE); set(OPENSSL_CRYPTO_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL """" FORCE); set(OPENSSL_SSL_LIBRARY ${OPENSSL_SSL_LIBRARY} CACHE INTERNAL """" FORCE); set(OPEN",MatchSource.DOCS,builtins/openssl/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/openssl/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/openssl/CMakeLists.txt:311,Usability,clear,clear,311,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject); include(FindPackageHandleStandardArgs). # find_package(OpenSSL) may not have found it,; # clear parent scope variables set to NOTFOUND; foreach(suffix FOUND INCLUDE_DIR INCLUDE_DIRS CRYPTO_LIBRARY SSL_LIBRARY LIBRARY LIBRARIES VERSION); unset(OPENSSL_${suffix} PARENT_SCOPE); endforeach(). set(OPENSSL_VERSION ""3.0.13""); set(OPENSSL_URL ""http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/openssl-${OPENSSL_VERSION}.tar.gz""); set(OPENSSL_URLHASH ""SHA256=88525753f79d3bec27d2fa7c66aa0b92b3aa9498dafd93d7cfa4b3780cdae313""); set(OPENSSL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/OPENSSL-prefix). foreach(lib ssl crypto); string(TOUPPER ${lib} libupper); set(libname ${CMAKE_STATIC_LIBRARY_PREFIX}${lib}${CMAKE_STATIC_LIBRARY_SUFFIX}); set(OPENSSL_${libupper}_LIBRARY ${OPENSSL_PREFIX}/lib/${libname}); endforeach(). if(APPLE); if(${ROOT_ARCHITECTURE} MATCHES ""macosxarm64""); set(OPENSSL_CONFIG_CMD ./Configure darwin64-arm64-cc); else(); set(OPENSSL_CONFIG_CMD ./Configure darwin64-x86_64-cc); endif(); if (CMAKE_OSX_SYSROOT); set(OSX_SYSROOT ""-isysroot ${CMAKE_OSX_SYSROOT}""); endif(); else(); set(OPENSSL_CONFIG_CMD ./config); endif(). ExternalProject_Add(OPENSSL; URL ${OPENSSL_URL} URL_HASH ${OPENSSL_URLHASH}; CONFIGURE_COMMAND ${OPENSSL_CONFIG_CMD} no-shared --prefix=<INSTALL_DIR>; BUILD_COMMAND make -j1 CC=${CMAKE_C_COMPILER}\ -fPIC\ ${OSX_SYSROOT}; INSTALL_COMMAND make install_sw; BUILD_IN_SOURCE 1; LOG_BUILD 1 LOG_CONFIGURE 1 LOG_DOWNLOAD 1 LOG_INSTALL 1; BUILD_BYPRODUCTS ${OPENSSL_CRYPTO_LIBRARY} ${OPENSSL_SSL_LIBRARY}; TIMEOUT 600). set(OPENSSL_FOUND TRUE CACHE BOOL """" FORCE); set(OPENSSL_VERSION ${OPENSSL_VERSION} CACHE INTERNAL """" FORCE); set(OPENSSL_VERSION_STRING ""${OPENSSL_VERSION}"" CACHE INTERNAL """" FORCE); set(OPENSSL_PREFIX ${OPENSSL_PREFIX} CACHE INTE",MatchSource.DOCS,builtins/openssl/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/openssl/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/pcre/CMakeLists.txt:235,Modifiability,variab,variables,235,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject). # Clear cache variables set by find_package(PCRE); # to ensure that we use the builtin version; foreach(var PCRE_FOUND PCRE_VERSION PCRE_INCLUDE_DIR PCRE_PCRE_LIBRARY PCRE_LIBRARIES); unset(${var} CACHE); endforeach(). if(WIN32); if(CMAKE_GENERATOR MATCHES Ninja); if (CMAKE_BUILD_TYPE MATCHES Debug); set(PCRE_POSTFIX d); endif(); else(); if(winrtdebug); set(PCRE_POSTFIX $<$<CONFIG:Debug>:d>); set(pcre_config_kind ""Debug""); else(); set(pcre_config_kind ""Release""); endif(); set(pcre_config ""--config ${pcre_config_kind}""); endif(); endif(). set(PCRE_VERSION ""8.43"" CACHE INTERNAL """" FORCE); set(PCRE_LIBNAME ${CMAKE_STATIC_LIBRARY_PREFIX}pcre${PCRE_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}). # build byproducts only needed by Ninja; if(""${CMAKE_GENERATOR}"" STREQUAL ""Ninja""); set(PCRE_BYPRODUCTS; <BINARY_DIR>/pcre.h; <BINARY_DIR>/${PCRE_LIBNAME}; ); endif(). ExternalProject_Add(PCRE; URL ${CMAKE_CURRENT_SOURCE_DIR}/pcre-${PCRE_VERSION}.tar.bz2; URL_HASH SHA256=91e762520003013834ac1adb4a938d53b22a216341c061b0cf05603b290faf6b. LOG_DOWNLOAD TRUE; LOG_CONFIGURE TRUE; LOG_BUILD TRUE; LOG_INSTALL TRUE. CMAKE_CACHE_ARGS; -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>; -DCMAKE_GENERATOR:STRING=${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}; -DCMAKE_BUILD_SHARED_LIBS:BOOL=FALSE; -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE. BUILD_COMMAND; ${CMAKE_COMMAND} --build <BINARY_DIR> ${pcre_config} --target pcre. BUILD_BYPRODUCTS; ${PCRE_BYPRODUCTS}. INSTALL_COMMAND """"; TIMEOUT 600; ). ExternalProject_Get_Property(PCRE BINARY_DIR). set(PCRE_FOUND TRUE CACHE INTERNAL """" FORCE); set(PCRE_INCLUDE_DIR ""${BINARY_DIR}"" CACHE INTERNAL """" FORCE); if(WIN32); set(PCRE_PCRE_LIBR",MatchSource.DOCS,builtins/pcre/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/pcre/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/pcre/CMakeLists.txt:717,Modifiability,config,config,717,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject). # Clear cache variables set by find_package(PCRE); # to ensure that we use the builtin version; foreach(var PCRE_FOUND PCRE_VERSION PCRE_INCLUDE_DIR PCRE_PCRE_LIBRARY PCRE_LIBRARIES); unset(${var} CACHE); endforeach(). if(WIN32); if(CMAKE_GENERATOR MATCHES Ninja); if (CMAKE_BUILD_TYPE MATCHES Debug); set(PCRE_POSTFIX d); endif(); else(); if(winrtdebug); set(PCRE_POSTFIX $<$<CONFIG:Debug>:d>); set(pcre_config_kind ""Debug""); else(); set(pcre_config_kind ""Release""); endif(); set(pcre_config ""--config ${pcre_config_kind}""); endif(); endif(). set(PCRE_VERSION ""8.43"" CACHE INTERNAL """" FORCE); set(PCRE_LIBNAME ${CMAKE_STATIC_LIBRARY_PREFIX}pcre${PCRE_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}). # build byproducts only needed by Ninja; if(""${CMAKE_GENERATOR}"" STREQUAL ""Ninja""); set(PCRE_BYPRODUCTS; <BINARY_DIR>/pcre.h; <BINARY_DIR>/${PCRE_LIBNAME}; ); endif(). ExternalProject_Add(PCRE; URL ${CMAKE_CURRENT_SOURCE_DIR}/pcre-${PCRE_VERSION}.tar.bz2; URL_HASH SHA256=91e762520003013834ac1adb4a938d53b22a216341c061b0cf05603b290faf6b. LOG_DOWNLOAD TRUE; LOG_CONFIGURE TRUE; LOG_BUILD TRUE; LOG_INSTALL TRUE. CMAKE_CACHE_ARGS; -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>; -DCMAKE_GENERATOR:STRING=${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}; -DCMAKE_BUILD_SHARED_LIBS:BOOL=FALSE; -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE. BUILD_COMMAND; ${CMAKE_COMMAND} --build <BINARY_DIR> ${pcre_config} --target pcre. BUILD_BYPRODUCTS; ${PCRE_BYPRODUCTS}. INSTALL_COMMAND """"; TIMEOUT 600; ). ExternalProject_Get_Property(PCRE BINARY_DIR). set(PCRE_FOUND TRUE CACHE INTERNAL """" FORCE); set(PCRE_INCLUDE_DIR ""${BINARY_DIR}"" CACHE INTERNAL """" FORCE); if(WIN32); set(PCRE_PCRE_LIBR",MatchSource.DOCS,builtins/pcre/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/pcre/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/pcre/CMakeLists.txt:229,Performance,cache,cache,229,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject). # Clear cache variables set by find_package(PCRE); # to ensure that we use the builtin version; foreach(var PCRE_FOUND PCRE_VERSION PCRE_INCLUDE_DIR PCRE_PCRE_LIBRARY PCRE_LIBRARIES); unset(${var} CACHE); endforeach(). if(WIN32); if(CMAKE_GENERATOR MATCHES Ninja); if (CMAKE_BUILD_TYPE MATCHES Debug); set(PCRE_POSTFIX d); endif(); else(); if(winrtdebug); set(PCRE_POSTFIX $<$<CONFIG:Debug>:d>); set(pcre_config_kind ""Debug""); else(); set(pcre_config_kind ""Release""); endif(); set(pcre_config ""--config ${pcre_config_kind}""); endif(); endif(). set(PCRE_VERSION ""8.43"" CACHE INTERNAL """" FORCE); set(PCRE_LIBNAME ${CMAKE_STATIC_LIBRARY_PREFIX}pcre${PCRE_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}). # build byproducts only needed by Ninja; if(""${CMAKE_GENERATOR}"" STREQUAL ""Ninja""); set(PCRE_BYPRODUCTS; <BINARY_DIR>/pcre.h; <BINARY_DIR>/${PCRE_LIBNAME}; ); endif(). ExternalProject_Add(PCRE; URL ${CMAKE_CURRENT_SOURCE_DIR}/pcre-${PCRE_VERSION}.tar.bz2; URL_HASH SHA256=91e762520003013834ac1adb4a938d53b22a216341c061b0cf05603b290faf6b. LOG_DOWNLOAD TRUE; LOG_CONFIGURE TRUE; LOG_BUILD TRUE; LOG_INSTALL TRUE. CMAKE_CACHE_ARGS; -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>; -DCMAKE_GENERATOR:STRING=${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}; -DCMAKE_BUILD_SHARED_LIBS:BOOL=FALSE; -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE. BUILD_COMMAND; ${CMAKE_COMMAND} --build <BINARY_DIR> ${pcre_config} --target pcre. BUILD_BYPRODUCTS; ${PCRE_BYPRODUCTS}. INSTALL_COMMAND """"; TIMEOUT 600; ). ExternalProject_Get_Property(PCRE BINARY_DIR). set(PCRE_FOUND TRUE CACHE INTERNAL """" FORCE); set(PCRE_INCLUDE_DIR ""${BINARY_DIR}"" CACHE INTERNAL """" FORCE); if(WIN32); set(PCRE_PCRE_LIBR",MatchSource.DOCS,builtins/pcre/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/pcre/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:1766,Deployability,install,install,1766,"ES XROOTD_UTILS_LIBRARIES). ExternalProject_Add(; BUILTIN_XROOTD; URL http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/xrootd-${XROOTD_VERSION}.tar.gz; URL_HASH SHA256=c28c9dc0a2f5d0134e803981be8b1e8b1c9a6ec13b49f5fa3040889b439f4041; INSTALL_DIR ${XROOTD_PREFIX}; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>; -DCMAKE_PREFIX_PATH:STRING=${OPENSSL_PREFIX}; -DCMAKE_BUILD_TYPE=Release; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${ROOT_EXTERNAL_CXX_FLAGS}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_INSTALL_LIBDIR=<INSTALL_DIR>/lib; -DENABLE_PYTHON=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHI",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:2742,Deployability,install,install,2742,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:2873,Deployability,install,install,2873,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:3198,Deployability,install,install,3198,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:3316,Deployability,install,install,3316,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:3392,Deployability,install,install,3392,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:3409,Deployability,install,install,3409,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:290,Integrability,message,message,290,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. include(ExternalProject). set(XROOTD_VERSION ""5.7.1""). set(XROOTD_PREFIX ${CMAKE_BINARY_DIR}); message(STATUS ""Downloading and building XROOTD version ${XROOTD_VERSION}""). list(REMOVE_ITEM XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_ITEM XROOTD_UTILS_LIBRARIES OpenSSL::SSL). set(libname ${CMAKE_SHARED_LIBRARY_PREFIX}XrdCl${CMAKE_SHARED_LIBRARY_SUFFIX}); list(APPEND XROOTD_CLIENT_LIBRARIES ${XROOTD_PREFIX}/lib/${libname}); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES). set(libname ${CMAKE_SHARED_LIBRARY_PREFIX}XrdUtils${CMAKE_SHARED_LIBRARY_SUFFIX}); list(APPEND XROOTD_UTILS_LIBRARIES ${XROOTD_PREFIX}/lib/${libname}); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). ExternalProject_Add(; BUILTIN_XROOTD; URL http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/xrootd-${XROOTD_VERSION}.tar.gz; URL_HASH SHA256=c28c9dc0a2f5d0134e803981be8b1e8b1c9a6ec13b49f5fa3040889b439f4041; INSTALL_DIR ${XROOTD_PREFIX}; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>; -DCMAKE_PREFIX_PATH:STRING=${OPENSSL_PREFIX}; -DCMAKE_BUILD_TYPE=Release; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${ROOT_EXTERNAL_CXX_FLAGS}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_INSTALL_LIBDIR=<INSTALL_DIR>/lib; -DENABLE_PYTHON=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to X",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:3046,Modifiability,variab,variable,3046,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt:3354,Modifiability,variab,variable,3354,"N=OFF; -DENABLE_CEPH=OFF; -DXRDCL_LIB_ONLY=ON; -DCMAKE_INSTALL_RPATH:STRING=${XROOTD_PREFIX}/lib; -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}; INSTALL_COMMAND ${CMAKE_COMMAND} --build . --target install; LOG_DOWNLOAD 1 LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_OUTPUT_ON_FAILURE 1; BUILD_BYPRODUCTS ${XROOTD_CLIENT_LIBRARIES} ${XROOTD_UTILS_LIBRARIES}; TIMEOUT 600; ). # CMake checks for existence when a target is linked to XRootD; file(MAKE_DIRECTORY ${XROOTD_PREFIX}/include/xrootd). if(builtin_openssl); add_dependencies(BUILTIN_XROOTD OPENSSL); endif(). list(APPEND XROOTD_CLIENT_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_CLIENT_LIBRARIES); list(APPEND XROOTD_UTILS_LIBRARIES OpenSSL::SSL); list(REMOVE_DUPLICATES XROOTD_UTILS_LIBRARIES). set(XROOTD_INCLUDE_DIRS ${XROOTD_PREFIX}/include/xrootd CACHE INTERNAL """" FORCE); set(XROOTD_CLIENT_LIBRARIES ${XROOTD_CLIENT_LIBRARIES} CACHE INTERNAL """" FORCE); set(XROOTD_UTILS_LIBRARIES ${XROOTD_UTILS_LIBRARIES} CACHE INTERNAL """" FORCE). list(APPEND CMAKE_BUILD_RPATH ${XROOTD_PREFIX}/lib); add_dependencies(XRootD BUILTIN_XROOTD). set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS BUILTIN_XROOTD). install(DIRECTORY ${XROOTD_PREFIX}/lib/ DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries FILES_MATCHING PATTERN ""libXrd*""); install(DIRECTORY ${XROOTD_PREFIX}/include/xrootd/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xrootd COMPONENT headers); if(APPLE); # XRootD libraries on mac need the LC_RPATH variable set. The build process already takes care of setting; # * BUILD_RPATH = build/XROOTD-prefix/../src; # * INSTALL_RPATH = build/lib; # Since the install directory for the builtin_xrootd target corresponds to the build directory of the main project.; # Use a post install script to change the LC_RPATH variable of the libraries in the ROOT install folder.; install(SCRIPT ${CMAKE_CURRENT_LIST_DIR}/XROOTDApplePostInstall.cmake; CODE ""xrootd_libs_change_rpath(${XROOTD_PREFIX}/lib ${CMAKE_INSTALL_FULL_LIBDIR})""; ); endif(); ",MatchSource.DOCS,builtins/xrootd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xrootd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/CMakeLists.txt:2067,Safety,avoid,avoid,2067,"ne ZLIB_VERSION \""[^\""]*\""$""); string(REGEX REPLACE ""^.*ZLIB_VERSION \""([0-9]+).*$"" ""\\1"" ZLIB_VERSION_MAJOR ""${ZLIB_H}""); string(REGEX REPLACE ""^.*ZLIB_VERSION \""[0-9]+\\.([0-9]+).*$"" ""\\1"" ZLIB_VERSION_MINOR ""${ZLIB_H}""); string(REGEX REPLACE ""^.*ZLIB_VERSION \""[0-9]+\\.[0-9]+\\.([0-9]+).*$"" ""\\1"" ZLIB_VERSION_PATCH ""${ZLIB_H}""); set(ZLIB_VERSION_STRING ""${ZLIB_VERSION_MAJOR}.${ZLIB_VERSION_MINOR}.${ZLIB_VERSION_PATCH}""). set(ZLIB_VERSION_TWEAK """"); if(""${ZLIB_H}"" MATCHES ""ZLIB_VERSION \""[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+)""); set(ZLIB_VERSION_TWEAK ""${CMAKE_MATCH_1}""); string(APPEND ZLIB_VERSION_STRING "".${ZLIB_VERSION_TWEAK}""); endif(). set(ZLIB_VERSION ${ZLIB_VERSION_STRING} CACHE INTERNAL """"); set(ZLIB_VERSION_STRING ${ZLIB_VERSION_STRING} CACHE INTERNAL """"). set(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """"); set(ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """"). if((CMAKE_SYSTEM_PROCESSOR MATCHES ""amd64|x86_64|AMD64|X86_64|aarch64"") AND (CMAKE_SYSTEM_NAME MATCHES ""Linux"")); # Calling helper to avoid using old unsupported binutils (e.g. with SL6); # macro is returning extra ${ROOT_DEFINITIONS} used after in ZLIB-CF; root_check_assembler(); # Calling helper to avoid using old unsupported binutils (e.g. with Centos7; # and native gcc compiler 4.8.5); # Macros are returning bools SSE_SUPPORT & AVX2_SUPPORT; root_check_sse41(); root_check_avx2(); if(SSE_SUPPORT OR AVX2_SUPPORT); set(ZLIB_CF TRUE CACHE INTERNAL """"); endif(); endif(). if(ZLIB_CF); add_library(ZLIB STATIC ${ZLIB_PUBLIC_HEADERS} ${ZLIBCF_PRIVATE_HEADERS} ${ZLIBCF_SOURCES}); else(); add_library(ZLIB STATIC ${ZLIB_PUBLIC_HEADERS} ${ZLIB_PRIVATE_HEADERS} ${ZLIB_SOURCES}); endif(). set_target_properties(ZLIB PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON); target_include_directories(ZLIB INTERFACE $<BUILD_INTERFACE:${ZLIB_INCLUDE_DIR}>). if((CMAKE_SYSTEM_PROCESSOR MATCHES ""amd64|x86_64|AMD64|X86_64"") AND (CMAKE_SYSTEM_NAME MATCHES ""Linux"")); target_compil",MatchSource.DOCS,builtins/zlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/CMakeLists.txt:2235,Safety,avoid,avoid,2235,"[0-9]+).*$"" ""\\1"" ZLIB_VERSION_MINOR ""${ZLIB_H}""); string(REGEX REPLACE ""^.*ZLIB_VERSION \""[0-9]+\\.[0-9]+\\.([0-9]+).*$"" ""\\1"" ZLIB_VERSION_PATCH ""${ZLIB_H}""); set(ZLIB_VERSION_STRING ""${ZLIB_VERSION_MAJOR}.${ZLIB_VERSION_MINOR}.${ZLIB_VERSION_PATCH}""). set(ZLIB_VERSION_TWEAK """"); if(""${ZLIB_H}"" MATCHES ""ZLIB_VERSION \""[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+)""); set(ZLIB_VERSION_TWEAK ""${CMAKE_MATCH_1}""); string(APPEND ZLIB_VERSION_STRING "".${ZLIB_VERSION_TWEAK}""); endif(). set(ZLIB_VERSION ${ZLIB_VERSION_STRING} CACHE INTERNAL """"); set(ZLIB_VERSION_STRING ${ZLIB_VERSION_STRING} CACHE INTERNAL """"). set(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """"); set(ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """"). if((CMAKE_SYSTEM_PROCESSOR MATCHES ""amd64|x86_64|AMD64|X86_64|aarch64"") AND (CMAKE_SYSTEM_NAME MATCHES ""Linux"")); # Calling helper to avoid using old unsupported binutils (e.g. with SL6); # macro is returning extra ${ROOT_DEFINITIONS} used after in ZLIB-CF; root_check_assembler(); # Calling helper to avoid using old unsupported binutils (e.g. with Centos7; # and native gcc compiler 4.8.5); # Macros are returning bools SSE_SUPPORT & AVX2_SUPPORT; root_check_sse41(); root_check_avx2(); if(SSE_SUPPORT OR AVX2_SUPPORT); set(ZLIB_CF TRUE CACHE INTERNAL """"); endif(); endif(). if(ZLIB_CF); add_library(ZLIB STATIC ${ZLIB_PUBLIC_HEADERS} ${ZLIBCF_PRIVATE_HEADERS} ${ZLIBCF_SOURCES}); else(); add_library(ZLIB STATIC ${ZLIB_PUBLIC_HEADERS} ${ZLIB_PRIVATE_HEADERS} ${ZLIB_SOURCES}); endif(). set_target_properties(ZLIB PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON); target_include_directories(ZLIB INTERFACE $<BUILD_INTERFACE:${ZLIB_INCLUDE_DIR}>). if((CMAKE_SYSTEM_PROCESSOR MATCHES ""amd64|x86_64|AMD64|X86_64"") AND (CMAKE_SYSTEM_NAME MATCHES ""Linux"")); target_compile_options(ZLIB PRIVATE -Wno-unused-function -O3 -mpclmul -Wno-attribute-alias ${ROOT_DEFINITIONS}); else(); if(NOT MSVC); target_compile_options(ZLIB PRIVATE -O3); endif();",MatchSource.DOCS,builtins/zlib/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt:628,Deployability,upgrade,upgrade,628,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/base package; ############################################################################. if(MSVC AND MSVC_VERSION GREATER_EQUAL 1925 AND MSVC_VERSION LESS 1929); # FIXME: since Visual Studio v16.5.0 the /O2 optimization flag makes most of the roofit/roostats tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang, or when upgrading Visual Studio; string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(). set(BASE_HEADERS; ROOT/TErrorDefaultHandler.hxx; ROOT/TExecutorCRTP.hxx; ROOT/TSequentialExecutor.hxx; ROOT/StringConv.hxx; Buttons.h; Bytes.h; Byteswap.h; KeySymbols.h; MessageTypes.h; Riostream.h; Rtypes.h; TApplication.h; TAtt3D.h; TAttAxis.h; TAttBBox2D.h; TAttBBox.h; TAttFill.h; TAttLine.h; TAttMarker.h; TAttPad.h; TAttText.h; TBase64.h; TBenchmark.h; TBuffer3D.h; TBuffer3DTypes.h; TBuffer.h; TColor.h; TColorGradient.h; TDatime.h; TDirectory.h; TEnv.h; TException.h; TExec.h; TFileCollection.h; TFileInfo.h; TFolder.h; TInetAddress.h; TMacro.h; TMathBase.h; TMD5.h; TMemberInspector.h; TMessageHandler.h; TNamed.h; TNotifyLink.h; TObject.h; TObjString.h; TParameter.h; TPluginManager.h; TPoint.h; TPRegexp.h; TProcessID.h; TProcessUUID.h; TQClass.h; TQCommand.h; TQConnection.h; TQObject.h; TRedirectOutputGuard.h; TRefCnt.h; TRef.h; TRegexp.h; TRemoteObject.h; TROOT.h; TRootIOCtor.h; TStopwatch.h; TStorage.h; TString.h; TStringLong.h; TStyle.h; TSysEvtHandler.h; TSystemDirectory.h; TSystemFile.h; TSystem.h; TTask.h; TThreadSlots.h; TTime.h; TTimer.h; TTimeStamp.h; TUri.h; TUrl.h; TUUID.h; TVersionCheck.h;",MatchSource.DOCS,core/base/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt:528,Performance,optimiz,optimization,528,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/base package; ############################################################################. if(MSVC AND MSVC_VERSION GREATER_EQUAL 1925 AND MSVC_VERSION LESS 1929); # FIXME: since Visual Studio v16.5.0 the /O2 optimization flag makes most of the roofit/roostats tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang, or when upgrading Visual Studio; string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(). set(BASE_HEADERS; ROOT/TErrorDefaultHandler.hxx; ROOT/TExecutorCRTP.hxx; ROOT/TSequentialExecutor.hxx; ROOT/StringConv.hxx; Buttons.h; Bytes.h; Byteswap.h; KeySymbols.h; MessageTypes.h; Riostream.h; Rtypes.h; TApplication.h; TAtt3D.h; TAttAxis.h; TAttBBox2D.h; TAttBBox.h; TAttFill.h; TAttLine.h; TAttMarker.h; TAttPad.h; TAttText.h; TBase64.h; TBenchmark.h; TBuffer3D.h; TBuffer3DTypes.h; TBuffer.h; TColor.h; TColorGradient.h; TDatime.h; TDirectory.h; TEnv.h; TException.h; TExec.h; TFileCollection.h; TFileInfo.h; TFolder.h; TInetAddress.h; TMacro.h; TMathBase.h; TMD5.h; TMemberInspector.h; TMessageHandler.h; TNamed.h; TNotifyLink.h; TObject.h; TObjString.h; TParameter.h; TPluginManager.h; TPoint.h; TPRegexp.h; TProcessID.h; TProcessUUID.h; TQClass.h; TQCommand.h; TQConnection.h; TQObject.h; TRedirectOutputGuard.h; TRefCnt.h; TRef.h; TRegexp.h; TRemoteObject.h; TROOT.h; TRootIOCtor.h; TStopwatch.h; TStorage.h; TString.h; TStringLong.h; TStyle.h; TSysEvtHandler.h; TSystemDirectory.h; TSystemFile.h; TSystem.h; TTask.h; TThreadSlots.h; TTime.h; TTimer.h; TTimeStamp.h; TUri.h; TUrl.h; TUUID.h; TVersionCheck.h;",MatchSource.DOCS,core/base/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt:580,Testability,test,tests,580,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/base package; ############################################################################. if(MSVC AND MSVC_VERSION GREATER_EQUAL 1925 AND MSVC_VERSION LESS 1929); # FIXME: since Visual Studio v16.5.0 the /O2 optimization flag makes most of the roofit/roostats tests failing; # Try to re-enable /O2 after the upgrade of llvm & clang, or when upgrading Visual Studio; string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE}""); string(REPLACE ""-O2"" ""-O1 -Oi"" CMAKE_CXX_FLAGS_RELWITHDEBINFO ""${CMAKE_CXX_FLAGS_RELWITHDEBINFO}""); endif(). set(BASE_HEADERS; ROOT/TErrorDefaultHandler.hxx; ROOT/TExecutorCRTP.hxx; ROOT/TSequentialExecutor.hxx; ROOT/StringConv.hxx; Buttons.h; Bytes.h; Byteswap.h; KeySymbols.h; MessageTypes.h; Riostream.h; Rtypes.h; TApplication.h; TAtt3D.h; TAttAxis.h; TAttBBox2D.h; TAttBBox.h; TAttFill.h; TAttLine.h; TAttMarker.h; TAttPad.h; TAttText.h; TBase64.h; TBenchmark.h; TBuffer3D.h; TBuffer3DTypes.h; TBuffer.h; TColor.h; TColorGradient.h; TDatime.h; TDirectory.h; TEnv.h; TException.h; TExec.h; TFileCollection.h; TFileInfo.h; TFolder.h; TInetAddress.h; TMacro.h; TMathBase.h; TMD5.h; TMemberInspector.h; TMessageHandler.h; TNamed.h; TNotifyLink.h; TObject.h; TObjString.h; TParameter.h; TPluginManager.h; TPoint.h; TPRegexp.h; TProcessID.h; TProcessUUID.h; TQClass.h; TQCommand.h; TQConnection.h; TQObject.h; TRedirectOutputGuard.h; TRefCnt.h; TRef.h; TRegexp.h; TRemoteObject.h; TROOT.h; TRootIOCtor.h; TStopwatch.h; TStorage.h; TString.h; TStringLong.h; TStyle.h; TSysEvtHandler.h; TSystemDirectory.h; TSystemFile.h; TSystem.h; TTask.h; TThreadSlots.h; TTime.h; TTimer.h; TTimeStamp.h; TUri.h; TUrl.h; TUUID.h; TVersionCheck.h;",MatchSource.DOCS,core/base/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt:6443,Testability,test,test,6443,e PRIVATE PCRE2::PCRE2); set_source_files_properties(src/TPRegexp.cxx; TARGET_DIRECTORY Core; PROPERTIES COMPILE_DEFINITIONS USE_PCRE2); else(); target_link_libraries(Core PRIVATE PCRE::PCRE); endif(). ROOT_INSTALL_HEADERS(${BASE_HEADER_DIRS}). file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/man). if(NOT MSVC); #---addRootC++CmdMan-------------------------------------------------------------------------; generateManual(rootMan ${CMAKE_CURRENT_SOURCE_DIR}/src/root-argparse.py ${CMAKE_BINARY_DIR}/man/root.1); generateManual(haddMan ${CMAKE_SOURCE_DIR}/main/src/hadd-argparse.py ${CMAKE_BINARY_DIR}/man/hadd.1); generateManual(rootclingMan ${CMAKE_SOURCE_DIR}/core/dictgen/src/rootcling-argparse.py ${CMAKE_BINARY_DIR}/man/rootcling.1). #---addRootPyCmdMan---------------------------------------------------------------------------; #generateManual(rootbrowseMan ${CMAKE_SOURCE_DIR}/main/python/rootbrowse.py ${CMAKE_BINARY_DIR}/man/rootbrowse.1); #generateManual(rootcpMan ${CMAKE_SOURCE_DIR}/main/python/rootcp.py ${CMAKE_BINARY_DIR}/man/rootcp.1); #generateManual(rootdrawtreeMan ${CMAKE_SOURCE_DIR}/main/python/rootdrawtree.py ${CMAKE_BINARY_DIR}/man/rootdrawtree.1); #generateManual(rooteventselectorMan ${CMAKE_SOURCE_DIR}/main/python/rooteventselector.py ${CMAKE_BINARY_DIR}/man/rooteventselector.1); #generateManual(rootlsMan ${CMAKE_SOURCE_DIR}/main/python/rootls.py ${CMAKE_BINARY_DIR}/man/rootls.1); #generateManual(rootmkdirMan ${CMAKE_SOURCE_DIR}/main/python/rootmkdir.py ${CMAKE_BINARY_DIR}/man/rootmkdir.1); #generateManual(rootmvMan ${CMAKE_SOURCE_DIR}/main/python/rootmv.py ${CMAKE_BINARY_DIR}/man/rootmv.1); #generateManual(rootprintMan ${CMAKE_SOURCE_DIR}/main/python/rootprint.py ${CMAKE_BINARY_DIR}/man/rootprint.1); #generateManual(rootrmMan ${CMAKE_SOURCE_DIR}/main/python/rootrm.py ${CMAKE_BINARY_DIR}/man/rootrm.1); #generateManual(rootslimtreeMan ${CMAKE_SOURCE_DIR}/main/python/rootslimtree.py ${CMAKE_BINARY_DIR}/man/rootslimtree.1); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,core/base/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:2824,Availability,error,error,2824,"et(stldicts; vector; list; forward_list; deque; map map2 unordered_map; multimap multimap2 unordered_multimap; set unordered_set; multiset unordered_multiset; complex); if(NOT WIN32); list(APPEND stldicts valarray); endif(); foreach(dict ${stldicts}); string(REPLACE ""2"" """" header ${dict}); string(REPLACE ""complex"" ""root_std_complex.h"" header ${header}); string(REPLACE ""multi"" """" header ${header}); ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict; NO_SOURCES NO_INSTALL_HEADERS NO_CXXMODULE; STAGE1; NODEPHEADERS ${header}; LINKDEF src/${dict}Linkdef.h; DICTIONARY_OPTIONS --noIncludePaths; DEPENDENCIES Core); target_include_directories(${dict}Dict PRIVATE ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint); endforeach(). set(CLANG_RESOURCE_DIR_STEM); if (builtin_clang); set(CLANG_RESOURCE_DIR_STEM ${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib/clang); set(CLANG_RESOURCE_DIR_VERSION ${LLVM_VERSION_MAJOR}); else (); set(CLANG_RESOURCE_DIR_STEM ${LLVM_LIBRARY_DIR}/clang); # A user can define a clang version to use, otherwise find it (but will error if more than one version is present); if (NOT DEFINED CLANG_RESOURCE_DIR_VERSION); if (NOT EXISTS ${CLANG_RESOURCE_DIR_STEM}); message(FATAL_ERROR ""${CLANG_RESOURCE_DIR_STEM} does not exist. Please install clang.""); endif(); # There is no reasonable way to get the version of clang under which is its resource directory.; # For example, lib/clang/5.0.0/include. Deduce it.; file(GLOB CHILDREN RELATIVE ${CLANG_RESOURCE_DIR_STEM} ${CLANG_RESOURCE_DIR_STEM}/*); list(LENGTH CHILDREN CHILDREN_LENGTH); if (${CHILDREN_LENGTH} GREATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:1379,Deployability,install,installed,1379,"##########################################################. # These files depend on cling/clang/llvm; they need to be linked into libCling.; # They are used by rootcling_stage1, rootcling and libCling. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; root_std_complex.h; ). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>; ). ROOT_OBJECT_LIBRARY(ClingUtils; src/RStl.cxx; src/TClingUtils.cxx; ). add_dependencies(ClingUtils CLING). target_include_directories(ClingUtils PRIVATE ; ${CLING_INCLUDE_DIRS}; ${CMAKE_SOURCE_DIR}/core/foundation/res; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_BINARY_DIR}/ginclude). # Register the llvm include directories after clangs. This instructs the compiler to resolve; # headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off; # and we have installed clang headers, too.; target_include_directories(ClingUtils SYSTEM PRIVATE ${CLANG_INCLUDE_DIRS} ${LLVM_INCLUDE_DIRS}); set_target_properties(ClingUtils PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_INSTALL_HEADERS(). #### STL dictionary (replacement for cintdlls)##############################. set(stldicts; vector; list; forward_list; deque; map map2 unordered_map; multimap multimap2 unordered_multimap; set unordered_set; multiset unordered_multiset; complex); if(NOT WIN32); list(APPEND stldicts valarray); endif(); foreach(dict ${stldicts}); string(REPLACE ""2"" """" header ${dict}); string(REPLACE ""complex"" ""root_std_complex.h"" header ${header}); string(REPLACE ""multi"" """" header ${header}); ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict; NO_SOURCES NO_INSTALL_HEADERS NO_CXXMODULE; STAGE1; NODEPHEADERS ${header}; LINKDEF src/${dict}Linkdef.h; DICTIONARY_OPTIONS --noIncludePaths; DEPENDENCIES Core); targe",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:3028,Deployability,install,install,3028,"t}); string(REPLACE ""complex"" ""root_std_complex.h"" header ${header}); string(REPLACE ""multi"" """" header ${header}); ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict; NO_SOURCES NO_INSTALL_HEADERS NO_CXXMODULE; STAGE1; NODEPHEADERS ${header}; LINKDEF src/${dict}Linkdef.h; DICTIONARY_OPTIONS --noIncludePaths; DEPENDENCIES Core); target_include_directories(${dict}Dict PRIVATE ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint); endforeach(). set(CLANG_RESOURCE_DIR_STEM); if (builtin_clang); set(CLANG_RESOURCE_DIR_STEM ${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib/clang); set(CLANG_RESOURCE_DIR_VERSION ${LLVM_VERSION_MAJOR}); else (); set(CLANG_RESOURCE_DIR_STEM ${LLVM_LIBRARY_DIR}/clang); # A user can define a clang version to use, otherwise find it (but will error if more than one version is present); if (NOT DEFINED CLANG_RESOURCE_DIR_VERSION); if (NOT EXISTS ${CLANG_RESOURCE_DIR_STEM}); message(FATAL_ERROR ""${CLANG_RESOURCE_DIR_STEM} does not exist. Please install clang.""); endif(); # There is no reasonable way to get the version of clang under which is its resource directory.; # For example, lib/clang/5.0.0/include. Deduce it.; file(GLOB CHILDREN RELATIVE ${CLANG_RESOURCE_DIR_STEM} ${CLANG_RESOURCE_DIR_STEM}/*); list(LENGTH CHILDREN CHILDREN_LENGTH); if (${CHILDREN_LENGTH} GREATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clin",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:3726,Deployability,install,install,3726,"e, otherwise find it (but will error if more than one version is present); if (NOT DEFINED CLANG_RESOURCE_DIR_VERSION); if (NOT EXISTS ${CLANG_RESOURCE_DIR_STEM}); message(FATAL_ERROR ""${CLANG_RESOURCE_DIR_STEM} does not exist. Please install clang.""); endif(); # There is no reasonable way to get the version of clang under which is its resource directory.; # For example, lib/clang/5.0.0/include. Deduce it.; file(GLOB CHILDREN RELATIVE ${CLANG_RESOURCE_DIR_STEM} ${CLANG_RESOURCE_DIR_STEM}/*); list(LENGTH CHILDREN CHILDREN_LENGTH); if (${CHILDREN_LENGTH} GREATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clinginclude ${CMAKE_SOURCE_DIR}/interpreter/cling/include). set(custom_modulemaps); if (runtime_cxxmodules); set(custom_modulemaps boost.modulemap tinyxml2.modulemap cuda.modulemap module.modulemap.build); # FIXME: We should install vc.modulemap only when Vc is found (Vc_FOUND) but; # some systems install it under /usr/include/Vc/Vc which allows rootcling to; # discover it and assert that the modulemap is not found.; set(custom_modulemaps ${custom_modulemaps} vc.modulemap). # We need to override the default modulemap because instead of producing a; # single std.pcm, produces hundreds of pcms. This changed with MacOSX14.4.sdk; # To support macOS 13 with LLVM 18, we need to patch the modulemap from; # MacOSX14.2.sdk; if (APPLE); if (CMAKE_CXX_COMPILER_VERSI",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:4253,Deployability,install,install,4253,"RCE_DIR_STEM} ${CLANG_RESOURCE_DIR_STEM}/*); list(LENGTH CHILDREN CHILDREN_LENGTH); if (${CHILDREN_LENGTH} GREATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clinginclude ${CMAKE_SOURCE_DIR}/interpreter/cling/include). set(custom_modulemaps); if (runtime_cxxmodules); set(custom_modulemaps boost.modulemap tinyxml2.modulemap cuda.modulemap module.modulemap.build); # FIXME: We should install vc.modulemap only when Vc is found (Vc_FOUND) but; # some systems install it under /usr/include/Vc/Vc which allows rootcling to; # discover it and assert that the modulemap is not found.; set(custom_modulemaps ${custom_modulemaps} vc.modulemap). # We need to override the default modulemap because instead of producing a; # single std.pcm, produces hundreds of pcms. This changed with MacOSX14.4.sdk; # To support macOS 13 with LLVM 18, we need to patch the modulemap from; # MacOSX14.2.sdk; if (APPLE); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 15.0.0.15000309); set(custom_modulemaps ${custom_modulemaps} std_darwin.MacOSX14.2.sdk.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std_darwin.modulemap); endif(); endif(). if (NOT libcxx); if (MSVC); set(custom_modulemaps ${custom_modulemaps} vcruntime.modulemap); set(custom_modulemaps ${custom_modulemaps} services_msvc.modulemap); set(custom_modulemaps ${custom_modulemaps} std_msvc.modulemap); else(); set(custom_",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:4327,Deployability,install,install,4327,"ATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clinginclude ${CMAKE_SOURCE_DIR}/interpreter/cling/include). set(custom_modulemaps); if (runtime_cxxmodules); set(custom_modulemaps boost.modulemap tinyxml2.modulemap cuda.modulemap module.modulemap.build); # FIXME: We should install vc.modulemap only when Vc is found (Vc_FOUND) but; # some systems install it under /usr/include/Vc/Vc which allows rootcling to; # discover it and assert that the modulemap is not found.; set(custom_modulemaps ${custom_modulemaps} vc.modulemap). # We need to override the default modulemap because instead of producing a; # single std.pcm, produces hundreds of pcms. This changed with MacOSX14.4.sdk; # To support macOS 13 with LLVM 18, we need to patch the modulemap from; # MacOSX14.2.sdk; if (APPLE); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 15.0.0.15000309); set(custom_modulemaps ${custom_modulemaps} std_darwin.MacOSX14.2.sdk.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std_darwin.modulemap); endif(); endif(). if (NOT libcxx); if (MSVC); set(custom_modulemaps ${custom_modulemaps} vcruntime.modulemap); set(custom_modulemaps ${custom_modulemaps} services_msvc.modulemap); set(custom_modulemaps ${custom_modulemaps} std_msvc.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std.modulemap); endif(); endif(); # Handle libc. Apple's libc is modularized.; ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:4709,Deployability,patch,patch,4709,"-----------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clinginclude ${CMAKE_SOURCE_DIR}/interpreter/cling/include). set(custom_modulemaps); if (runtime_cxxmodules); set(custom_modulemaps boost.modulemap tinyxml2.modulemap cuda.modulemap module.modulemap.build); # FIXME: We should install vc.modulemap only when Vc is found (Vc_FOUND) but; # some systems install it under /usr/include/Vc/Vc which allows rootcling to; # discover it and assert that the modulemap is not found.; set(custom_modulemaps ${custom_modulemaps} vc.modulemap). # We need to override the default modulemap because instead of producing a; # single std.pcm, produces hundreds of pcms. This changed with MacOSX14.4.sdk; # To support macOS 13 with LLVM 18, we need to patch the modulemap from; # MacOSX14.2.sdk; if (APPLE); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 15.0.0.15000309); set(custom_modulemaps ${custom_modulemaps} std_darwin.MacOSX14.2.sdk.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std_darwin.modulemap); endif(); endif(). if (NOT libcxx); if (MSVC); set(custom_modulemaps ${custom_modulemaps} vcruntime.modulemap); set(custom_modulemaps ${custom_modulemaps} services_msvc.modulemap); set(custom_modulemaps ${custom_modulemaps} std_msvc.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std.modulemap); endif(); endif(); # Handle libc. Apple's libc is modularized.; if (MSVC); set(custom_modulemaps ${custom_modulemaps} libc_msvc.modulemap); elseif (NOT APPLE); set(custom_modulemaps ${custom_modulemaps} libc.modulemap); endif(); endif(runtime_cxxmodules). foreach(file ${custom_modulemaps}; Interpreter/DynamicExprInfo.h; Interpreter/DynamicLookupRuntimeUniverse.h; Interpreter/DynamicLookupLifetimeHandler.h; ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:6404,Deployability,install,install,6404,"le's libc is modularized.; if (MSVC); set(custom_modulemaps ${custom_modulemaps} libc_msvc.modulemap); elseif (NOT APPLE); set(custom_modulemaps ${custom_modulemaps} libc.modulemap); endif(); endif(runtime_cxxmodules). foreach(file ${custom_modulemaps}; Interpreter/DynamicExprInfo.h; Interpreter/DynamicLookupRuntimeUniverse.h; Interpreter/DynamicLookupLifetimeHandler.h; Interpreter/Exception.h; Interpreter/RuntimePrintValue.h; Interpreter/RuntimeUniverse.h; Interpreter/RuntimeOptions.h; Interpreter/Value.h; Interpreter/Visibility.h; ); get_filename_component(path ${file} PATH); set(dest_file ${file}); if (${file} STREQUAL ""module.modulemap.build""); set(dest_file ""module.modulemap""); elseif(NOT ${file} MATCHES "".*modulemap""); # We do not want our modulemap to be considered part of the PCH.; set_property(GLOBAL APPEND PROPERTY CLINGETCPCH etc/cling/${dest_file}); endif(); list(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${clinginclude}/cling/${file} ${CMAKE_BINARY_DIR}/etc/cling/${dest_file}); list(APPEND files_to_copy ${clinginclude}/cling/${file}); install(FILES ${CMAKE_BINARY_DIR}/etc/cling/${dest_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/${path}); endforeach(). foreach(file multimap multiset); list(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} ${CMAKE_BINARY_DIR}/etc/cling/cint/${file}); list(APPEND files_to_copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file}); install(FILES ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/cint); endforeach(). set(stamp_file ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/LLVMRES.stamp); if(MSVC); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:6826,Deployability,install,install,6826,"tValue.h; Interpreter/RuntimeUniverse.h; Interpreter/RuntimeOptions.h; Interpreter/Value.h; Interpreter/Visibility.h; ); get_filename_component(path ${file} PATH); set(dest_file ${file}); if (${file} STREQUAL ""module.modulemap.build""); set(dest_file ""module.modulemap""); elseif(NOT ${file} MATCHES "".*modulemap""); # We do not want our modulemap to be considered part of the PCH.; set_property(GLOBAL APPEND PROPERTY CLINGETCPCH etc/cling/${dest_file}); endif(); list(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${clinginclude}/cling/${file} ${CMAKE_BINARY_DIR}/etc/cling/${dest_file}); list(APPEND files_to_copy ${clinginclude}/cling/${file}); install(FILES ${CMAKE_BINARY_DIR}/etc/cling/${dest_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/${path}); endforeach(). foreach(file multimap multiset); list(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} ${CMAKE_BINARY_DIR}/etc/cling/cint/${file}); list(APPEND files_to_copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file}); install(FILES ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/cint); endforeach(). set(stamp_file ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/LLVMRES.stamp); if(MSVC); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include		; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); else(); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; $",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:430,Integrability,depend,depend,430,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/clingutils package; ############################################################################. # These files depend on cling/clang/llvm; they need to be linked into libCling.; # They are used by rootcling_stage1, rootcling and libCling. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; root_std_complex.h; ). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>; ). ROOT_OBJECT_LIBRARY(ClingUtils; src/RStl.cxx; src/TClingUtils.cxx; ). add_dependencies(ClingUtils CLING). target_include_directories(ClingUtils PRIVATE ; ${CLING_INCLUDE_DIRS}; ${CMAKE_SOURCE_DIR}/core/foundation/res; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_BINARY_DIR}/ginclude). # Register the llvm include directories after clangs. This instructs the compiler to resolve; # headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off; # and we have installed clang headers, too.; target_include_directories(ClingUtils SYSTEM PRIVATE ${CLANG_INCLUDE_DIRS} ${LLVM_INCLUDE_DIRS}); set_target_properties(ClingUtils PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_INSTALL_HEADERS(). #### STL dictionary (replacement for cintdlls)##############################. set(stldicts; vector; list; forward_list; deque; map map2 unordered_map; multimap multimap2 unordered_multimap; set unordered_set; multiset unordered_multiset; complex); if(NOT WIN32); list(APPEND stldicts valarray); endif(); foreach(dict ${stldicts}); stri",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:2957,Integrability,message,message,2957,"et(stldicts; vector; list; forward_list; deque; map map2 unordered_map; multimap multimap2 unordered_multimap; set unordered_set; multiset unordered_multiset; complex); if(NOT WIN32); list(APPEND stldicts valarray); endif(); foreach(dict ${stldicts}); string(REPLACE ""2"" """" header ${dict}); string(REPLACE ""complex"" ""root_std_complex.h"" header ${header}); string(REPLACE ""multi"" """" header ${header}); ROOT_STANDARD_LIBRARY_PACKAGE(${dict}Dict; NO_SOURCES NO_INSTALL_HEADERS NO_CXXMODULE; STAGE1; NODEPHEADERS ${header}; LINKDEF src/${dict}Linkdef.h; DICTIONARY_OPTIONS --noIncludePaths; DEPENDENCIES Core); target_include_directories(${dict}Dict PRIVATE ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint); endforeach(). set(CLANG_RESOURCE_DIR_STEM); if (builtin_clang); set(CLANG_RESOURCE_DIR_STEM ${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib/clang); set(CLANG_RESOURCE_DIR_VERSION ${LLVM_VERSION_MAJOR}); else (); set(CLANG_RESOURCE_DIR_STEM ${LLVM_LIBRARY_DIR}/clang); # A user can define a clang version to use, otherwise find it (but will error if more than one version is present); if (NOT DEFINED CLANG_RESOURCE_DIR_VERSION); if (NOT EXISTS ${CLANG_RESOURCE_DIR_STEM}); message(FATAL_ERROR ""${CLANG_RESOURCE_DIR_STEM} does not exist. Please install clang.""); endif(); # There is no reasonable way to get the version of clang under which is its resource directory.; # For example, lib/clang/5.0.0/include. Deduce it.; file(GLOB CHILDREN RELATIVE ${CLANG_RESOURCE_DIR_STEM} ${CLANG_RESOURCE_DIR_STEM}/*); list(LENGTH CHILDREN CHILDREN_LENGTH); if (${CHILDREN_LENGTH} GREATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:3364,Integrability,message,message,3364,"S --noIncludePaths; DEPENDENCIES Core); target_include_directories(${dict}Dict PRIVATE ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint); endforeach(). set(CLANG_RESOURCE_DIR_STEM); if (builtin_clang); set(CLANG_RESOURCE_DIR_STEM ${CMAKE_BINARY_DIR}/interpreter/llvm-project/llvm/${CMAKE_CFG_INTDIR}/lib/clang); set(CLANG_RESOURCE_DIR_VERSION ${LLVM_VERSION_MAJOR}); else (); set(CLANG_RESOURCE_DIR_STEM ${LLVM_LIBRARY_DIR}/clang); # A user can define a clang version to use, otherwise find it (but will error if more than one version is present); if (NOT DEFINED CLANG_RESOURCE_DIR_VERSION); if (NOT EXISTS ${CLANG_RESOURCE_DIR_STEM}); message(FATAL_ERROR ""${CLANG_RESOURCE_DIR_STEM} does not exist. Please install clang.""); endif(); # There is no reasonable way to get the version of clang under which is its resource directory.; # For example, lib/clang/5.0.0/include. Deduce it.; file(GLOB CHILDREN RELATIVE ${CLANG_RESOURCE_DIR_STEM} ${CLANG_RESOURCE_DIR_STEM}/*); list(LENGTH CHILDREN CHILDREN_LENGTH); if (${CHILDREN_LENGTH} GREATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clinginclude ${CMAKE_SOURCE_DIR}/interpreter/cling/include). set(custom_modulemaps); if (runtime_cxxmodules); set(custom_modulemaps boost.modulemap tinyxml2.modulemap cuda.modulemap module.modulemap.build); # FIXME: We should install vc.modulemap only when Vc is found (Vc_FOUND) but; ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:8114,Integrability,depend,dependencies,8114,"(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} ${CMAKE_BINARY_DIR}/etc/cling/cint/${file}); list(APPEND files_to_copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file}); install(FILES ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/cint); endforeach(). set(stamp_file ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/LLVMRES.stamp); if(MSVC); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include		; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); else(); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); endif(); add_custom_target(LLVMRES DEPENDS ${stamp_file} CLING); # CLING is a shorthand for CLING_LIBRARIES and some other clang-specific; # dependencies which ensure the correct order of building. Then the cling header; # files (such as RuntimeUniverse.h) are moved to a semi-private place in ROOT; # #ROOTSYS/etc. This is the place where ROOT will use them from and we should; # add an explcit dependency to something cling-related which ROOT knows.; # ClingUtils seems a good candidate because it is very foundational.; add_dependencies(ClingUtils LLVMRES); ROOT_ADD_TEST_SUBDIRECTORY(test). ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:8369,Integrability,depend,dependency,8369,"(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} ${CMAKE_BINARY_DIR}/etc/cling/cint/${file}); list(APPEND files_to_copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file}); install(FILES ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/cint); endforeach(). set(stamp_file ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/LLVMRES.stamp); if(MSVC); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include		; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); else(); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); endif(); add_custom_target(LLVMRES DEPENDS ${stamp_file} CLING); # CLING is a shorthand for CLING_LIBRARIES and some other clang-specific; # dependencies which ensure the correct order of building. Then the cling header; # files (such as RuntimeUniverse.h) are moved to a semi-private place in ROOT; # #ROOTSYS/etc. This is the place where ROOT will use them from and we should; # add an explcit dependency to something cling-related which ROOT knows.; # ClingUtils seems a good candidate because it is very foundational.; add_dependencies(ClingUtils LLVMRES); ROOT_ADD_TEST_SUBDIRECTORY(test). ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:4408,Testability,assert,assert,4408,"ATER 1); message(FATAL_ERROR ""Found more than one version of clang. CLANG_RESOURCE_DIR_VERSION contains: '${CHILDREN}'."" ); endif(). list(GET CHILDREN 0 CLANG_RESOURCE_DIR_VERSION); endif(); endif(). set(CLANG_RESOURCE_DIR ${CLANG_RESOURCE_DIR_STEM}/${CLANG_RESOURCE_DIR_VERSION}/include). #---Deal with clang resource here----------------------------------------------; install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include/; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include USE_SOURCE_PERMISSIONS). #---Install a bunch of files to /etc/cling------------------------------------; set(clinginclude ${CMAKE_SOURCE_DIR}/interpreter/cling/include). set(custom_modulemaps); if (runtime_cxxmodules); set(custom_modulemaps boost.modulemap tinyxml2.modulemap cuda.modulemap module.modulemap.build); # FIXME: We should install vc.modulemap only when Vc is found (Vc_FOUND) but; # some systems install it under /usr/include/Vc/Vc which allows rootcling to; # discover it and assert that the modulemap is not found.; set(custom_modulemaps ${custom_modulemaps} vc.modulemap). # We need to override the default modulemap because instead of producing a; # single std.pcm, produces hundreds of pcms. This changed with MacOSX14.4.sdk; # To support macOS 13 with LLVM 18, we need to patch the modulemap from; # MacOSX14.2.sdk; if (APPLE); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 15.0.0.15000309); set(custom_modulemaps ${custom_modulemaps} std_darwin.MacOSX14.2.sdk.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std_darwin.modulemap); endif(); endif(). if (NOT libcxx); if (MSVC); set(custom_modulemaps ${custom_modulemaps} vcruntime.modulemap); set(custom_modulemaps ${custom_modulemaps} services_msvc.modulemap); set(custom_modulemaps ${custom_modulemaps} std_msvc.modulemap); else(); set(custom_modulemaps ${custom_modulemaps} std.modulemap); endif(); endif(); # Handle libc. Apple's libc is modularized.; ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt:8561,Testability,test,test,8561,"(APPEND copy_commands COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} ${CMAKE_BINARY_DIR}/etc/cling/cint/${file}); list(APPEND files_to_copy ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file}); install(FILES ${CMAKE_SOURCE_DIR}/interpreter/cling/include/cling/cint/${file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/cint); endforeach(). set(stamp_file ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/LLVMRES.stamp); if(MSVC); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include		; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); else(); add_custom_command(OUTPUT ${stamp_file}; COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; COMMAND ${CMAKE_COMMAND} -E copy_directory; ${CLANG_RESOURCE_DIR}; ${CMAKE_BINARY_DIR}/etc/cling/lib/clang/${CLANG_RESOURCE_DIR_VERSION}/include; ${copy_commands}; COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}; DEPENDS ${files_to_copy}; COMMENT ""Copying LLVM resource and header files""); endif(); add_custom_target(LLVMRES DEPENDS ${stamp_file} CLING); # CLING is a shorthand for CLING_LIBRARIES and some other clang-specific; # dependencies which ensure the correct order of building. Then the cling header; # files (such as RuntimeUniverse.h) are moved to a semi-private place in ROOT; # #ROOTSYS/etc. This is the place where ROOT will use them from and we should; # add an explcit dependency to something cling-related which ROOT knows.; # ClingUtils seems a good candidate because it is very foundational.; add_dependencies(ClingUtils LLVMRES); ROOT_ADD_TEST_SUBDIRECTORY(test). ",MatchSource.DOCS,core/clingutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/cont/CMakeLists.txt:1520,Testability,test,test,1520,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/cont package; ############################################################################. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; ROOT/TSeq.hxx; TArrayC.h; TArrayD.h; TArrayF.h; TArray.h; TArrayI.h; TArrayL64.h; TArrayL.h; TArrayS.h; TBits.h; TBtree.h; TClassTable.h; TClonesArray.h; TCollection.h; TCollectionProxyInfo.h; TExMap.h; THashList.h; THashTable.h; TIterator.h; TList.h; TMap.h; TObjArray.h; TObjectTable.h; TOrdCollection.h; TRefArray.h; TRefTable.h; TSeqCollection.h; TSortedList.h; TVirtualCollectionProxy.h; ). target_sources(Core PRIVATE; src/TArrayC.cxx; src/TArray.cxx; src/TArrayD.cxx; src/TArrayF.cxx; src/TArrayI.cxx; src/TArrayL64.cxx; src/TArrayL.cxx; src/TArrayS.cxx; src/TBits.cxx; src/TBtree.cxx; src/TClassTable.cxx; src/TClonesArray.cxx; src/TCollection.cxx; src/TExMap.cxx; src/THashList.cxx; src/THashTable.cxx; src/TIterator.cxx; src/TList.cxx; src/TMap.cxx; src/TObjArray.cxx; src/TObjectTable.cxx; src/TOrdCollection.cxx; src/TRefArray.cxx; src/TRefTable.cxx; src/TSeqCollection.cxx; src/TSortedList.cxx; ). target_include_directories(Core; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/cont/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/CMakeLists.txt:1674,Deployability,install,installed,1674,"ccesses; # them through rootcling_impl. ROOT_OBJECT_LIBRARY(Dictgen; BaseSelectionRule.cxx; ClassSelectionRule.cxx; DictSelectionReader.cxx; LinkdefReader.cxx; rootcling_impl.cxx; Scanner.cxx; SelectionRules.cxx; TModuleGenerator.cxx; VariableSelectionRule.cxx; XMLReader.cxx; ). add_dependencies(Dictgen CLING). if(NOT builtin_cling); # FIXME: Resolve this once the ClangTargets.cmake allows us to specify the; # targets we need.; add_dependencies(Dictgen clang-tablegen-targets); endif(). target_include_directories(Dictgen PRIVATE; ${CMAKE_SOURCE_DIR}/core/dictgen/src; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/core/foundation/res; ${CMAKE_SOURCE_DIR}/core/clingutils/res; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_BINARY_DIR}/ginclude; ${CLING_INCLUDE_DIRS}; ). # Register the llvm include directories after clangs. This instructs the compiler to resolve; # headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off; # and we have installed clang headers, too.; target_include_directories(Dictgen SYSTEM PRIVATE ${CLANG_INCLUDE_DIRS} ${LLVM_INCLUDE_DIRS}); set_target_properties(Dictgen PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). CHECK_CXX_COMPILER_FLAG(""-fno-rtti"" CXX_HAS_fno_rtti); if(CXX_HAS_fno_rtti); set_source_files_properties(src/rootcling_impl.cxx PROPERTIES COMPILE_FLAGS ""-fno-rtti""); set_source_files_properties(src/LinkdefReader.cxx PROPERTIES COMPILE_FLAGS ""-fno-rtti""); set_source_files_properties(src/TModuleGenerator.cxx PROPERTIES COMPILE_FLAGS ""-fno-rtti""); endif(). #---CreateRootClingCommandLineOptions------------------------------------------------------------------; generateHeader(Dictgen; ${CMAKE_SOURCE_DIR}/core/dictgen/src/rootcling-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/rootclingCommandLineOptionsHelp.h; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/dictgen/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/CMakeLists.txt:577,Security,access,accesses,577,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/dictgen package; ############################################################################. # Provides capabilities to parse Linkdef / selection files and generate; # dictionaries.; #; # These files are linked into rootcling_stage1 and libCling. rootcling accesses; # them through rootcling_impl. ROOT_OBJECT_LIBRARY(Dictgen; BaseSelectionRule.cxx; ClassSelectionRule.cxx; DictSelectionReader.cxx; LinkdefReader.cxx; rootcling_impl.cxx; Scanner.cxx; SelectionRules.cxx; TModuleGenerator.cxx; VariableSelectionRule.cxx; XMLReader.cxx; ). add_dependencies(Dictgen CLING). if(NOT builtin_cling); # FIXME: Resolve this once the ClangTargets.cmake allows us to specify the; # targets we need.; add_dependencies(Dictgen clang-tablegen-targets); endif(). target_include_directories(Dictgen PRIVATE; ${CMAKE_SOURCE_DIR}/core/dictgen/src; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/core/foundation/res; ${CMAKE_SOURCE_DIR}/core/clingutils/res; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_BINARY_DIR}/ginclude; ${CLING_INCLUDE_DIRS}; ). # Register the llvm include directories after clangs. This instructs the compiler to resolve; # headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off; # and we have installed clang headers, too.; target_include_directories(Dictgen SYSTEM PRIVATE ${CLANG_INCLUDE_DIRS} ${LLVM_INCLUDE_DIRS}); set_target_properties(Dictgen PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). CHECK_CXX_COMPILER_FLAG(""-fno-rtti"" CXX_HAS_fno_rtti); if(CXX_HAS_fno_",MatchSource.DOCS,core/dictgen/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/dictgen/CMakeLists.txt:2571,Testability,test,test,2571,"ccesses; # them through rootcling_impl. ROOT_OBJECT_LIBRARY(Dictgen; BaseSelectionRule.cxx; ClassSelectionRule.cxx; DictSelectionReader.cxx; LinkdefReader.cxx; rootcling_impl.cxx; Scanner.cxx; SelectionRules.cxx; TModuleGenerator.cxx; VariableSelectionRule.cxx; XMLReader.cxx; ). add_dependencies(Dictgen CLING). if(NOT builtin_cling); # FIXME: Resolve this once the ClangTargets.cmake allows us to specify the; # targets we need.; add_dependencies(Dictgen clang-tablegen-targets); endif(). target_include_directories(Dictgen PRIVATE; ${CMAKE_SOURCE_DIR}/core/dictgen/src; ${CMAKE_SOURCE_DIR}/core/dictgen/res; ${CMAKE_SOURCE_DIR}/core/foundation/res; ${CMAKE_SOURCE_DIR}/core/clingutils/res; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_BINARY_DIR}/ginclude; ${CLING_INCLUDE_DIRS}; ). # Register the llvm include directories after clangs. This instructs the compiler to resolve; # headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off; # and we have installed clang headers, too.; target_include_directories(Dictgen SYSTEM PRIVATE ${CLANG_INCLUDE_DIRS} ${LLVM_INCLUDE_DIRS}); set_target_properties(Dictgen PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). CHECK_CXX_COMPILER_FLAG(""-fno-rtti"" CXX_HAS_fno_rtti); if(CXX_HAS_fno_rtti); set_source_files_properties(src/rootcling_impl.cxx PROPERTIES COMPILE_FLAGS ""-fno-rtti""); set_source_files_properties(src/LinkdefReader.cxx PROPERTIES COMPILE_FLAGS ""-fno-rtti""); set_source_files_properties(src/TModuleGenerator.cxx PROPERTIES COMPILE_FLAGS ""-fno-rtti""); endif(). #---CreateRootClingCommandLineOptions------------------------------------------------------------------; generateHeader(Dictgen; ${CMAKE_SOURCE_DIR}/core/dictgen/src/rootcling-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/rootclingCommandLineOptionsHelp.h; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/dictgen/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/CMakeLists.txt:1100,Testability,test,test,1100,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/foundation package; ############################################################################. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; ESTLType.h; RStringView.h; TClassEdit.h; TError.h; ThreadLocalStorage.h; ROOT/RLogger.hxx; ROOT/RNotFn.hxx; ROOT/RRangeCast.hxx; ROOT/RSpan.hxx; ROOT/RStringView.hxx; ROOT/StringUtils.hxx; ROOT/span.hxx; ROOT/TypeTraits.hxx; ). set(FOUNDATION_SOURCES; src/FoundationUtils.cxx; src/RConversionRuleParser.cxx; src/RLogger.cxx; src/StringUtils.cxx; src/TClassEdit.cxx; src/TError.cxx; ). set(FOUNDATION_HEADER_DIRS inc/). if(root7); set_property(TARGET Core APPEND PROPERTY DICT_HEADERS ROOT/RError.hxx); list(APPEND FOUNDATION_SOURCES; v7/src/RError.cxx); list(APPEND FOUNDATION_HEADER_DIRS v7/inc/); ROOT_ADD_TEST_SUBDIRECTORY(v7/test); endif(). target_sources(Core PRIVATE ${FOUNDATION_SOURCES}). target_include_directories(Core; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/v7/inc>; PRIVATE; res; ). ROOT_OBJECT_LIBRARY(Foundation_Stage1 ${FOUNDATION_SOURCES}) # used by rootcling_stage1. target_include_directories(Foundation_Stage1; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; PRIVATE; $<$<BOOL:${MSVC}>:${CMAKE_SOURCE_DIR}/core/winnt/inc>; ${CMAKE_BINARY_DIR}/ginclude res; ). set_target_properties(Foundation_Stage1 PROPERTIES; COMPILE_FLAGS ""${COMPILE_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_INSTALL_HEADERS(${FOUNDATION_HEADER_DIRS}); ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/foundation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/CMakeLists.txt:1844,Testability,test,test,1844,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/foundation package; ############################################################################. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; ESTLType.h; RStringView.h; TClassEdit.h; TError.h; ThreadLocalStorage.h; ROOT/RLogger.hxx; ROOT/RNotFn.hxx; ROOT/RRangeCast.hxx; ROOT/RSpan.hxx; ROOT/RStringView.hxx; ROOT/StringUtils.hxx; ROOT/span.hxx; ROOT/TypeTraits.hxx; ). set(FOUNDATION_SOURCES; src/FoundationUtils.cxx; src/RConversionRuleParser.cxx; src/RLogger.cxx; src/StringUtils.cxx; src/TClassEdit.cxx; src/TError.cxx; ). set(FOUNDATION_HEADER_DIRS inc/). if(root7); set_property(TARGET Core APPEND PROPERTY DICT_HEADERS ROOT/RError.hxx); list(APPEND FOUNDATION_SOURCES; v7/src/RError.cxx); list(APPEND FOUNDATION_HEADER_DIRS v7/inc/); ROOT_ADD_TEST_SUBDIRECTORY(v7/test); endif(). target_sources(Core PRIVATE ${FOUNDATION_SOURCES}). target_include_directories(Core; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/v7/inc>; PRIVATE; res; ). ROOT_OBJECT_LIBRARY(Foundation_Stage1 ${FOUNDATION_SOURCES}) # used by rootcling_stage1. target_include_directories(Foundation_Stage1; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; PRIVATE; $<$<BOOL:${MSVC}>:${CMAKE_SOURCE_DIR}/core/winnt/inc>; ${CMAKE_BINARY_DIR}/ginclude res; ). set_target_properties(Foundation_Stage1 PROPERTIES; COMPILE_FLAGS ""${COMPILE_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). ROOT_INSTALL_HEADERS(${FOUNDATION_HEADER_DIRS}); ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/foundation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/imt/CMakeLists.txt:1309,Testability,test,test,1309,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/imt package; ############################################################################. if(NOT WIN32); set(MULTIPROC_LIB ""MultiProc""); endif(). ROOT_LINKER_LIBRARY(Imt; src/base.cxx; src/RSlotStack.cxx; src/TExecutor.cxx; src/TTaskGroup.cxx; DEPENDENCIES; ${MULTIPROC_LIB}; BUILTINS; TBB; ). target_link_libraries(Imt PRIVATE Thread INTERFACE Core). if(imt); ROOT_GENERATE_DICTIONARY(G__Imt STAGE1; ROOT/TTaskGroup.hxx; ROOT/RTaskArena.hxx; ROOT/RSlotStack.hxx; ROOT/TExecutor.hxx; ROOT/TThreadExecutor.hxx; LINKDEF; LinkDef.h; MODULE; Imt; DEPENDENCIES; Core; Thread; ${MULTIPROC_LIB}; BUILTINS; TBB; ). # G__Imt.cxx is automatically added by ROOT_GENERATE_DICTIONARY(); target_sources(Imt PRIVATE; src/RTaskArena.cxx; src/TImplicitMT.cxx; src/TThreadExecutor.cxx; ). target_include_directories(Imt SYSTEM PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(Imt PRIVATE ${TBB_LIBRARIES}); set_target_properties(Imt PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). ROOT_ADD_TEST_SUBDIRECTORY(test); else(); ROOT_GENERATE_DICTIONARY(G__Imt STAGE1; ROOT/TExecutor.hxx; LINKDEF; LinkDef.h; MODULE; Imt; DEPENDENCIES; Core; ${MULTIPROC_LIB}; ); endif(). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,core/imt/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/CMakeLists.txt:2106,Testability,test,test,2106,ee $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/meta package; ############################################################################. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; TBaseClass.h; TClassGenerator.h; TClass.h; TClassRef.h; TClassStreamer.h; TDataMember.h; TDataType.h; TDictAttributeMap.h; TDictionary.h; TEnumConstant.h; TEnum.h; TFileMergeInfo.h; TFunction.h; TFunctionTemplate.h; TGenericClassInfo.h; TGlobal.h; TInterpreter.h; TInterpreterValue.h; TIsAProxy.h; TListOfDataMembers.h; TListOfEnums.h; TListOfEnumsWithLock.h; TListOfFunctions.h; TListOfFunctionTemplates.h; TMemberStreamer.h; TMethodArg.h; TMethodCall.h; TMethod.h; TProtoClass.h; TRealData.h; TSchemaHelper.h; TSchemaRule.h; TSchemaRuleSet.h; TStatusBitsChecker.h; TStreamerElement.h; TStreamer.h; TVirtualIsAProxy.h; TVirtualRefProxy.h; TVirtualStreamerInfo.h; TVirtualArray.h; TVirtualObject.h; ). target_sources(Core PRIVATE; src/TBaseClass.cxx; src/TClass.cxx; src/TClassGenerator.cxx; src/TClassRef.cxx; src/TDataMember.cxx; src/TDataType.cxx; src/TDictAttributeMap.cxx; src/TDictionary.cxx; src/TEnum.cxx; src/TEnumConstant.cxx; src/TFunction.cxx; src/TFunctionTemplate.cxx; src/TGenericClassInfo.cxx; src/TGlobal.cxx; src/TInterpreter.cxx; src/TIsAProxy.cxx; src/TListOfDataMembers.cxx; src/TListOfEnums.cxx; src/TListOfEnumsWithLock.cxx; src/TListOfFunctions.cxx; src/TListOfFunctionTemplates.cxx; src/TMethod.cxx; src/TMethodArg.cxx; src/TMethodCall.cxx; src/TProtoClass.cxx; src/TRealData.cxx; src/TSchemaRule.cxx; src/TSchemaRuleSet.cxx; src/TStatusBitsChecker.cxx; src/TStreamerElement.cxx; src/TViewPubDataMembers.cxx; src/TViewPubFunctions.cxx; src/TVirtualStreamerInfo.cxx; ). target_include_directories(Core; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). ROOT_INSTALL_HEADERS(); ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,core/meta/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/metacling/CMakeLists.txt:465,Testability,test,test,465,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/metacling package; ############################################################################. add_subdirectory(src). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/metacling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/rint/CMakeLists.txt:660,Testability,test,test,660,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/rint package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Rint; STAGE1; HEADERS; TRint.h; TTabCom.h; SOURCES; src/TRint.cxx; src/TTabCom.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; ). target_include_directories(Core PRIVATE inc). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/rint/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:93,Modifiability,config,config,93,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:275,Modifiability,config,config,275,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:631,Modifiability,config,config,631,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:112,Security,sanitiz,sanitizer,112,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:294,Security,sanitiz,sanitizer,294,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:585,Security,sanitiz,sanitizer,585,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:759,Security,sanitiz,sanitize,759,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt:920,Security,sanitiz,sanitize,920,"if(NOT asan OR MSVC); return(); endif(). # Make a shared library that holds the ROOT default config for address sanitizer.; # This is can be used with LD_PRELOAD; add_library(ROOTSanitizerConfig SHARED SanitizerSetup.cxx). # Make a static library that holds the ROOT default config for address sanitizer.; # We link this into all executables in ROOT, so they automatically start up with good defaults.; set(library ROOTStaticSanitizerConfig); add_library(${library} STATIC SanitizerSetup.cxx); set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON). # This pulls in the sanitizer link flags when linking against the config library; target_link_libraries(${library} INTERFACE ${ASAN_EXTRA_EXE_LINKER_FLAGS}). # Make it visible to the outside to sanitize e.g. roottest executables; set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${library}); add_library(ROOT::${library} ALIAS ${library}). # Now sanitize executables that are not created with ROOT_EXECUTABLE():; foreach(target llvm-min-tblgen llvm-tblgen clang-tblgen); target_link_libraries(${target} PRIVATE ${library}); endforeach(); ",MatchSource.DOCS,core/sanitizer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:178,Availability,failure,failures,178,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:124,Deployability,install,installs,124,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:734,Deployability,install,install,734,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:143,Integrability,message,message,143,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:55,Testability,test,tests,55,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:173,Testability,test,test,173,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:239,Testability,test,tests,239,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:287,Testability,test,testsupport,287,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:1089,Testability,test,tests,1089,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt:1006,Usability,usab,usable,1006,"# Support library for diagnostic handling in ROOT unit tests.; # This library is linked into all googletest executables. It installs; # a ROOT message handler that triggers test failures when diagnostics; # higher than kInfo are issued by tests.; # Stephan Hageboeck, CERN, 2022. if(NOT testsupport); return(); endif(). set(libname TestSupport); set(header_dir ROOT/). add_library(${libname} OBJECT src/TestSupport.cxx); target_include_directories(${libname} PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc/>; $<INSTALL_INTERFACE:./>; ); target_link_libraries(${libname} PUBLIC Core gtest). # Installation of header and library:; set_target_properties(${libname} PROPERTIES PUBLIC_HEADER inc/${header_dir}/TestSupport.hxx); install(TARGETS ${libname}; EXPORT ${CMAKE_PROJECT_NAME}Exports; OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR}/${libname}; PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${header_dir}); set_property(GLOBAL APPEND PROPERTY ROOT_EXPORTED_TARGETS ${libname}). # Make it usable inside and outside of ROOT under a single name if somebody writes their own tests using ROOT_ADD_GTEST; add_library(ROOT::${libname} ALIAS ${libname}). ",MatchSource.DOCS,core/testsupport/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/CMakeLists.txt:1431,Deployability,install,installoptions,1431,"#######################. if(WIN32); set(PLATFORM_FILTER FILTER ""Posix""); set(PLATFORM_HEADERS; TWin32Condition.h; TWin32Mutex.h; TWin32Thread.h; TWin32ThreadFactory.h; ); else(); set(PLATFORM_FILTER FILTER ""Win32""); set(PLATFORM_HEADERS; TPosixCondition.h; TPosixMutex.h; TPosixThread.h; TPosixThreadFactory.h; PosixThreadInc.h; ); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(Thread; HEADERS; ${PLATFORM_HEADERS}; TAtomicCount.h; TCondition.h; TConditionImp.h; TMutex.h; TMutexImp.h; TRWLock.h; TSemaphore.h; TThreadFactory.h; TThread.h; TThreadImp.h; TThreadPool.h; ROOT/RConcurrentHashColl.hxx; ROOT/TRWSpinLock.hxx; ROOT/TSpinMutex.hxx; ROOT/TThreadedObject.hxx; SOURCES; src/RConcurrentHashColl.cxx; src/TCondition.cxx; src/TConditionImp.cxx; src/TMutex.cxx; src/TMutexImp.cxx; src/TReentrantRWLock.cxx; src/TRWLock.cxx; src/TRWMutexImp.cxx; src/TRWSpinLock.cxx; src/TSemaphore.cxx; src/TThread.cxx; src/TThreadFactory.cxx; src/TThreadImp.cxx; STAGE1; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; BUILTINS; TBB; INSTALL_OPTIONS ${installoptions}; ). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). target_link_libraries(Thread PUBLIC ${CMAKE_THREAD_LIBS_INIT}). target_include_directories(Thread PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). # keep include directory for ROOT/RSha256.hxx private; set_source_files_properties(src/RConcurrentHashColl.cxx; PROPERTIES COMPILE_FLAGS -I${CMAKE_SOURCE_DIR}/core/foundation/res). if((tbb OR builtin_tbb) AND NOT MSVC); target_include_directories(Thread PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(Thread PRIVATE ${TBB_LIBRARIES}); set_target_properties(Thread PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""); endif(). if(WIN32); target_sources(Thread PRIVATE; src/TWin32Condition.cxx; src/TWin32Mutex.cxx; src/TWin32Thread.cxx; src/TWin32ThreadFactory.cxx; ); target_include_directories(Thread PRIVATE ${CMAKE_SOURCE_DIR}/core/winnt/inc); else(); target_sources(Thread PRIVATE",MatchSource.DOCS,core/thread/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/CMakeLists.txt:2526,Testability,test,test,2526,"Win32ThreadFactory.h; ); else(); set(PLATFORM_FILTER FILTER ""Win32""); set(PLATFORM_HEADERS; TPosixCondition.h; TPosixMutex.h; TPosixThread.h; TPosixThreadFactory.h; PosixThreadInc.h; ); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(Thread; HEADERS; ${PLATFORM_HEADERS}; TAtomicCount.h; TCondition.h; TConditionImp.h; TMutex.h; TMutexImp.h; TRWLock.h; TSemaphore.h; TThreadFactory.h; TThread.h; TThreadImp.h; TThreadPool.h; ROOT/RConcurrentHashColl.hxx; ROOT/TRWSpinLock.hxx; ROOT/TSpinMutex.hxx; ROOT/TThreadedObject.hxx; SOURCES; src/RConcurrentHashColl.cxx; src/TCondition.cxx; src/TConditionImp.cxx; src/TMutex.cxx; src/TMutexImp.cxx; src/TReentrantRWLock.cxx; src/TRWLock.cxx; src/TRWMutexImp.cxx; src/TRWSpinLock.cxx; src/TSemaphore.cxx; src/TThread.cxx; src/TThreadFactory.cxx; src/TThreadImp.cxx; STAGE1; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; BUILTINS; TBB; INSTALL_OPTIONS ${installoptions}; ). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). target_link_libraries(Thread PUBLIC ${CMAKE_THREAD_LIBS_INIT}). target_include_directories(Thread PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). # keep include directory for ROOT/RSha256.hxx private; set_source_files_properties(src/RConcurrentHashColl.cxx; PROPERTIES COMPILE_FLAGS -I${CMAKE_SOURCE_DIR}/core/foundation/res). if((tbb OR builtin_tbb) AND NOT MSVC); target_include_directories(Thread PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(Thread PRIVATE ${TBB_LIBRARIES}); set_target_properties(Thread PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""); endif(). if(WIN32); target_sources(Thread PRIVATE; src/TWin32Condition.cxx; src/TWin32Mutex.cxx; src/TWin32Thread.cxx; src/TWin32ThreadFactory.cxx; ); target_include_directories(Thread PRIVATE ${CMAKE_SOURCE_DIR}/core/winnt/inc); else(); target_sources(Thread PRIVATE; src/TPosixCondition.cxx; src/TPosixMutex.cxx; src/TPosixThread.cxx; src/TPosixThreadFactory.cxx; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/thread/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt:862,Integrability,message,message,862,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/unix package; ############################################################################. if(NOT UNIX); return(); endif(). set_property(TARGET Core APPEND PROPERTY DICT_HEADERS TUnixSystem.h); target_sources(Core PRIVATE src/TUnixSystem.cxx); target_include_directories(Core PRIVATE inc ../clib/res). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(Core PRIVATE execinfo util); endif(). CHECK_CXX_SOURCE_COMPILES(""#include <stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4). if(found_arc4); message(STATUS ""Found arc4random_buf in stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_STDLIB); else(); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); if(DEFINED LIBBSDROOT); set(CMAKE_REQUIRED_INCLUDES ${LIBBSDROOT}/include); set(CMAKE_REQUIRED_LIBRARIES ${LIBBSDROOT}/lib/libbsd.so); endif(); CHECK_CXX_SOURCE_COMPILES(""#include <bsd/stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4_bsd); set(CMAKE_REQUIRED_INCLUDES ${OLD_CMAKE_REQUIRED_INCLUDES}); set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES}); if(found_arc4_bsd); message(STATUS ""Found arc4random_buf in bsd/stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_BSDLIB); if(DEFINED LIBBSDROOT); target_include_directories(Core PRIVATE ${LIBBSDROOT}/include); target_link_libraries(Core PRIVATE ${LIBBSDROOT}/lib/libbsd.so); endif(); else(); CHECK_CXX_SOURCE_COMPILES(""#include <sys/random.h>; int main() { char buf[32]; int res = getrandom(buf, 32, GRND_NONBLOCK); return 0;}"" found_getrandom); if(found_getrandom); message(STATUS ""Fou",MatchSource.DOCS,core/unix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt:1524,Integrability,message,message,1524,"ndif(). set_property(TARGET Core APPEND PROPERTY DICT_HEADERS TUnixSystem.h); target_sources(Core PRIVATE src/TUnixSystem.cxx); target_include_directories(Core PRIVATE inc ../clib/res). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(Core PRIVATE execinfo util); endif(). CHECK_CXX_SOURCE_COMPILES(""#include <stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4). if(found_arc4); message(STATUS ""Found arc4random_buf in stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_STDLIB); else(); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); if(DEFINED LIBBSDROOT); set(CMAKE_REQUIRED_INCLUDES ${LIBBSDROOT}/include); set(CMAKE_REQUIRED_LIBRARIES ${LIBBSDROOT}/lib/libbsd.so); endif(); CHECK_CXX_SOURCE_COMPILES(""#include <bsd/stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4_bsd); set(CMAKE_REQUIRED_INCLUDES ${OLD_CMAKE_REQUIRED_INCLUDES}); set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES}); if(found_arc4_bsd); message(STATUS ""Found arc4random_buf in bsd/stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_BSDLIB); if(DEFINED LIBBSDROOT); target_include_directories(Core PRIVATE ${LIBBSDROOT}/include); target_link_libraries(Core PRIVATE ${LIBBSDROOT}/lib/libbsd.so); endif(); else(); CHECK_CXX_SOURCE_COMPILES(""#include <sys/random.h>; int main() { char buf[32]; int res = getrandom(buf, 32, GRND_NONBLOCK); return 0;}"" found_getrandom); if(found_getrandom); message(STATUS ""Found getrandom in sys/random.h""); target_compile_definitions(Core PRIVATE R__GETRANDOM_CLIB); else(); CHECK_CXX_SOURCE_RUNS(""; #include <fstream>. int main() {; std::ifstream urandom{\""/dev/urandom\""};; if (!urandom) {; // This will make the CMake command fail; return 1;; }; ; constexpr int len{32};; char buf[len];; for (int n = 0; n < len; n++) buf[n] = 0;; urandom.read(buf, len);; ; int nmatch = 0;; for (int n = 0; n < len; n++); ",MatchSource.DOCS,core/unix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt:1982,Integrability,message,message,1982,"; return 0;}"" found_arc4). if(found_arc4); message(STATUS ""Found arc4random_buf in stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_STDLIB); else(); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); if(DEFINED LIBBSDROOT); set(CMAKE_REQUIRED_INCLUDES ${LIBBSDROOT}/include); set(CMAKE_REQUIRED_LIBRARIES ${LIBBSDROOT}/lib/libbsd.so); endif(); CHECK_CXX_SOURCE_COMPILES(""#include <bsd/stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4_bsd); set(CMAKE_REQUIRED_INCLUDES ${OLD_CMAKE_REQUIRED_INCLUDES}); set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES}); if(found_arc4_bsd); message(STATUS ""Found arc4random_buf in bsd/stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_BSDLIB); if(DEFINED LIBBSDROOT); target_include_directories(Core PRIVATE ${LIBBSDROOT}/include); target_link_libraries(Core PRIVATE ${LIBBSDROOT}/lib/libbsd.so); endif(); else(); CHECK_CXX_SOURCE_COMPILES(""#include <sys/random.h>; int main() { char buf[32]; int res = getrandom(buf, 32, GRND_NONBLOCK); return 0;}"" found_getrandom); if(found_getrandom); message(STATUS ""Found getrandom in sys/random.h""); target_compile_definitions(Core PRIVATE R__GETRANDOM_CLIB); else(); CHECK_CXX_SOURCE_RUNS(""; #include <fstream>. int main() {; std::ifstream urandom{\""/dev/urandom\""};; if (!urandom) {; // This will make the CMake command fail; return 1;; }; ; constexpr int len{32};; char buf[len];; for (int n = 0; n < len; n++) buf[n] = 0;; urandom.read(buf, len);; ; int nmatch = 0;; for (int n = 0; n < len; n++); if (buf[n] == 0) nmatch++;; ; // Fail if no values have changed; return nmatch != len ? 0 : 1;; }"" found_urandom); if(found_urandom); message(STATUS ""Found random device in /dev/urandom""); target_compile_definitions(Core PRIVATE R__USE_URANDOM); else(); message(FATAL_ERROR ""Fail to detect cryptographic random generator""); endif(); endif(); endif(); endif(). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,core/unix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt:2569,Integrability,message,message,2569,"; return 0;}"" found_arc4). if(found_arc4); message(STATUS ""Found arc4random_buf in stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_STDLIB); else(); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); if(DEFINED LIBBSDROOT); set(CMAKE_REQUIRED_INCLUDES ${LIBBSDROOT}/include); set(CMAKE_REQUIRED_LIBRARIES ${LIBBSDROOT}/lib/libbsd.so); endif(); CHECK_CXX_SOURCE_COMPILES(""#include <bsd/stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4_bsd); set(CMAKE_REQUIRED_INCLUDES ${OLD_CMAKE_REQUIRED_INCLUDES}); set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES}); if(found_arc4_bsd); message(STATUS ""Found arc4random_buf in bsd/stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_BSDLIB); if(DEFINED LIBBSDROOT); target_include_directories(Core PRIVATE ${LIBBSDROOT}/include); target_link_libraries(Core PRIVATE ${LIBBSDROOT}/lib/libbsd.so); endif(); else(); CHECK_CXX_SOURCE_COMPILES(""#include <sys/random.h>; int main() { char buf[32]; int res = getrandom(buf, 32, GRND_NONBLOCK); return 0;}"" found_getrandom); if(found_getrandom); message(STATUS ""Found getrandom in sys/random.h""); target_compile_definitions(Core PRIVATE R__GETRANDOM_CLIB); else(); CHECK_CXX_SOURCE_RUNS(""; #include <fstream>. int main() {; std::ifstream urandom{\""/dev/urandom\""};; if (!urandom) {; // This will make the CMake command fail; return 1;; }; ; constexpr int len{32};; char buf[len];; for (int n = 0; n < len; n++) buf[n] = 0;; urandom.read(buf, len);; ; int nmatch = 0;; for (int n = 0; n < len; n++); if (buf[n] == 0) nmatch++;; ; // Fail if no values have changed; return nmatch != len ? 0 : 1;; }"" found_urandom); if(found_urandom); message(STATUS ""Found random device in /dev/urandom""); target_compile_definitions(Core PRIVATE R__USE_URANDOM); else(); message(FATAL_ERROR ""Fail to detect cryptographic random generator""); endif(); endif(); endif(); endif(). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,core/unix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt:2689,Integrability,message,message,2689,"; return 0;}"" found_arc4). if(found_arc4); message(STATUS ""Found arc4random_buf in stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_STDLIB); else(); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); if(DEFINED LIBBSDROOT); set(CMAKE_REQUIRED_INCLUDES ${LIBBSDROOT}/include); set(CMAKE_REQUIRED_LIBRARIES ${LIBBSDROOT}/lib/libbsd.so); endif(); CHECK_CXX_SOURCE_COMPILES(""#include <bsd/stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4_bsd); set(CMAKE_REQUIRED_INCLUDES ${OLD_CMAKE_REQUIRED_INCLUDES}); set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES}); if(found_arc4_bsd); message(STATUS ""Found arc4random_buf in bsd/stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_BSDLIB); if(DEFINED LIBBSDROOT); target_include_directories(Core PRIVATE ${LIBBSDROOT}/include); target_link_libraries(Core PRIVATE ${LIBBSDROOT}/lib/libbsd.so); endif(); else(); CHECK_CXX_SOURCE_COMPILES(""#include <sys/random.h>; int main() { char buf[32]; int res = getrandom(buf, 32, GRND_NONBLOCK); return 0;}"" found_getrandom); if(found_getrandom); message(STATUS ""Found getrandom in sys/random.h""); target_compile_definitions(Core PRIVATE R__GETRANDOM_CLIB); else(); CHECK_CXX_SOURCE_RUNS(""; #include <fstream>. int main() {; std::ifstream urandom{\""/dev/urandom\""};; if (!urandom) {; // This will make the CMake command fail; return 1;; }; ; constexpr int len{32};; char buf[len];; for (int n = 0; n < len; n++) buf[n] = 0;; urandom.read(buf, len);; ; int nmatch = 0;; for (int n = 0; n < len; n++); if (buf[n] == 0) nmatch++;; ; // Fail if no values have changed; return nmatch != len ? 0 : 1;; }"" found_urandom); if(found_urandom); message(STATUS ""Found random device in /dev/urandom""); target_compile_definitions(Core PRIVATE R__USE_URANDOM); else(); message(FATAL_ERROR ""Fail to detect cryptographic random generator""); endif(); endif(); endif(); endif(). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,core/unix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt:2718,Safety,detect,detect,2718,"; return 0;}"" found_arc4). if(found_arc4); message(STATUS ""Found arc4random_buf in stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_STDLIB); else(); set(OLD_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}); set(OLD_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}); if(DEFINED LIBBSDROOT); set(CMAKE_REQUIRED_INCLUDES ${LIBBSDROOT}/include); set(CMAKE_REQUIRED_LIBRARIES ${LIBBSDROOT}/lib/libbsd.so); endif(); CHECK_CXX_SOURCE_COMPILES(""#include <bsd/stdlib.h>; int main() { char buf[32]; arc4random_buf(buf, 32); return 0;}"" found_arc4_bsd); set(CMAKE_REQUIRED_INCLUDES ${OLD_CMAKE_REQUIRED_INCLUDES}); set(CMAKE_REQUIRED_LIBRARIES ${OLD_CMAKE_REQUIRED_LIBRARIES}); if(found_arc4_bsd); message(STATUS ""Found arc4random_buf in bsd/stdlib.h""); target_compile_definitions(Core PRIVATE R__ARC4_BSDLIB); if(DEFINED LIBBSDROOT); target_include_directories(Core PRIVATE ${LIBBSDROOT}/include); target_link_libraries(Core PRIVATE ${LIBBSDROOT}/lib/libbsd.so); endif(); else(); CHECK_CXX_SOURCE_COMPILES(""#include <sys/random.h>; int main() { char buf[32]; int res = getrandom(buf, 32, GRND_NONBLOCK); return 0;}"" found_getrandom); if(found_getrandom); message(STATUS ""Found getrandom in sys/random.h""); target_compile_definitions(Core PRIVATE R__GETRANDOM_CLIB); else(); CHECK_CXX_SOURCE_RUNS(""; #include <fstream>. int main() {; std::ifstream urandom{\""/dev/urandom\""};; if (!urandom) {; // This will make the CMake command fail; return 1;; }; ; constexpr int len{32};; char buf[len];; for (int n = 0; n < len; n++) buf[n] = 0;; urandom.read(buf, len);; ; int nmatch = 0;; for (int n = 0; n < len; n++); if (buf[n] == 0) nmatch++;; ; // Fail if no values have changed; return nmatch != len ? 0 : 1;; }"" found_urandom); if(found_urandom); message(STATUS ""Found random device in /dev/urandom""); target_compile_definitions(Core PRIVATE R__USE_URANDOM); else(); message(FATAL_ERROR ""Fail to detect cryptographic random generator""); endif(); endif(); endif(); endif(). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,core/unix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/zip/CMakeLists.txt:543,Testability,test,test,543,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. find_package(ZLIB REQUIRED). target_sources(Core PRIVATE; src/Bits.c; src/ZDeflate.c; src/ZTrees.c; src/ZInflate.c; src/Compression.cxx; src/RZip.cxx; ). target_link_libraries(Core PRIVATE ZLIB::ZLIB). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,core/zip/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/zstd/CMakeLists.txt:566,Deployability,install,install,566,############################################################################; # CMakeLists.txt file for building ROOT core/zstd package; ############################################################################. find_package(ZSTD REQUIRED). target_sources(Core PRIVATE src/ZipZSTD.cxx); target_link_libraries(Core PRIVATE ${ZSTD_LIBRARIES}); target_compile_definitions(Core PRIVATE ${ZSTD_DEFINITIONS}); target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; $<BUILD_INTERFACE:${ZSTD_INCLUDE_DIR}>; ). ROOT_INSTALL_HEADERS(); install(FILES ${ZSTD_headers} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}); ,MatchSource.DOCS,core/zstd/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zstd/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt:562,Availability,error,error,562,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # FIXME: The tests in core should require only libCore. OTOH, TQObjectTests uses the interpreter to register the class.; # This means that if we run make CoreBaseTests the executable wouldn't be runnable because it requires libCling and; # onepcm targets to be built.; # N.B. We don't link with libCling on Windows, since linking with libCling leads to the following error:; # MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node""; # (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll); # [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]. if(NOT MSVC); set(extralibs Cling dl); endif(). ROOT_ADD_GTEST(CoreBaseTests; TNamedTests.cxx; TQObjectTests.cxx; TExceptionHandlerTests.cxx; TStringTest.cxx; TBitsTests.cxx; LIBRARIES ${extralibs} RIO Core). ROOT_ADD_GTEST(CoreErrorTests TErrorTests.cxx LIBRARIES Core). ROOT_ADD_GTEST(CoreSystemTests TSystemTests.cxx LIBRARIES Core). configure_file(Foo.C Foo.C COPYONLY); ROOT_ADD_GTEST(IncludePathTest IncludePathTest.cxx LIBRARIES Core); ",MatchSource.DOCS,core/base/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt:600,Availability,error,error,600,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # FIXME: The tests in core should require only libCore. OTOH, TQObjectTests uses the interpreter to register the class.; # This means that if we run make CoreBaseTests the executable wouldn't be runnable because it requires libCling and; # onepcm targets to be built.; # N.B. We don't link with libCling on Windows, since linking with libCling leads to the following error:; # MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node""; # (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll); # [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]. if(NOT MSVC); set(extralibs Cling dl); endif(). ROOT_ADD_GTEST(CoreBaseTests; TNamedTests.cxx; TQObjectTests.cxx; TExceptionHandlerTests.cxx; TStringTest.cxx; TBitsTests.cxx; LIBRARIES ${extralibs} RIO Core). ROOT_ADD_GTEST(CoreErrorTests TErrorTests.cxx LIBRARIES Core). ROOT_ADD_GTEST(CoreSystemTests TSystemTests.cxx LIBRARIES Core). configure_file(Foo.C Foo.C COPYONLY); ROOT_ADD_GTEST(IncludePathTest IncludePathTest.cxx LIBRARIES Core); ",MatchSource.DOCS,core/base/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt:208,Testability,test,tests,208,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # FIXME: The tests in core should require only libCore. OTOH, TQObjectTests uses the interpreter to register the class.; # This means that if we run make CoreBaseTests the executable wouldn't be runnable because it requires libCling and; # onepcm targets to be built.; # N.B. We don't link with libCling on Windows, since linking with libCling leads to the following error:; # MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node""; # (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll); # [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]. if(NOT MSVC); set(extralibs Cling dl); endif(). ROOT_ADD_GTEST(CoreBaseTests; TNamedTests.cxx; TQObjectTests.cxx; TExceptionHandlerTests.cxx; TStringTest.cxx; TBitsTests.cxx; LIBRARIES ${extralibs} RIO Core). ROOT_ADD_GTEST(CoreErrorTests TErrorTests.cxx LIBRARIES Core). ROOT_ADD_GTEST(CoreSystemTests TSystemTests.cxx LIBRARIES Core). configure_file(Foo.C Foo.C COPYONLY); ROOT_ADD_GTEST(IncludePathTest IncludePathTest.cxx LIBRARIES Core); ",MatchSource.DOCS,core/base/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt:823,Testability,test,test,823,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # FIXME: The tests in core should require only libCore. OTOH, TQObjectTests uses the interpreter to register the class.; # This means that if we run make CoreBaseTests the executable wouldn't be runnable because it requires libCling and; # onepcm targets to be built.; # N.B. We don't link with libCling on Windows, since linking with libCling leads to the following error:; # MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node""; # (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll); # [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]. if(NOT MSVC); set(extralibs Cling dl); endif(). ROOT_ADD_GTEST(CoreBaseTests; TNamedTests.cxx; TQObjectTests.cxx; TExceptionHandlerTests.cxx; TStringTest.cxx; TBitsTests.cxx; LIBRARIES ${extralibs} RIO Core). ROOT_ADD_GTEST(CoreErrorTests TErrorTests.cxx LIBRARIES Core). ROOT_ADD_GTEST(CoreSystemTests TSystemTests.cxx LIBRARIES Core). configure_file(Foo.C Foo.C COPYONLY); ROOT_ADD_GTEST(IncludePathTest IncludePathTest.cxx LIBRARIES Core); ",MatchSource.DOCS,core/base/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt:217,Availability,avail,available,217,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Make llvm and clang available here as we are mostly testing methods directly; # depending on them.; include_directories(SYSTEM; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ${CLAD_INCLUDE_DIRS}; ). include_directories(; ../res; ../../clingutils/res; ../../foundation/res; ${CLING_INCLUDE_DIRS}; ). if(APPLE); # ignore; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../../../interpreter/llvm-project/llvm/lib/libLLVMProfileData.a(InstrProf.cpp.o)' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -w""); endif(). if(NOT builtin_clang); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). ROOT_ADD_UNITTEST_DIR(Core RIO ${CLING_LIBRARIES} $<TARGET_OBJECTS:ClingUtils>); ",MatchSource.DOCS,core/clingutils/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt:277,Integrability,depend,depending,277,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Make llvm and clang available here as we are mostly testing methods directly; # depending on them.; include_directories(SYSTEM; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ${CLAD_INCLUDE_DIRS}; ). include_directories(; ../res; ../../clingutils/res; ../../foundation/res; ${CLING_INCLUDE_DIRS}; ). if(APPLE); # ignore; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../../../interpreter/llvm-project/llvm/lib/libLLVMProfileData.a(InstrProf.cpp.o)' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -w""); endif(). if(NOT builtin_clang); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). ROOT_ADD_UNITTEST_DIR(Core RIO ${CLING_LIBRARIES} $<TARGET_OBJECTS:ClingUtils>); ",MatchSource.DOCS,core/clingutils/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt:538,Security,access,access,538,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Make llvm and clang available here as we are mostly testing methods directly; # depending on them.; include_directories(SYSTEM; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ${CLAD_INCLUDE_DIRS}; ). include_directories(; ../res; ../../clingutils/res; ../../foundation/res; ${CLING_INCLUDE_DIRS}; ). if(APPLE); # ignore; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../../../interpreter/llvm-project/llvm/lib/libLLVMProfileData.a(InstrProf.cpp.o)' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -w""); endif(). if(NOT builtin_clang); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). ROOT_ADD_UNITTEST_DIR(Core RIO ${CLING_LIBRARIES} $<TARGET_OBJECTS:ClingUtils>); ",MatchSource.DOCS,core/clingutils/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt:1135,Security,access,access,1135,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Make llvm and clang available here as we are mostly testing methods directly; # depending on them.; include_directories(SYSTEM; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ${CLAD_INCLUDE_DIRS}; ). include_directories(; ../res; ../../clingutils/res; ../../foundation/res; ${CLING_INCLUDE_DIRS}; ). if(APPLE); # ignore; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../../../interpreter/llvm-project/llvm/lib/libLLVMProfileData.a(InstrProf.cpp.o)' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -w""); endif(). if(NOT builtin_clang); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). ROOT_ADD_UNITTEST_DIR(Core RIO ${CLING_LIBRARIES} $<TARGET_OBJECTS:ClingUtils>); ",MatchSource.DOCS,core/clingutils/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt:249,Testability,test,testing,249,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # Make llvm and clang available here as we are mostly testing methods directly; # depending on them.; include_directories(SYSTEM; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ${CLAD_INCLUDE_DIRS}; ). include_directories(; ../res; ../../clingutils/res; ../../foundation/res; ${CLING_INCLUDE_DIRS}; ). if(APPLE); # ignore; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; # ld: warning: direct access in function 'unsigned long std::__1::__str_find_first_of<char, unsigned long, std::__1::char_traits<char>, 18446744073709551615ul>(char const*, unsigned long, char const*, unsigned long, unsigned long)' from file '../../../interpreter/llvm-project/llvm/lib/libLLVMProfileData.a(InstrProf.cpp.o)' to global weak symbol 'std::__1::char_traits<char>::eq(char, char)' from file 'CMakeFiles/coreclingutilstestUnit.dir/TClingUtilsTests.cxx.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; set(CMAKE_EXE_LINKER_FLAGS ""${CMAKE_EXE_LINKER_FLAGS} -w""); endif(). if(NOT builtin_clang); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). ROOT_ADD_UNITTEST_DIR(Core RIO ${CLING_LIBRARIES} $<TARGET_OBJECTS:ClingUtils>); ",MatchSource.DOCS,core/clingutils/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt:239,Testability,test,testTypedIteration,239,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_UNITTEST_DIR(Core). ROOT_ADD_GTEST(testTypedIteration testTypedIteration.cxx LIBRARIES Core); ROOT_ADD_GTEST(TSeqTests TSeqTests.cxx LIBRARIES Core); ROOT_ADD_GTEST(testIter testIter.cxx LIBRARIES Core); ",MatchSource.DOCS,core/cont/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt:258,Testability,test,testTypedIteration,258,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_UNITTEST_DIR(Core). ROOT_ADD_GTEST(testTypedIteration testTypedIteration.cxx LIBRARIES Core); ROOT_ADD_GTEST(TSeqTests TSeqTests.cxx LIBRARIES Core); ROOT_ADD_GTEST(testIter testIter.cxx LIBRARIES Core); ",MatchSource.DOCS,core/cont/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt:369,Testability,test,testIter,369,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_UNITTEST_DIR(Core). ROOT_ADD_GTEST(testTypedIteration testTypedIteration.cxx LIBRARIES Core); ROOT_ADD_GTEST(TSeqTests TSeqTests.cxx LIBRARIES Core); ROOT_ADD_GTEST(testIter testIter.cxx LIBRARIES Core); ",MatchSource.DOCS,core/cont/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt:378,Testability,test,testIter,378,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_UNITTEST_DIR(Core). ROOT_ADD_GTEST(testTypedIteration testTypedIteration.cxx LIBRARIES Core); ROOT_ADD_GTEST(TSeqTests TSeqTests.cxx LIBRARIES Core); ROOT_ADD_GTEST(testIter testIter.cxx LIBRARIES Core); ",MatchSource.DOCS,core/cont/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:278,Testability,test,testTypeTraits,278,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:293,Testability,test,testTypeTraits,293,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:344,Testability,test,testNotFn,344,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:354,Testability,test,testNotFn,354,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:400,Testability,test,testClassEdit,400,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:414,Testability,test,testClassEdit,414,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:464,Testability,test,testLogger,464,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:475,Testability,test,testLogger,475,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:522,Testability,test,testRRangeCast,522,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:537,Testability,test,testRRangeCast,537,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:588,Testability,test,testStringUtils,588,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt:604,Testability,test,testStringUtils,604,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testMake_unique testMake_unique.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTypeTraits testTypeTraits.cxx LIBRARIES Core); ROOT_ADD_GTEST(testNotFn testNotFn.cxx LIBRARIES Core); ROOT_ADD_GTEST(testClassEdit testClassEdit.cxx LIBRARIES Core); ROOT_ADD_GTEST(testLogger testLogger.cxx LIBRARIES Core); ROOT_ADD_GTEST(testRRangeCast testRRangeCast.cxx LIBRARIES Core); ROOT_ADD_GTEST(testStringUtils testStringUtils.cxx LIBRARIES Core); ROOT_ADD_GTEST(FoundationUtilsTests FoundationUtilsTests.cxx LIBRARIES Core INCLUDE_DIRS ../res); ",MatchSource.DOCS,core/foundation/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt:210,Testability,test,testTaskArena,210,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTaskArena testRTaskArena.cxx LIBRARIES Imt ${TBB_LIBRARIES} FAILREGEX """"); ROOT_ADD_GTEST(testTBBGlobalControl testTBBGlobalControl.cxx LIBRARIES Imt ${TBB_LIBRARIES}); ",MatchSource.DOCS,core/imt/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt:224,Testability,test,testRTaskArena,224,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTaskArena testRTaskArena.cxx LIBRARIES Imt ${TBB_LIBRARIES} FAILREGEX """"); ROOT_ADD_GTEST(testTBBGlobalControl testTBBGlobalControl.cxx LIBRARIES Imt ${TBB_LIBRARIES}); ",MatchSource.DOCS,core/imt/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt:304,Testability,test,testTBBGlobalControl,304,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTaskArena testRTaskArena.cxx LIBRARIES Imt ${TBB_LIBRARIES} FAILREGEX """"); ROOT_ADD_GTEST(testTBBGlobalControl testTBBGlobalControl.cxx LIBRARIES Imt ${TBB_LIBRARIES}); ",MatchSource.DOCS,core/imt/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt:325,Testability,test,testTBBGlobalControl,325,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTaskArena testRTaskArena.cxx LIBRARIES Imt ${TBB_LIBRARIES} FAILREGEX """"); ROOT_ADD_GTEST(testTBBGlobalControl testTBBGlobalControl.cxx LIBRARIES Imt ${TBB_LIBRARIES}); ",MatchSource.DOCS,core/imt/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/doc/index.txt:48,Integrability,interface,interface,48,"This directory contains the Dictionary classes (interface to CINT); BEGIN_HTML; See:; <ul>; <li><a href=""http://root.cern.ch/root/Dictionary.html"">The ROOT Dictionary; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,core/meta/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:210,Testability,test,testStatusBitsChecker,210,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:232,Testability,test,testStatusBitsChecker,232,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:290,Testability,test,testHashRecursiveRemove,290,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:314,Testability,test,testHashRecursiveRemove,314,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:374,Testability,test,testTClass,374,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:385,Testability,test,testTClass,385,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:442,Testability,test,testTDataType,442,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:456,Testability,test,testTDataType,456,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:506,Testability,test,testTEnum,506,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt:516,Testability,test,testTEnum,516,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testStatusBitsChecker testStatusBitsChecker.cxx LIBRARIES Core); ROOT_ADD_GTEST(testHashRecursiveRemove testHashRecursiveRemove.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTClass testTClass.cxx LIBRARIES Core GenVector); ROOT_ADD_GTEST(testTDataType testTDataType.cxx LIBRARIES Core); ROOT_ADD_GTEST(testTEnum testTEnum.cxx LIBRARIES Core); configure_file(stlDictCheck.h . COPYONLY); configure_file(stlDictCheckAux.h . COPYONLY); ",MatchSource.DOCS,core/meta/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/CMakeLists.txt:1543,Deployability,install,installed,1543,"roperties(${CMAKE_CURRENT_SOURCE_DIR}/TClingRdictModuleFileExtension.cxx COMPILE_FLAGS -GR-); else(); set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/TClingCallbacks.cxx COMPILE_FLAGS -fno-rtti); set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/TClingDiagnostics.cxx COMPILE_FLAGS -fno-rtti); set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/TClingRdictModuleFileExtension.cxx COMPILE_FLAGS -fno-rtti); endif(). ROOT_OBJECT_LIBRARY(MetaCling; rootclingTCling.cxx; TCling.cxx; TClingBaseClassInfo.cxx; TClingCallbacks.cxx; TClingCallFunc.cxx; TClingClassInfo.cxx; TClingDataMemberInfo.cxx; TClingDeclInfo.cxx; TClingDiagnostics.cxx; TClingMemberIter.cxx; TClingMethodArgInfo.cxx; TClingMethodInfo.cxx; TClingRdictModuleFileExtension.cxx; TClingTypedefInfo.cxx; TClingTypeInfo.cxx; TClingValue.cxx; ). # Register the llvm include directories after clangs. This instructs the compiler to resolve; # headers from our builtin clang. That's an issue when we are building with bultin_llvm=Off; # and we have installed clang headers, too.; target_include_directories(MetaCling SYSTEM PRIVATE; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ${CLAD_INCLUDE_DIRS}; ). target_include_directories(MetaCling PRIVATE; ${CLING_INCLUDE_DIRS}; ${CMAKE_SOURCE_DIR}/core/base/inc; ${CMAKE_SOURCE_DIR}/core/clib/inc; ${CMAKE_SOURCE_DIR}/core/clingutils/res; ${CMAKE_SOURCE_DIR}/core/cont/inc; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_SOURCE_DIR}/core/foundation/res; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/thread/inc; ${CMAKE_SOURCE_DIR}/core/zip/inc; ${CMAKE_SOURCE_DIR}/io/io/inc; ${CMAKE_BINARY_DIR}/ginclude; ). set_target_properties(MetaCling PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). if(MSVC); target_include_directories(MetaCling PRIVATE; ${CMAKE_SOURCE_DIR}/core/winnt/inc; ); set_source_files_properties(TCling.cxx COMPILE_FLAGS /bigobj); endif(). add_dependencies(",MatchSource.DOCS,core/metacling/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/CMakeLists.txt:2989,Modifiability,plugin,plugins,2989,"/res; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/thread/inc; ${CMAKE_SOURCE_DIR}/core/zip/inc; ${CMAKE_SOURCE_DIR}/io/io/inc; ${CMAKE_BINARY_DIR}/ginclude; ). set_target_properties(MetaCling PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). if(MSVC); target_include_directories(MetaCling PRIVATE; ${CMAKE_SOURCE_DIR}/core/winnt/inc; ); set_source_files_properties(TCling.cxx COMPILE_FLAGS /bigobj); endif(). add_dependencies(MetaCling CLING). ##### libCling #############################################################. if(NOT builtin_clang); set(prefixed_link_libraries); foreach(dep ${CLING_DEPEND_LIBS}); if(""${dep}"" MATCHES ""^clang""); set(dep ""${LLVM_LIBRARY_DIR}/lib${dep}.a""); endif(); list(APPEND prefixed_link_libraries ""${dep}""); endforeach(); set(LINK_LIBS ""${prefixed_link_libraries}""); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). # We need to paste the content of the cling plugins disabling link symbol optimizations.; set(CLING_PLUGIN_LINK_LIBS); if (clad); if (APPLE); set(CLING_PLUGIN_LINK_LIBS -Wl,-force_load cladPlugin -Wl,-force_load cladDifferentiator); elseif(MSVC); set(CLING_PLUGIN_LINK_LIBS cladPlugin cladDifferentiator); set(CLAD_LIBS ""-WHOLEARCHIVE:cladPlugin.lib -WHOLEARCHIVE:cladDifferentiator.lib""); else(); set(CLING_PLUGIN_LINK_LIBS -Wl,--whole-archive cladPlugin cladDifferentiator -Wl,--no-whole-archive); endif(); if(TARGET clang); # Link our clad libraries to clang. If users use the clang from ROOT they will; # also be able to use clad out of the box.; add_dependencies(clang clad); target_link_libraries(clang PUBLIC ${CLING_PLUGIN_LINK_LIBS}); endif(); endif(). ROOT_LINKER_LIBRARY(Cling; $<TARGET_OBJECTS:ClingUtils>; $<TARGET_OBJECTS:Dictgen>; $<TARGET_OBJECTS:MetaCling>; LIBRARIES ${CLING_LIBRARIES} ${LINK_LIBS} ${CLING_PLUGIN_LINK_LIBS}). # When these two link at the same time, they can exhaust the RAM on many machines, since they both ",MatchSource.DOCS,core/metacling/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/CMakeLists.txt:3019,Performance,optimiz,optimizations,3019,"/res; ${CMAKE_SOURCE_DIR}/core/meta/inc; ${CMAKE_SOURCE_DIR}/core/metacling/res; ${CMAKE_SOURCE_DIR}/core/thread/inc; ${CMAKE_SOURCE_DIR}/core/zip/inc; ${CMAKE_SOURCE_DIR}/io/io/inc; ${CMAKE_BINARY_DIR}/ginclude; ). set_target_properties(MetaCling PROPERTIES; COMPILE_FLAGS ""${CMAKE_CXX_FLAGS} ${CLING_CXXFLAGS}""; VISIBILITY_INLINES_HIDDEN ""ON""; ). if(MSVC); target_include_directories(MetaCling PRIVATE; ${CMAKE_SOURCE_DIR}/core/winnt/inc; ); set_source_files_properties(TCling.cxx COMPILE_FLAGS /bigobj); endif(). add_dependencies(MetaCling CLING). ##### libCling #############################################################. if(NOT builtin_clang); set(prefixed_link_libraries); foreach(dep ${CLING_DEPEND_LIBS}); if(""${dep}"" MATCHES ""^clang""); set(dep ""${LLVM_LIBRARY_DIR}/lib${dep}.a""); endif(); list(APPEND prefixed_link_libraries ""${dep}""); endforeach(); set(LINK_LIBS ""${prefixed_link_libraries}""); link_directories(""${LLVM_LIBRARY_DIR}""); endif(). # We need to paste the content of the cling plugins disabling link symbol optimizations.; set(CLING_PLUGIN_LINK_LIBS); if (clad); if (APPLE); set(CLING_PLUGIN_LINK_LIBS -Wl,-force_load cladPlugin -Wl,-force_load cladDifferentiator); elseif(MSVC); set(CLING_PLUGIN_LINK_LIBS cladPlugin cladDifferentiator); set(CLAD_LIBS ""-WHOLEARCHIVE:cladPlugin.lib -WHOLEARCHIVE:cladDifferentiator.lib""); else(); set(CLING_PLUGIN_LINK_LIBS -Wl,--whole-archive cladPlugin cladDifferentiator -Wl,--no-whole-archive); endif(); if(TARGET clang); # Link our clad libraries to clang. If users use the clang from ROOT they will; # also be able to use clad out of the box.; add_dependencies(clang clad); target_link_libraries(clang PUBLIC ${CLING_PLUGIN_LINK_LIBS}); endif(); endif(). ROOT_LINKER_LIBRARY(Cling; $<TARGET_OBJECTS:ClingUtils>; $<TARGET_OBJECTS:Dictgen>; $<TARGET_OBJECTS:MetaCling>; LIBRARIES ${CLING_LIBRARIES} ${LINK_LIBS} ${CLING_PLUGIN_LINK_LIBS}). # When these two link at the same time, they can exhaust the RAM on many machines, since they both ",MatchSource.DOCS,core/metacling/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/LICENSE.TXT:447,Energy Efficiency,charge,charge,447,"==============================================================================; LLVM Release License; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2003-2010 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies; of the Software, and to permit persons to whom the Software is furnished to do; so, subject to the following conditions:. * Redistributions of source code must retain the above copyright notice,; this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice,; this list of conditions and the following disclaimers in the; documentation and/or other materials provided with the distribution. * Neither the names of the LLVM Team, University of Illinois at; Urbana-Champaign, nor the names of its contributors may be used to; endorse or promote products derived from this Software without specific; prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE; SOFTWARE. ==============================================================================; Copyrights and Licenses for ",MatchSource.DOCS,core/textinput/src/textinput/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:272,Integrability,depend,dependencies,272,"; === TextInput. = Purpose. Read and edit text lines, and write what was read. This library is a simplistic alternative to readline / editline. It offers; less functionality but it has a more liberal license (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:476,Integrability,interface,interface,476,"; === TextInput. = Purpose. Read and edit text lines, and write what was read. This library is a simplistic alternative to readline / editline. It offers; less functionality but it has a more liberal license (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:506,Modifiability,extend,extended,506,"; === TextInput. = Purpose. Read and edit text lines, and write what was read. This library is a simplistic alternative to readline / editline. It offers; less functionality but it has a more liberal license (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:581,Modifiability,extend,extended,581,"; === TextInput. = Purpose. Read and edit text lines, and write what was read. This library is a simplistic alternative to readline / editline. It offers; less functionality but it has a more liberal license (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:1408,Performance,perform,performs,1408,"icense (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.org/LDP/lpg/node129.html; http://rtfm.etla.org/xterm/ctlseq.html; http://frexx.de/xterm-256-notes; Thanks a lot to the authors for creating these useful pages!. Axel Naumann <axel@cern.ch>, May 2011; ",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:1514,Security,access,access,1514,"icense (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.org/LDP/lpg/node129.html; http://rtfm.etla.org/xterm/ctlseq.html; http://frexx.de/xterm-256-notes; Thanks a lot to the authors for creating these useful pages!. Axel Naumann <axel@cern.ch>, May 2011; ",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:324,Testability,test,tested,324,"; === TextInput. = Purpose. Read and edit text lines, and write what was read. This library is a simplistic alternative to readline / editline. It offers; less functionality but it has a more liberal license (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt:97,Usability,simpl,simplistic,97,"; === TextInput. = Purpose. Read and edit text lines, and write what was read. This library is a simplistic alternative to readline / editline. It offers; less functionality but it has a more liberal license (see LICENSE.TXT in; the topmost) directory, it has no external dependencies, and it works on; all platforms that I tested:; - Linux; - Windows (probably >= 2000); - MacOS; - Solaris; Adding other platforms is trivial. = Internal Design. TextInput.h contains the main interface. The reading can be extended by; adding classes that derive from Reader; the displaying can be extended; by deriving from Display. There can be multiple readers and multiple displays. All displays are; equal, all readers are equal. All displays show the input of all; readers. The terminal / console implementations for readers and; displays are provided. Both readers and displays only attach while; textinput is acively reading input. As soon as the input is done (enter; was pressed), they detach from the terminal, allowing the application; to take control of the terminal, and even to crash without leaving the; terminal in a non-default state. The editor provides basic emacs-like keybinding, as known from e.g.; bash. It supports ^O, ^R (for now without regex), and most word-centric; editing commands. See KeyBinding for details. KeyBinding maps the InputData read from the Reader to Editor::Commands.; The Editor performs the requested editing actions, and the Displays; are informed about the changes. TextInput gives access to the read; state (""are we done?"") and the input. = Why no [N]Curses?. Because of platform independence (well, one could still have a; TerminalDisplayCurses) and because nowadays this is actually rarely; needed. Sure, it's the ""right"" way of interfacing terminals. But the; number of terminal types in the wild has siginifantly decreased, so; just hard-coding escape sequences became a viable alternative. = References. These pages helped when writing libtextinput:; http://tldp.",MatchSource.DOCS,core/textinput/src/textinput/doc/textinput.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/doc/textinput.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt:351,Testability,test,testTThreadedObject,351,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if (tbb OR builtin_tbb); ROOT_ADD_UNITTEST_DIR(Core Thread Hist ${TBB_LIBRARIES}); else(); ROOT_ADD_UNITTEST_DIR(Core Thread Hist); endif(). ROOT_ADD_GTEST(testTThreadedObject testTThreadedObject.cxx LIBRARIES Hist). if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 50); else(); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 40); endif(); ",MatchSource.DOCS,core/thread/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt:371,Testability,test,testTThreadedObject,371,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if (tbb OR builtin_tbb); ROOT_ADD_UNITTEST_DIR(Core Thread Hist ${TBB_LIBRARIES}); else(); ROOT_ADD_UNITTEST_DIR(Core Thread Hist); endif(). ROOT_ADD_GTEST(testTThreadedObject testTThreadedObject.cxx LIBRARIES Hist). if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 50); else(); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 40); endif(); ",MatchSource.DOCS,core/thread/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt:472,Testability,test,testInterpreterLock,472,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if (tbb OR builtin_tbb); ROOT_ADD_UNITTEST_DIR(Core Thread Hist ${TBB_LIBRARIES}); else(); ROOT_ADD_UNITTEST_DIR(Core Thread Hist); endif(). ROOT_ADD_GTEST(testTThreadedObject testTThreadedObject.cxx LIBRARIES Hist). if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 50); else(); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 40); endif(); ",MatchSource.DOCS,core/thread/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt:492,Testability,test,testInterpreterLock,492,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if (tbb OR builtin_tbb); ROOT_ADD_UNITTEST_DIR(Core Thread Hist ${TBB_LIBRARIES}); else(); ROOT_ADD_UNITTEST_DIR(Core Thread Hist); endif(). ROOT_ADD_GTEST(testTThreadedObject testTThreadedObject.cxx LIBRARIES Hist). if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 50); else(); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 40); endif(); ",MatchSource.DOCS,core/thread/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt:566,Testability,test,testInterpreterLock,566,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if (tbb OR builtin_tbb); ROOT_ADD_UNITTEST_DIR(Core Thread Hist ${TBB_LIBRARIES}); else(); ROOT_ADD_UNITTEST_DIR(Core Thread Hist); endif(). ROOT_ADD_GTEST(testTThreadedObject testTThreadedObject.cxx LIBRARIES Hist). if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 50); else(); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 40); endif(); ",MatchSource.DOCS,core/thread/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt:586,Testability,test,testInterpreterLock,586,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if (tbb OR builtin_tbb); ROOT_ADD_UNITTEST_DIR(Core Thread Hist ${TBB_LIBRARIES}); else(); ROOT_ADD_UNITTEST_DIR(Core Thread Hist); endif(). ROOT_ADD_GTEST(testTThreadedObject testTThreadedObject.cxx LIBRARIES Hist). if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 50); else(); ROOT_ADD_GTEST(testInterpreterLock testInterpreterLock.cxx LIBRARIES Imt REPEATS 40); endif(); ",MatchSource.DOCS,core/thread/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/macro2_input_expected.txt:92,Safety,predict,predictions,92,# Measurement of Friday 26 March; # Experiment 2 Physics Lab; # Expected points from theory predictions. 1 6 0.5; 2 12 1.; 3 18 1.5; 4 24 2.0; 5 30 3.7; 6 36 4.9; 7 42 5.4; 8 48 6.8; 9 54 7.5; 10 60 9.7,MatchSource.DOCS,documentation/primer/macros/macro2_input_expected.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/macro2_input_expected.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt:177,Deployability,patch,patches,177,"; 1). der Path der im svn co example gegeben wir existiert nicht. es gibt KEIN. hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches; v5-26-00-patches/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches; tmva/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches/tmva; Makefile; Makefile.arch; Module.mk; doc/; inc/; src/; test/. das eine Versions nummer mit TMVA Version hat !! Es gibt nur ROOT Versionsnummern und; darunter ein tmva subdirectory. SCHADE eigentlich !!; --------------------; sollen/koennen wir das aendern? Wenn ja, wie ?. 2) Was mache ich mit der arXiv und CERN-Report Nummer im updated UsersGuide ?. 3) Kann irgendjemand der weis wie's implementiert ist, die ""NumEvent"" ""EqualNumEvents"" Geschichte und wie das gehandhabt wird (i.e. relative etc..) so formulieren dass man das versteht?. ",MatchSource.DOCS,documentation/tmva/UsersGuide/MyQuestions.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt:283,Deployability,patch,patches,283,"; 1). der Path der im svn co example gegeben wir existiert nicht. es gibt KEIN. hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches; v5-26-00-patches/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches; tmva/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches/tmva; Makefile; Makefile.arch; Module.mk; doc/; inc/; src/; test/. das eine Versions nummer mit TMVA Version hat !! Es gibt nur ROOT Versionsnummern und; darunter ein tmva subdirectory. SCHADE eigentlich !!; --------------------; sollen/koennen wir das aendern? Wenn ja, wie ?. 2) Was mache ich mit der arXiv und CERN-Report Nummer im updated UsersGuide ?. 3) Kann irgendjemand der weis wie's implementiert ist, die ""NumEvent"" ""EqualNumEvents"" Geschichte und wie das gehandhabt wird (i.e. relative etc..) so formulieren dass man das versteht?. ",MatchSource.DOCS,documentation/tmva/UsersGuide/MyQuestions.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt:395,Deployability,patch,patches,395,"; 1). der Path der im svn co example gegeben wir existiert nicht. es gibt KEIN. hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches; v5-26-00-patches/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches; tmva/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches/tmva; Makefile; Makefile.arch; Module.mk; doc/; inc/; src/; test/. das eine Versions nummer mit TMVA Version hat !! Es gibt nur ROOT Versionsnummern und; darunter ein tmva subdirectory. SCHADE eigentlich !!; --------------------; sollen/koennen wir das aendern? Wenn ja, wie ?. 2) Was mache ich mit der arXiv und CERN-Report Nummer im updated UsersGuide ?. 3) Kann irgendjemand der weis wie's implementiert ist, die ""NumEvent"" ""EqualNumEvents"" Geschichte und wie das gehandhabt wird (i.e. relative etc..) so formulieren dass man das versteht?. ",MatchSource.DOCS,documentation/tmva/UsersGuide/MyQuestions.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt:738,Deployability,update,updated,738,"; 1). der Path der im svn co example gegeben wir existiert nicht. es gibt KEIN. hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches; v5-26-00-patches/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches; tmva/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches/tmva; Makefile; Makefile.arch; Module.mk; doc/; inc/; src/; test/. das eine Versions nummer mit TMVA Version hat !! Es gibt nur ROOT Versionsnummern und; darunter ein tmva subdirectory. SCHADE eigentlich !!; --------------------; sollen/koennen wir das aendern? Wenn ja, wie ?. 2) Was mache ich mit der arXiv und CERN-Report Nummer im updated UsersGuide ?. 3) Kann irgendjemand der weis wie's implementiert ist, die ""NumEvent"" ""EqualNumEvents"" Geschichte und wie das gehandhabt wird (i.e. relative etc..) so formulieren dass man das versteht?. ",MatchSource.DOCS,documentation/tmva/UsersGuide/MyQuestions.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt:463,Testability,test,test,463,"; 1). der Path der im svn co example gegeben wir existiert nicht. es gibt KEIN. hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches; v5-26-00-patches/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches; tmva/; hvoss@hvlhcb01:~/TMVA$ svn list https://root.cern.ch/svn/root/branches/dev/tmvapatches/v5-26-00-patches/tmva; Makefile; Makefile.arch; Module.mk; doc/; inc/; src/; test/. das eine Versions nummer mit TMVA Version hat !! Es gibt nur ROOT Versionsnummern und; darunter ein tmva subdirectory. SCHADE eigentlich !!; --------------------; sollen/koennen wir das aendern? Wenn ja, wie ?. 2) Was mache ich mit der arXiv und CERN-Report Nummer im updated UsersGuide ?. 3) Kann irgendjemand der weis wie's implementiert ist, die ""NumEvent"" ""EqualNumEvents"" Geschichte und wie das gehandhabt wird (i.e. relative etc..) so formulieren dass man das versteht?. ",MatchSource.DOCS,documentation/tmva/UsersGuide/MyQuestions.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/MyQuestions.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:2704,Availability,avail,available,2704,"ved and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; Wei Fan and Salvatore J. Stolfo, {\em AdaCost: misclassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; produce the ROC curve and efficiency estimates are somewhat thwarted.; ; --> It's better if you do these preselection cuts YOURSELF when defining training and test; sample!. d) Removed completely the (hopefully never used) option of treating negative events weights; via: PairNegWeightsInNode. e) Renamed option: IgnoreNegEvents --> IgnoreNegEventsInTraining; and removed the IDENTICAL option NoNegeventsInTraining. 6) SVM; All but the Gauss kernel options have been ""removed"" (guess that was done already some; time ago, probably with the introduction of ""regression",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:970,Energy Efficiency,power,power,970,"; 1) Fisher and LD; -----------------; ""Bugfix"" in Fisher's linear discriminant:; The ""Within-Class"" matrix was before calculated as: ; ; (*fWith)(x, y) = (sumSig[k] + sumBgd[k])/(fSumOfWeightsS + fSumOfWeightsB);; while according to Fisher it should (and now is) be:; (*fWith)(x, y) = sumSig[k]/fSumOfWeightsS + sumBgd[k]/fSumOfWeightsB; . Both results are the same if the number of (weighted) training events for signal; and background are the same, and as this is the recommended setting, the ""bug"" ; had very litte impact. However in order to be a ""correct"" Fisher discriminant, ; the correct calculation has now been adopted. Fisher and LD are the same, ONCE; the events are weighted such that signal and background have the same weight. ; Hence, the LD classifier still gives exactly the same result as the ""old"" Fisher; implementation, while the corrected Fisher implementation allows to ""play"" with; different event weights to perhaps find better discrimination power in certain; regions of the ROC curve. ; 2) BDT. a) Changes to some tuning options . nEventsMin --> MinNodeSize; UseNTrainEvents --> BaggedSampleFraction. have been replaced by options that are now given in terms of the relative; size of the training sample rather than in absulut numbers of events. This; is in order to facilitate the parameter tuning on different sample sizes; (i.e when starting on a smaller data sample to tune the parameter in order; to speed up the training); Furthermore, this option here has been changed name. GradBaggingFraction --> BaggedSampleFraction. in an attempt to consolidate and avoid idential duplicate code; ; The option UseWeightedTrees has been removed and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; ",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:3868,Modifiability,variab,variable,3868,"d set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; produce the ROC curve and efficiency estimates are somewhat thwarted.; ; --> It's better if you do these preselection cuts YOURSELF when defining training and test; sample!. d) Removed completely the (hopefully never used) option of treating negative events weights; via: PairNegWeightsInNode. e) Renamed option: IgnoreNegEvents --> IgnoreNegEventsInTraining; and removed the IDENTICAL option NoNegeventsInTraining. 6) SVM; All but the Gauss kernel options have been ""removed"" (guess that was done already some; time ago, probably with the introduction of ""regression"", but was not properly announced; so far. 5) minor bug fixes . a) fix calculation of mean values of the MVA distribution; for signal and background samples, which is used to; decide if a cut on the MVA variable selects signal or; background. Due to the bug it sometimes was swapped. b) equalize the interpolation of the PDF-class that is used to; smooth the Gauss-Transformation, between the .xml weights and; the Standalone class. Now they give the same results even for; large data samples where numerical difference previously ; resulted in substantial differences.; . ",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:1402,Performance,tune,tune,1402,"und are the same, and as this is the recommended setting, the ""bug"" ; had very litte impact. However in order to be a ""correct"" Fisher discriminant, ; the correct calculation has now been adopted. Fisher and LD are the same, ONCE; the events are weighted such that signal and background have the same weight. ; Hence, the LD classifier still gives exactly the same result as the ""old"" Fisher; implementation, while the corrected Fisher implementation allows to ""play"" with; different event weights to perhaps find better discrimination power in certain; regions of the ROC curve. ; 2) BDT. a) Changes to some tuning options . nEventsMin --> MinNodeSize; UseNTrainEvents --> BaggedSampleFraction. have been replaced by options that are now given in terms of the relative; size of the training sample rather than in absulut numbers of events. This; is in order to facilitate the parameter tuning on different sample sizes; (i.e when starting on a smaller data sample to tune the parameter in order; to speed up the training); Furthermore, this option here has been changed name. GradBaggingFraction --> BaggedSampleFraction. in an attempt to consolidate and avoid idential duplicate code; ; The option UseWeightedTrees has been removed and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; Wei Fan and Salvatore J. Stolfo, {\em AdaCost: misclassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of eac",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:2482,Performance,perform,performance,2482," name. GradBaggingFraction --> BaggedSampleFraction. in an attempt to consolidate and avoid idential duplicate code; ; The option UseWeightedTrees has been removed and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; Wei Fan and Salvatore J. Stolfo, {\em AdaCost: misclassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; produce the ROC curve and efficiency estimates are somewhat thwarted.; ; --> It's better if you do these preselection cuts YOURSELF when defining training and test; sample!. d) Removed completely the (hopefully never used) option of treating negative events weights; via: PairNegWeightsInNode. e) Renamed option: IgnoreNegEvents --> IgnoreNegEventsInTraining; and removed the IDENTICAL option NoNegeventsInT",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:2611,Performance,perform,performance,2611,"ved and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; Wei Fan and Salvatore J. Stolfo, {\em AdaCost: misclassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; produce the ROC curve and efficiency estimates are somewhat thwarted.; ; --> It's better if you do these preselection cuts YOURSELF when defining training and test; sample!. d) Removed completely the (hopefully never used) option of treating negative events weights; via: PairNegWeightsInNode. e) Renamed option: IgnoreNegEvents --> IgnoreNegEventsInTraining; and removed the IDENTICAL option NoNegeventsInTraining. 6) SVM; All but the Gauss kernel options have been ""removed"" (guess that was done already some; time ago, probably with the introduction of ""regression",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:1590,Safety,avoid,avoid,1590," same, ONCE; the events are weighted such that signal and background have the same weight. ; Hence, the LD classifier still gives exactly the same result as the ""old"" Fisher; implementation, while the corrected Fisher implementation allows to ""play"" with; different event weights to perhaps find better discrimination power in certain; regions of the ROC curve. ; 2) BDT. a) Changes to some tuning options . nEventsMin --> MinNodeSize; UseNTrainEvents --> BaggedSampleFraction. have been replaced by options that are now given in terms of the relative; size of the training sample rather than in absulut numbers of events. This; is in order to facilitate the parameter tuning on different sample sizes; (i.e when starting on a smaller data sample to tune the parameter in order; to speed up the training); Furthermore, this option here has been changed name. GradBaggingFraction --> BaggedSampleFraction. in an attempt to consolidate and avoid idential duplicate code; ; The option UseWeightedTrees has been removed and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; Wei Fan and Salvatore J. Stolfo, {\em AdaCost: misclassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there ar",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:3257,Testability,test,test,3257,"(all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; produce the ROC curve and efficiency estimates are somewhat thwarted.; ; --> It's better if you do these preselection cuts YOURSELF when defining training and test; sample!. d) Removed completely the (hopefully never used) option of treating negative events weights; via: PairNegWeightsInNode. e) Renamed option: IgnoreNegEvents --> IgnoreNegEventsInTraining; and removed the IDENTICAL option NoNegeventsInTraining. 6) SVM; All but the Gauss kernel options have been ""removed"" (guess that was done already some; time ago, probably with the introduction of ""regression"", but was not properly announced; so far. 5) minor bug fixes . a) fix calculation of mean values of the MVA distribution; for signal and background samples, which is used to; decide if a cut on the MVA variable selects signal or; background. Due to the bug it sometimes was swapped. b) equalize the interpolation of the PDF-class that is used to; smooth the Gauss-Transformation, between the .xml weights and; the Standalone class. Now they give the same results even for; large data samples where numerical difference previously ; resulted in substanti",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:2152,Usability,learn,learning,2152,"ents --> BaggedSampleFraction. have been replaced by options that are now given in terms of the relative; size of the training sample rather than in absulut numbers of events. This; is in order to facilitate the parameter tuning on different sample sizes; (i.e when starting on a smaller data sample to tune the parameter in order; to speed up the training); Furthermore, this option here has been changed name. GradBaggingFraction --> BaggedSampleFraction. in an attempt to consolidate and avoid idential duplicate code; ; The option UseWeightedTrees has been removed and set to ""true"", as was default; anyway, as a measure of further consolidation. Removed the option NNodesMax --> This should be replaced by specifying MaxDepth; instead (limiting the maximum tree depth also limits the number of possible nodes!). b) Added a trial version of a new ""cost sensitive"" boosting algorithem according to; Wei Fan and Salvatore J. Stolfo, {\em AdaCost: misclassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; pr",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt:2966,Usability,clear,clearly,2966,"lassification cost-sensitive boosting}, Proceedings of the 16th International conference on machine learning (ICML 1999)}. With the currently; chosen DEFAULT settings (all costs equal and set to ""one""), it is equivalent to the ""real-AdaBoost"" (i.e. using the option !UseYesNoLeaf (which uses the leave node purity rather than a signal or background attribute in the leaf node of each individual tree). Unfortunatly, no reasonable performance has been achieved yet when choosing different cost parameters. c) BDT's with little tree depth (as favoured for good performance) do not *like* it if; there are very clean signal and background separation cuts available, which however ; have NOT been applied yet as preselection. Now there is a possibility to choose the option; ""DoPreselection"" that looks for suitable preselection cuts and applies them prior to ; the Decision Tree training. While that works fine, this clearly gives ""sharp"" peaks at +1 (-1); for the MVA output distribution and therefore the ""smoothing"" of this distribution used to; produce the ROC curve and efficiency estimates are somewhat thwarted.; ; --> It's better if you do these preselection cuts YOURSELF when defining training and test; sample!. d) Removed completely the (hopefully never used) option of treating negative events weights; via: PairNegWeightsInNode. e) Renamed option: IgnoreNegEvents --> IgnoreNegEventsInTraining; and removed the IDENTICAL option NoNegeventsInTraining. 6) SVM; All but the Gauss kernel options have been ""removed"" (guess that was done already some; time ago, probably with the introduction of ""regression"", but was not properly announced; so far. 5) minor bug fixes . a) fix calculation of mean values of the MVA distribution; for signal and background samples, which is used to; decide if a cut on the MVA variable selects signal or; background. Due to the bug it sometimes was swapped. b) equalize the interpolation of the PDF-class that is used to; smooth the Gauss-Transformation, betwee",MatchSource.DOCS,documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/ReleaseNotes4.2.0.txt
https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/CMakeLists.txt:428,Deployability,install,install,428,"add_library(bvh INTERFACE); find_package(Threads); if (Threads_FOUND); # Link with the threading library of the system, which may; # be required by standard header <thread> on some systems; target_link_libraries(bvh INTERFACE Threads::Threads); endif(). target_include_directories(bvh INTERFACE; $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>; $<INSTALL_INTERFACE:include>). set_target_properties(bvh PROPERTIES CXX_STANDARD 20). install(; DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/; DESTINATION include/bvh/v2; FILES_MATCHING PATTERN ""*.h""; PATTERN ""c_api"" EXCLUDE). if (BVH_BUILD_C_API); add_subdirectory(c_api); endif(); ",MatchSource.DOCS,geom/geom/inc/bvh/v2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/CMakeLists.txt:1287,Testability,test,test,1287,"# Copyright (C) 1995-2024, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT graf2d/gpad package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Gpad; HEADERS; TAnnotation.h; TAttCanvas.h; TButton.h; TCanvas.h; TClassTree.h; TColorWheel.h; TControlBarButton.h; TControlBar.h; TCreatePrimitives.h; TDialogCanvas.h; TGroupButton.h; TInspectCanvas.h; TPad.h; TPadPainter.h; TPaveClass.h; TRatioPlot.h; TSliderBox.h; TSlider.h; TViewer3DPad.h; TView.h; SOURCES; src/TAnnotation.cxx; src/TAttCanvas.cxx; src/TButton.cxx; src/TCanvas.cxx; src/TClassTree.cxx; src/TColorWheel.cxx; src/TControlBarButton.cxx; src/TControlBar.cxx; src/TCreatePrimitives.cxx; src/TDialogCanvas.cxx; src/TGroupButton.cxx; src/TInspectCanvas.cxx; src/TPad.cxx; src/TPadPainter.cxx; src/TPaveClass.cxx; src/TRatioPlot.cxx; src/TSliderBox.cxx; src/TSlider.cxx; src/TView.cxx; src/TViewer3DPad.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Graf; Hist; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,graf2d/gpad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/CMakeLists.txt:1708,Testability,test,test,1708,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT graf2d/gpadv7 package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTGpadv7; HEADERS; ROOT/RCanvas.hxx; ROOT/RFrame.hxx; ROOT/RMenuItems.hxx; ROOT/RColor.hxx; ROOT/RDisplayItem.hxx; ROOT/RAttrMap.hxx; ROOT/RAttrBase.hxx; ROOT/RAttrAggregation.hxx; ROOT/RAttrAxis.hxx; ROOT/RAttrBorder.hxx; ROOT/RAttrLine.hxx; ROOT/RAttrFill.hxx; ROOT/RAttrFont.hxx; ROOT/RAttrMarker.hxx; ROOT/RAttrMargins.hxx; ROOT/RAttrText.hxx; ROOT/RAttrValue.hxx; ROOT/RAxisDrawable.hxx; ROOT/RPalette.hxx; ROOT/RPaletteDrawable.hxx; ROOT/RDrawable.hxx; ROOT/ROnFrameDrawable.hxx; ROOT/RDrawableRequest.hxx; ROOT/RStyle.hxx; ROOT/RPadDisplayItem.hxx; ROOT/RPadExtent.hxx; ROOT/RPadBase.hxx; ROOT/RPad.hxx; ROOT/RPadLength.hxx; ROOT/RPadPos.hxx; ROOT/RPave.hxx; ROOT/RVirtualCanvasPainter.hxx; ROOT/TObjectDisplayItem.hxx; ROOT/TObjectDrawable.hxx; SOURCES; src/RCanvas.cxx; src/RFrame.cxx; src/RMenuItems.cxx; src/RColor.cxx; src/RDisplayItem.cxx; src/RDrawable.cxx; src/RDrawableRequest.cxx; src/RAttrMap.cxx; src/RAttrBase.cxx; src/RAttrAggregation.cxx; src/RPalette.cxx; src/RStyle.cxx; src/RPadBase.cxx; src/RPad.cxx; src/RPadExtent.cxx; src/RPadLength.cxx; src/RPadPos.cxx; src/RVirtualCanvasPainter.cxx; src/TObjectDrawable.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; RIO; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,graf2d/gpadv7/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/CMakeLists.txt:853,Testability,test,test,853,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT graf2d/primitives package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTGraphicsPrimitives; HEADERS; ROOT/RBox.hxx; ROOT/RFont.hxx; ROOT/RFrameTitle.hxx; ROOT/RLegend.hxx; ROOT/RLine.hxx; ROOT/RMarker.hxx; ROOT/RPaveText.hxx; ROOT/RText.hxx; SOURCES; src/RBox.cxx; src/RFont.cxx; src/RLegend.cxx; src/RLine.cxx; src/RMarker.cxx; src/RText.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; ROOTGpadv7; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,graf2d/primitivesv7/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt:2174,Availability,echo,echo,2174,"URRENT_BINARY_DIR}/gdk/src/glib/glib-1.3.dll). set(gdklib ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/gdk-1.3.lib); set(gdkdll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/gdk-1.3.dll); set(gdkliba ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/gdk/gdk-1.3.lib); set(gdkdlla ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/gdk/gdk-1.3.dll). file(GLOB iconvfiles ""gdk/src/iconv/*.*""); file(GLOB_RECURSE glibfiles ""gdk/src/glib/*.*""); file(GLOB_RECURSE gdkfiles ""gdk/src/gdk/*.*""). if(CMAKE_GENERATOR MATCHES Ninja); set(nmcxxflags ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}); if (CMAKE_BUILD_TYPE MATCHES ""Debug""); set(nmcxxflags ""${nmcxxflags}"" DEBUG=1); endif(); else(); if(winrtdebug); set(nmcxxflags ""${CMAKE_CXX_FLAGS_DEBUG}"" DEBUG=1); else(); set(nmcxxflags ""${CMAKE_CXX_FLAGS_RELEASE}""); endif(); endif(); if(CMAKE_SIZEOF_VOID_P EQUAL 8); set(nmcxxflags ""${nmcxxflags} -D_WIN64""); endif(). # Build iconv. add_custom_command( OUTPUT ${iconvliba} ${iconvdlla}; 					COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/gdk gdk; 					COMMAND echo ""*** Building ${iconvliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/iconv; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS ${iconvfiles} ${glibfiles} ${gdkfiles} ). add_custom_command( OUTPUT ${iconvlib} ${iconvdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${iconvliba} ${iconvlib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${iconvdlla} ${iconvdll}; 					DEPENDS ${iconvliba} ${iconvdlla} ). add_custom_target(iconv DEPENDS ${iconvlib}); set_target_properties(iconv PROPERTIES FOLDER Builtins). # Build glib. add_custom_command( OUTPUT ${glibliba} ${glibdlla}; 					COMMAND echo ""*** Building ${glibliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/glib; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS iconv ${glibfiles} ). add_custom_command( OUTPUT ${gliblib} ${glibdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibliba} ${gliblib",MatchSource.DOCS,graf2d/win32gdk/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt:2831,Availability,echo,echo,2831,"; set(nmcxxflags ""${CMAKE_CXX_FLAGS_RELEASE}""); endif(); endif(); if(CMAKE_SIZEOF_VOID_P EQUAL 8); set(nmcxxflags ""${nmcxxflags} -D_WIN64""); endif(). # Build iconv. add_custom_command( OUTPUT ${iconvliba} ${iconvdlla}; 					COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/gdk gdk; 					COMMAND echo ""*** Building ${iconvliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/iconv; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS ${iconvfiles} ${glibfiles} ${gdkfiles} ). add_custom_command( OUTPUT ${iconvlib} ${iconvdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${iconvliba} ${iconvlib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${iconvdlla} ${iconvdll}; 					DEPENDS ${iconvliba} ${iconvdlla} ). add_custom_target(iconv DEPENDS ${iconvlib}); set_target_properties(iconv PROPERTIES FOLDER Builtins). # Build glib. add_custom_command( OUTPUT ${glibliba} ${glibdlla}; 					COMMAND echo ""*** Building ${glibliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/glib; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS iconv ${glibfiles} ). add_custom_command( OUTPUT ${gliblib} ${glibdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibliba} ${gliblib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibdlla} ${glibdll}; 					DEPENDS ${glibliba} ${glibdlla}). add_custom_target(glib DEPENDS ${gliblib}); set_target_properties(glib PROPERTIES FOLDER Builtins). # Build gdk. add_custom_command( OUTPUT ${gdkliba}; 					COMMAND echo ""*** Building ${gdkliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/gdk/win32; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/gdk; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS glib ${gdkfiles} ). add_custom_command( OUTPUT ${gdklib} ${gdkdll}; 					COMMAND ${CMAKE_COMMAN",MatchSource.DOCS,graf2d/win32gdk/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt:3440,Availability,echo,echo,3440,"OMMAND} -E copy_if_different ${iconvliba} ${iconvlib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${iconvdlla} ${iconvdll}; 					DEPENDS ${iconvliba} ${iconvdlla} ). add_custom_target(iconv DEPENDS ${iconvlib}); set_target_properties(iconv PROPERTIES FOLDER Builtins). # Build glib. add_custom_command( OUTPUT ${glibliba} ${glibdlla}; 					COMMAND echo ""*** Building ${glibliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/glib; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS iconv ${glibfiles} ). add_custom_command( OUTPUT ${gliblib} ${glibdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibliba} ${gliblib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibdlla} ${glibdll}; 					DEPENDS ${glibliba} ${glibdlla}). add_custom_target(glib DEPENDS ${gliblib}); set_target_properties(glib PROPERTIES FOLDER Builtins). # Build gdk. add_custom_command( OUTPUT ${gdkliba}; 					COMMAND echo ""*** Building ${gdkliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/gdk/win32; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/gdk; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS glib ${gdkfiles} ). add_custom_command( OUTPUT ${gdklib} ${gdkdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${gdkliba} ${gdklib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${gdkdlla} ${gdkdll}; 					DEPENDS ${gdkliba} ). add_custom_target(GDKLIB DEPENDS ${gdklib}); set_target_properties(GDKLIB PROPERTIES FOLDER Builtins). ROOT_STANDARD_LIBRARY_PACKAGE(Win32gdk; HEADERS; TGWin32.h; TGWin32GL.h; SOURCES; src/gifdecode.c; src/gifencode.c; src/gifquantize.c; src/TGWin32.cxx; src/TGWin32GL.cxx; src/TGWin32ProxyBase.cxx; src/TGWin32VirtualGLProxy.cxx; src/TGWin32VirtualXProxy.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; LIBRARIES; ${FREETYPE_LIBRARIES}; ${gdklib}; ${gliblib}; Glu32.lib; Op",MatchSource.DOCS,graf2d/win32gdk/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt:4576,Deployability,install,install,4576,"et(iconv DEPENDS ${iconvlib}); set_target_properties(iconv PROPERTIES FOLDER Builtins). # Build glib. add_custom_command( OUTPUT ${glibliba} ${glibdlla}; 					COMMAND echo ""*** Building ${glibliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/glib; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS iconv ${glibfiles} ). add_custom_command( OUTPUT ${gliblib} ${glibdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibliba} ${gliblib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${glibdlla} ${glibdll}; 					DEPENDS ${glibliba} ${glibdlla}). add_custom_target(glib DEPENDS ${gliblib}); set_target_properties(glib PROPERTIES FOLDER Builtins). # Build gdk. add_custom_command( OUTPUT ${gdkliba}; 					COMMAND echo ""*** Building ${gdkliba}""; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/gdk/win32; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					COMMAND ${CMAKE_COMMAND} -E chdir gdk/src/gdk; 							nmake -nologo -f makefile.msc NMCXXFLAGS=${nmcxxflags} VC_MAJOR=${VC_MAJOR}; 					DEPENDS glib ${gdkfiles} ). add_custom_command( OUTPUT ${gdklib} ${gdkdll}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${gdkliba} ${gdklib}; 					COMMAND ${CMAKE_COMMAND} -E copy_if_different ${gdkdlla} ${gdkdll}; 					DEPENDS ${gdkliba} ). add_custom_target(GDKLIB DEPENDS ${gdklib}); set_target_properties(GDKLIB PROPERTIES FOLDER Builtins). ROOT_STANDARD_LIBRARY_PACKAGE(Win32gdk; HEADERS; TGWin32.h; TGWin32GL.h; SOURCES; src/gifdecode.c; src/gifencode.c; src/gifquantize.c; src/TGWin32.cxx; src/TGWin32GL.cxx; src/TGWin32ProxyBase.cxx; src/TGWin32VirtualGLProxy.cxx; src/TGWin32VirtualXProxy.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; LIBRARIES; ${FREETYPE_LIBRARIES}; ${gdklib}; ${gliblib}; Glu32.lib; Opengl32.lib; DEPENDENCIES; Core; Graf; BUILTINS; FREETYPE; ). add_dependencies(Win32gdk GDKLIB glib); install(FILES ${gdkdlla} ${glibdlla} ${iconvdlla} DESTINATION ${CMAKE_INSTALL_BINDIR}); ",MatchSource.DOCS,graf2d/win32gdk/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt:467,Safety,avoid,avoid,467,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT graf2d/win32gdk package; # @author Pere Mato, CERN; ############################################################################. # use relative paths to avoid filtering in dictionary generator; include_directories(${FREETYPE_INCLUDE_DIRS}; ${CMAKE_CURRENT_SOURCE_DIR}/gdk/src; ${CMAKE_CURRENT_SOURCE_DIR}/gdk/src/gdk; ${CMAKE_CURRENT_SOURCE_DIR}/gdk/src/glib). set(iconvlib ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/iconv-1.3.lib); set(iconvdll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/iconv-1.3.dll); set(iconvliba ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/iconv/iconv-1.3.lib); set(iconvdlla ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/iconv/iconv-1.3.dll). set(gliblib ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/glib-1.3.lib); set(glibdll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/glib-1.3.dll); set(glibliba ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/glib/glib-1.3.lib); set(glibdlla ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/glib/glib-1.3.dll). set(gdklib ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/gdk-1.3.lib); set(gdkdll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/gdk-1.3.dll); set(gdkliba ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/gdk/gdk-1.3.lib); set(gdkdlla ${CMAKE_CURRENT_BINARY_DIR}/gdk/src/gdk/gdk-1.3.dll). file(GLOB iconvfiles ""gdk/src/iconv/*.*""); file(GLOB_RECURSE glibfiles ""gdk/src/glib/*.*""); file(GLOB_RECURSE gdkfiles ""gdk/src/gdk/*.*""). if(CMAKE_GENERATOR MATCHES Ninja); set(nmcxxflags ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}); if (CMAKE_BUILD_TYPE MATCHES ""Debug""); set(nmcxxflags ""${nmcxxflags}"" DEBUG=1); endif(); else(); if(winrtdebug); set(nmcxxflags ""${CMAKE_CXX_FLAGS_DEBUG}"" DEBUG=1); else(); set(nmcxxflags ""${CMAKE_CXX_FLAGS_RELEASE}""); endif(); endif(); if(CMAKE_SIZEOF_VOID_P EQUAL 8); set(nmcxxflags ""${nmcxxflags} -D_WIN64""); end",MatchSource.DOCS,graf2d/win32gdk/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt:267,Deployability,update,updated,267,"# libAferImage CMakeLists.txt. PROJECT(AFTERIMAGE); if(WIN32); # required for the following feature & bug fix:; # 3.15: Added $<REMOVE_DUPLICATES:list> generator expression; # 3.16: Bug fix with CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS: the auto-generated exports; # are now updated only when the object files providing the symbols are updated; cmake_minimum_required(VERSION 3.16 FATAL_ERROR); # Set CMP0091 (MSVC runtime library flags are selected by an abstraction) to OLD; # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag; cmake_policy(SET CMP0091 OLD); else(); cmake_minimum_required(VERSION 3.10 FATAL_ERROR); endif(). SET(LIB_NAME libAfterImage). # Microsoft Visual Studio:; IF(MSVC); # Define; ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE); SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /DNO_DEBUG_OUTPUT /D_MBCS /D_LIB /wd4996 /wd4267 /wd4018 /wd4244""); ENDIF(). set(FREETYPE_INCLUDE_DIR """" CACHE PATH ""Path to Freetype include dir""); set(ZLIB_INCLUDE_DIR """" CACHE PATH ""Path to zlib include dir""). if(NOT EXISTS ""${FREETYPE_INCLUDE_DIR}/ft2build.h""); message(ERROR ""Can't find ft2build.h in ${FREETYPE_INCLUDE_DIR}""); endif(). if(NOT EXISTS ""${ZLIB_INCLUDE_DIR}/zlib.h""); message(ERROR ""Can't find zlib.h in ${ZLIB_INCLUDE_DIR}""); endif(). INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR}). set (LIB_DESTINATION ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}""). FILE(GLOB H_FILES ""*.h""). SET(SRC_FILES; libpng/png.c libpng/pngmem.c libpng/pngrio.c libpng/pngset.c libpng/pngwio.c libpng/pngwutil.c; libpng/pngerror.c libpng/pngpread.c libpng/pngrtran.c libpng/pngtest.c libpng/pngwrite.c; libpng/pngget.c libpng/pngread.c libpng/pngrutil.c libpng/pngtrans.c libpng/pngwtran.c; libjpeg/jcapimin.c libjpeg/jcapistd.c libjpeg/jccoefct.c libjpeg/jccolor.c libjpeg/jcdctmgr.c libjpeg/jchuff.c libjpeg/jcinit.c; libjpeg/jcmainct.c libjpeg/jcmarker.c libjpeg/jcmaster.c libjpeg/jcomapi.c libjpeg/jcparam.c libjpeg/jcphuff.c libjpeg/jcprepct.c; libjpeg/jcsample.c libjpeg",MatchSource.DOCS,graf2d/asimage/src/libAfterImage/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt:328,Deployability,update,updated,328,"# libAferImage CMakeLists.txt. PROJECT(AFTERIMAGE); if(WIN32); # required for the following feature & bug fix:; # 3.15: Added $<REMOVE_DUPLICATES:list> generator expression; # 3.16: Bug fix with CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS: the auto-generated exports; # are now updated only when the object files providing the symbols are updated; cmake_minimum_required(VERSION 3.16 FATAL_ERROR); # Set CMP0091 (MSVC runtime library flags are selected by an abstraction) to OLD; # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag; cmake_policy(SET CMP0091 OLD); else(); cmake_minimum_required(VERSION 3.10 FATAL_ERROR); endif(). SET(LIB_NAME libAfterImage). # Microsoft Visual Studio:; IF(MSVC); # Define; ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE); SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /DNO_DEBUG_OUTPUT /D_MBCS /D_LIB /wd4996 /wd4267 /wd4018 /wd4244""); ENDIF(). set(FREETYPE_INCLUDE_DIR """" CACHE PATH ""Path to Freetype include dir""); set(ZLIB_INCLUDE_DIR """" CACHE PATH ""Path to zlib include dir""). if(NOT EXISTS ""${FREETYPE_INCLUDE_DIR}/ft2build.h""); message(ERROR ""Can't find ft2build.h in ${FREETYPE_INCLUDE_DIR}""); endif(). if(NOT EXISTS ""${ZLIB_INCLUDE_DIR}/zlib.h""); message(ERROR ""Can't find zlib.h in ${ZLIB_INCLUDE_DIR}""); endif(). INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR}). set (LIB_DESTINATION ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}""). FILE(GLOB H_FILES ""*.h""). SET(SRC_FILES; libpng/png.c libpng/pngmem.c libpng/pngrio.c libpng/pngset.c libpng/pngwio.c libpng/pngwutil.c; libpng/pngerror.c libpng/pngpread.c libpng/pngrtran.c libpng/pngtest.c libpng/pngwrite.c; libpng/pngget.c libpng/pngread.c libpng/pngrutil.c libpng/pngtrans.c libpng/pngwtran.c; libjpeg/jcapimin.c libjpeg/jcapistd.c libjpeg/jccoefct.c libjpeg/jccolor.c libjpeg/jcdctmgr.c libjpeg/jchuff.c libjpeg/jcinit.c; libjpeg/jcmainct.c libjpeg/jcmarker.c libjpeg/jcmaster.c libjpeg/jcomapi.c libjpeg/jcparam.c libjpeg/jcphuff.c libjpeg/jcprepct.c; libjpeg/jcsample.c libjpeg",MatchSource.DOCS,graf2d/asimage/src/libAfterImage/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt:2971,Deployability,install,install,2971," EXISTS ""${FREETYPE_INCLUDE_DIR}/ft2build.h""); message(ERROR ""Can't find ft2build.h in ${FREETYPE_INCLUDE_DIR}""); endif(). if(NOT EXISTS ""${ZLIB_INCLUDE_DIR}/zlib.h""); message(ERROR ""Can't find zlib.h in ${ZLIB_INCLUDE_DIR}""); endif(). INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR}). set (LIB_DESTINATION ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}""). FILE(GLOB H_FILES ""*.h""). SET(SRC_FILES; libpng/png.c libpng/pngmem.c libpng/pngrio.c libpng/pngset.c libpng/pngwio.c libpng/pngwutil.c; libpng/pngerror.c libpng/pngpread.c libpng/pngrtran.c libpng/pngtest.c libpng/pngwrite.c; libpng/pngget.c libpng/pngread.c libpng/pngrutil.c libpng/pngtrans.c libpng/pngwtran.c; libjpeg/jcapimin.c libjpeg/jcapistd.c libjpeg/jccoefct.c libjpeg/jccolor.c libjpeg/jcdctmgr.c libjpeg/jchuff.c libjpeg/jcinit.c; libjpeg/jcmainct.c libjpeg/jcmarker.c libjpeg/jcmaster.c libjpeg/jcomapi.c libjpeg/jcparam.c libjpeg/jcphuff.c libjpeg/jcprepct.c; libjpeg/jcsample.c libjpeg/jctrans.c libjpeg/jdapimin.c libjpeg/jdapistd.c libjpeg/jdatadst.c libjpeg/jdatasrc.c libjpeg/jdcoefct.c; libjpeg/jdcolor.c libjpeg/transupp.c libjpeg/jaricom.c libjpeg/jdarith.c libjpeg/jcarith.c libjpeg/jddctmgr.c libjpeg/jdhuff.c; libjpeg/jdinput.c libjpeg/jdmainct.c libjpeg/jdmarker.c libjpeg/jdmaster.c libjpeg/jdmerge.c libjpeg/jdpostct.c libjpeg/jdsample.c; libjpeg/jdtrans.c libjpeg/jerror.c libjpeg/jfdctflt.c libjpeg/jfdctfst.c libjpeg/jfdctint.c libjpeg/jidctflt.c libjpeg/jidctfst.c; libjpeg/jidctint.c libjpeg/jmemmgr.c libjpeg/jmemnobs.c libjpeg/jquant1.c libjpeg/jquant2.c libjpeg/jutils.c; libungif/dgif_lib.c libungif/egif_lib.c libungif/gif_err.c libungif/gifalloc.c libungif/gif_hash.c afterbase.c ascmap.c asfont.c; asimage.c asstorage.c asvisual.c blender.c bmp.c char2uni.c; export.c import.c transform.c ungif.c xcf.c ximage.c xpm.c draw.c; imencdec.c scanline.c; afterrootpngwrite.c; ). ADD_LIBRARY(${LIB_NAME} STATIC ${H_FILES} ${SRC_FILES}). install(TARGETS ${LIB_NAME} DESTINATION ${LIB_DESTINATION}); ",MatchSource.DOCS,graf2d/asimage/src/libAfterImage/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt:1079,Integrability,message,message,1079,"ature & bug fix:; # 3.15: Added $<REMOVE_DUPLICATES:list> generator expression; # 3.16: Bug fix with CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS: the auto-generated exports; # are now updated only when the object files providing the symbols are updated; cmake_minimum_required(VERSION 3.16 FATAL_ERROR); # Set CMP0091 (MSVC runtime library flags are selected by an abstraction) to OLD; # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag; cmake_policy(SET CMP0091 OLD); else(); cmake_minimum_required(VERSION 3.10 FATAL_ERROR); endif(). SET(LIB_NAME libAfterImage). # Microsoft Visual Studio:; IF(MSVC); # Define; ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE); SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /DNO_DEBUG_OUTPUT /D_MBCS /D_LIB /wd4996 /wd4267 /wd4018 /wd4244""); ENDIF(). set(FREETYPE_INCLUDE_DIR """" CACHE PATH ""Path to Freetype include dir""); set(ZLIB_INCLUDE_DIR """" CACHE PATH ""Path to zlib include dir""). if(NOT EXISTS ""${FREETYPE_INCLUDE_DIR}/ft2build.h""); message(ERROR ""Can't find ft2build.h in ${FREETYPE_INCLUDE_DIR}""); endif(). if(NOT EXISTS ""${ZLIB_INCLUDE_DIR}/zlib.h""); message(ERROR ""Can't find zlib.h in ${ZLIB_INCLUDE_DIR}""); endif(). INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR}). set (LIB_DESTINATION ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}""). FILE(GLOB H_FILES ""*.h""). SET(SRC_FILES; libpng/png.c libpng/pngmem.c libpng/pngrio.c libpng/pngset.c libpng/pngwio.c libpng/pngwutil.c; libpng/pngerror.c libpng/pngpread.c libpng/pngrtran.c libpng/pngtest.c libpng/pngwrite.c; libpng/pngget.c libpng/pngread.c libpng/pngrutil.c libpng/pngtrans.c libpng/pngwtran.c; libjpeg/jcapimin.c libjpeg/jcapistd.c libjpeg/jccoefct.c libjpeg/jccolor.c libjpeg/jcdctmgr.c libjpeg/jchuff.c libjpeg/jcinit.c; libjpeg/jcmainct.c libjpeg/jcmarker.c libjpeg/jcmaster.c libjpeg/jcomapi.c libjpeg/jcparam.c libjpeg/jcphuff.c libjpeg/jcprepct.c; libjpeg/jcsample.c libjpeg/jctrans.c libjpeg/jdapimin.c libjpeg/jdapistd.c libjpeg/jdatadst.c libjpeg/jdatasrc.c libjpe",MatchSource.DOCS,graf2d/asimage/src/libAfterImage/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt:1200,Integrability,message,message,1200,"RT_ALL_SYMBOLS: the auto-generated exports; # are now updated only when the object files providing the symbols are updated; cmake_minimum_required(VERSION 3.16 FATAL_ERROR); # Set CMP0091 (MSVC runtime library flags are selected by an abstraction) to OLD; # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag; cmake_policy(SET CMP0091 OLD); else(); cmake_minimum_required(VERSION 3.10 FATAL_ERROR); endif(). SET(LIB_NAME libAfterImage). # Microsoft Visual Studio:; IF(MSVC); # Define; ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE); SET(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} /DNO_DEBUG_OUTPUT /D_MBCS /D_LIB /wd4996 /wd4267 /wd4018 /wd4244""); ENDIF(). set(FREETYPE_INCLUDE_DIR """" CACHE PATH ""Path to Freetype include dir""); set(ZLIB_INCLUDE_DIR """" CACHE PATH ""Path to zlib include dir""). if(NOT EXISTS ""${FREETYPE_INCLUDE_DIR}/ft2build.h""); message(ERROR ""Can't find ft2build.h in ${FREETYPE_INCLUDE_DIR}""); endif(). if(NOT EXISTS ""${ZLIB_INCLUDE_DIR}/zlib.h""); message(ERROR ""Can't find zlib.h in ${ZLIB_INCLUDE_DIR}""); endif(). INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR}). set (LIB_DESTINATION ""${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}""). FILE(GLOB H_FILES ""*.h""). SET(SRC_FILES; libpng/png.c libpng/pngmem.c libpng/pngrio.c libpng/pngset.c libpng/pngwio.c libpng/pngwutil.c; libpng/pngerror.c libpng/pngpread.c libpng/pngrtran.c libpng/pngtest.c libpng/pngwrite.c; libpng/pngget.c libpng/pngread.c libpng/pngrutil.c libpng/pngtrans.c libpng/pngwtran.c; libjpeg/jcapimin.c libjpeg/jcapistd.c libjpeg/jccoefct.c libjpeg/jccolor.c libjpeg/jcdctmgr.c libjpeg/jchuff.c libjpeg/jcinit.c; libjpeg/jcmainct.c libjpeg/jcmarker.c libjpeg/jcmaster.c libjpeg/jcomapi.c libjpeg/jcparam.c libjpeg/jcphuff.c libjpeg/jcprepct.c; libjpeg/jcsample.c libjpeg/jctrans.c libjpeg/jdapimin.c libjpeg/jdapistd.c libjpeg/jdatadst.c libjpeg/jdatasrc.c libjpeg/jdcoefct.c; libjpeg/jdcolor.c libjpeg/transupp.c libjpeg/jaricom.c libjpeg/jdarith.c libjpeg/jcarith.c libjpeg/jddctm",MatchSource.DOCS,graf2d/asimage/src/libAfterImage/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/CMakeLists.txt:3458,Testability,test,test,3458,rojected.hxx; ROOT/REveTrackPropagator.hxx; ROOT/REveTrans.hxx; ROOT/REveTreeTools.hxx; ROOT/REveTypes.hxx; ROOT/REveUtil.hxx; ROOT/REveVector.hxx; ROOT/REveViewer.hxx; ROOT/REveViewContext.hxx; ROOT/REveVSD.hxx; ROOT/REveVSDStructs.hxx; SOURCES; glu/memalloc.c; glu/dict.c; glu/geom.c; glu/mesh.c; glu/priorityq.c; glu/normal.c; glu/render.c; glu/sweep.c; glu/tess.c; glu/tessmono.c; src/REveChunkManager.cxx; src/REveBox.cxx; src/REveBoxSet.cxx; src/REveCalo.cxx; src/REveCaloData.cxx; src/REveCompound.cxx; src/REveDataCollection.cxx; src/REveDataProxyBuilderBase.cxx; src/REveDataSimpleProxyBuilder.cxx; src/REveDataTable.cxx; src/REveDigitSet.cxx; src/REveFrameBox.cxx; src/REveElement.cxx; src/REveGeoPolyShape.cxx; src/REveGeoShape.cxx; src/REveGeoShapeExtract.cxx; src/REveGluTess.cxx; src/REveJetCone.cxx; src/REveEllipsoid.cxx; src/REveLine.cxx; src/REveManager.cxx; src/REvePathMark.cxx; src/REvePointSet.cxx; src/REvePolygonSetProjected.cxx; src/REveProjectionBases.cxx; src/REveProjectionManager.cxx; src/REveProjections.cxx; src/REveRenderData.cxx; src/REveRGBAPalette.cxx; src/REveScalableStraightLineSet.cxx; src/REveScene.cxx; src/REveSceneInfo.cxx; src/REveSecondarySelectable.cxx; src/REveSelection.cxx; src/REveShape.cxx; src/REveStraightLineSet.cxx; src/REveTableInfo.cxx; src/REveTableProxyBuilder.cxx; src/REveText.cxx; src/REveTrack.cxx; src/REveTrackProjected.cxx; src/REveTrackPropagator.cxx; src/REveTrans.cxx; src/REveTreeTools.cxx; src/REveTypes.cxx; src/REveUtil.cxx; src/REveVector.cxx; src/REveViewer.cxx; src/REveVSD.cxx; src/REveVSDStructs.cxx; DEPENDENCIES; Core; Geom; Physics; EG; TreePlayer; RCsg; ROOTWebDisplay; ${EXTRA_DICT_OPTS}; ). if(builtin_nlohmannjson); target_include_directories(ROOTEve PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(ROOTEve PUBLIC nlohmann_json::nlohmann_json); endif(). # this is required for glew; target_include_directories(ROOTEve PRIVATE ${CMAKE_SOURCE_DIR}/graf3d/eve7). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,graf3d/eve7/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/notex.txt:712,Integrability,synchroniz,synchronized,712,"0. root-indent; innamespace 0. 1. namespace REX; using namespace REX. namespace ROOT { namespace Experimental; {. using namespace ROOT::Experimental;; namespace REX = ROOT::Experimental;. includes: TEve*.h -> ROOT/TEve*.hxx; include guard: ROOT_TEveVSD -> ROOT_TEveVSD_hxx. 3. Remove Editor GL friends. //==============================================================================. Issues:. * Exporting top level collection(s): events, viewers, scenes. * Emitting signals. * Serialization of EveElements; - separate internal ""links"" - componds, parents, projectables/eds; - separate hierarchy ?; - request children separately ?. * What does redraw do? We know which elements / scenes have changed.; Has to be synchronized with expectations of the client. * Event scene / EventManager - is it needed?. * SceneInfo. * Review ownership of shape in TEveGeoShape. * Argh, CSG/Boolean shapes were generated through GL.; Need to re-extract Timur's stuff and hack a TPad krappe around it.; ! Ask what is the plan for TGeo !. -----. * Inverted sign of magnetic field ... fix it. ",MatchSource.DOCS,graf3d/eve7/notex.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/notex.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/CMakeLists.txt:434,Deployability,install,installoptions,434,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT graf3d/gl package; ############################################################################. if(WIN32 OR cocoa); set(installoptions FILTER ""TX11GL""); endif(). if(x11); set(RGL_EXTRA_HEADERS TX11GL.h); set(RGL_EXTRA_SOURCES TX11GL.cxx); endif(). if(builtin_gl2ps); set(RGL_EXTRA_SOURCES ${RGL_EXTRA_SOURCES} src/gl2ps.cxx); endif(). set_source_files_properties(src/TGLFontManager.cxx PROPERTIES COMPILE_FLAGS ""${FTGL_CFLAGS}""); set_source_files_properties(src/TGLText.cxx PROPERTIES COMPILE_FLAGS ""${FTGL_CFLAGS}""). ROOT_STANDARD_LIBRARY_PACKAGE(RGL; HEADERS; TArcBall.h; TF2GL.h; TGL5DDataSetEditor.h; TGL5D.h; TGLAdapter.h; TGLAnnotation.h; TGLAutoRotator.h; TGLAxis.h; TGLAxisPainter.h; TGLBoundingBox.h; TGLBoxPainter.h; TGLCameraGuide.h; TGLCamera.h; TGLCameraOverlay.h; TGLClip.h; TGLClipSetEditor.h; TGLContext.h; TGLCylinder.h; TGLEmbeddedViewer.h; TGLEventHandler.h; TGLFaceSet.h; TGLFBO.h; TGLFontManager.h; TGLFormat.h; TGLH2PolyPainter.h; TGLHistPainter.h; TGLLegoPainter.h; TGLLightSetEditor.h; TGLLightSet.h; TGLLockable.h; TGLLogicalShape.h; TGLManip.h; TGLManipSet.h; TGLObject.h; TGLOrthoCamera.h; TGLOutput.h; TGLOverlayButton.h; TGLOverlay.h; TGLPadPainter.h; TGLPadUtils.h; TGLParametricEquationGL.h; TGLParametric.h; TGLPerspectiveCamera.h; TGLPhysicalShape.h; TGLPlot3D.h; TGLPlotBox.h; TGLPlotCamera.h; TGLPlotPainter.h; TGLPolyLine.h; TGLPolyMarker.h; TGLPShapeObjEditor.h; TGLPShapeObj.h; TGLPShapeRef.h; TGLQuadric.h; TGLRnrCtx.h; TGLRotateManip.h; TGLSAFrame.h; TGLSAViewer.h; TGLScaleManip.h; TGLSceneBase.h; TGLScene.h; TGLSceneInfo.h; TGLScenePad.h; TGLSelectBuffer.h; TGLSelectRecord.h; TGLSphere.h; TGLStopwatch.h; TGLSurfacePainter.h; TGLText.h; TGLTF3",MatchSource.DOCS,graf3d/gl/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/CMakeLists.txt:4423,Deployability,install,installoptions,4423,"rc/TGLLightSet.cxx; src/TGLLightSetEditor.cxx; src/TGLLockable.cxx; src/TGLLogicalShape.cxx; src/TGLManip.cxx; src/TGLManipSet.cxx; src/TGLMarchingCubes.cxx; src/TGLObject.cxx; src/TGLOrthoCamera.cxx; src/TGLOutput.cxx; src/TGLOverlayButton.cxx; src/TGLOverlay.cxx; src/TGLPadPainter.cxx; src/TGLPadUtils.cxx; src/TGLParametric.cxx; src/TGLParametricEquationGL.cxx; src/TGLPerspectiveCamera.cxx; src/TGLPhysicalShape.cxx; src/TGLPlot3D.cxx; src/TGLPlotBox.cxx; src/TGLPlotCamera.cxx; src/TGLPlotPainter.cxx; src/TGLPolyLine.cxx; src/TGLPolyMarker.cxx; src/TGLPShapeObj.cxx; src/TGLPShapeObjEditor.cxx; src/TGLPShapeRef.cxx; src/TGLQuadric.cxx; src/TGLRnrCtx.cxx; src/TGLRotateManip.cxx; src/TGLSAFrame.cxx; src/TGLSAViewer.cxx; src/TGLScaleManip.cxx; src/TGLSceneBase.cxx; src/TGLScene.cxx; src/TGLSceneInfo.cxx; src/TGLScenePad.cxx; src/TGLSelectBuffer.cxx; src/TGLSelectRecord.cxx; src/TGLSphere.cxx; src/TGLStopwatch.cxx; src/TGLSurfacePainter.cxx; src/TGLText.cxx; src/TGLTF3Painter.cxx; src/TGLTH3Composition.cxx; src/TGLTransManip.cxx; src/TGLUtil.cxx; src/TGLViewerBase.cxx; src/TGLViewer.cxx; src/TGLViewerEditor.cxx; src/TGLVoxelPainter.cxx; src/TGLWidget.cxx; src/TH2GL.cxx; src/TH3GL.cxx; src/TKDEAdapter.cxx; src/TKDEFGT.cxx; src/TPointSet3DGL.cxx; src/TGLSdfFontMaker.cxx; ${RGL_EXTRA_SOURCES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; LIBRARIES; OpenGL::GL; OpenGL::GLU; ${FTGL_LIBRARIES}; ${GL2PS_LIBRARIES}; ${X11_LIBRARIES}; RGlew; DEPENDENCIES; Hist; Gui; Ged; RCsg; ASImage; INSTALL_OPTIONS; ${installoptions}; ). target_include_directories(RGL PRIVATE; ${OPENGL_INCLUDE_DIR}; ${FTGL_INCLUDE_DIR}; ${FREETYPE_INCLUDE_DIRS}; ). if(builtin_gl2ps); target_include_directories(RGL PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/gl2ps); else(); target_include_directories(RGL PRIVATE ${GL2PS_INCLUDE_DIRS}); endif(). if(MSVC); target_compile_definitions (RGL PRIVATE ""GLEW_STATIC""); endif(). if(MACOSX_GLU_DEPRECATED); target_compile_options(RGL PRIVATE -Wno-deprecated-declarations); endif(); ",MatchSource.DOCS,graf3d/gl/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/rglew/CMakeLists.txt:729,Deployability,install,install,729,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT graph3d/rglew package; ############################################################################. # This package is only needed for user backward compatibility! (TGLIncludes.h). add_library(RGlew INTERFACE); target_include_directories(RGlew INTERFACE inc/); target_link_libraries(RGlew INTERFACE GLEW::GLEW); #target_include_directories(RGlew INTERFACE $<BUILD_INTERFACE:${GLEW_INCLUDE_DIR}>). # We still need to install TGLIncludes.h into include/; ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,graf3d/rglew/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/rglew/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt:139,Integrability,interface,interface,139,"BEGIN_HTML. <center><h1>Gviz3d - Objects Data Structure visualisation in 3D space</h1></center>; <p><hr><p>. The Gviz3d module provides an interface for inspecting objects collections.; TStructViewer represents a class, a struct or any other type as an; object in 3D space.; At the top of the scene we can see objects depending on a pointer root. Under it we see; pointers and collection elements. Collections must inherit from TCollection; or be STL collections. We can change the number of visible levels or objects on the scene with the GUI or; methods. The Size of objects in the geometry scene is proportional to memory taken by this object; or to the number of objects inside this object. An easy way to find some class in the viewer is to change the color of a type.; We can connect for example TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigatiion in the viewer is very simple like in usual GLViewer. When you put mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operations are supported. END_HTML; ",MatchSource.DOCS,graf3d/gviz3d/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt:318,Integrability,depend,depending,318,"BEGIN_HTML. <center><h1>Gviz3d - Objects Data Structure visualisation in 3D space</h1></center>; <p><hr><p>. The Gviz3d module provides an interface for inspecting objects collections.; TStructViewer represents a class, a struct or any other type as an; object in 3D space.; At the top of the scene we can see objects depending on a pointer root. Under it we see; pointers and collection elements. Collections must inherit from TCollection; or be STL collections. We can change the number of visible levels or objects on the scene with the GUI or; methods. The Size of objects in the geometry scene is proportional to memory taken by this object; or to the number of objects inside this object. An easy way to find some class in the viewer is to change the color of a type.; We can connect for example TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigatiion in the viewer is very simple like in usual GLViewer. When you put mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operations are supported. END_HTML; ",MatchSource.DOCS,graf3d/gviz3d/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt:415,Modifiability,inherit,inherit,415,"BEGIN_HTML. <center><h1>Gviz3d - Objects Data Structure visualisation in 3D space</h1></center>; <p><hr><p>. The Gviz3d module provides an interface for inspecting objects collections.; TStructViewer represents a class, a struct or any other type as an; object in 3D space.; At the top of the scene we can see objects depending on a pointer root. Under it we see; pointers and collection elements. Collections must inherit from TCollection; or be STL collections. We can change the number of visible levels or objects on the scene with the GUI or; methods. The Size of objects in the geometry scene is proportional to memory taken by this object; or to the number of objects inside this object. An easy way to find some class in the viewer is to change the color of a type.; We can connect for example TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigatiion in the viewer is very simple like in usual GLViewer. When you put mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operations are supported. END_HTML; ",MatchSource.DOCS,graf3d/gviz3d/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt:851,Modifiability,inherit,inheriting,851,"BEGIN_HTML. <center><h1>Gviz3d - Objects Data Structure visualisation in 3D space</h1></center>; <p><hr><p>. The Gviz3d module provides an interface for inspecting objects collections.; TStructViewer represents a class, a struct or any other type as an; object in 3D space.; At the top of the scene we can see objects depending on a pointer root. Under it we see; pointers and collection elements. Collections must inherit from TCollection; or be STL collections. We can change the number of visible levels or objects on the scene with the GUI or; methods. The Size of objects in the geometry scene is proportional to memory taken by this object; or to the number of objects inside this object. An easy way to find some class in the viewer is to change the color of a type.; We can connect for example TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigatiion in the viewer is very simple like in usual GLViewer. When you put mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operations are supported. END_HTML; ",MatchSource.DOCS,graf3d/gviz3d/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt:950,Modifiability,inherit,inheriting,950,"BEGIN_HTML. <center><h1>Gviz3d - Objects Data Structure visualisation in 3D space</h1></center>; <p><hr><p>. The Gviz3d module provides an interface for inspecting objects collections.; TStructViewer represents a class, a struct or any other type as an; object in 3D space.; At the top of the scene we can see objects depending on a pointer root. Under it we see; pointers and collection elements. Collections must inherit from TCollection; or be STL collections. We can change the number of visible levels or objects on the scene with the GUI or; methods. The Size of objects in the geometry scene is proportional to memory taken by this object; or to the number of objects inside this object. An easy way to find some class in the viewer is to change the color of a type.; We can connect for example TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigatiion in the viewer is very simple like in usual GLViewer. When you put mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operations are supported. END_HTML; ",MatchSource.DOCS,graf3d/gviz3d/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt:1017,Usability,simpl,simple,1017,"BEGIN_HTML. <center><h1>Gviz3d - Objects Data Structure visualisation in 3D space</h1></center>; <p><hr><p>. The Gviz3d module provides an interface for inspecting objects collections.; TStructViewer represents a class, a struct or any other type as an; object in 3D space.; At the top of the scene we can see objects depending on a pointer root. Under it we see; pointers and collection elements. Collections must inherit from TCollection; or be STL collections. We can change the number of visible levels or objects on the scene with the GUI or; methods. The Size of objects in the geometry scene is proportional to memory taken by this object; or to the number of objects inside this object. An easy way to find some class in the viewer is to change the color of a type.; We can connect for example TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigatiion in the viewer is very simple like in usual GLViewer. When you put mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operations are supported. END_HTML; ",MatchSource.DOCS,graf3d/gviz3d/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/CMakeLists.txt:527,Integrability,message,message,527,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT gui/qt5webdisplay package; ############################################################################. find_package(Qt5 COMPONENTS Core WebEngine WebEngineWidgets CONFIG). if(NOT Qt5_FOUND); if(fail-on-missing); message(FATAL_ERROR ""Could NOT find Qt5 (WebEngine, WebEngineWidgets)""); else(); message(WARNING ""Qt5 (WebEngine, WebEngineWidgets) not found, disabling option 'qt5web'""); set(qt5web OFF CACHE BOOL ""Disabled because Qt5 not found"" FORCE); return(); endif(); endif(). set(CMAKE_AUTOMOC ON); set(CMAKE_INCLUDE_CURRENT_DIR ON). ROOT_LINKER_LIBRARY(ROOTQt5WebDisplay; rootwebview.cpp; rootwebpage.cpp; rooturlschemehandler.cpp; rootqt5.cpp; LIBRARIES; Qt5::WebEngine; Qt5::WebEngineWidgets; DEPENDENCIES; Core; RHTTP; ROOTWebDisplay; ); ",MatchSource.DOCS,gui/qt5webdisplay/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/CMakeLists.txt:608,Integrability,message,message,608,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT gui/qt5webdisplay package; ############################################################################. find_package(Qt5 COMPONENTS Core WebEngine WebEngineWidgets CONFIG). if(NOT Qt5_FOUND); if(fail-on-missing); message(FATAL_ERROR ""Could NOT find Qt5 (WebEngine, WebEngineWidgets)""); else(); message(WARNING ""Qt5 (WebEngine, WebEngineWidgets) not found, disabling option 'qt5web'""); set(qt5web OFF CACHE BOOL ""Disabled because Qt5 not found"" FORCE); return(); endif(); endif(). set(CMAKE_AUTOMOC ON); set(CMAKE_INCLUDE_CURRENT_DIR ON). ROOT_LINKER_LIBRARY(ROOTQt5WebDisplay; rootwebview.cpp; rootwebpage.cpp; rooturlschemehandler.cpp; rootqt5.cpp; LIBRARIES; Qt5::WebEngine; Qt5::WebEngineWidgets; DEPENDENCIES; Core; RHTTP; ROOTWebDisplay; ); ",MatchSource.DOCS,gui/qt5webdisplay/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/qt6webdisplay/CMakeLists.txt:531,Integrability,message,message,531,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT gui/qt5webdisplay package; ############################################################################. find_package(Qt6 COMPONENTS Core WebEngineCore WebEngineWidgets CONFIG). if(NOT Qt6_FOUND); if(fail-on-missing); message(FATAL_ERROR ""Could NOT find Qt6 (WebEngineCore, WebEngineWidgets)""); else(); message(WARNING ""Qt6 (WebEngineCore, WebEngineWidgets) not found, disabling option 'qt6web'""); set(qt6web OFF CACHE BOOL ""Disabled because Qt6 not found"" FORCE); return(); endif(); endif(). set(CMAKE_AUTOMOC ON); set(CMAKE_INCLUDE_CURRENT_DIR ON). ROOT_LINKER_LIBRARY(ROOTQt6WebDisplay; ../qt5webdisplay/rootwebview.cpp; ../qt5webdisplay/rootwebpage.cpp; ../qt5webdisplay/rooturlschemehandler.cpp; rootqt6.cpp; LIBRARIES; Qt6::WebEngineCore; Qt6::WebEngineWidgets; DEPENDENCIES; Core; RHTTP; ROOTWebDisplay; ); ",MatchSource.DOCS,gui/qt6webdisplay/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt6webdisplay/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/qt6webdisplay/CMakeLists.txt:616,Integrability,message,message,616,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT gui/qt5webdisplay package; ############################################################################. find_package(Qt6 COMPONENTS Core WebEngineCore WebEngineWidgets CONFIG). if(NOT Qt6_FOUND); if(fail-on-missing); message(FATAL_ERROR ""Could NOT find Qt6 (WebEngineCore, WebEngineWidgets)""); else(); message(WARNING ""Qt6 (WebEngineCore, WebEngineWidgets) not found, disabling option 'qt6web'""); set(qt6web OFF CACHE BOOL ""Disabled because Qt6 not found"" FORCE); return(); endif(); endif(). set(CMAKE_AUTOMOC ON); set(CMAKE_INCLUDE_CURRENT_DIR ON). ROOT_LINKER_LIBRARY(ROOTQt6WebDisplay; ../qt5webdisplay/rootwebview.cpp; ../qt5webdisplay/rootwebpage.cpp; ../qt5webdisplay/rooturlschemehandler.cpp; rootqt6.cpp; LIBRARIES; Qt6::WebEngineCore; Qt6::WebEngineWidgets; DEPENDENCIES; Core; RHTTP; ROOTWebDisplay; ); ",MatchSource.DOCS,gui/qt6webdisplay/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt6webdisplay/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/CMakeLists.txt:739,Testability,test,test,739,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT gui/webdisplay package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTWebDisplay; HEADERS; ROOT/RWebDisplayArgs.hxx; ROOT/RWebDisplayHandle.hxx; ROOT/RWebWindow.hxx; ROOT/RWebWindowsManager.hxx; SOURCES; RWebDisplayArgs.cxx; RWebDisplayHandle.cxx; RWebWindow.cxx; RWebWindowsManager.cxx; DEPENDENCIES; Core; RHTTP; Net; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test). if(qt5web); target_compile_definitions(ROOTWebDisplay PRIVATE -DWITH_QT5WEB); endif(). if(qt6web); target_compile_definitions(ROOTWebDisplay PRIVATE -DWITH_QT6WEB); endif(). if(cefweb); target_compile_definitions(ROOTWebDisplay PRIVATE -DWITH_CEFWEB); endif()",MatchSource.DOCS,gui/webdisplay/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:574,Availability,ping,ping,574,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:646,Availability,ping,ping,646,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:651,Availability,ping,ping,651,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:697,Availability,ping,ping,697,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:702,Availability,ping,ping,702,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:739,Availability,ping,ping,739,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:478,Safety,detect,detected,478,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:299,Testability,test,testing,299,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:432,Testability,test,test,432,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt:562,Testability,test,test-webgui-ping,562,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for testing components from ROOT gui/webdisplay package; ############################################################################. # test only can be run if Firefox or Chrome are detected on the system; if (CHROME_EXECUTABLE OR FIREFOX_EXECUTABLE); ROOT_ADD_TEST(test-webgui-ping; RUN_SERIAL; COPY_TO_BUILDDIR ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.cxx ${CMAKE_SOURCE_DIR}/tutorials/webgui/ping/ping.html; COMMAND root.exe -b -q -l ping.cxx; PASSREGEX ""PING-PONG TEST COMPLETED""; TIMEOUT 300); endif(); ",MatchSource.DOCS,gui/webdisplay/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/CMakeLists.txt:2874,Testability,test,test,2874,; TGraphDelaunay.h; TGraphErrors.h; TGraph.h; TGraphSmooth.h; TGraphTime.h; TScatter.h; TH1C.h; TH1D.h; TH1F.h; TH1.h; TH1I.h; TH1K.h; TH1L.h; TH1S.h; TH2C.h; TH2D.h; TH2F.h; TH2.h; TH2I.h; TH2L.h; TH2Poly.h; TH2S.h; TH3C.h; TH3D.h; TH3F.h; TH3.h; TH3I.h; TH3L.h; TH3S.h; THLimitsFinder.h; THnBase.h; THnChain.h; THn.h; THnSparse.h; THnSparse_Internal.h; THStack.h; TKDE.h; TLimitDataSource.h; TLimit.h; TMultiDimFit.h; TMultiGraph.h; TNDArray.h; TPolyMarker.h; TPrincipal.h; TProfile2D.h; TProfile2Poly.h; TProfile3D.h; TProfile.h; TSpline.h; TSVDUnfold.h; TVirtualFitter.h; TVirtualGraphPainter.h; TVirtualHistPainter.h; TVirtualPaveStats.h; Math/WrappedMultiTF1.h; Math/WrappedTF1.h; v5/TF1Data.h; v5/TFormula.h; v5/TFormulaPrimitive.h; SOURCES; AnalyticalIntegrals.cxx; Haxis.cxx; HFitImpl.cxx; HFitInterface.cxx; TAxis.cxx; TAxisModLab.cxx; TBackCompFitter.cxx; TBinomialEfficiencyFitter.cxx; TConfidenceLevel.cxx; TEfficiency.cxx; TF12.cxx; TF1Convolution.cxx; TF1.cxx; TF1Data_v5.cxx; TF1Helper.cxx; TF1NormSum.cxx; TF2.cxx; TF3.cxx; TFitResult.cxx; TFitResultPtr.cxx; TFormula.cxx; TFormulaMathInterface.cxx; TFormulaPrimitive_v5.cxx; TFormula_v5.cxx; TFractionFitter.cxx; THistRange.cxx; TGraph2D.cxx; TGraph2DErrors.cxx; TGraphAsymmErrors.cxx; TGraphMultiErrors.cxx; TGraphBentErrors.cxx; TGraph.cxx; TGraphDelaunay2D.cxx; TGraphDelaunay.cxx; TGraphErrors.cxx; TGraph2DAsymmErrors.cxx; TGraphSmooth.cxx; TGraphTime.cxx; TScatter.cxx; TH1.cxx; TH1K.cxx; TH1Merger.cxx; TH2.cxx; TH2Poly.cxx; TH3.cxx; THLimitsFinder.cxx; THnBase.cxx; THnChain.cxx; THn.cxx; THnSparse.cxx; THStack.cxx; TKDE.cxx; TLimit.cxx; TLimitDataSource.cxx; TMultiDimFit.cxx; TMultiGraph.cxx; TPolyMarker.cxx; TPrincipal.cxx; TProfile2D.cxx; TProfile2Poly.cxx; TProfile3D.cxx; TProfile.cxx; TSpline.cxx; TSVDUnfold.cxx; TVirtualFitter.cxx; TVirtualGraphPainter.cxx; TVirtualHistPainter.cxx; WrappedTF1.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Matrix; RIO; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,hist/hist/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/CMakeLists.txt:743,Testability,test,test,743,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT hist/histdraw package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTHistDraw; HEADERS; ROOT/RHistDisplayItem.hxx; ROOT/RHistDrawable.hxx; ROOT/RHistStatBox.hxx; SOURCES; src/RHistDisplayItem.cxx; src/RHistDrawable.cxx; src/RHistStatBox.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ROOTHist; ROOTGpadv7; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,hist/histdrawv7/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/histv7/CMakeLists.txt:806,Testability,test,test,806,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT hist/hist package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTHist; HEADERS; ROOT/RAxis.hxx; ROOT/RAxisConfig.hxx; ROOT/RHist.hxx; ROOT/RHistBinIter.hxx; ROOT/RHistBufferedFill.hxx; ROOT/RHistConcurrentFill.hxx; ROOT/RHistData.hxx; ROOT/RHistImpl.hxx; ROOT/RHistUtils.hxx; ROOT/RHistView.hxx; SOURCES; src/RAxis.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Matrix; RIO; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,hist/histv7/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:2366,Integrability,depend,depends,2366,"DD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile_destructor_segfault tdirectoryfile_destructor_segfault.cxx LIBRARIES RIO Hist); ROOT_ADD_TEST(test-tdirectoryfile_destructor_segfault COMMAND tdirectoryfile_destructor_segfault). # Test for https://github.com/root-project/root/issues/6658; ROOT_ADD_GTEST(test_projections test_projections.cxx LIBRARIES Hist); ",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:601,Testability,test,testTHn,601,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTProfile2Poly test_tprofile2poly.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyBinError test_TH2Poly_BinError.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyAdd test_TH2Poly_Add.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaG",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:722,Testability,test,testTHStack,722,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTProfile2Poly test_tprofile2poly.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyBinError test_TH2Poly_BinError.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyAdd test_TH2Poly_Add.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaG",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:857,Testability,test,testTFormula,857,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTProfile2Poly test_tprofile2poly.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyBinError test_TH2Poly_BinError.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyAdd test_TH2Poly_Add.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaG",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:920,Testability,test,testTKDE,920,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(testTProfile2Poly test_tprofile2poly.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyBinError test_TH2Poly_BinError.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyAdd test_TH2Poly_Add.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaG",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1367,Testability,test,testTMultiGraphGetHistogram,1367,"e RIO); ROOT_ADD_GTEST(testTH2PolyAdd test_TH2Poly_Add.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; ",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1466,Testability,test,testMapCppName,1466,"thCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in ",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1538,Testability,test,testTGraphSorting,1538,"erOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1612,Testability,test,testSpline,1612,"THn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile_destructor_segfault tdirectoryfile_destructor_segfault.cxx LIBRARIES",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:2185,Testability,test,test,2185,"DD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile_destructor_segfault tdirectoryfile_destructor_segfault.cxx LIBRARIES RIO Hist); ROOT_ADD_TEST(test-tdirectoryfile_destructor_segfault COMMAND tdirectoryfile_destructor_segfault). # Test for https://github.com/root-project/root/issues/6658; ROOT_ADD_GTEST(test_projections test_projections.cxx LIBRARIES Hist); ",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:2251,Testability,test,test,2251,"DD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile_destructor_segfault tdirectoryfile_destructor_segfault.cxx LIBRARIES RIO Hist); ROOT_ADD_TEST(test-tdirectoryfile_destructor_segfault COMMAND tdirectoryfile_destructor_segfault). # Test for https://github.com/root-project/root/issues/6658; ROOT_ADD_GTEST(test_projections test_projections.cxx LIBRARIES Hist); ",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:2632,Testability,test,test-,2632,"DD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile_destructor_segfault tdirectoryfile_destructor_segfault.cxx LIBRARIES RIO Hist); ROOT_ADD_TEST(test-tdirectoryfile_destructor_segfault COMMAND tdirectoryfile_destructor_segfault). # Test for https://github.com/root-project/root/issues/6658; ROOT_ADD_GTEST(test_projections test_projections.cxx LIBRARIES Hist); ",MatchSource.DOCS,hist/hist/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/CMakeLists.txt:411,Energy Efficiency,allocate,allocate,411,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(drawUnit draw.cxx LIBRARIES ROOTHistDraw); # On Windows, this test receives ""unexpected diagnostic of severity 2000""; # because ""pointer was truncated (due a missing dictionary)"" and then trying; # to allocate ""an object of abstract class type 'RHistImplBase'"".; if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(ioUnit io.cxx LIBRARIES ROOTHistDraw); endif(); ",MatchSource.DOCS,hist/histdrawv7/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/CMakeLists.txt:272,Testability,test,test,272,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(drawUnit draw.cxx LIBRARIES ROOTHistDraw); # On Windows, this test receives ""unexpected diagnostic of severity 2000""; # because ""pointer was truncated (due a missing dictionary)"" and then trying; # to allocate ""an object of abstract class type 'RHistImplBase'"".; if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(ioUnit io.cxx LIBRARIES ROOTHistDraw); endif(); ",MatchSource.DOCS,hist/histdrawv7/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/CMakeLists.txt:324,Availability,error,error,324,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(MSVC); if(MSVC_VERSION GREATER_EQUAL 1923 AND MSVC_VERSION LESS 1929); # FIXME: using /O2 compiler flag prevent the following error when building in debug mode:; # axis.obj : fatal error LNK1179: invalid or corrupt file: duplicate COMDAT; # '??$?8DU?$char_traits@D@std@@@__ROOT@experimental@std@@YA_NV?$basic_string_view@DU?$char_traits@D@std@@@012@0@Z'; # Try to remove those lines when upgrading Visual Studio; string(REPLACE ""-Od -Z7"" ""-O2"" CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG}""); endif(); set_source_files_properties(constructors.cxx COMPILE_FLAGS /bigobj); endif(). ROOT_ADD_UNITTEST_DIR(ROOTHist); ",MatchSource.DOCS,hist/histv7/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/CMakeLists.txt:379,Availability,error,error,379,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(MSVC); if(MSVC_VERSION GREATER_EQUAL 1923 AND MSVC_VERSION LESS 1929); # FIXME: using /O2 compiler flag prevent the following error when building in debug mode:; # axis.obj : fatal error LNK1179: invalid or corrupt file: duplicate COMDAT; # '??$?8DU?$char_traits@D@std@@@__ROOT@experimental@std@@YA_NV?$basic_string_view@DU?$char_traits@D@std@@@012@0@Z'; # Try to remove those lines when upgrading Visual Studio; string(REPLACE ""-Od -Z7"" ""-O2"" CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG}""); endif(); set_source_files_properties(constructors.cxx COMPILE_FLAGS /bigobj); endif(). ROOT_ADD_UNITTEST_DIR(ROOTHist); ",MatchSource.DOCS,hist/histv7/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:8120,Availability,avail,available,8120,"g 3.4 and older.; # This also catches cases when -Wnon-virtual-dtor isn't supported by; # the compiler at all. This flag is not activated for gcc since it will; # incorrectly identify a protected non-virtual base when there is a friend; # declaration. Don't activate this in general on Windows as this warning has; # too many false positives on COM-style classes, which are destroyed with; # Release() (PR32286).; if (NOT CMAKE_COMPILER_IS_GNUCXX AND NOT WIN32); set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS}); set(CMAKE_REQUIRED_FLAGS ""${CMAKE_REQUIRED_FLAGS} -std=c++14 -Werror=non-virtual-dtor""); CHECK_CXX_SOURCE_COMPILES(""class base {public: virtual void anchor();protected: ~base();};; class derived final : public base { public: ~derived();};; int main() { return 0; }""; CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR); set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS}); append_if(CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; ""-Wnon-virtual-dtor"" CMAKE_CXX_FLAGS); endif(). # Enable -Wdelete-non-virtual-dtor if available.; add_flag_if_supported(""-Wdelete-non-virtual-dtor"" DELETE_NON_VIRTUAL_DTOR_FLAG). # Check if -Wcomment is OK with an // comment ending with '\' if the next; # line is also a // comment.; set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS}); set(CMAKE_REQUIRED_FLAGS ""${CMAKE_REQUIRED_FLAGS} -Werror -Wcomment""); CHECK_C_SOURCE_COMPILES(""// \\\\\\n//\\nint main() {return 0;}""; C_WCOMMENT_ALLOWS_LINE_WRAP); set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS}); if (NOT C_WCOMMENT_ALLOWS_LINE_WRAP); append(""-Wno-comment"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); endif(). # Enable -Wstring-conversion to catch misuse of string literals.; add_flag_if_supported(""-Wstring-conversion"" STRING_CONVERSION_FLAG); endif(). # Add appropriate flags for GCC; if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-common -Woverloaded-virtual""); if (NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing""); end",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:2838,Deployability,install,installed,2838,"eter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(). if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); set(LLVM_LIT ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLING_TEST_DEPS FileCheck count not clang); endif(); set(UNITTEST_DIR ${LLVM_MAIN_SRC_DIR}/utils/unittest); if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h; AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); add_subdirectory(${UNITTEST_DIR} utils/unittest); endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT ""lit.py"" ${LLVM_MAIN_SRC_DIR}/utils/lit; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set( CLING_BUILT_STANDALONE 1 ); set(BACKEND_PACKAGE_STRING ""LLVM ${LLVM_PACKAGE_VERSION}""); elseif(DEFINED CLING_ROOT_BUILD); message(STATUS ""Building Cling as part of ROOT""); # we do not need to include LLVMConfig again, already done; else(); message(STATUS ""Building Cling as part of LLVM""); set(BACKEND_PAC",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:14238,Deployability,install,install,14238,"o flags can be set below; set(LLVM_REQUIRES_EH ON); set(LLVM_REQUIRES_RTTI ON); endif(); endif(). # Set DISABLE_LLVM_LINK_LLVM_DYLIB to disable linking against shared LLVM; llvm_add_library(${name} ${ARG_ENABLE_SHARED} DISABLE_LLVM_LINK_LLVM_DYLIB ${ARG_UNPARSED_ARGUMENTS} ${srcs}). if (MSVC AND cling_ex_file_match); # /EHs because cling_runtime_internal_throwIfInvalidPointer is extern “C”; if (cling_ex_file_match); foreach(file_var ${ARGN}); if (file_var MATCHES ${cling_ex_file_match}); set_property(SOURCE ${file_var} APPEND_STRING PROPERTY COMPILE_FLAGS; "" /D _HAS_EXCEPTIONS=1 /EHs /GR /wd4714 ""); elseif (file_var MATCHES "".cpp$""); set_property(SOURCE ${file_var} APPEND_STRING PROPERTY COMPILE_FLAGS; "" /D _HAS_EXCEPTIONS=0 /EHs-c- /GR- ""); endif(); endforeach(); endif(); endif(). if(TARGET ${name}); target_link_libraries(${name} INTERFACE ${LLVM_COMMON_LIBS}). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY OR ${name} STREQUAL ""libcling""); install(TARGETS ${name}; COMPONENT ${name}; EXPORT ClingTargets; LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX}; RUNTIME DESTINATION bin). if (${ARG_SHARED} AND NOT CMAKE_CONFIGURATION_TYPES); add_custom_target(install-${name}; DEPENDS ${name}; COMMAND ""${CMAKE_COMMAND}""; -DCMAKE_INSTALL_COMPONENT=${name}; -P ""${CMAKE_BINARY_DIR}/cmake_install.cmake""); endif(); endif(); set_property(GLOBAL APPEND PROPERTY CLING_EXPORTS ${name}); else(); # Add empty ""phony"" target; add_custom_target(${name}); endif(). set_target_properties(${name} PROPERTIES FOLDER ""Cling libraries""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_library). macro(add_cling_executable name); add_llvm_executable( ${name} ${ARGN} ); set_target_properties(${name} PROPERTIES FOLDER ""Cling executables""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_executable). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURC",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:14493,Deployability,install,install,14493,"M_LINK_LLVM_DYLIB ${ARG_UNPARSED_ARGUMENTS} ${srcs}). if (MSVC AND cling_ex_file_match); # /EHs because cling_runtime_internal_throwIfInvalidPointer is extern “C”; if (cling_ex_file_match); foreach(file_var ${ARGN}); if (file_var MATCHES ${cling_ex_file_match}); set_property(SOURCE ${file_var} APPEND_STRING PROPERTY COMPILE_FLAGS; "" /D _HAS_EXCEPTIONS=1 /EHs /GR /wd4714 ""); elseif (file_var MATCHES "".cpp$""); set_property(SOURCE ${file_var} APPEND_STRING PROPERTY COMPILE_FLAGS; "" /D _HAS_EXCEPTIONS=0 /EHs-c- /GR- ""); endif(); endforeach(); endif(); endif(). if(TARGET ${name}); target_link_libraries(${name} INTERFACE ${LLVM_COMMON_LIBS}). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY OR ${name} STREQUAL ""libcling""); install(TARGETS ${name}; COMPONENT ${name}; EXPORT ClingTargets; LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX}; RUNTIME DESTINATION bin). if (${ARG_SHARED} AND NOT CMAKE_CONFIGURATION_TYPES); add_custom_target(install-${name}; DEPENDS ${name}; COMMAND ""${CMAKE_COMMAND}""; -DCMAKE_INSTALL_COMPONENT=${name}; -P ""${CMAKE_BINARY_DIR}/cmake_install.cmake""); endif(); endif(); set_property(GLOBAL APPEND PROPERTY CLING_EXPORTS ${name}); else(); # Add empty ""phony"" target; add_custom_target(${name}); endif(). set_target_properties(${name} PROPERTIES FOLDER ""Cling libraries""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_library). macro(add_cling_executable name); add_llvm_executable( ${name} ${ARGN} ); set_target_properties(${name} PROPERTIES FOLDER ""Cling executables""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_executable). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/cling include/cling-c; DESTINATION include; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; PATTERN "".svn"" EXCLUDE; ). ",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:15351,Deployability,install,install,15351,"IBDIR_SUFFIX}; RUNTIME DESTINATION bin). if (${ARG_SHARED} AND NOT CMAKE_CONFIGURATION_TYPES); add_custom_target(install-${name}; DEPENDS ${name}; COMMAND ""${CMAKE_COMMAND}""; -DCMAKE_INSTALL_COMPONENT=${name}; -P ""${CMAKE_BINARY_DIR}/cmake_install.cmake""); endif(); endif(); set_property(GLOBAL APPEND PROPERTY CLING_EXPORTS ${name}); else(); # Add empty ""phony"" target; add_custom_target(${name}); endif(). set_target_properties(${name} PROPERTIES FOLDER ""Cling libraries""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_library). macro(add_cling_executable name); add_llvm_executable( ${name} ${ARGN} ); set_target_properties(${name} PROPERTIES FOLDER ""Cling executables""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_executable). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/cling include/cling-c; DESTINATION include; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; PATTERN "".svn"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/cling; DESTINATION include; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; PATTERN ""*.modulemap""; ); endif(). add_definitions( -D_GNU_SOURCE -DCLING_VERSION=${CLING_VERSION}). option(CLING_INCLUDE_TESTS; ""Generate build targets for the Cling unit tests.""; ${LLVM_INCLUDE_TESTS}). if (NOT WIN32); set(cling_path_delim "":""); else(); set(cling_path_delim "";""); endif(). if( CLING_INCLUDE_TESTS ); set(cling_include_deflt ${CMAKE_INSTALL_PREFIX}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cl",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:15524,Deployability,install,install,15524,"""${CMAKE_BINARY_DIR}/cmake_install.cmake""); endif(); endif(); set_property(GLOBAL APPEND PROPERTY CLING_EXPORTS ${name}); else(); # Add empty ""phony"" target; add_custom_target(${name}); endif(). set_target_properties(${name} PROPERTIES FOLDER ""Cling libraries""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_library). macro(add_cling_executable name); add_llvm_executable( ${name} ${ARGN} ); set_target_properties(${name} PROPERTIES FOLDER ""Cling executables""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_executable). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/cling include/cling-c; DESTINATION include; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; PATTERN "".svn"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/cling; DESTINATION include; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; PATTERN ""*.modulemap""; ); endif(). add_definitions( -D_GNU_SOURCE -DCLING_VERSION=${CLING_VERSION}). option(CLING_INCLUDE_TESTS; ""Generate build targets for the Cling unit tests.""; ${LLVM_INCLUDE_TESTS}). if (NOT WIN32); set(cling_path_delim "":""); else(); set(cling_path_delim "";""); endif(). if( CLING_INCLUDE_TESTS ); set(cling_include_deflt ${CMAKE_INSTALL_PREFIX}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEG",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:12924,Energy Efficiency,reduce,reduced,12924,"cling/${lib_path}/*.h; ${CLING_SOURCE_DIR}/include/cling/${lib_path}/*.def; ); set_source_files_properties(${headers} PROPERTIES HEADER_FILE_ONLY ON). file( GLOB_RECURSE tds; ${CLING_SOURCE_DIR}/include/cling/${lib_path}/*.td; ); source_group(""TableGen descriptions"" FILES ${tds}); set_source_files_properties(${tds}} PROPERTIES HEADER_FILE_ONLY ON). if(headers OR tds); set(srcs ${headers} ${tds}); endif(); endif(); endif(MSVC_IDE OR XCODE); if(srcs OR ARG_ADDITIONAL_HEADERS); set(srcs; ADDITIONAL_HEADERS; ${srcs}; ${ARG_ADDITIONAL_HEADERS} # It may contain unparsed unknown args.; ); endif(); if(ARG_SHARED); set(ARG_ENABLE_SHARED SHARED); endif(). if (MSVC); # On Windows exceptions aren’t as generic as an x64 ABI.; # Stack unwinding code must be generated for every function between the; # throw and catch blocks.; if (${name} STREQUAL ""clingInterpreter""); # All of libClingInterpreter is compiled with exceptions, mostly because; # llvm_unreachable throws an exception. Otherwise it could be reduced:; # Exception.cpp, Interpreter.cpp, IncrementalParser.cpp,; # IncrementalExecutor.cpp; set(cling_ex_file_match "".cpp$""); elseif(${name} STREQUAL ""clingUserInterface""); # For libClingUserInterface, only UserInterface.cpp uses exceptions.; set(cling_ex_file_match ""^UserInterface.cpp$""); endif(); if(cling_ex_file_match); # needs to be on before llvm_add_library so flags can be set below; set(LLVM_REQUIRES_EH ON); set(LLVM_REQUIRES_RTTI ON); endif(); endif(). # Set DISABLE_LLVM_LINK_LLVM_DYLIB to disable linking against shared LLVM; llvm_add_library(${name} ${ARG_ENABLE_SHARED} DISABLE_LLVM_LINK_LLVM_DYLIB ${ARG_UNPARSED_ARGUMENTS} ${srcs}). if (MSVC AND cling_ex_file_match); # /EHs because cling_runtime_internal_throwIfInvalidPointer is extern “C”; if (cling_ex_file_match); foreach(file_var ${ARGN}); if (file_var MATCHES ${cling_ex_file_match}); set_property(SOURCE ${file_var} APPEND_STRING PROPERTY COMPILE_FLAGS; "" /D _HAS_EXCEPTIONS=1 /EHs /GR /wd4714 ""); elseif (file_var MATCHE",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:654,Integrability,message,message,654,"if(WIN32); # We need cmake to support exporting of symbols not only from libraries but; # from executables too. This way cling can find symbols from its own; # executable during runtime.; cmake_minimum_required(VERSION 3.6.2); else(WIN32); # support of earlier cmake versions will be removed soon; cmake_minimum_required(VERSION 3.5); endif(WIN32). # If we are not building as a part of LLVM, build Cling as an; # standalone project, using LLVM as an external library:; if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); project(Cling). # See <https://llvm.org/docs/CMake.html#embedding-llvm-in-your-project>.; find_package(LLVM REQUIRED CONFIG); message(STATUS ""Found LLVM ${LLVM_PACKAGE_VERSION}""); message(STATUS ""Using LLVMConfig.cmake in: ${LLVM_DIR}""). separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS}); add_definitions(${LLVM_DEFINITIONS_LIST}). find_package(Clang REQUIRED CONFIG); message(STATUS ""Found supported version: Clang ${CLANG_PACKAGE_VERSION}""); message(STATUS ""Using ClangConfig.cmake in: ${Clang_DIR}""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_DIR}""); include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_INCLUDE_DIRS}""); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:708,Integrability,message,message,708,"if(WIN32); # We need cmake to support exporting of symbols not only from libraries but; # from executables too. This way cling can find symbols from its own; # executable during runtime.; cmake_minimum_required(VERSION 3.6.2); else(WIN32); # support of earlier cmake versions will be removed soon; cmake_minimum_required(VERSION 3.5); endif(WIN32). # If we are not building as a part of LLVM, build Cling as an; # standalone project, using LLVM as an external library:; if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); project(Cling). # See <https://llvm.org/docs/CMake.html#embedding-llvm-in-your-project>.; find_package(LLVM REQUIRED CONFIG); message(STATUS ""Found LLVM ${LLVM_PACKAGE_VERSION}""); message(STATUS ""Using LLVMConfig.cmake in: ${LLVM_DIR}""). separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS}); add_definitions(${LLVM_DEFINITIONS_LIST}). find_package(Clang REQUIRED CONFIG); message(STATUS ""Found supported version: Clang ${CLANG_PACKAGE_VERSION}""); message(STATUS ""Using ClangConfig.cmake in: ${Clang_DIR}""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_DIR}""); include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_INCLUDE_DIRS}""); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:924,Integrability,message,message,924,"if(WIN32); # We need cmake to support exporting of symbols not only from libraries but; # from executables too. This way cling can find symbols from its own; # executable during runtime.; cmake_minimum_required(VERSION 3.6.2); else(WIN32); # support of earlier cmake versions will be removed soon; cmake_minimum_required(VERSION 3.5); endif(WIN32). # If we are not building as a part of LLVM, build Cling as an; # standalone project, using LLVM as an external library:; if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); project(Cling). # See <https://llvm.org/docs/CMake.html#embedding-llvm-in-your-project>.; find_package(LLVM REQUIRED CONFIG); message(STATUS ""Found LLVM ${LLVM_PACKAGE_VERSION}""); message(STATUS ""Using LLVMConfig.cmake in: ${LLVM_DIR}""). separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS}); add_definitions(${LLVM_DEFINITIONS_LIST}). find_package(Clang REQUIRED CONFIG); message(STATUS ""Found supported version: Clang ${CLANG_PACKAGE_VERSION}""); message(STATUS ""Using ClangConfig.cmake in: ${Clang_DIR}""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_DIR}""); include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_INCLUDE_DIRS}""); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:999,Integrability,message,message,999,"if(WIN32); # We need cmake to support exporting of symbols not only from libraries but; # from executables too. This way cling can find symbols from its own; # executable during runtime.; cmake_minimum_required(VERSION 3.6.2); else(WIN32); # support of earlier cmake versions will be removed soon; cmake_minimum_required(VERSION 3.5); endif(WIN32). # If we are not building as a part of LLVM, build Cling as an; # standalone project, using LLVM as an external library:; if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); project(Cling). # See <https://llvm.org/docs/CMake.html#embedding-llvm-in-your-project>.; find_package(LLVM REQUIRED CONFIG); message(STATUS ""Found LLVM ${LLVM_PACKAGE_VERSION}""); message(STATUS ""Using LLVMConfig.cmake in: ${LLVM_DIR}""). separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS}); add_definitions(${LLVM_DEFINITIONS_LIST}). find_package(Clang REQUIRED CONFIG); message(STATUS ""Found supported version: Clang ${CLANG_PACKAGE_VERSION}""); message(STATUS ""Using ClangConfig.cmake in: ${Clang_DIR}""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_DIR}""); include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(""${LLVM_INCLUDE_DIRS}""); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:3622,Integrability,message,message,3622,"X}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); add_subdirectory(${UNITTEST_DIR} utils/unittest); endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT ""lit.py"" ${LLVM_MAIN_SRC_DIR}/utils/lit; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set( CLING_BUILT_STANDALONE 1 ); set(BACKEND_PACKAGE_STRING ""LLVM ${LLVM_PACKAGE_VERSION}""); elseif(DEFINED CLING_ROOT_BUILD); message(STATUS ""Building Cling as part of ROOT""); # we do not need to include LLVMConfig again, already done; else(); message(STATUS ""Building Cling as part of LLVM""); set(BACKEND_PACKAGE_STRING ""${PACKAGE_STRING}""); # Try finding the LLVMConfig.cmake if we build against prebuilt LLVM; set(LLVM_CMAKE_PATH ""${LLVM_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm""); set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); endif(); if (NOT CLANG_INCLUDE_DIRS); set (CLANG_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/tools/clang/include""); if (NOT EXISTS ${CLANG_INCLUDE_DIRS}); # Otherwise assume the monorepo layout.; set (CLANG_INCLUDE_DIRS ${LLVM_MAIN_SRC_DIR}/../clang/include ); endif(); set (CLANG_INCLUDE_DIRS ""${CLANG_INCLUDE_DIRS}""; ""${LLVM_BINARY_DIR}/tools/clang/include""); endif(); if (NOT LLVM_INCLUDE_DIRS); set (LLVM_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/include"" ""${LLVM_BINARY_DIR}/include""); endif(); endif(). if( NOT ""NVPTX"" IN_LIST LLV",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:3740,Integrability,message,message,3740,"X}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); add_subdirectory(${UNITTEST_DIR} utils/unittest); endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT ""lit.py"" ${LLVM_MAIN_SRC_DIR}/utils/lit; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(); endif(). set( CLING_BUILT_STANDALONE 1 ); set(BACKEND_PACKAGE_STRING ""LLVM ${LLVM_PACKAGE_VERSION}""); elseif(DEFINED CLING_ROOT_BUILD); message(STATUS ""Building Cling as part of ROOT""); # we do not need to include LLVMConfig again, already done; else(); message(STATUS ""Building Cling as part of LLVM""); set(BACKEND_PACKAGE_STRING ""${PACKAGE_STRING}""); # Try finding the LLVMConfig.cmake if we build against prebuilt LLVM; set(LLVM_CMAKE_PATH ""${LLVM_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm""); set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); endif(); if (NOT CLANG_INCLUDE_DIRS); set (CLANG_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/tools/clang/include""); if (NOT EXISTS ${CLANG_INCLUDE_DIRS}); # Otherwise assume the monorepo layout.; set (CLANG_INCLUDE_DIRS ${LLVM_MAIN_SRC_DIR}/../clang/include ); endif(); set (CLANG_INCLUDE_DIRS ""${CLANG_INCLUDE_DIRS}""; ""${LLVM_BINARY_DIR}/tools/clang/include""); endif(); if (NOT LLVM_INCLUDE_DIRS); set (LLVM_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/include"" ""${LLVM_BINARY_DIR}/include""); endif(); endif(). if( NOT ""NVPTX"" IN_LIST LLV",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:4702,Integrability,message,message,4702,"essage(STATUS ""Building Cling as part of LLVM""); set(BACKEND_PACKAGE_STRING ""${PACKAGE_STRING}""); # Try finding the LLVMConfig.cmake if we build against prebuilt LLVM; set(LLVM_CMAKE_PATH ""${LLVM_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm""); set(LLVMCONFIG_FILE ""${LLVM_CMAKE_PATH}/LLVMConfig.cmake""); if(EXISTS ${LLVMCONFIG_FILE}); list(APPEND CMAKE_MODULE_PATH ""${LLVM_CMAKE_PATH}""); include(${LLVMCONFIG_FILE}); endif(); if (NOT CLANG_INCLUDE_DIRS); set (CLANG_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/tools/clang/include""); if (NOT EXISTS ${CLANG_INCLUDE_DIRS}); # Otherwise assume the monorepo layout.; set (CLANG_INCLUDE_DIRS ${LLVM_MAIN_SRC_DIR}/../clang/include ); endif(); set (CLANG_INCLUDE_DIRS ""${CLANG_INCLUDE_DIRS}""; ""${LLVM_BINARY_DIR}/tools/clang/include""); endif(); if (NOT LLVM_INCLUDE_DIRS); set (LLVM_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/include"" ""${LLVM_BINARY_DIR}/include""); endif(); endif(). if( NOT ""NVPTX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""NVPTX backend is not activated\n""; ""Please enable it via -DLLVM_TARGETS_TO_BUILD=\""host;NVPTX\""""); endif(). set(CLING_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLING_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_BINARY_DIR}/bin""); if(DEFINED CLING_ROOT_BUILD); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${LLVM_TOOLS_BINARY_DIR}""); endif(). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. CMake would overwrite ""; ""the makefiles distributed with LLVM. Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # From ROOT:; function(cling_add_cxx_flag var flag); string(REGEX REPLACE ""[-.+/:= ]"" ""_"" flag_esc ""${flag}""); CHECK_CXX_COMPILER_FLAG(""${flag}"" CXX_HAS${flag_esc}); if(CXX_HAS${flag_esc}); set(${var} ""${${var}} ${flag}"" PARENT_S",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:5156,Integrability,message,message,5156,"FIG_FILE}); endif(); if (NOT CLANG_INCLUDE_DIRS); set (CLANG_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/tools/clang/include""); if (NOT EXISTS ${CLANG_INCLUDE_DIRS}); # Otherwise assume the monorepo layout.; set (CLANG_INCLUDE_DIRS ${LLVM_MAIN_SRC_DIR}/../clang/include ); endif(); set (CLANG_INCLUDE_DIRS ""${CLANG_INCLUDE_DIRS}""; ""${LLVM_BINARY_DIR}/tools/clang/include""); endif(); if (NOT LLVM_INCLUDE_DIRS); set (LLVM_INCLUDE_DIRS ""${LLVM_MAIN_SRC_DIR}/include"" ""${LLVM_BINARY_DIR}/include""); endif(); endif(). if( NOT ""NVPTX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""NVPTX backend is not activated\n""; ""Please enable it via -DLLVM_TARGETS_TO_BUILD=\""host;NVPTX\""""); endif(). set(CLING_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLING_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_BINARY_DIR}/bin""); if(DEFINED CLING_ROOT_BUILD); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${LLVM_TOOLS_BINARY_DIR}""); endif(). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. CMake would overwrite ""; ""the makefiles distributed with LLVM. Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # From ROOT:; function(cling_add_cxx_flag var flag); string(REGEX REPLACE ""[-.+/:= ]"" ""_"" flag_esc ""${flag}""); CHECK_CXX_COMPILER_FLAG(""${flag}"" CXX_HAS${flag_esc}); if(CXX_HAS${flag_esc}); set(${var} ""${${var}} ${flag}"" PARENT_SCOPE); endif(); endfunction(). if(CLING_ENABLE_WARNINGS AND NOT LLVM_ENABLE_WARNINGS AND (LLVM_COMPILER_IS_GCC_COMPATIBLE OR CLANG_CL)); # from HandleLLCMOptions.cmake:; append(""-Wall -W -Wno-unused-parameter -Wwrite-strings"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); append(""-Wcast-qual"" CMAKE_CXX_FLAGS). # Turn off missing field initializer warnings for gcc to avoid noise from; # false positives with empty {}. Tu",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:11002,Integrability,message,message,11002,"} -fno-rtti""); endif(). if(MSVC); add_definitions(/DNOMINMAX); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /Zc:preprocessor""); endif(). if (APPLE); set(CMAKE_MODULE_LINKER_FLAGS ""-Wl,-flat_namespace -Wl,-undefined -Wl,suppress""); endif (). include(CMakeParseArguments). macro(add_cling_subdirectory name); add_llvm_subdirectory(CLING TOOL ${name}); endmacro(). file (STRINGS ""VERSION"" CLING_VERSION); string(REGEX REPLACE ""([0-9]).[0-9]+~[a-zA-Z]+"" ""\\1"" CLING_VERSION_MAJOR ${CLING_VERSION}); string(REGEX REPLACE ""[0-9].([0-9]+)~[a-zA-Z]+"" ""\\1"" CLING_VERSION_MINOR ${CLING_VERSION}). if(DEFINED CLING_ROOT_BUILD); # Building as part of ROOT; visibility is ""inherited"" from ROOT/interpreter.; set(CLING_VERSION ROOT_${CLING_VERSION}); else(); # Lots of cling is needed at runtime (e.g. Value, or Interpreter::Evaluate()).; # The JIT needs to be able to resolve these symbols from cling; unhide them.; set(CMAKE_CXX_VISIBILITY_PRESET default); set(CMAKE_C_VISIBILITY_PRESET default); set(CMAKE_VISIBILITY_INLINES_HIDDEN ""ON""); endif(); message(STATUS ""Cling version (from VERSION file): ${CLING_VERSION}""). set(CLING_VERSION_PATCHLEVEL 0). macro(set_cling_windows_version_resource_properties name); if(DEFINED windows_resource_file); set_windows_version_resource_properties(${name} ${windows_resource_file}; VERSION_MAJOR ${CLING_VERSION_MAJOR}; VERSION_MINOR ${CLING_VERSION_MINOR}; VERSION_PATCHLEVEL ${CLING_VERSION_PATCHLEVEL}; VERSION_STRING ""${CLING_VERSION} (${BACKEND_PACKAGE_STRING})""; PRODUCT_NAME ""cling""); endif(); endmacro(). include_directories(BEFORE SYSTEM ${LLVM_INCLUDE_DIRS} ${CLANG_INCLUDE_DIRS}). macro(add_cling_library name); cmake_parse_arguments(ARG; ""SHARED""; """"; ""ADDITIONAL_HEADERS""; ${ARGN}); set(srcs); if(MSVC_IDE OR XCODE); # Add public headers; file(RELATIVE_PATH lib_path; ${CLING_SOURCE_DIR}/lib/; ${CMAKE_CURRENT_SOURCE_DIR}; ); if(NOT lib_path MATCHES ""^[.][.]""); file( GLOB_RECURSE headers; ${CLING_SOURCE_DIR}/include/cling/${lib_path}/*.h; ${CLING_SOURCE_DIR}/inc",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:16535,Integrability,depend,depend,16535,"ORY ${CMAKE_CURRENT_BINARY_DIR}/include/cling; DESTINATION include; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; PATTERN ""*.modulemap""; ); endif(). add_definitions( -D_GNU_SOURCE -DCLING_VERSION=${CLING_VERSION}). option(CLING_INCLUDE_TESTS; ""Generate build targets for the Cling unit tests.""; ${LLVM_INCLUDE_TESTS}). if (NOT WIN32); set(cling_path_delim "":""); else(); set(cling_path_delim "";""); endif(). if( CLING_INCLUDE_TESTS ); set(cling_include_deflt ${CMAKE_INSTALL_PREFIX}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARGET clang-headers); list(APPEND LLVM_COMMON_DEPENDS clang-headers); endif(). add_subdirectory(include/cling/Interpreter); add_subdirectory(lib). if( CLING_INCLUDE_TESTS ); add_subdirectory(test). if(CLING_BUILT_STANDALONE); # Add a global check rule now that all subdirectories have been traversed; # and we know the total set of lit testsuites.; get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES); get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS); get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS); get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS); add_lit_target(check-all; ""Running all regression tests""; ${LLVM_LIT_TESTSUITES}; PARAMS ${LLVM_LIT",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:10625,Modifiability,inherit,inherited,10625,"d:c++17""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING""); elseif(MSVC_VERSION GREATER_EQUAL 1910); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std:c++14""); endif(); endif(); else(); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-rtti""); endif(). if(MSVC); add_definitions(/DNOMINMAX); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} /Zc:preprocessor""); endif(). if (APPLE); set(CMAKE_MODULE_LINKER_FLAGS ""-Wl,-flat_namespace -Wl,-undefined -Wl,suppress""); endif (). include(CMakeParseArguments). macro(add_cling_subdirectory name); add_llvm_subdirectory(CLING TOOL ${name}); endmacro(). file (STRINGS ""VERSION"" CLING_VERSION); string(REGEX REPLACE ""([0-9]).[0-9]+~[a-zA-Z]+"" ""\\1"" CLING_VERSION_MAJOR ${CLING_VERSION}); string(REGEX REPLACE ""[0-9].([0-9]+)~[a-zA-Z]+"" ""\\1"" CLING_VERSION_MINOR ${CLING_VERSION}). if(DEFINED CLING_ROOT_BUILD); # Building as part of ROOT; visibility is ""inherited"" from ROOT/interpreter.; set(CLING_VERSION ROOT_${CLING_VERSION}); else(); # Lots of cling is needed at runtime (e.g. Value, or Interpreter::Evaluate()).; # The JIT needs to be able to resolve these symbols from cling; unhide them.; set(CMAKE_CXX_VISIBILITY_PRESET default); set(CMAKE_C_VISIBILITY_PRESET default); set(CMAKE_VISIBILITY_INLINES_HIDDEN ""ON""); endif(); message(STATUS ""Cling version (from VERSION file): ${CLING_VERSION}""). set(CLING_VERSION_PATCHLEVEL 0). macro(set_cling_windows_version_resource_properties name); if(DEFINED windows_resource_file); set_windows_version_resource_properties(${name} ${windows_resource_file}; VERSION_MAJOR ${CLING_VERSION_MAJOR}; VERSION_MINOR ${CLING_VERSION_MINOR}; VERSION_PATCHLEVEL ${CLING_VERSION_PATCHLEVEL}; VERSION_STRING ""${CLING_VERSION} (${BACKEND_PACKAGE_STRING})""; PRODUCT_NAME ""cling""); endif(); endmacro(). include_directories(BEFORE SYSTEM ${LLVM_INCLUDE_DIRS} ${CLANG_INCLUDE_DIRS}). macro(add_cling_libra",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:15478,Modifiability,config,config,15478,"add_custom_target(install-${name}; DEPENDS ${name}; COMMAND ""${CMAKE_COMMAND}""; -DCMAKE_INSTALL_COMPONENT=${name}; -P ""${CMAKE_BINARY_DIR}/cmake_install.cmake""); endif(); endif(); set_property(GLOBAL APPEND PROPERTY CLING_EXPORTS ${name}); else(); # Add empty ""phony"" target; add_custom_target(${name}); endif(). set_target_properties(${name} PROPERTIES FOLDER ""Cling libraries""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_library). macro(add_cling_executable name); add_llvm_executable( ${name} ${ARGN} ); set_target_properties(${name} PROPERTIES FOLDER ""Cling executables""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_executable). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/cling include/cling-c; DESTINATION include; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; PATTERN "".svn"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/cling; DESTINATION include; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; PATTERN ""*.modulemap""; ); endif(). add_definitions( -D_GNU_SOURCE -DCLING_VERSION=${CLING_VERSION}). option(CLING_INCLUDE_TESTS; ""Generate build targets for the Cling unit tests.""; ${LLVM_INCLUDE_TESTS}). if (NOT WIN32); set(cling_path_delim "":""); else(); set(cling_path_delim "";""); endif(). if( CLING_INCLUDE_TESTS ); set(cling_include_deflt ${CMAKE_INSTALL_PREFIX}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:6096,Safety,avoid,avoid,6096," CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. CMake would overwrite ""; ""the makefiles distributed with LLVM. Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # From ROOT:; function(cling_add_cxx_flag var flag); string(REGEX REPLACE ""[-.+/:= ]"" ""_"" flag_esc ""${flag}""); CHECK_CXX_COMPILER_FLAG(""${flag}"" CXX_HAS${flag_esc}); if(CXX_HAS${flag_esc}); set(${var} ""${${var}} ${flag}"" PARENT_SCOPE); endif(); endfunction(). if(CLING_ENABLE_WARNINGS AND NOT LLVM_ENABLE_WARNINGS AND (LLVM_COMPILER_IS_GCC_COMPATIBLE OR CLANG_CL)); # from HandleLLCMOptions.cmake:; append(""-Wall -W -Wno-unused-parameter -Wwrite-strings"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); append(""-Wcast-qual"" CMAKE_CXX_FLAGS). # Turn off missing field initializer warnings for gcc to avoid noise from; # false positives with empty {}. Turn them on otherwise (they're off by; # default for clang).; check_cxx_compiler_flag(""-Wmissing-field-initializers"" CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG); if (CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG); if (CMAKE_COMPILER_IS_GNUCXX); append(""-Wno-missing-field-initializers"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); else(); append(""-Wmissing-field-initializers"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); endif(); endif(). if (LLVM_ENABLE_PEDANTIC AND LLVM_COMPILER_IS_GCC_COMPATIBLE); append(""-pedantic"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); append(""-Wno-long-long"" CMAKE_C_FLAGS CMAKE_CXX_FLAGS); endif(). add_flag_if_supported(""-Wcovered-switch-default"" COVERED_SWITCH_DEFAULT_FLAG); append_if(USE_NO_UNINITIALIZED ""-Wno-uninitialized"" CMAKE_CXX_FLAGS); append_if(USE_NO_MAYBE_UNINITIALIZED ""-Wno-maybe-uninitialized"" CMAKE_CXX_FLAGS). # Check if -Wnon-virtual-dtor warns even though the class is marked final.; # If it does, don't add it. So it won't be ",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:15856,Testability,test,tests,15856,"RTIES FOLDER ""Cling libraries""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_library). macro(add_cling_executable name); add_llvm_executable( ${name} ${ARGN} ); set_target_properties(${name} PROPERTIES FOLDER ""Cling executables""); set_cling_windows_version_resource_properties(${name}); endmacro(add_cling_executable). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/cling include/cling-c; DESTINATION include; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; PATTERN "".svn"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/cling; DESTINATION include; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; PATTERN ""*.modulemap""; ); endif(). add_definitions( -D_GNU_SOURCE -DCLING_VERSION=${CLING_VERSION}). option(CLING_INCLUDE_TESTS; ""Generate build targets for the Cling unit tests.""; ${LLVM_INCLUDE_TESTS}). if (NOT WIN32); set(cling_path_delim "":""); else(); set(cling_path_delim "";""); endif(). if( CLING_INCLUDE_TESTS ); set(cling_include_deflt ${CMAKE_INSTALL_PREFIX}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARG",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:17011,Testability,test,test,17011,"DE_TESTS ); set(cling_include_deflt ${CMAKE_INSTALL_PREFIX}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARGET clang-headers); list(APPEND LLVM_COMMON_DEPENDS clang-headers); endif(). add_subdirectory(include/cling/Interpreter); add_subdirectory(lib). if( CLING_INCLUDE_TESTS ); add_subdirectory(test). if(CLING_BUILT_STANDALONE); # Add a global check rule now that all subdirectories have been traversed; # and we know the total set of lit testsuites.; get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES); get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS); get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS); get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS); add_lit_target(check-all; ""Running all regression tests""; ${LLVM_LIT_TESTSUITES}; PARAMS ${LLVM_LIT_PARAMS}; DEPENDS ${LLVM_LIT_DEPENDS}; ARGS ${LLVM_LIT_EXTRA_ARGS}; ); endif(); endif(). add_subdirectory(tools). option(CLING_INCLUDE_DOCS ""Generate build targets for the Cling docs.""; ${LLVM_INCLUDE_DOCS}); if( CLING_INCLUDE_DOCS ); add_subdirectory(docs); endif(). if(EXISTS ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); file(REMOVE ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); endif(). if(CLING_ORDER_FILE STREQUAL ""${CMAKE_CURRENT_BINARY_DIR}/cling.ord",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:17156,Testability,test,testsuites,17156,"ude; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARGET clang-headers); list(APPEND LLVM_COMMON_DEPENDS clang-headers); endif(). add_subdirectory(include/cling/Interpreter); add_subdirectory(lib). if( CLING_INCLUDE_TESTS ); add_subdirectory(test). if(CLING_BUILT_STANDALONE); # Add a global check rule now that all subdirectories have been traversed; # and we know the total set of lit testsuites.; get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES); get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS); get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS); get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS); add_lit_target(check-all; ""Running all regression tests""; ${LLVM_LIT_TESTSUITES}; PARAMS ${LLVM_LIT_PARAMS}; DEPENDS ${LLVM_LIT_DEPENDS}; ARGS ${LLVM_LIT_EXTRA_ARGS}; ); endif(); endif(). add_subdirectory(tools). option(CLING_INCLUDE_DOCS ""Generate build targets for the Cling docs.""; ${LLVM_INCLUDE_DOCS}); if( CLING_INCLUDE_DOCS ); add_subdirectory(docs); endif(). if(EXISTS ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); file(REMOVE ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); endif(). if(CLING_ORDER_FILE STREQUAL ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); unset(CLING_ORDER_FILE CACHE); unset(CLING_ORDER_FILE); endif(). set(CLING_ORDER_FILE """" CACHE",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:17489,Testability,test,tests,17489,"ted lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARGET clang-headers); list(APPEND LLVM_COMMON_DEPENDS clang-headers); endif(). add_subdirectory(include/cling/Interpreter); add_subdirectory(lib). if( CLING_INCLUDE_TESTS ); add_subdirectory(test). if(CLING_BUILT_STANDALONE); # Add a global check rule now that all subdirectories have been traversed; # and we know the total set of lit testsuites.; get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES); get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS); get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS); get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS); add_lit_target(check-all; ""Running all regression tests""; ${LLVM_LIT_TESTSUITES}; PARAMS ${LLVM_LIT_PARAMS}; DEPENDS ${LLVM_LIT_DEPENDS}; ARGS ${LLVM_LIT_EXTRA_ARGS}; ); endif(); endif(). add_subdirectory(tools). option(CLING_INCLUDE_DOCS ""Generate build targets for the Cling docs.""; ${LLVM_INCLUDE_DOCS}); if( CLING_INCLUDE_DOCS ); add_subdirectory(docs); endif(). if(EXISTS ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); file(REMOVE ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); endif(). if(CLING_ORDER_FILE STREQUAL ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); unset(CLING_ORDER_FILE CACHE); unset(CLING_ORDER_FILE); endif(). set(CLING_ORDER_FILE """" CACHE FILEPATH; ""Order file to use when compiling cling in order to improve startup time.""). add_subdirectory(cmake/modules); ",MatchSource.DOCS,interpreter/cling/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CREDITS.txt:1285,Integrability,interface,interfaces,1285,"This file lists the most important contributors to the Cling interpreter.; It is sorted by name and formatted to allow easy grepping and beautification; by scripts. The fields are: name (N), email (E), description (D). Please let us know if you are not on this list while you should be, or if; something in your entry is incorrect. -------------------. N: Jerome Beclin; E: jerome.beclin@cern.ch; D: Contributions to unload verification. N: Bertrand Bellenot; E: bertrand.bellenot@cern.ch; D: Windows ports: MS Visual Studio; cygwin.; D: File system interaction: search paths, shared libraries. N: Philippe Canal; E: pcanal@fnal.gov; D: Core developer of cling. N: Cristina Cristescu; E: bianca-cristina.cristescu@cern.ch; D: Output redirection.; D: Contributions to unloading. N: Baozeng Ding; E: sploving1@gmail.com; D: Null-pointer deref protection. N: Lukasz Janyst; E: ljanyst@cern.ch; D: Initial prototype of cling. N: Javier Lopez-Gomez; E: javier.lopez.gomez@cern.ch; D: Support for entity redefinition (shadowing), general improvements, bug fixes. N: Roman Zulak (aka Frederich Munch); E: machtyrtle@gmail.com; D: Various contributions. N: Axel Naumann; E: axel@cern.ch; D: Core developer of cling. N: Timur Pocheptsov; E: Timur.Pocheptsov@cern.ch; D: .class, .typedef prompt interfaces. N: Fons Rademakers; E: Fons.Rademakers@cern.ch; D: Contributions to libc++ support. N: Paul Russo; E: russo@fnal.gov; D: Lookup routines.; D: Function call interfaces. N: Vassil Vassilev; E: vvasilev@cern.ch; D: Main developer of cling. N: Simeon Ehrig; E: s.ehrig@hzdr.de; D: cling CUDA runtime support; ",MatchSource.DOCS,interpreter/cling/CREDITS.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CREDITS.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CREDITS.txt:1425,Integrability,rout,routines,1425,"This file lists the most important contributors to the Cling interpreter.; It is sorted by name and formatted to allow easy grepping and beautification; by scripts. The fields are: name (N), email (E), description (D). Please let us know if you are not on this list while you should be, or if; something in your entry is incorrect. -------------------. N: Jerome Beclin; E: jerome.beclin@cern.ch; D: Contributions to unload verification. N: Bertrand Bellenot; E: bertrand.bellenot@cern.ch; D: Windows ports: MS Visual Studio; cygwin.; D: File system interaction: search paths, shared libraries. N: Philippe Canal; E: pcanal@fnal.gov; D: Core developer of cling. N: Cristina Cristescu; E: bianca-cristina.cristescu@cern.ch; D: Output redirection.; D: Contributions to unloading. N: Baozeng Ding; E: sploving1@gmail.com; D: Null-pointer deref protection. N: Lukasz Janyst; E: ljanyst@cern.ch; D: Initial prototype of cling. N: Javier Lopez-Gomez; E: javier.lopez.gomez@cern.ch; D: Support for entity redefinition (shadowing), general improvements, bug fixes. N: Roman Zulak (aka Frederich Munch); E: machtyrtle@gmail.com; D: Various contributions. N: Axel Naumann; E: axel@cern.ch; D: Core developer of cling. N: Timur Pocheptsov; E: Timur.Pocheptsov@cern.ch; D: .class, .typedef prompt interfaces. N: Fons Rademakers; E: Fons.Rademakers@cern.ch; D: Contributions to libc++ support. N: Paul Russo; E: russo@fnal.gov; D: Lookup routines.; D: Function call interfaces. N: Vassil Vassilev; E: vvasilev@cern.ch; D: Main developer of cling. N: Simeon Ehrig; E: s.ehrig@hzdr.de; D: cling CUDA runtime support; ",MatchSource.DOCS,interpreter/cling/CREDITS.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CREDITS.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CREDITS.txt:1453,Integrability,interface,interfaces,1453,"This file lists the most important contributors to the Cling interpreter.; It is sorted by name and formatted to allow easy grepping and beautification; by scripts. The fields are: name (N), email (E), description (D). Please let us know if you are not on this list while you should be, or if; something in your entry is incorrect. -------------------. N: Jerome Beclin; E: jerome.beclin@cern.ch; D: Contributions to unload verification. N: Bertrand Bellenot; E: bertrand.bellenot@cern.ch; D: Windows ports: MS Visual Studio; cygwin.; D: File system interaction: search paths, shared libraries. N: Philippe Canal; E: pcanal@fnal.gov; D: Core developer of cling. N: Cristina Cristescu; E: bianca-cristina.cristescu@cern.ch; D: Output redirection.; D: Contributions to unloading. N: Baozeng Ding; E: sploving1@gmail.com; D: Null-pointer deref protection. N: Lukasz Janyst; E: ljanyst@cern.ch; D: Initial prototype of cling. N: Javier Lopez-Gomez; E: javier.lopez.gomez@cern.ch; D: Support for entity redefinition (shadowing), general improvements, bug fixes. N: Roman Zulak (aka Frederich Munch); E: machtyrtle@gmail.com; D: Various contributions. N: Axel Naumann; E: axel@cern.ch; D: Core developer of cling. N: Timur Pocheptsov; E: Timur.Pocheptsov@cern.ch; D: .class, .typedef prompt interfaces. N: Fons Rademakers; E: Fons.Rademakers@cern.ch; D: Contributions to libc++ support. N: Paul Russo; E: russo@fnal.gov; D: Lookup routines.; D: Function call interfaces. N: Vassil Vassilev; E: vvasilev@cern.ch; D: Main developer of cling. N: Simeon Ehrig; E: s.ehrig@hzdr.de; D: cling CUDA runtime support; ",MatchSource.DOCS,interpreter/cling/CREDITS.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CREDITS.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:2603,Deployability,release,released,2603,"t specific; prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE; SOFTWARE. ==============================================================================; LGPL; ==============================================================================; GNU LESSER GENERAL PUBLIC LICENSE; Version 2.1, February 1999. Copyright (C) 1991, 1999 Free Software Foundation, Inc.; 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. [This is the first released version of the Lesser GPL. It also counts; as the successor of the GNU Library Public License, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to ",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:9588,Deployability,install,installation,9588,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:18163,Deployability,install,installs,18163,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:676,Energy Efficiency,charge,charge,676,"==============================================================================; Cling Release License; ==============================================================================; Copyright (c) 2007-2014 by the Authors.; All rights reserved. Developed by:. The ROOT Team; CERN and Fermilab; http://cern.ch/cling. You may license this software under one of the following licenses, marked; ""UI/NCSAOSL"" and ""LGPL"". ==============================================================================; UI/NCSAOSL; ==============================================================================; University of Illinois/NCSA; Open Source License. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies; of the Software, and to permit persons to whom the Software is furnished to do; so, subject to the following conditions:. * Redistributions of source code must retain the above copyright notice,; this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice,; this list of conditions and the following disclaimers in the; documentation and/or other materials provided with the distribution. * Neither the names of the LLVM Team, University of Illinois at; Urbana-Champaign, nor the names of its contributors may be used to; endorse or promote products derived from this Software without specific; prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:3651,Energy Efficiency,charge,charge,3651,"e, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:10499,Energy Efficiency,charge,charge,10499," control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still ope",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:11142,Energy Efficiency,charge,charge,11142,"ary's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be re",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:18435,Energy Efficiency,charge,charge,18435," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:9510,Integrability,interface,interface,9510,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:9999,Integrability,depend,depends,9999,"der; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:18213,Integrability,interface,interface-compatible,18213,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:23667,Integrability,interface,interfaces,23667," the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation. 14. If y",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:12526,Modifiability,extend,extend,12526,"at,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote; it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Library. In addition, mere aggregation of another work not based on the Library; with the Library (or with a work based on the Library) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public; License instead of this License to a given copy of the Library. To do; this, you must alter all the notices that refer to this License, so; that they refer to the ordinary GNU General Public License, version 2,; instead of to this License. (If a newer version than version 2 of the; ordinary GN",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:11573,Performance,perform,performs,11573,"; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:18468,Performance,perform,performing,18468," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:5240,Security,threat,threat,5240,"you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others. Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certain libraries in order to permit linking those; libraries into non-free programs. When a program is linked with a library, whether statically or using; a shared library, the combination of the two is legally speaking a; combined work, a derivative of the original library. The ordinary; General Public License therefore permits such linking only if the;",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:8466,Security,authoriz,authorized,8466,"le, permission to use the GNU C Library in; non-free programs enables many more people to use the whole GNU; operating system, as well as its variant, the GNU/Linux operating; system. Although the Lesser General Public License is Less protective of the; users' freedom, it does ensure that the user of a program that is; linked with the Library has the freedom and the wherewithal to run; that program using a modified version of the Library. The precise terms and conditions for copying, distribution and; modification follow. Pay close attention to the difference between a; ""work based on the library"" and a ""work that uses the library"". The; former contains code derived from the library, whereas the latter must; be combined with the library in order to run. GNU LESSER GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License Agreement applies to any software library or other; program which contains a notice placed by the copyright holder or; other authorized party saying it may be distributed under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code fo",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:14364,Security,access,access,14364,"eral Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices. Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:14430,Security,access,access,14430,"eral Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices. Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:15771,Security,access,accessors,15771," Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the source code is not.; Whether this is true is especially significant if the work can be; linked without the Library, or if the work is itself a library. The; threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data; structure layouts and accessors, and small macros and small inline; functions (ten lines or less in length), then the use of the object; file is unrestricted, regardless of whether it is legally a derivative; work. (Executables containing this object code plus portions of the; Library will still fall under Section 6.). Otherwise, if the work is a derivative of the Library, you may; distribute the object code for the work under the terms of Section 6.; Any executables containing that work also fall under Section 6,; whether or not they are linked directly with the Library itself. 6. As an exception to the Sections above, you may also combine or; link a ""work that uses the Library"" with the Library to produce a; work containing portions of the Library, and distribute that work; under terms of your choice, provided that the terms permit; modification of the work for the customer's own use and reverse; engineering for debugging such modifications. You must give prominent notice with each copy of the work that the; Library is used in it and that the Library and its",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:18549,Security,access,access,18549,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute. 7. You may place library",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:18607,Security,access,access,18607,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute. 7. You may place library",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:23007,Security,integrity,integrity,23007,"der, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Library at all. For example, if a patent; license would not permit royalty-free redistribution of the Library by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorpora",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:4889,Usability,clear,clear,4889,"otect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others. Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certa",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:23472,Usability,clear,clear,23472,"tisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT:25075,Usability,guid,guided,25075,"time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free; programs whose distribution conditions are incompatible with these,; write to the author to ask for permission. For software which is; copyrighted by the Free Software Foundation, write to the Free; Software Foundation; we sometimes make exceptions for this. Our; decision will be guided by the two goals of preserving the free status; of all derivatives of our free software and of promoting the sharing; and reuse of software generally. NO WARRANTY. 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO; WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.; EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR; OTHER PARTIES PROVIDE THE LIBRARY ""AS IS"" WITHOUT WARRANTY OF ANY; KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE; LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME; THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN; WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY; AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES A",MatchSource.DOCS,interpreter/cling/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/CMakeLists.txt:1474,Deployability,install,install,1474,"; if (DOXYGEN_FOUND); if (LLVM_ENABLE_DOXYGEN); set(abs_srcdir ${CMAKE_CURRENT_SOURCE_DIR}); set(abs_builddir ${CMAKE_CURRENT_BINARY_DIR}). if (HAVE_DOT); set(DOT ${LLVM_PATH_DOT}); endif(). if (LLVM_DOXYGEN_EXTERNAL_SEARCH); set(enable_searchengine ""YES""); set(searchengine_url ""${LLVM_DOXYGEN_SEARCHENGINE_URL}""); set(enable_server_based_search ""YES""); set(enable_external_search ""YES""); set(extra_search_mappings ""${LLVM_DOXYGEN_SEARCH_MAPPINGS}""); else(); set(enable_searchengine ""NO""); set(searchengine_url """"); set(enable_server_based_search ""NO""); set(enable_external_search ""NO""); set(extra_search_mappings """"); endif(). configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg @ONLY). set(abs_top_srcdir); set(abs_top_builddir); set(DOT); set(enable_searchengine); set(searchengine_url); set(enable_server_based_search); set(enable_external_search); set(extra_search_mappings); set(cling_doxygen_generate_qhp); set(cling_doxygen_qch_filename); set(cling_doxygen_qhp_namespace); set(cling_doxygen_qhelpgenerator_path); set(cling_doxygen_qhp_cust_filter_name); set(cling_doxygen_qhp_cust_filter_attrs). add_custom_target(doxygen-cling; COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating cling doxygen documentation."" VERBATIM). if (LLVM_BUILD_DOCS); add_dependencies(doxygen doxygen-cling); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html; DESTINATION docs/html); endif(); endif(); endif(). if (LLVM_ENABLE_SPHINX); include(AddSphinxTarget); if (SPHINX_FOUND); if (${SPHINX_OUTPUT_HTML}); add_sphinx_target(html cling); endif(); endif(); endif(); ",MatchSource.DOCS,interpreter/cling/docs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1421,Integrability,depend,depends,1421,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:926,Modifiability,config,config,926,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:968,Modifiability,config,config,968,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:753,Testability,test,tests,753,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1416,Testability,test,test-depends,1416,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1585,Testability,test,tests,1585,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1772,Testability,test,tests,1772,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1819,Testability,test,test,1819,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1849,Testability,test,test,1849,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1879,Testability,test,test,1879,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1926,Testability,test,test,1926,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt:1956,Testability,test,tests,1956,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if (CMAKE_CFG_INTDIR STREQUAL "".""); set(LLVM_BUILD_MODE "".""); else (); set(LLVM_BUILD_MODE ""%(build_mode)s""); endif (). # Needed for '%shlibext'; set(TARGET_SHLIBEXT ""${CMAKE_SHARED_LIBRARY_SUFFIX}""). configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). option(CLING_TEST_USE_VG ""Run Cling tests under Valgrind"" OFF); if(CLING_TEST_USE_VG); set(CLING_TEST_EXTRA_ARGS ${CLING_TEST_EXTRA_ARGS} ""--vg""); endif (). list(APPEND CLING_TEST_DEPS cling); if (TARGET llvm-config); list(APPEND CLING_TEST_DEPS llvm-config); endif(); if (TARGET FileCheck); list(APPEND CLING_TEST_DEPS FileCheck); endif(); if (TARGET opt); list(APPEND CLING_TEST_DEPS opt); endif(); if (TARGET not); list(APPEND CLING_TEST_DEPS not); endif(); if (TARGET count); list(APPEND CLING_TEST_DEPS count); endif(); if (TARGET clang); list(APPEND CLING_TEST_DEPS clang); endif(). set(CLING_TEST_PARAMS; cling_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg; ). add_custom_target(cling-test-depends DEPENDS clingDemoPlugin ${CLING_TEST_DEPS}). set(LLVM_LIT_OUTPUT_DIR ""${LLVM_BINARY_DIR}/bin""); add_lit_testsuite(check-cling ""Running the Cling regression tests""; ${CMAKE_CURRENT_BINARY_DIR}; PARAMS ${CLING_TEST_PARAMS}; DEPENDS ${CLING_TEST_DEPS}; ARGS ${CLING_TEST_EXTRA_ARGS}; ); set_target_properties(check-cling PROPERTIES FOLDER ""Cling tests""). # Add a legacy target spelling: cling-test; add_custom_target(cling-test); add_dependencies(cling-test check-cling); set_target_properties(cling-test PROPERTIES FOLDER ""Cling tests""); ",MatchSource.DOCS,interpreter/cling/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/CMakeLists.txt:627,Modifiability,plugin,plugins,627,#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../lib/UserInterface/textinput; OR CLING_INCLUDE_TESTS); add_subdirectory(driver); add_subdirectory(Jupyter); add_subdirectory(libcling); add_subdirectory(demo); endif(). add_subdirectory(plugins); ,MatchSource.DOCS,interpreter/cling/tools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt:1297,Deployability,install,install,1297,"t(cling_cmake_builddir ""${CLING_BINARY_DIR}/${CLING_INSTALL_PACKAGE_DIR}""). # Keep this in sync with llvm/cmake/CMakeLists.txt!; set(LLVM_INSTALL_PACKAGE_DIR lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm); set(llvm_cmake_builddir ""${LLVM_BINARY_DIR}/${LLVM_INSTALL_PACKAGE_DIR}""). get_property(CLING_EXPORTS GLOBAL PROPERTY CLING_EXPORTS); export(TARGETS ${CLING_EXPORTS} FILE ${cling_cmake_builddir}/ClingTargets.cmake). # Generate ClingConfig.cmake for the build tree.; set(CLING_CONFIG_CMAKE_DIR ""${cling_cmake_builddir}""); set(CLING_CONFIG_CLANG_CMAKE_DIR ""${clang_cmake_builddir}""); set(CLING_CONFIG_EXPORTS_FILE ""${cling_cmake_builddir}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""${CLING_SOURCE_DIR}/include""; ""${CLING_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${cling_cmake_builddir}/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_LLVM_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). # Generate ClingConfig.cmake for the install tree.; set(CLING_CONFIG_CODE ""; # Compute the installation prefix from this LLVMConfig.cmake file location.; get_filename_component(CLING_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)""); # Construct the proper number of get_filename_component(... PATH); # calls to compute the installation prefix.; string(REGEX REPLACE ""/"" "";"" _count ""${CLING_INSTALL_PACKAGE_DIR}""); foreach(p ${_count}); set(CLING_CONFIG_CODE ""${CLING_CONFIG_CODE}; get_filename_component(CLING_INSTALL_PREFIX \""\${CLING_INSTALL_PREFIX}\"" PATH)""); endforeach(p); set(CLING_CONFIG_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${CLING_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_LLVM_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_EXPORTS_FILE ""\${CLING_CMAKE_DIR}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""\${CLING_INSTALL_PREFIX}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; @ONLY); set",MatchSource.DOCS,interpreter/cling/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt:1351,Deployability,install,installation,1351,"TALL_PACKAGE_DIR}""). # Keep this in sync with llvm/cmake/CMakeLists.txt!; set(LLVM_INSTALL_PACKAGE_DIR lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm); set(llvm_cmake_builddir ""${LLVM_BINARY_DIR}/${LLVM_INSTALL_PACKAGE_DIR}""). get_property(CLING_EXPORTS GLOBAL PROPERTY CLING_EXPORTS); export(TARGETS ${CLING_EXPORTS} FILE ${cling_cmake_builddir}/ClingTargets.cmake). # Generate ClingConfig.cmake for the build tree.; set(CLING_CONFIG_CMAKE_DIR ""${cling_cmake_builddir}""); set(CLING_CONFIG_CLANG_CMAKE_DIR ""${clang_cmake_builddir}""); set(CLING_CONFIG_EXPORTS_FILE ""${cling_cmake_builddir}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""${CLING_SOURCE_DIR}/include""; ""${CLING_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${cling_cmake_builddir}/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_LLVM_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). # Generate ClingConfig.cmake for the install tree.; set(CLING_CONFIG_CODE ""; # Compute the installation prefix from this LLVMConfig.cmake file location.; get_filename_component(CLING_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)""); # Construct the proper number of get_filename_component(... PATH); # calls to compute the installation prefix.; string(REGEX REPLACE ""/"" "";"" _count ""${CLING_INSTALL_PACKAGE_DIR}""); foreach(p ${_count}); set(CLING_CONFIG_CODE ""${CLING_CONFIG_CODE}; get_filename_component(CLING_INSTALL_PREFIX \""\${CLING_INSTALL_PREFIX}\"" PATH)""); endforeach(p); set(CLING_CONFIG_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${CLING_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_LLVM_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_EXPORTS_FILE ""\${CLING_CMAKE_DIR}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""\${CLING_INSTALL_PREFIX}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CODE); set(CLING_CONFIG_CMAKE_DIR); set(",MatchSource.DOCS,interpreter/cling/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt:1589,Deployability,install,installation,1589,"NG_EXPORTS GLOBAL PROPERTY CLING_EXPORTS); export(TARGETS ${CLING_EXPORTS} FILE ${cling_cmake_builddir}/ClingTargets.cmake). # Generate ClingConfig.cmake for the build tree.; set(CLING_CONFIG_CMAKE_DIR ""${cling_cmake_builddir}""); set(CLING_CONFIG_CLANG_CMAKE_DIR ""${clang_cmake_builddir}""); set(CLING_CONFIG_EXPORTS_FILE ""${cling_cmake_builddir}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""${CLING_SOURCE_DIR}/include""; ""${CLING_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${cling_cmake_builddir}/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_LLVM_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). # Generate ClingConfig.cmake for the install tree.; set(CLING_CONFIG_CODE ""; # Compute the installation prefix from this LLVMConfig.cmake file location.; get_filename_component(CLING_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)""); # Construct the proper number of get_filename_component(... PATH); # calls to compute the installation prefix.; string(REGEX REPLACE ""/"" "";"" _count ""${CLING_INSTALL_PACKAGE_DIR}""); foreach(p ${_count}); set(CLING_CONFIG_CODE ""${CLING_CONFIG_CODE}; get_filename_component(CLING_INSTALL_PREFIX \""\${CLING_INSTALL_PREFIX}\"" PATH)""); endforeach(p); set(CLING_CONFIG_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${CLING_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_LLVM_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_EXPORTS_FILE ""\${CLING_CMAKE_DIR}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""\${CLING_INSTALL_PREFIX}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CODE); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(EXPORT ClingTargets DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig",MatchSource.DOCS,interpreter/cling/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt:2417,Deployability,install,install,2417,"g_cmake_builddir}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""${CLING_SOURCE_DIR}/include""; ""${CLING_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${cling_cmake_builddir}/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_LLVM_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). # Generate ClingConfig.cmake for the install tree.; set(CLING_CONFIG_CODE ""; # Compute the installation prefix from this LLVMConfig.cmake file location.; get_filename_component(CLING_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)""); # Construct the proper number of get_filename_component(... PATH); # calls to compute the installation prefix.; string(REGEX REPLACE ""/"" "";"" _count ""${CLING_INSTALL_PACKAGE_DIR}""); foreach(p ${_count}); set(CLING_CONFIG_CODE ""${CLING_CONFIG_CODE}; get_filename_component(CLING_INSTALL_PREFIX \""\${CLING_INSTALL_PREFIX}\"" PATH)""); endforeach(p); set(CLING_CONFIG_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${CLING_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_LLVM_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_EXPORTS_FILE ""\${CLING_CMAKE_DIR}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""\${CLING_INSTALL_PREFIX}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CODE); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(EXPORT ClingTargets DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). if(NOT LLVM_ENABLE_IDE); # Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS; add_custom_target(cling-cmake-exports); add_llvm_install_targets(install-cling-cmake-exports; COMPONENT cling-cmake-exports); endif(); endif(); ",MatchSource.DOCS,interpreter/cling/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt:2519,Deployability,install,install,2519,"g_cmake_builddir}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""${CLING_SOURCE_DIR}/include""; ""${CLING_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${cling_cmake_builddir}/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_LLVM_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). # Generate ClingConfig.cmake for the install tree.; set(CLING_CONFIG_CODE ""; # Compute the installation prefix from this LLVMConfig.cmake file location.; get_filename_component(CLING_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)""); # Construct the proper number of get_filename_component(... PATH); # calls to compute the installation prefix.; string(REGEX REPLACE ""/"" "";"" _count ""${CLING_INSTALL_PACKAGE_DIR}""); foreach(p ${_count}); set(CLING_CONFIG_CODE ""${CLING_CONFIG_CODE}; get_filename_component(CLING_INSTALL_PREFIX \""\${CLING_INSTALL_PREFIX}\"" PATH)""); endforeach(p); set(CLING_CONFIG_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${CLING_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_LLVM_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_EXPORTS_FILE ""\${CLING_CMAKE_DIR}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""\${CLING_INSTALL_PREFIX}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CODE); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(EXPORT ClingTargets DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). if(NOT LLVM_ENABLE_IDE); # Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS; add_custom_target(cling-cmake-exports); add_llvm_install_targets(install-cling-cmake-exports; COMPONENT cling-cmake-exports); endif(); endif(); ",MatchSource.DOCS,interpreter/cling/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt:2832,Deployability,install,install-cling-cmake-exports,2832,"g_cmake_builddir}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""${CLING_SOURCE_DIR}/include""; ""${CLING_BINARY_DIR}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${cling_cmake_builddir}/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_LLVM_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). # Generate ClingConfig.cmake for the install tree.; set(CLING_CONFIG_CODE ""; # Compute the installation prefix from this LLVMConfig.cmake file location.; get_filename_component(CLING_INSTALL_PREFIX \""\${CMAKE_CURRENT_LIST_FILE}\"" PATH)""); # Construct the proper number of get_filename_component(... PATH); # calls to compute the installation prefix.; string(REGEX REPLACE ""/"" "";"" _count ""${CLING_INSTALL_PACKAGE_DIR}""); foreach(p ${_count}); set(CLING_CONFIG_CODE ""${CLING_CONFIG_CODE}; get_filename_component(CLING_INSTALL_PREFIX \""\${CLING_INSTALL_PREFIX}\"" PATH)""); endforeach(p); set(CLING_CONFIG_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${CLING_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_LLVM_CMAKE_DIR ""\${CLING_INSTALL_PREFIX}/${LLVM_INSTALL_PACKAGE_DIR}""); set(CLING_CONFIG_EXPORTS_FILE ""\${CLING_CMAKE_DIR}/ClingTargets.cmake""); set(CLING_CONFIG_INCLUDE_DIRS; ""\${CLING_INSTALL_PREFIX}/include""; ); configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/ClingConfig.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; @ONLY); set(CLING_CONFIG_CODE); set(CLING_CONFIG_CMAKE_DIR); set(CLING_CONFIG_EXPORTS_FILE). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(EXPORT ClingTargets DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). install(FILES; ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ClingConfig.cmake; DESTINATION ${CLING_INSTALL_PACKAGE_DIR}; COMPONENT cling-cmake-exports). if(NOT LLVM_ENABLE_IDE); # Add a dummy target so this can be used with LLVM_DISTRIBUTION_COMPONENTS; add_custom_target(cling-cmake-exports); add_llvm_install_targets(install-cling-cmake-exports; COMPONENT cling-cmake-exports); endif(); endif(); ",MatchSource.DOCS,interpreter/cling/cmake/modules/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/cmake/modules/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:3747,Availability,echo,echo,3747,"ring(REGEX REPLACE ""\\n$"" """" strVal ""${strVal}""); SET(${varName} ${strVal} PARENT_SCOPE); endfunction(). if(NOT CLING_CXX_PATH); # Remove absolute path from CMAKE_CXX_COMPILER; get_filename_component(_name ${CMAKE_CXX_COMPILER} NAME); get_filename_component(_path ${CMAKE_CXX_COMPILER} PATH); # This should probably be more general...but how?; if(_name STREQUAL ""ccache"" OR _name STREQUAL ""distcc""); separate_arguments(_arg_list UNIX_COMMAND ""${CMAKE_CXX_COMPILER_ARG1}""); if (_arg_list); list(GET _arg_list 0 _name); string(STRIP ""${_name}"" _name); if (APPLE); execute_process(COMMAND xcrun -f ${_name}; OUTPUT_VARIABLE CLING_CXX_FOUND; OUTPUT_STRIP_TRAILING_WHITESPACE); stripNewLine(""${CLING_CXX_FOUND}"" CLING_CXX_FOUND); else(); find_program(_cling_cxx_path ""${_name}""); execute_process(COMMAND ${_cling_cxx_path} -xc++ -E -v /dev/null; OUTPUT_QUIET ERROR_VARIABLE _cling_cxx_path). if (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""COLLECT_GCC=""; OUTPUT_VARIABLE _cling_cxx_path); string(REPLACE ""COLLECT_GCC="" """" _cling_cxx_path ""${_cling_cxx_path}""). elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang""); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""/${_name}.*\"" -cc1""; OUTPUT_VARIABLE _cling_clng_path). if(NOT _cling_clng_path); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""/clang.*\"" -cc1""; OUTPUT_VARIABLE _cling_clng_path); endif(). separate_arguments(_arg_list UNIX_COMMAND ""${_cling_clng_path}""); if (_arg_list); list(GET _arg_list 0 _cling_cxx_path); endif(); endif(). stripNewLine(""${_cling_cxx_path}"" _cling_cxx_path); set(CLING_CXX_FOUND ""${_cling_cxx_path}""); endif(). if (NOT EXISTS ""${CLING_CXX_FOUND}""); find_program(CLING_CXX_FOUND ""${_name}""); endif(); else(); set(CLING_CXX_FOUND """"); set(_name """"); endif(). if (EXISTS ${CLING_CXX_FOUND}); set(CLING_CXX_PATH ${CLING_CXX_FOUND}); get_filename_component(_name ${CLING_CXX_PATH} NAME); get_filename_component(_path ${CLING_CXX_PATH} PA",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:3980,Availability,echo,echo,3980," get_filename_component(_name ${CMAKE_CXX_COMPILER} NAME); get_filename_component(_path ${CMAKE_CXX_COMPILER} PATH); # This should probably be more general...but how?; if(_name STREQUAL ""ccache"" OR _name STREQUAL ""distcc""); separate_arguments(_arg_list UNIX_COMMAND ""${CMAKE_CXX_COMPILER_ARG1}""); if (_arg_list); list(GET _arg_list 0 _name); string(STRIP ""${_name}"" _name); if (APPLE); execute_process(COMMAND xcrun -f ${_name}; OUTPUT_VARIABLE CLING_CXX_FOUND; OUTPUT_STRIP_TRAILING_WHITESPACE); stripNewLine(""${CLING_CXX_FOUND}"" CLING_CXX_FOUND); else(); find_program(_cling_cxx_path ""${_name}""); execute_process(COMMAND ${_cling_cxx_path} -xc++ -E -v /dev/null; OUTPUT_QUIET ERROR_VARIABLE _cling_cxx_path). if (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""COLLECT_GCC=""; OUTPUT_VARIABLE _cling_cxx_path); string(REPLACE ""COLLECT_GCC="" """" _cling_cxx_path ""${_cling_cxx_path}""). elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang""); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""/${_name}.*\"" -cc1""; OUTPUT_VARIABLE _cling_clng_path). if(NOT _cling_clng_path); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""/clang.*\"" -cc1""; OUTPUT_VARIABLE _cling_clng_path); endif(). separate_arguments(_arg_list UNIX_COMMAND ""${_cling_clng_path}""); if (_arg_list); list(GET _arg_list 0 _cling_cxx_path); endif(); endif(). stripNewLine(""${_cling_cxx_path}"" _cling_cxx_path); set(CLING_CXX_FOUND ""${_cling_cxx_path}""); endif(). if (NOT EXISTS ""${CLING_CXX_FOUND}""); find_program(CLING_CXX_FOUND ""${_name}""); endif(); else(); set(CLING_CXX_FOUND """"); set(_name """"); endif(). if (EXISTS ${CLING_CXX_FOUND}); set(CLING_CXX_PATH ${CLING_CXX_FOUND}); get_filename_component(_name ${CLING_CXX_PATH} NAME); get_filename_component(_path ${CLING_CXX_PATH} PATH); else(); set(CLING_CXX_PATH ""${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}""); if(_name); set(CLING_CXX_RLTV ""${_name}""); endif(); set(_path ""__THISREALLYBETTERNOTBEINPAT",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:4127,Availability,echo,echo,4127,"..but how?; if(_name STREQUAL ""ccache"" OR _name STREQUAL ""distcc""); separate_arguments(_arg_list UNIX_COMMAND ""${CMAKE_CXX_COMPILER_ARG1}""); if (_arg_list); list(GET _arg_list 0 _name); string(STRIP ""${_name}"" _name); if (APPLE); execute_process(COMMAND xcrun -f ${_name}; OUTPUT_VARIABLE CLING_CXX_FOUND; OUTPUT_STRIP_TRAILING_WHITESPACE); stripNewLine(""${CLING_CXX_FOUND}"" CLING_CXX_FOUND); else(); find_program(_cling_cxx_path ""${_name}""); execute_process(COMMAND ${_cling_cxx_path} -xc++ -E -v /dev/null; OUTPUT_QUIET ERROR_VARIABLE _cling_cxx_path). if (CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""COLLECT_GCC=""; OUTPUT_VARIABLE _cling_cxx_path); string(REPLACE ""COLLECT_GCC="" """" _cling_cxx_path ""${_cling_cxx_path}""). elseif(CMAKE_CXX_COMPILER_ID MATCHES ""Clang""); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""/${_name}.*\"" -cc1""; OUTPUT_VARIABLE _cling_clng_path). if(NOT _cling_clng_path); execute_process(; COMMAND echo ${_cling_cxx_path}; COMMAND grep ""/clang.*\"" -cc1""; OUTPUT_VARIABLE _cling_clng_path); endif(). separate_arguments(_arg_list UNIX_COMMAND ""${_cling_clng_path}""); if (_arg_list); list(GET _arg_list 0 _cling_cxx_path); endif(); endif(). stripNewLine(""${_cling_cxx_path}"" _cling_cxx_path); set(CLING_CXX_FOUND ""${_cling_cxx_path}""); endif(). if (NOT EXISTS ""${CLING_CXX_FOUND}""); find_program(CLING_CXX_FOUND ""${_name}""); endif(); else(); set(CLING_CXX_FOUND """"); set(_name """"); endif(). if (EXISTS ${CLING_CXX_FOUND}); set(CLING_CXX_PATH ${CLING_CXX_FOUND}); get_filename_component(_name ${CLING_CXX_PATH} NAME); get_filename_component(_path ${CLING_CXX_PATH} PATH); else(); set(CLING_CXX_PATH ""${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}""); if(_name); set(CLING_CXX_RLTV ""${_name}""); endif(); set(_path ""__THISREALLYBETTERNOTBEINPATH_THANKS__""); endif(); else(); # FIXME: In some ccache setups we can have a soft link pointing to ccache; # binary. Eg. /usr/local/gcc -> /usr/bin/ccache. R",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:7581,Availability,echo,echo,7581,"_gcc_toolchain); if (""${cling_gcc_toolchain}"" EQUAL -1); set(CLING_CXX_RLTV ""${CLING_CXX_RLTV} --gcc-toolchain=${gcctoolchain}""); endif(); endif(); elseif (APPLE); set(CLING_CXX_PATH_ARGS ""-isysroot;${CMAKE_OSX_SYSROOT}""); endif(); endif(). if(NOT CLING_CXX_HEADERS); if (CLING_CXX_PATH); execute_process(COMMAND ${CLING_CXX_PATH} ${CLING_CXX_PATH_ARGS} -xc++ -E -v /dev/null; OUTPUT_QUIET ERROR_VARIABLE CLING_CXX_HEADERS); set(CLING_CXX_PATH ""${CLING_CXX_PATH} ${CLING_CXX_PATH_ARGS}""); else(); # convert CMAKE_CXX_FLAGS to a list for execute_process; string(REPLACE ""-fdiagnostics-color=always"" """" cling_tmp_arg_list ${CMAKE_CXX_FLAGS}); string(REPLACE ""-fcolor-diagnosics"" """" cling_tmp_arg_list ${cling_tmp_arg_list}); string(REPLACE "" "" "";"" cling_tmp_arg_list ${cling_tmp_arg_list}); execute_process(COMMAND ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1} ${cling_tmp_arg_list} -xc++ -E -v /dev/null; OUTPUT_QUIET ERROR_VARIABLE CLING_CXX_HEADERS); endif(). execute_process(; COMMAND echo ${CLING_CXX_HEADERS}; COMMAND sed -n -e /^.include/,\$\{ -e /^\\\ \\\/.*++/p -e \}; OUTPUT_VARIABLE CLING_CXX_HEADERS). stripNewLine(""${CLING_CXX_HEADERS}"" CLING_CXX_HEADERS); endif(). if (NOT EXISTS ${CLING_CXX_HEADERS}); string(REPLACE ""\n"" "";"" _cxx_inc_paths ${CLING_CXX_HEADERS}); foreach(_cxx_inc_path ${_cxx_inc_paths}); string(STRIP ""${_cxx_inc_path}"" _cxx_inc_path); if (NOT EXISTS ${_cxx_inc_path}); set(_cxx_inc_join """"); break(); endif(); if(_cxx_inc_join); set(_cxx_inc_join ""${_cxx_inc_join}:${_cxx_inc_path}""); else(); set(_cxx_inc_join ""${_cxx_inc_path}""); endif(); endforeach(); set(CLING_CXX_HEADERS ""${_cxx_inc_join}""); if (NOT CLING_CXX_HEADERS); MESSAGE(WARNING ""Cannot determine location of C++ headers for runtime.""); endif(); endif(). MESSAGE(STATUS ""Cling will look for C++ headers in '${CLING_CXX_HEADERS}' at runtime.""). # In modules builds we 'mount' our own stl modulemap for libstdc++. In order to do this,; # we need to know where is ROOT/cling STL.; set_property(GLOBAL PROPE",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:9021,Deployability,update,update,9021,"""""); break(); endif(); if(_cxx_inc_join); set(_cxx_inc_join ""${_cxx_inc_join}:${_cxx_inc_path}""); else(); set(_cxx_inc_join ""${_cxx_inc_path}""); endif(); endforeach(); set(CLING_CXX_HEADERS ""${_cxx_inc_join}""); if (NOT CLING_CXX_HEADERS); MESSAGE(WARNING ""Cannot determine location of C++ headers for runtime.""); endif(); endif(). MESSAGE(STATUS ""Cling will look for C++ headers in '${CLING_CXX_HEADERS}' at runtime.""). # In modules builds we 'mount' our own stl modulemap for libstdc++. In order to do this,; # we need to know where is ROOT/cling STL.; set_property(GLOBAL PROPERTY ROOT_CLING_CXX_HEADERS_LOCATION ""${CLING_CXX_HEADERS}""). # FIXME: We should use file(GENERATE) cmake command.; file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_CXX_INCL \""${CLING_CXX_HEADERS}\""; #define CLING_INCLUDE_PATHS \""${CLING_INCLUDE_PATHS}\""; ""); if (CMAKE_OSX_SYSROOT); # CMAKE_OSX_SYSROOT hardcodes the concrete version of the sdk; # (eg .../MacOSX11.1.sdk) which changes after every update of XCode. We use; # the assumption that in the parent folder there is a symlink MacOSX.sdk; # which points to the current active sdk. This change allows releases; # to work when the users update their sdks.; # FIXME: That is a horrible hack and we should teach CIFactory to pick up; # the SDK directory at runtime, just as we do for the include paths to C++.; set (OSX_SYSROOT_DEFAULT_SDK ${CMAKE_OSX_SYSROOT}); if (${OSX_SYSROOT_DEFAULT_SDK} MATCHES ""MacOSX[.0-9]+\.sdk""); get_filename_component(OSX_SYSROOT_DEFAULT_SDK ${OSX_SYSROOT_DEFAULT_SDK} DIRECTORY); set (OSX_SYSROOT_DEFAULT_SDK ${OSX_SYSROOT_DEFAULT_SDK}/MacOSX.sdk/); endif(). file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_OSX_SYSROOT \""${OSX_SYSROOT_DEFAULT_SDK}\""; ""); endif(); if (CLING_CXX_PATH); MESSAGE(STATUS ""And if not found, will invoke: '${CLING_CXX_PATH}' for them.""); file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_CXX_PATH \""${CLING_CXX_PATH",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:9181,Deployability,release,releases,9181,"ADERS ""${_cxx_inc_join}""); if (NOT CLING_CXX_HEADERS); MESSAGE(WARNING ""Cannot determine location of C++ headers for runtime.""); endif(); endif(). MESSAGE(STATUS ""Cling will look for C++ headers in '${CLING_CXX_HEADERS}' at runtime.""). # In modules builds we 'mount' our own stl modulemap for libstdc++. In order to do this,; # we need to know where is ROOT/cling STL.; set_property(GLOBAL PROPERTY ROOT_CLING_CXX_HEADERS_LOCATION ""${CLING_CXX_HEADERS}""). # FIXME: We should use file(GENERATE) cmake command.; file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_CXX_INCL \""${CLING_CXX_HEADERS}\""; #define CLING_INCLUDE_PATHS \""${CLING_INCLUDE_PATHS}\""; ""); if (CMAKE_OSX_SYSROOT); # CMAKE_OSX_SYSROOT hardcodes the concrete version of the sdk; # (eg .../MacOSX11.1.sdk) which changes after every update of XCode. We use; # the assumption that in the parent folder there is a symlink MacOSX.sdk; # which points to the current active sdk. This change allows releases; # to work when the users update their sdks.; # FIXME: That is a horrible hack and we should teach CIFactory to pick up; # the SDK directory at runtime, just as we do for the include paths to C++.; set (OSX_SYSROOT_DEFAULT_SDK ${CMAKE_OSX_SYSROOT}); if (${OSX_SYSROOT_DEFAULT_SDK} MATCHES ""MacOSX[.0-9]+\.sdk""); get_filename_component(OSX_SYSROOT_DEFAULT_SDK ${OSX_SYSROOT_DEFAULT_SDK} DIRECTORY); set (OSX_SYSROOT_DEFAULT_SDK ${OSX_SYSROOT_DEFAULT_SDK}/MacOSX.sdk/); endif(). file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_OSX_SYSROOT \""${OSX_SYSROOT_DEFAULT_SDK}\""; ""); endif(); if (CLING_CXX_PATH); MESSAGE(STATUS ""And if not found, will invoke: '${CLING_CXX_PATH}' for them.""); file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_CXX_PATH \""${CLING_CXX_PATH} ${CMAKE_CXX_FLAGS_NO_I} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}\""; ""); endif(); if (CLING_CXX_RLTV); MESSAGE(STATUS ""And then fallback to: '${CLING_CXX_RLTV}'""); file(APPEND",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:9216,Deployability,update,update,9216,"ADERS ""${_cxx_inc_join}""); if (NOT CLING_CXX_HEADERS); MESSAGE(WARNING ""Cannot determine location of C++ headers for runtime.""); endif(); endif(). MESSAGE(STATUS ""Cling will look for C++ headers in '${CLING_CXX_HEADERS}' at runtime.""). # In modules builds we 'mount' our own stl modulemap for libstdc++. In order to do this,; # we need to know where is ROOT/cling STL.; set_property(GLOBAL PROPERTY ROOT_CLING_CXX_HEADERS_LOCATION ""${CLING_CXX_HEADERS}""). # FIXME: We should use file(GENERATE) cmake command.; file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_CXX_INCL \""${CLING_CXX_HEADERS}\""; #define CLING_INCLUDE_PATHS \""${CLING_INCLUDE_PATHS}\""; ""); if (CMAKE_OSX_SYSROOT); # CMAKE_OSX_SYSROOT hardcodes the concrete version of the sdk; # (eg .../MacOSX11.1.sdk) which changes after every update of XCode. We use; # the assumption that in the parent folder there is a symlink MacOSX.sdk; # which points to the current active sdk. This change allows releases; # to work when the users update their sdks.; # FIXME: That is a horrible hack and we should teach CIFactory to pick up; # the SDK directory at runtime, just as we do for the include paths to C++.; set (OSX_SYSROOT_DEFAULT_SDK ${CMAKE_OSX_SYSROOT}); if (${OSX_SYSROOT_DEFAULT_SDK} MATCHES ""MacOSX[.0-9]+\.sdk""); get_filename_component(OSX_SYSROOT_DEFAULT_SDK ${OSX_SYSROOT_DEFAULT_SDK} DIRECTORY); set (OSX_SYSROOT_DEFAULT_SDK ${OSX_SYSROOT_DEFAULT_SDK}/MacOSX.sdk/); endif(). file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_OSX_SYSROOT \""${OSX_SYSROOT_DEFAULT_SDK}\""; ""); endif(); if (CLING_CXX_PATH); MESSAGE(STATUS ""And if not found, will invoke: '${CLING_CXX_PATH}' for them.""); file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_CXX_PATH \""${CLING_CXX_PATH} ${CMAKE_CXX_FLAGS_NO_I} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}\""; ""); endif(); if (CLING_CXX_RLTV); MESSAGE(STATUS ""And then fallback to: '${CLING_CXX_RLTV}'""); file(APPEND",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:11256,Deployability,patch,patched,11256,"V} ${CMAKE_CXX_FLAGS_NO_I} ${CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}}\""; ""); endif(); else(); file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ""; #define CLING_INCLUDE_PATHS \""${CLING_INCLUDE_PATHS}\""; #define CLING_UCRT_VERSION \""$ENV{UCRTVersion}\""; ""); endif(). # Make sure this goes last so so we can pick up any changes that occured; # Also means cling-compiledata.h.in should be edited never cling-compiledata.h. add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h; COMMAND ${CMAKE_COMMAND} -E copy_if_different; ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h; MAIN_DEPENDENCY ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h.in; COMMENT ""Updating cling-compiledata.h""). add_file_dependencies(${CMAKE_CURRENT_SOURCE_DIR}/CIFactory.cpp; ${CMAKE_CURRENT_BINARY_DIR}/cling-compiledata.h). # If LLVM is external, but Clang is builtin, we must use some files; # from patched (builtin) version of LLVM; if ((NOT builtin_llvm) AND builtin_clang); set(FixInclude ""${CMAKE_SOURCE_DIR}/interpreter/llvm-project/llvm/include""). get_property(P SOURCE IncrementalJIT.cpp PROPERTY INCLUDE_DIRECTORIES); list(INSERT P 0 ${FixInclude}); set_property(SOURCE IncrementalJIT.cpp PROPERTY INCLUDE_DIRECTORIES ""${P}""). get_property(P SOURCE IncrementalExecutor.cpp PROPERTY INCLUDE_DIRECTORIES); list(INSERT P 0 ${FixInclude}); set_property(SOURCE IncrementalExecutor.cpp PROPERTY INCLUDE_DIRECTORIES ""${P}""). get_property(P SOURCE Interpreter.cpp PROPERTY INCLUDE_DIRECTORIES); list(INSERT P 0 ${FixInclude}); set_property(SOURCE Interpreter.cpp PROPERTY INCLUDE_DIRECTORIES ""${P}""). get_property(P SOURCE Transaction.cpp PROPERTY INCLUDE_DIRECTORIES); list(INSERT P 0 ${FixInclude}); set_property(SOURCE Transaction.cpp PROPERTY INCLUDE_DIRECTORIES ""${P}""). get_property(P SOURCE TransactionUnloader.cpp PROPERTY INCLUDE_DIRECTORIES); list(INSERT P 0 ${FixInclude}); set_property(SOURCE TransactionUnloader.cpp PROPERTY ",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:853,Integrability,depend,depends,853,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. set(LIBS; clingUtils; clangCodeGen; clangDriver; clangFrontend; clangParse; clangSema; clangAnalysis; clangEdit; clangRewrite; clangRewriteFrontend; clangSerialization; clangAST; clangBasic; clangLex; ). set(LLVM_LINK_COMPONENTS; analysis; core; coroutines; coverage; executionengine; ipo; jitlink; lto; mc; object; option; orcjit; runtimedyld; scalaropts; support; target; transformutils; binaryformat; ${LLVM_TARGETS_TO_BUILD}; ). # clingInterpreter depends on Options.inc to be tablegen-ed; # (target ClangDriverOptions) from in-tree builds.; set(CLING_DEPENDS ClingDriverOptions); if(TARGET ClangDriverOptions); set(CLING_DEPENDS ""${CLING_DEPENDS};ClangDriverOptions""); endif(); # clangSema will make sure all of the dependencies of clingInterpreter are met.; if(TARGET clangSema); set(CLING_DEPENDS ""${CLING_DEPENDS};clangSema""); endif(). add_cling_library(clingInterpreter OBJECT; AutoSynthesizer.cpp; AutoloadCallback.cpp; ASTTransformer.cpp; BackendPasses.cpp; CheckEmptyTransactionTransformer.cpp; CIFactory.cpp; ClangInternalState.cpp; ClingCodeCompleteConsumer.cpp; ClingPragmas.cpp; DeclCollector.cpp; DeclExtractor.cpp; DefinitionShadower.cpp; DeclUnloader.cpp; DeviceKernelInliner.cpp; DynamicLibraryManager.cpp; DynamicLibraryManagerSymbol.cpp; DynamicLookup.cpp; DynamicExprInfo.cpp; Exception.cpp; ExternalInterpreterSource.cpp; ForwardDeclPrinter.cpp; IncrementalCUDADeviceCompiler.cpp; IncrementalExecutor.cpp; IncrementalJIT.cpp; IncrementalParser.cpp; Interpreter.cpp; InterpreterCallbacks.cpp; InvocationOptions.cpp; LookupHelper.cpp; NullDerefProtectionTransformer.cpp; PerfJIT",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt:1122,Integrability,depend,dependencies,1122,"-------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. set(LIBS; clingUtils; clangCodeGen; clangDriver; clangFrontend; clangParse; clangSema; clangAnalysis; clangEdit; clangRewrite; clangRewriteFrontend; clangSerialization; clangAST; clangBasic; clangLex; ). set(LLVM_LINK_COMPONENTS; analysis; core; coroutines; coverage; executionengine; ipo; jitlink; lto; mc; object; option; orcjit; runtimedyld; scalaropts; support; target; transformutils; binaryformat; ${LLVM_TARGETS_TO_BUILD}; ). # clingInterpreter depends on Options.inc to be tablegen-ed; # (target ClangDriverOptions) from in-tree builds.; set(CLING_DEPENDS ClingDriverOptions); if(TARGET ClangDriverOptions); set(CLING_DEPENDS ""${CLING_DEPENDS};ClangDriverOptions""); endif(); # clangSema will make sure all of the dependencies of clingInterpreter are met.; if(TARGET clangSema); set(CLING_DEPENDS ""${CLING_DEPENDS};clangSema""); endif(). add_cling_library(clingInterpreter OBJECT; AutoSynthesizer.cpp; AutoloadCallback.cpp; ASTTransformer.cpp; BackendPasses.cpp; CheckEmptyTransactionTransformer.cpp; CIFactory.cpp; ClangInternalState.cpp; ClingCodeCompleteConsumer.cpp; ClingPragmas.cpp; DeclCollector.cpp; DeclExtractor.cpp; DefinitionShadower.cpp; DeclUnloader.cpp; DeviceKernelInliner.cpp; DynamicLibraryManager.cpp; DynamicLibraryManagerSymbol.cpp; DynamicLookup.cpp; DynamicExprInfo.cpp; Exception.cpp; ExternalInterpreterSource.cpp; ForwardDeclPrinter.cpp; IncrementalCUDADeviceCompiler.cpp; IncrementalExecutor.cpp; IncrementalJIT.cpp; IncrementalParser.cpp; Interpreter.cpp; InterpreterCallbacks.cpp; InvocationOptions.cpp; LookupHelper.cpp; NullDerefProtectionTransformer.cpp; PerfJITEventListener.cpp; RequiredSymbols.cpp; Transaction.c",MatchSource.DOCS,interpreter/cling/lib/Interpreter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/UserInterface/CMakeLists.txt:612,Deployability,install,install,612,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. set( LLVM_LINK_COMPONENTS; support; ). if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/textinput); set(TEXTINPUTSRC ${CMAKE_SOURCE_DIR}/core/textinput/src/); include_directories(${TEXTINPUTSRC}); else(); # For cling, install textinput *.h in include/cling/UserInterface/textinput.; install(DIRECTORY ${TEXTINPUTSRC}textinput; DESTINATION include/cling/UserInterface; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.cpp"" EXCLUDE; PATTERN ""doc"" EXCLUDE; PATTERN ""*.h""; ); endif(). add_cling_library(clingUserInterface; UserInterface.cpp; ${TEXTINPUTSRC}textinput/Editor.cpp; ${TEXTINPUTSRC}textinput/History.cpp; ${TEXTINPUTSRC}textinput/KeyBinding.cpp; ${TEXTINPUTSRC}textinput/Range.cpp; ${TEXTINPUTSRC}textinput/SignalHandler.cpp; ${TEXTINPUTSRC}textinput/StreamReader.cpp; ${TEXTINPUTSRC}textinput/StreamReaderUnix.cpp; ${TEXTINPUTSRC}textinput/StreamReaderWin.cpp; ${TEXTINPUTSRC}textinput/TerminalConfigUnix.cpp; ${TEXTINPUTSRC}textinput/TerminalDisplay.cpp; ${TEXTINPUTSRC}textinput/TerminalDisplayUnix.cpp; ${TEXTINPUTSRC}textinput/TerminalDisplayWin.cpp; ${TEXTINPUTSRC}textinput/TextInput.cpp; ${TEXTINPUTSRC}textinput/TextInputContext.cpp. LINK_LIBS; clingMetaProcessor; clingInterpreter; clingUtils; ). if( MSVC ); # Don't use Unicode in the User Interface (command prompt); remove_definitions(-DUNICODE -D_UNICODE); endif(). if(UNIX); set_source_files_properties(UserInterface.cpp COMPILE_FLAGS ""-fexceptions""); endif(); ",MatchSource.DOCS,interpreter/cling/lib/UserInterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/UserInterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/UserInterface/CMakeLists.txt:677,Deployability,install,install,677,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. set( LLVM_LINK_COMPONENTS; support; ). if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/textinput); set(TEXTINPUTSRC ${CMAKE_SOURCE_DIR}/core/textinput/src/); include_directories(${TEXTINPUTSRC}); else(); # For cling, install textinput *.h in include/cling/UserInterface/textinput.; install(DIRECTORY ${TEXTINPUTSRC}textinput; DESTINATION include/cling/UserInterface; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.cpp"" EXCLUDE; PATTERN ""doc"" EXCLUDE; PATTERN ""*.h""; ); endif(). add_cling_library(clingUserInterface; UserInterface.cpp; ${TEXTINPUTSRC}textinput/Editor.cpp; ${TEXTINPUTSRC}textinput/History.cpp; ${TEXTINPUTSRC}textinput/KeyBinding.cpp; ${TEXTINPUTSRC}textinput/Range.cpp; ${TEXTINPUTSRC}textinput/SignalHandler.cpp; ${TEXTINPUTSRC}textinput/StreamReader.cpp; ${TEXTINPUTSRC}textinput/StreamReaderUnix.cpp; ${TEXTINPUTSRC}textinput/StreamReaderWin.cpp; ${TEXTINPUTSRC}textinput/TerminalConfigUnix.cpp; ${TEXTINPUTSRC}textinput/TerminalDisplay.cpp; ${TEXTINPUTSRC}textinput/TerminalDisplayUnix.cpp; ${TEXTINPUTSRC}textinput/TerminalDisplayWin.cpp; ${TEXTINPUTSRC}textinput/TextInput.cpp; ${TEXTINPUTSRC}textinput/TextInputContext.cpp. LINK_LIBS; clingMetaProcessor; clingInterpreter; clingUtils; ). if( MSVC ); # Don't use Unicode in the User Interface (command prompt); remove_definitions(-DUNICODE -D_UNICODE); endif(). if(UNIX); set_source_files_properties(UserInterface.cpp COMPILE_FLAGS ""-fexceptions""); endif(); ",MatchSource.DOCS,interpreter/cling/lib/UserInterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/UserInterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/demo/CMakeLists.txt:954,Integrability,depend,dependencies,954,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. cmake_minimum_required(VERSION 3.5). # Keep symbols for JIT resolution; set(LLVM_NO_DEAD_STRIP 1). # Cling needs at least C++17; so does this demo.; set(CMAKE_CXX_STANDARD 17); set(CMAKE_CXX_STANDARD_REQUIRED ON). if (CMAKE_PROJECT_NAME); # Building as part of cling; all CMake variables are set.; else(); # Building as separate project.; project(cling-demo). # This project needs cling.; find_package(cling REQUIRED); endif(). # The project has one binary:; add_executable(cling-demo cling-demo.cpp). # ...which links against clingInterpreter (and its dependencies).; target_link_libraries(cling-demo clingInterpreter). # Provide LLVMDIR to cling-demp.cpp:; target_compile_options(cling-demo PUBLIC -DLLVMDIR=""${LLVM_INSTALL_PREFIX}"" -I${LLVM_INSTALL_PREFIX}/include). set_target_properties(cling-demo; PROPERTIES ENABLE_EXPORTS 1). if(MSVC); set_target_properties(cling-demo PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); endif(); ",MatchSource.DOCS,interpreter/cling/tools/demo/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/demo/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/demo/CMakeLists.txt:679,Modifiability,variab,variables,679,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. cmake_minimum_required(VERSION 3.5). # Keep symbols for JIT resolution; set(LLVM_NO_DEAD_STRIP 1). # Cling needs at least C++17; so does this demo.; set(CMAKE_CXX_STANDARD 17); set(CMAKE_CXX_STANDARD_REQUIRED ON). if (CMAKE_PROJECT_NAME); # Building as part of cling; all CMake variables are set.; else(); # Building as separate project.; project(cling-demo). # This project needs cling.; find_package(cling REQUIRED); endif(). # The project has one binary:; add_executable(cling-demo cling-demo.cpp). # ...which links against clingInterpreter (and its dependencies).; target_link_libraries(cling-demo clingInterpreter). # Provide LLVMDIR to cling-demp.cpp:; target_compile_options(cling-demo PUBLIC -DLLVMDIR=""${LLVM_INSTALL_PREFIX}"" -I${LLVM_INSTALL_PREFIX}/include). set_target_properties(cling-demo; PROPERTIES ENABLE_EXPORTS 1). if(MSVC); set_target_properties(cling-demo PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1); endif(); ",MatchSource.DOCS,interpreter/cling/tools/demo/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/demo/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/CMakeLists.txt:3385,Deployability,install,install,3385,"EOF_VOID_P EQUAL 8); # new/delete variants needed when linking to static msvc runtime (esp. Debug); set(cling_exports ${cling_exports}; ??2@YAPEAX_K@Z; ??3@YAXPEAX@Z; ??_U@YAPEAX_K@Z; ??_V@YAXPEAX@Z; ??3@YAXPEAX_K@Z; ??2@YAPEAX_KAEBUnothrow_t@std@@@Z; ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@M@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@PEBX@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z; ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z; ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z; ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z; ); else(); set(cling_exports ${cling_exports}; ??2@YAPAXI@Z; ??3@YAXPAX@Z; ??3@YAXPAXI@Z; ??_U@YAPAXI@Z; ??_V@YAXPAX@Z; ??_V@YAXPAXI@Z; ??2@YAPAXIABUnothrow_t@std@@@Z; ??_U@YAPAXIABUnothrow_t@std@@@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z; ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z; ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z; ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z; ); endif(). # List to '/EXPORT:sym0 /EXPORT:sym1 /EXPORT:sym2 ...'; foreach(sym ${cling_exports}); set(cling_link_str ""${cling_link_str} /EXPORT:${sym}""); endforeach(sym ${cling_exports}). set_property(TARGET cling APPEND_STRING PROPERTY LINK_FLAGS ${cling_link_str}). endif(MSVC). target_link_libraries(cling PUBLIC ${LIBS}). install(TARGETS cling; RUNTIME DESTINATION bin); ",MatchSource.DOCS,interpreter/cling/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/CMakeLists.txt:1258,Modifiability,variab,variables,1258, or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. # Keep symbols for JIT resolution; set(LLVM_NO_DEAD_STRIP 1). set(LLVM_LINK_COMPONENTS Support); if(BUILD_SHARED_LIBS); set(LIBS. clangFrontendTool. clingInterpreter; clingMetaProcessor; clingUserInterface; clingUtils; ); add_cling_executable(cling; cling.cpp; ); else(); set(LIBS; clangASTMatchers; clangFrontendTool. clingUserInterface; ); add_cling_executable(cling; cling.cpp; $<TARGET_OBJECTS:obj.clingInterpreter>; $<TARGET_OBJECTS:obj.clingMetaProcessor>; $<TARGET_OBJECTS:obj.clingUtils>; ); endif(BUILD_SHARED_LIBS). set_target_properties(cling; PROPERTIES ENABLE_EXPORTS 1). if(MSVC); set_target_properties(cling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1). # RTTI/C++ symbols; set(cling_exports ${cling_exports} ??_7type_info@@6B@; ?__type_info_root_node@@3U__type_info_node@@A; ?nothrow@std@@3Unothrow_t@1@B; ). # Compiler added symbols for static variables. NOT for VStudio < 2015; set(cling_exports ${cling_exports} _Init_thread_abort _Init_thread_epoch; _Init_thread_footer _Init_thread_header _tls_index; ). if(CMAKE_SIZEOF_VOID_P EQUAL 8); # new/delete variants needed when linking to static msvc runtime (esp. Debug); set(cling_exports ${cling_exports}; ??2@YAPEAX_K@Z; ??3@YAXPEAX@Z; ??_U@YAPEAX_K@Z; ??_V@YAXPEAX@Z; ??3@YAXPEAX_K@Z; ??2@YAPEAX_KAEBUnothrow_t@std@@@Z; ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@M@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@PEBX@Z; ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z; ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z; ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@P,MatchSource.DOCS,interpreter/cling/tools/driver/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/CMakeLists.txt:989,Availability,error,errors,989,"#------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #------------------------------------------------------------------------------. # Keep symbols for JIT resolution; set(LLVM_NO_DEAD_STRIP 1). set(SOURCES; Kernel.cpp; ); set_source_files_properties(Kernel.cpp COMPILE_FLAGS ""-fexceptions -frtti""); #Solve unresolved symbols bug in unix; #See https://github.com/vgvassilev/cling/issues/114; if(WIN32); #FIXME: I don't know what flags are used in windows; #to include all symbols from a static library; #Maybe the bug is not present in windows and we leave it ; #as it is; set(INTERPRETER; clingInterpreter; ); else(); #Force all interpreter symbols to be present in the shared library; #this will prevent missing symbol errors because we don't know at; #link time what function calls will be made by the user of ; #the shared library; if (APPLE); set(INTERPRETER; -Wl,-force_load clingInterpreter ; ); else(); set(INTERPRETER; -Wl,--whole-archive clingInterpreter -Wl,--no-whole-archive; ); endif(); endif(). set(LIBS; clangAST; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangLex; clangParse; clangSema; clangSerialization. clingUserInterface; clingMetaProcessor; ${INTERPRETER}; clingUtils; ). if( LLVM_ENABLE_PIC ); set(ENABLE_SHARED SHARED); endif(). if(WIN32); set(output_name ""libclingJupyter""); else(); set(output_name ""clingJupyter""); endif(). add_cling_library(libclingJupyter ${ENABLE_SHARED} ${ENABLE_STATIC}; OUTPUT_NAME ${output_name}; ${SOURCES}. LINK_LIBS; ${LIBS}. LINK_COMPONENTS; Core; Support; ). set_target_properties(libclingJupyter; PROPERTIES ENABLE_EXPORTS 1). if(ENABLE_SHARED); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); set(LIBCLINGJUPYTER_LINK_FLAGS "" -Wl,-compatibility_version -Wl,1""); if (D",MatchSource.DOCS,interpreter/cling/tools/Jupyter/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/Jupyter/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/dist-files.txt:74,Security,access,accessing,74,"^bin/cling; # Cling resource directory; ^lib/clang/.*; # Headers enabling accessing different parts of cling; ^include/.*; # Jupyter, etc.; ^share/cling/.*; ",MatchSource.DOCS,interpreter/cling/tools/packaging/dist-files.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/dist-files.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/CMakeLists.txt:994,Modifiability,plugin,plugins,994,"#-------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #-------------------------------------------------------------------------------; if ((CLING_INCLUDE_TESTS OR CLING_BUILD_PLUGINS) AND NOT MSVC); add_subdirectory(example); endif(). if (CLING_BUILD_PLUGINS); # # If we drop a compatible cmake project in this folder we should automatically; # # pick it up and build it.; # function(LISTSUBDIRS result curdir); # file(GLOB children RELATIVE ${curdir} ${curdir}/*); # set(dirlist """"); # foreach(child ${children}); # if(IS_DIRECTORY ${curdir}/${child}); # list(APPEND dirlist ${child}); # endif(); # endforeach(); # set(${result} ${dirlist} PARENT_SCOPE); # endfunction(); #; # LISTSUBDIRS(subdirs ${CMAKE_CURRENT_SOURCE_DIR}/plugins/); # foreach(subdir ${SUBDIRS}); # add_subdirectory(${subdir}); # endforeach(); if(clad); add_subdirectory(clad); endif(); endif(CLING_BUILD_PLUGINS); ",MatchSource.DOCS,interpreter/cling/tools/plugins/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2141,Availability,down,download,2141,"s only needed by Ninja; if(CMAKE_GENERATOR MATCHES Ninja); set(CLAD_BYPRODUCTS; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2419,Availability,down,download,2419,"}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -D",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2382,Deployability,configurat,configuration,2382,"}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -D",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2676,Deployability,patch,patch,2676,"ARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance pena",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2691,Deployability,patch,patch,2691,"IG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build .",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2823,Deployability,patch,patches,2823,"IG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build .",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:3861,Deployability,install,install,3861,"${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1 --target install; BUILD_BYPRODUCTS ${CLAD_BYPRODUCTS}; ${_clad_extra_settings}; # We need the target clangBasic to be built before building clad. However, we; # support building prebuilt clang and adding clangBasic breaks this case.; # Delegate the dependency resolution to the clingInterpreter target (which; # will always depend on clangBasic).; DEPENDS clingInterpreter; ). # Register cladPlugin, cladDifferentiator; foreach (lib cladPlugin cladDifferentiator); add_library(${lib} IMPORTED STATIC GLOBAL); add_dependencies(${lib} clad); endforeach(). set_property(TARGET cladPlugin PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}); set_property(TARGET cladDifferentiator PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}); ",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:4101,Integrability,depend,dependency,4101,"${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1 --target install; BUILD_BYPRODUCTS ${CLAD_BYPRODUCTS}; ${_clad_extra_settings}; # We need the target clangBasic to be built before building clad. However, we; # support building prebuilt clang and adding clangBasic breaks this case.; # Delegate the dependency resolution to the clingInterpreter target (which; # will always depend on clangBasic).; DEPENDS clingInterpreter; ). # Register cladPlugin, cladDifferentiator; foreach (lib cladPlugin cladDifferentiator); add_library(${lib} IMPORTED STATIC GLOBAL); add_dependencies(${lib} clad); endforeach(). set_property(TARGET cladPlugin PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}); set_property(TARGET cladDifferentiator PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}); ",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:4176,Integrability,depend,depend,4176,"${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1 --target install; BUILD_BYPRODUCTS ${CLAD_BYPRODUCTS}; ${_clad_extra_settings}; # We need the target clangBasic to be built before building clad. However, we; # support building prebuilt clang and adding clangBasic breaks this case.; # Delegate the dependency resolution to the clingInterpreter target (which; # will always depend on clangBasic).; DEPENDS clingInterpreter; ). # Register cladPlugin, cladDifferentiator; foreach (lib cladPlugin cladDifferentiator); add_library(${lib} IMPORTED STATIC GLOBAL); add_dependencies(${lib} clad); endforeach(). set_property(TARGET cladPlugin PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}); set_property(TARGET cladDifferentiator PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}); ",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:911,Modifiability,config,config,911,"#-------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #-------------------------------------------------------------------------------. include(ExternalProject). set(clad_install_dir ${CMAKE_BINARY_DIR}/etc/cling/); # Specify include dirs for clad; set(CLAD_INCLUDE_DIRS ${clad_install_dir}); # Clad Libraries; set(CLAD_CXX_FLAGS ${CMAKE_CXX_FLAGS}); set(_clad_build_type ${CMAKE_CFG_INTDIR}); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if (winrtdebug); set(_clad_build_type Debug); else(); set(_clad_build_type Release); endif(); if(asan); set(CLAD_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${ASAN_EXTRA_CXX_FLAGS}""); endif(); set(EXTRA_BUILD_ARGS --config ${_clad_build_type}); endif(); if(NOT _clad_build_type STREQUAL """" AND NOT _clad_build_type STREQUAL "".""); set(EXTRA_BUILD_ARGS --config ${_clad_build_type}); endif(); set(_CLAD_LIBRARY_PATH ${CMAKE_CURRENT_BINARY_DIR}/clad-prefix/src/clad-build/${_clad_build_type}/lib${LLVM_LIBDIR_SUFFIX}). # build byproducts only needed by Ninja; if(CMAKE_GENERATOR MATCHES Ninja); set(CLAD_BYPRODUCTS; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${L",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:1048,Modifiability,config,config,1048,"rpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #-------------------------------------------------------------------------------. include(ExternalProject). set(clad_install_dir ${CMAKE_BINARY_DIR}/etc/cling/); # Specify include dirs for clad; set(CLAD_INCLUDE_DIRS ${clad_install_dir}); # Clad Libraries; set(CLAD_CXX_FLAGS ${CMAKE_CXX_FLAGS}); set(_clad_build_type ${CMAKE_CFG_INTDIR}); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if (winrtdebug); set(_clad_build_type Debug); else(); set(_clad_build_type Release); endif(); if(asan); set(CLAD_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${ASAN_EXTRA_CXX_FLAGS}""); endif(); set(EXTRA_BUILD_ARGS --config ${_clad_build_type}); endif(); if(NOT _clad_build_type STREQUAL """" AND NOT _clad_build_type STREQUAL "".""); set(EXTRA_BUILD_ARGS --config ${_clad_build_type}); endif(); set(_CLAD_LIBRARY_PATH ${CMAKE_CURRENT_BINARY_DIR}/clad-prefix/src/clad-build/${_clad_build_type}/lib${LLVM_LIBDIR_SUFFIX}). # build byproducts only needed by Ninja; if(CMAKE_GENERATOR MATCHES Ninja); set(CLAD_BYPRODUCTS; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2151,Modifiability,config,configure,2151,"s only needed by Ninja; if(CMAKE_GENERATOR MATCHES Ninja); set(CLAD_BYPRODUCTS; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2349,Modifiability,variab,variable,2349,"}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -D",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2382,Modifiability,config,configuration,2382,"}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -D",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2810,Modifiability,plugin,plugins,2810,"IG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build .",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:3388,Modifiability,plugin,plugins,3388,"variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1 --target install; BUILD_BYPRODUCTS ${CLAD_BYPRODUCTS}; ${_clad_extra_settings}; # We need the target clangBasic to be built before building clad. However, we; # support building prebuilt clang and adding clangBasic breaks this case.; # Delegate the dependency resolution to the clingInterpreter target (which; # will always depend on clangBasic).; DEPENDS clingInterpreter; ). # Register cladPlugin, cladDifferentiator; foreach (lib cladPlugin cladDifferentiator); add_library(${lib} IMPORTED STATI",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:3668,Performance,perform,performance,3668,"ch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_FLAGS=${CLAD_CXX_FLAGS}; -DCMAKE_INSTALL_PREFIX=${clad_install_dir}/plugins; -DLLVM_DIR=${LLVM_BINARY_DIR}; -DCLANG_INCLUDE_DIRS=${CLANG_INCLUDE_DIRS}; ${_clad_extra_cmake_args}; # FIXME; # Building with 1 core is a temporary workaround for #16654 and has to be ; # there until the behaviour of the clad build on ubuntu 24.10 is understood.; # The performance penalty in the build is negligible.; BUILD_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1; INSTALL_COMMAND ${CMAKE_COMMAND} --build . ${EXTRA_BUILD_ARGS} -j 1 --target install; BUILD_BYPRODUCTS ${CLAD_BYPRODUCTS}; ${_clad_extra_settings}; # We need the target clangBasic to be built before building clad. However, we; # support building prebuilt clang and adding clangBasic breaks this case.; # Delegate the dependency resolution to the clingInterpreter target (which; # will always depend on clangBasic).; DEPENDS clingInterpreter; ). # Register cladPlugin, cladDifferentiator; foreach (lib cladPlugin cladDifferentiator); add_library(${lib} IMPORTED STATIC GLOBAL); add_dependencies(${lib} clad); endforeach(). set_property(TARGET cladPlugin PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}); set_property(TARGET cladDifferentiator PROPERTY IMPORTED_LOCATION ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDiffere",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2192,Testability,log,log,2192,"s only needed by Ninja; if(CMAKE_GENERATOR MATCHES Ninja); set(CLAD_BYPRODUCTS; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}",MatchSource.DOCS,interpreter/cling/tools/plugins/clad/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/example/CMakeLists.txt:520,Testability,test,testsuite,520,"#-------------------------------------------------------------------------------; # CLING - the C++ LLVM-based InterpreterG :); #; # This file is dual-licensed: you can choose to license it under the University; # of Illinois Open Source License or the GNU Lesser General Public License. See; # LICENSE.TXT for details.; #-------------------------------------------------------------------------------. add_cling_library(clingDemoPlugin SHARED DemoPlugin.cpp); if (TARGET check-cling); # Make sure if we are running the testsuite to build clingDemoPlugin before.; add_dependencies(check-cling clingDemoPlugin); endif(). set_target_properties(clingDemoPlugin PROPERTIES LIBRARY_OUTPUT_DIRECTORY "".""); if(APPLE); target_link_libraries(clingDemoPlugin PUBLIC -Wl,-w -Wl,-bind_at_load -Wl,-undefined,dynamic_lookup); elseif(NOT MSVC); target_link_libraries(clingDemoPlugin PUBLIC -Wl,--unresolved-symbols=ignore-in-object-files); endif(). ",MatchSource.DOCS,interpreter/cling/tools/plugins/example/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/example/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:2319,Availability,avail,available,2319,"SOURCE_DIR}/../llvm"" CACHE PATH ""Path to LLVM source tree""); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_TOOLS_BINARY_DIR}"" CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ""${LLVM_LIBRARY_DIR}"" CACHE PATH ""Path to llvm/lib""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF); option(CLANG_ENABLE_BOOTSTRAP ""Generate the clang bootstrap target"" OFF); option(LLVM_ENABLE_LIBXML2 ""Use libxml2 if available."" ON). include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS); include(CheckAtomic); include(GetErrcMessages); include(LLVMDistributionSupport). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""); set(BUG_REPORT_URL ""${LLVM_PACKAGE_BUGREPORT}"" CACHE STRING; ""Default URL where bug reports are to be submitted.""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(${LLVM_INCLUDE_DIRS}); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). if(LLVM_INCLUDE_TESTS); # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTAB",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:20993,Availability,error,error,20993,"d_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/). if(BOOTSTRAP_LLVM_ENABLE_LLD); # adding lld to clang-bootstrap-deps without having it enabled in; # LLVM_ENABLE_PROJECTS just generates a cryptic error message.; if (NOT ""lld"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""LLD is enabled in the bootstrap build, but lld is not in LLVM_ENABLE_PROJECTS""); endif(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_dependencies(clang-bootstrap-deps LTO); # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work; # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH; # so that the host object file tools will use the just-built libLTO.; # However if System Integrity Protection is enabled th",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:2072,Deployability,install,install,2072,"LUDE_DIRS ${LLVM_INCLUDE_DIRS} CACHE PATH ""Path to llvm/include and any other header dirs needed""); set(LLVM_BINARY_DIR ""${LLVM_BINARY_DIR}"" CACHE PATH ""Path to LLVM build tree""); set(LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../llvm"" CACHE PATH ""Path to LLVM source tree""); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_TOOLS_BINARY_DIR}"" CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ""${LLVM_LIBRARY_DIR}"" CACHE PATH ""Path to llvm/lib""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). option(LLVM_INSTALL_TOOLCHAIN_ONLY; ""Only include toolchain files in the 'install' target."" OFF). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF); option(CLANG_ENABLE_BOOTSTRAP ""Generate the clang bootstrap target"" OFF); option(LLVM_ENABLE_LIBXML2 ""Use libxml2 if available."" ON). include(AddLLVM); include(TableGen); include(HandleLLVMOptions); include(VersionFromVCS); include(CheckAtomic); include(GetErrcMessages); include(LLVMDistributionSupport). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""); set(BUG_REPORT_URL ""${LLVM_PACKAGE_BUGREPORT}"" CACHE STRING; ""Default URL where bug reports are to be submitted.""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(${LLVM_INCLUDE_DIRS}); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:3456,Deployability,install,installed,3456,"ErrcMessages); include(LLVMDistributionSupport). set(PACKAGE_VERSION ""${LLVM_PACKAGE_VERSION}""); set(BUG_REPORT_URL ""${LLVM_PACKAGE_BUGREPORT}"" CACHE STRING; ""Default URL where bug reports are to be submitted.""). if (NOT DEFINED LLVM_INCLUDE_TESTS); set(LLVM_INCLUDE_TESTS ON); endif(). include_directories(${LLVM_INCLUDE_DIRS}); link_directories(""${LLVM_LIBRARY_DIR}""). set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). if(LLVM_INCLUDE_TESTS); # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(). # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""). if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/llvm-lit); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/llvm-lit utils/llvm-lit); endif(); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); endif(). if (NOT TARGET llvm_gtest); message(FATAL_ERROR ""llvm-gtest not found. Please install llvm-gtest or disable tests with -DLLVM_INCLUDE_TESTS=OFF""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); se",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:4222,Deployability,install,install,4222,"ECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(). # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""). if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/llvm-lit); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/llvm-lit utils/llvm-lit); endif(); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); endif(). if (NOT TARGET llvm_gtest); message(FATAL_ERROR ""llvm-gtest not found. Please install llvm-gtest or disable tests with -DLLVM_INCLUDE_TESTS=OFF""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). get_errc_messages(LLVM_LIT_ERRC_MESSAGES). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(). umbrella_lit_testsuite_begin(check-all); endif() # LLVM_INCLUDE_TESTS; endif() # standalone. # Make sure that our source directory is on the current cmake module path so that; # we can include cmake files from this directory.; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # This allows disabling clang's",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:6712,Deployability,install,installed,6712,"BXML2_FOUND 0); find_package(LibXml2 2.5.3 QUIET); if (LIBXML2_FOUND); set(CLANG_HAVE_LIBXML 1); endif(); endif(); endif(). include(CheckIncludeFile); check_include_file(sys/resource.h CLANG_HAVE_RLIMITS). # This check requires _GNU_SOURCE on linux; check_include_file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:6937,Deployability,configurat,configuration,6937,"file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:7003,Deployability,configurat,configuration-files,7003,"lude(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT_CXX_STDLIB STREQUAL """" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libstdc++"" OR; CLANG_DEFAULT_",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:7056,Deployability,install,install-dir,7056,"lude(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT_CXX_STDLIB STREQUAL """" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libstdc++"" OR; CLANG_DEFAULT_",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:10283,Deployability,install,install,10283,"UAL ""libunwind"")); message(WARNING ""Resetting default unwindlib to use platform default""); set(CLANG_DEFAULT_UNWINDLIB """" CACHE STRING; ""Default unwind library to use (\""none\"" \""libgcc\"" or \""libunwind\"", empty to match runtime library.)"" FORCE); endif(). set(CLANG_DEFAULT_OBJCOPY ""objcopy"" CACHE STRING; ""Default objcopy executable to use.""). set(CLANG_DEFAULT_OPENMP_RUNTIME ""libomp"" CACHE STRING; ""Default OpenMP runtime used by -fopenmp.""). set(CLANG_SYSTEMZ_DEFAULT_ARCH ""z10"" CACHE STRING ""SystemZ Default Arch""). set(CLANG_VENDOR ${PACKAGE_VENDOR} CACHE STRING; ""Vendor-specific text for showing with version information.""). set(CLANG_REPOSITORY_STRING """" CACHE STRING; ""Vendor-specific text for showing the repository the source is taken from.""). if(CLANG_REPOSITORY_STRING); add_definitions(-DCLANG_REPOSITORY_STRING=""${CLANG_REPOSITORY_STRING}""); endif(). set(CLANG_VENDOR_UTI ""org.llvm.clang"" CACHE STRING; ""Vendor-specific uti.""). set(CLANG_PYTHON_BINDINGS_VERSIONS """" CACHE STRING; ""Python versions to install libclang python bindings for""). set(CLANG_LINK_CLANG_DYLIB ${LLVM_LINK_LLVM_DYLIB} CACHE BOOL; ""Link tools against libclang-cpp.so""). if (NOT LLVM_LINK_LLVM_DYLIB AND CLANG_LINK_CLANG_DYLIB); message(FATAL_ERROR ""Cannot set CLANG_LINK_CLANG_DYLIB=ON when ""; ""LLVM_LINK_LLVM_DYLIB=OFF""); endif(). # The libdir suffix must exactly match whatever LLVM's configuration used.; set(CLANG_LIBDIR_SUFFIX ""${LLVM_LIBDIR_SUFFIX}""). set(CLANG_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE PATH; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(CLANG_TOOLS_INSTALL_DIR). set(CLANG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. ""; ""Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process create",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:10642,Deployability,configurat,configuration,10642,"EFAULT_OPENMP_RUNTIME ""libomp"" CACHE STRING; ""Default OpenMP runtime used by -fopenmp.""). set(CLANG_SYSTEMZ_DEFAULT_ARCH ""z10"" CACHE STRING ""SystemZ Default Arch""). set(CLANG_VENDOR ${PACKAGE_VENDOR} CACHE STRING; ""Vendor-specific text for showing with version information.""). set(CLANG_REPOSITORY_STRING """" CACHE STRING; ""Vendor-specific text for showing the repository the source is taken from.""). if(CLANG_REPOSITORY_STRING); add_definitions(-DCLANG_REPOSITORY_STRING=""${CLANG_REPOSITORY_STRING}""); endif(). set(CLANG_VENDOR_UTI ""org.llvm.clang"" CACHE STRING; ""Vendor-specific uti.""). set(CLANG_PYTHON_BINDINGS_VERSIONS """" CACHE STRING; ""Python versions to install libclang python bindings for""). set(CLANG_LINK_CLANG_DYLIB ${LLVM_LINK_LLVM_DYLIB} CACHE BOOL; ""Link tools against libclang-cpp.so""). if (NOT LLVM_LINK_LLVM_DYLIB AND CLANG_LINK_CLANG_DYLIB); message(FATAL_ERROR ""Cannot set CLANG_LINK_CLANG_DYLIB=ON when ""; ""LLVM_LINK_LLVM_DYLIB=OFF""); endif(). # The libdir suffix must exactly match whatever LLVM's configuration used.; set(CLANG_LIBDIR_SUFFIX ""${LLVM_LIBDIR_SUFFIX}""). set(CLANG_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE PATH; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(CLANG_TOOLS_INSTALL_DIR). set(CLANG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. ""; ""Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.; if(NOT DEFINED CLANG_VERSION_MAJOR); set(CLANG_VERSION_MAJOR ${LLVM_VERSION_MAJOR}); endif(); if(NOT DEFINED CLANG_VERSION_MINOR); set(CLANG_VERSION_MINOR ${LLVM_VERSION_MINOR}); endif(); if(",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:13785,Deployability,install,install,13785,"dif (). # Determine HOST_LINK_VERSION on Darwin.; set(HOST_LINK_VERSION); if (APPLE AND NOT CMAKE_LINKER MATCHES "".*lld.*""); set(LD_V_OUTPUT); execute_process(; COMMAND sh -c ""${CMAKE_LINKER} -v 2>&1 | head -1""; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE LD_V_OUTPUT; ); if (HAD_ERROR); message(FATAL_ERROR ""${CMAKE_LINKER} failed with status ${HAD_ERROR}""); endif(); if (""${LD_V_OUTPUT}"" MATCHES "".*ld64-([0-9.]+).*""); string(REGEX REPLACE "".*ld64-([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); elseif (""${LD_V_OUTPUT}"" MATCHES ""[^0-9]*([0-9.]+).*""); string(REGEX REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COM",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:13981,Deployability,install,install,13981,"R; OUTPUT_VARIABLE LD_V_OUTPUT; ); if (HAD_ERROR); message(FATAL_ERROR ""${CMAKE_LINKER} failed with status ${HAD_ERROR}""); endif(); if (""${LD_V_OUTPUT}"" MATCHES "".*ld64-([0-9.]+).*""); string(REGEX REPLACE "".*ld64-([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); elseif (""${LD_V_OUTPUT}"" MATCHES ""[^0-9]*([0-9.]+).*""); string(REGEX REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); els",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:14459,Deployability,install,install-clang-headers,14459,"REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); else(); set(HAVE_CLANG_PLUGIN_SUPPORT OFF); endif(); CMAKE_DEPENDENT_OPTION(CLANG_PLUGIN_SUPPORT; ""Build clang with plugin support"" ON; ""HAVE_CLANG_PLUGIN_SUPPORT"" OFF). # If libstdc++ is statically linked, clang-repl needs to statically link libstdc++; # itself, which is not possible in many platforms because of current limitations in;",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:14613,Deployability,install,install,14613,"ENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); else(); set(HAVE_CLANG_PLUGIN_SUPPORT OFF); endif(); CMAKE_DEPENDENT_OPTION(CLANG_PLUGIN_SUPPORT; ""Build clang with plugin support"" ON; ""HAVE_CLANG_PLUGIN_SUPPORT"" OFF). # If libstdc++ is statically linked, clang-repl needs to statically link libstdc++; # itself, which is not possible in many platforms because of current limitations in; # JIT stack. (more platforms need to be supported by JITLink); if(NOT LLVM_STATIC_LINK_CXX_STDLIB); set(HAVE_CLANG_REPL_SUPPORT ON); endif(). option(CLANG_ENABLE_ARCMT ""Build ARCMT."" ON); option(CLANG_ENABLE_STATIC_ANALY",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:14781,Deployability,install,install-bash-autocomplete,14781,"L_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); else(); set(HAVE_CLANG_PLUGIN_SUPPORT OFF); endif(); CMAKE_DEPENDENT_OPTION(CLANG_PLUGIN_SUPPORT; ""Build clang with plugin support"" ON; ""HAVE_CLANG_PLUGIN_SUPPORT"" OFF). # If libstdc++ is statically linked, clang-repl needs to statically link libstdc++; # itself, which is not possible in many platforms because of current limitations in; # JIT stack. (more platforms need to be supported by JITLink); if(NOT LLVM_STATIC_LINK_CXX_STDLIB); set(HAVE_CLANG_REPL_SUPPORT ON); endif(). option(CLANG_ENABLE_ARCMT ""Build ARCMT."" ON); option(CLANG_ENABLE_STATIC_ANALYZER; ""Include static analyzer in clang binary."" ON). option(CLANG_ENABLE_PROTO_FUZZER ""Build Clang protobuf fuzzer."" OFF). if(NOT CLANG_E",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:18113,Deployability,update,updated,18113,"G_TABLEGEN_EXE}"" CACHE INTERNAL """"). add_subdirectory(include). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); add_custom_target(clang-tablegen-targets; DEPENDS; omp_gen; ClangDriverOptions; ${CLANG_TABLEGEN_TARGETS}); set_target_properties(clang-tablegen-targets PROPERTIES FOLDER ""Misc""); list(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets). # Force target to be built as soon as possible. Clang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intrinsics_gen.; if(LLVM_ENABLE_MODULES); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); ad",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19290,Deployability,install,install,19290,"g.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_S",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19471,Deployability,install,install-clang-libraries,19471,"FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else();",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19775,Deployability,install,install-clang-libraries,19775,"S ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19799,Deployability,install,install,19799,"S ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19833,Deployability,install,install-clang-libraries-stripped,19833,"S ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19866,Deployability,install,install,19866,"S ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:28968,Deployability,install,install,28968,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29141,Deployability,install,install,29141,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29205,Deployability,install,install,29205,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29234,Deployability,install,install,29234,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29371,Deployability,install,install,29371,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29419,Deployability,install,install,29419,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29462,Deployability,install,install,29462,"ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29697,Deployability,install,install,29697," ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINAR",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29819,Deployability,install,install,29819," ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINAR",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29845,Deployability,install,install,29845," ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINAR",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29886,Deployability,install,installation,29886," exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/prof.fdata). # Instrument clang with BOLT; add_custom_target(clang-instrumented; DEPENDS ${CLANG_INSTRUMENTED}; ); add_custom_command(OUTPUT ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:29978,Deployability,install,install,29978," exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/prof.fdata). # Instrument clang with BOLT; add_custom_target(clang-instrumented; DEPENDS ${CLANG_INSTRUMENTED}; ); add_custom_command(OUTPUT ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:30050,Deployability,install,install,30050,"FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/prof.fdata). # Instrument clang with BOLT; add_custom_target(clang-instrumented; DEPENDS ${CLANG_INSTRUMENTED}; ); add_custom_command(OUTPUT ${CLANG_INSTRUMENTED}; DEPENDS clang llvm-bolt; COMMAND llvm-bolt ${CLANG_PATH} -o ${CLANG_INSTRUMENTED}; -instrument --in",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:4172,Integrability,message,message,4172,"k prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(). # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""). if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/llvm-lit); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/llvm-lit utils/llvm-lit); endif(); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); endif(). if (NOT TARGET llvm_gtest); message(FATAL_ERROR ""llvm-gtest not found. Please install llvm-gtest or disable tests with -DLLVM_INCLUDE_TESTS=OFF""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). get_errc_messages(LLVM_LIT_ERRC_MESSAGES). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(). umbrella_lit_testsuite_begin(check-all); endif() # LLVM_INCLUDE_TESTS; endif() # standalone. # Make sure that our source directory is on the current cmake module path so that; # we can include cmake files from this directory.; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modu",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:5262,Integrability,depend,dependency,5262," -DLLVM_INCLUDE_TESTS=OFF""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). get_errc_messages(LLVM_LIT_ERRC_MESSAGES). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(). umbrella_lit_testsuite_begin(check-all); endif() # LLVM_INCLUDE_TESTS; endif() # standalone. # Make sure that our source directory is on the current cmake module path so that; # we can include cmake files from this directory.; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # This allows disabling clang's XML dependency even if LLVM finds libxml2.; # By default, clang depends on libxml2 if LLVM does.; option(CLANG_ENABLE_LIBXML2 ""Whether libclang may depend on libxml2""; ${LLVM_ENABLE_LIBXML2}). if(CLANG_ENABLE_LIBXML2); # Don't look for libxml if we're using MSan, since uninstrumented third party; # code may call MSan interceptors like strlen, leading to false positives.; if(NOT LLVM_USE_SANITIZER MATCHES ""Memory.*""); set (LIBXML2_FOUND 0); find_package(LibXml2 2.5.3 QUIET); if (LIBXML2_FOUND); set(CLANG_HAVE_LIBXML 1); endif(); endif(); endif(). include(CheckIncludeFile); check_include_file(sys/resource.h CLANG_HAVE_RLIMITS). # This check requires _GNU_SOURCE on linux; check_include_file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladd",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:5322,Integrability,depend,depends,5322,"default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). get_errc_messages(LLVM_LIT_ERRC_MESSAGES). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(). umbrella_lit_testsuite_begin(check-all); endif() # LLVM_INCLUDE_TESTS; endif() # standalone. # Make sure that our source directory is on the current cmake module path so that; # we can include cmake files from this directory.; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # This allows disabling clang's XML dependency even if LLVM finds libxml2.; # By default, clang depends on libxml2 if LLVM does.; option(CLANG_ENABLE_LIBXML2 ""Whether libclang may depend on libxml2""; ${LLVM_ENABLE_LIBXML2}). if(CLANG_ENABLE_LIBXML2); # Don't look for libxml if we're using MSan, since uninstrumented third party; # code may call MSan interceptors like strlen, leading to false positives.; if(NOT LLVM_USE_SANITIZER MATCHES ""Memory.*""); set (LIBXML2_FOUND 0); find_package(LibXml2 2.5.3 QUIET); if (LIBXML2_FOUND); set(CLANG_HAVE_LIBXML 1); endif(); endif(); endif(). include(CheckIncludeFile); check_include_file(sys/resource.h CLANG_HAVE_RLIMITS). # This check requires _GNU_SOURCE on linux; check_include_file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DE",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:5406,Integrability,depend,depend,5406,"ide.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). get_errc_messages(LLVM_LIT_ERRC_MESSAGES). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(). umbrella_lit_testsuite_begin(check-all); endif() # LLVM_INCLUDE_TESTS; endif() # standalone. # Make sure that our source directory is on the current cmake module path so that; # we can include cmake files from this directory.; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # This allows disabling clang's XML dependency even if LLVM finds libxml2.; # By default, clang depends on libxml2 if LLVM does.; option(CLANG_ENABLE_LIBXML2 ""Whether libclang may depend on libxml2""; ${LLVM_ENABLE_LIBXML2}). if(CLANG_ENABLE_LIBXML2); # Don't look for libxml if we're using MSan, since uninstrumented third party; # code may call MSan interceptors like strlen, leading to false positives.; if(NOT LLVM_USE_SANITIZER MATCHES ""Memory.*""); set (LIBXML2_FOUND 0); find_package(LibXml2 2.5.3 QUIET); if (LIBXML2_FOUND); set(CLANG_HAVE_LIBXML 1); endif(); endif(); endif(). include(CheckIncludeFile); check_include_file(sys/resource.h CLANG_HAVE_RLIMITS). # This check requires _GNU_SOURCE on linux; check_include_file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:6858,Integrability,message,message,6858,"AVE_RLIMITS). # This check requires _GNU_SOURCE on linux; check_include_file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:8074,Integrability,message,message,8074,"fault --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT_CXX_STDLIB STREQUAL """" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libstdc++"" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libc++"")); message(WARNING ""Resetting default C++ stdlib to use platform default""); set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default"" FORCE); endif(). set(CLANG_DEFAULT_RTLIB """" CACHE STRING; ""Default runtime library to use (\""libgcc\"" or \""compiler-rt\"", empty for platform default)""); if (NOT(CLANG_DEFAULT_RTLIB STREQUAL """" OR; CLANG_DEFAULT_RTLIB STREQUAL ""libgcc"" OR; CLANG_DEFAULT_RTLIB STREQUAL ""compiler-rt"")); message(WARNING ""Resetting default rtlib to use platform default""); set(CLANG_DEFAULT_RTLIB """" CACHE STRING; ""Default runtime library to use (\""libgcc\"" or \""compiler-rt\"", empty for platform default)"" FORCE); endif(). set(CLANG_DEFAULT_UNWINDLIB """" CACHE STRING; ""Default unwind library to use (\""none\"" \""libgcc\"" or \""libunwind\"", empty to match runtime library.)""); if (CLANG_DEFAULT_UNWINDLIB STREQUAL """"); if (CLANG_DEFAULT_RTLIB STREQUAL ""libgcc""); set (CLANG_DEFAULT_UNWINDL",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:8563,Integrability,message,message,8563," should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT_CXX_STDLIB STREQUAL """" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libstdc++"" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libc++"")); message(WARNING ""Resetting default C++ stdlib to use platform default""); set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default"" FORCE); endif(). set(CLANG_DEFAULT_RTLIB """" CACHE STRING; ""Default runtime library to use (\""libgcc\"" or \""compiler-rt\"", empty for platform default)""); if (NOT(CLANG_DEFAULT_RTLIB STREQUAL """" OR; CLANG_DEFAULT_RTLIB STREQUAL ""libgcc"" OR; CLANG_DEFAULT_RTLIB STREQUAL ""compiler-rt"")); message(WARNING ""Resetting default rtlib to use platform default""); set(CLANG_DEFAULT_RTLIB """" CACHE STRING; ""Default runtime library to use (\""libgcc\"" or \""compiler-rt\"", empty for platform default)"" FORCE); endif(). set(CLANG_DEFAULT_UNWINDLIB """" CACHE STRING; ""Default unwind library to use (\""none\"" \""libgcc\"" or \""libunwind\"", empty to match runtime library.)""); if (CLANG_DEFAULT_UNWINDLIB STREQUAL """"); if (CLANG_DEFAULT_RTLIB STREQUAL ""libgcc""); set (CLANG_DEFAULT_UNWINDLIB ""libgcc"" CACHE STRING """" FORCE); endif(); endif(). if (NOT(CLANG_DEFAULT_UNWINDLIB STREQUAL """" OR; CLANG_DEFAULT_UNWINDLIB STREQUAL ""none"" OR; CLANG_DEFAULT_UNWINDLIB STREQUAL ""libgcc"" OR; CLANG_DEFAULT_UNWINDLIB STREQUAL ""libunwind"")); message(WARNING ""Resetting default unwindlib to use platform default""); set(CLANG_DEFAULT_UNWINDLIB """" CACHE STRING; ""Default unwind library to use (\""none\"" \""libgcc\"" or \""libunwind\"", empty to match runtime library.)"" FORCE); endif(). set(CLANG_DEFAU",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:9285,Integrability,message,message,9285,"LANG_DEFAULT_RTLIB """" CACHE STRING; ""Default runtime library to use (\""libgcc\"" or \""compiler-rt\"", empty for platform default)""); if (NOT(CLANG_DEFAULT_RTLIB STREQUAL """" OR; CLANG_DEFAULT_RTLIB STREQUAL ""libgcc"" OR; CLANG_DEFAULT_RTLIB STREQUAL ""compiler-rt"")); message(WARNING ""Resetting default rtlib to use platform default""); set(CLANG_DEFAULT_RTLIB """" CACHE STRING; ""Default runtime library to use (\""libgcc\"" or \""compiler-rt\"", empty for platform default)"" FORCE); endif(). set(CLANG_DEFAULT_UNWINDLIB """" CACHE STRING; ""Default unwind library to use (\""none\"" \""libgcc\"" or \""libunwind\"", empty to match runtime library.)""); if (CLANG_DEFAULT_UNWINDLIB STREQUAL """"); if (CLANG_DEFAULT_RTLIB STREQUAL ""libgcc""); set (CLANG_DEFAULT_UNWINDLIB ""libgcc"" CACHE STRING """" FORCE); endif(); endif(). if (NOT(CLANG_DEFAULT_UNWINDLIB STREQUAL """" OR; CLANG_DEFAULT_UNWINDLIB STREQUAL ""none"" OR; CLANG_DEFAULT_UNWINDLIB STREQUAL ""libgcc"" OR; CLANG_DEFAULT_UNWINDLIB STREQUAL ""libunwind"")); message(WARNING ""Resetting default unwindlib to use platform default""); set(CLANG_DEFAULT_UNWINDLIB """" CACHE STRING; ""Default unwind library to use (\""none\"" \""libgcc\"" or \""libunwind\"", empty to match runtime library.)"" FORCE); endif(). set(CLANG_DEFAULT_OBJCOPY ""objcopy"" CACHE STRING; ""Default objcopy executable to use.""). set(CLANG_DEFAULT_OPENMP_RUNTIME ""libomp"" CACHE STRING; ""Default OpenMP runtime used by -fopenmp.""). set(CLANG_SYSTEMZ_DEFAULT_ARCH ""z10"" CACHE STRING ""SystemZ Default Arch""). set(CLANG_VENDOR ${PACKAGE_VENDOR} CACHE STRING; ""Vendor-specific text for showing with version information.""). set(CLANG_REPOSITORY_STRING """" CACHE STRING; ""Vendor-specific text for showing the repository the source is taken from.""). if(CLANG_REPOSITORY_STRING); add_definitions(-DCLANG_REPOSITORY_STRING=""${CLANG_REPOSITORY_STRING}""); endif(). set(CLANG_VENDOR_UTI ""org.llvm.clang"" CACHE STRING; ""Vendor-specific uti.""). set(CLANG_PYTHON_BINDINGS_VERSIONS """" CACHE STRING; ""Python versions to install libclang p",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:10483,Integrability,message,message,10483," FORCE); endif(). set(CLANG_DEFAULT_OBJCOPY ""objcopy"" CACHE STRING; ""Default objcopy executable to use.""). set(CLANG_DEFAULT_OPENMP_RUNTIME ""libomp"" CACHE STRING; ""Default OpenMP runtime used by -fopenmp.""). set(CLANG_SYSTEMZ_DEFAULT_ARCH ""z10"" CACHE STRING ""SystemZ Default Arch""). set(CLANG_VENDOR ${PACKAGE_VENDOR} CACHE STRING; ""Vendor-specific text for showing with version information.""). set(CLANG_REPOSITORY_STRING """" CACHE STRING; ""Vendor-specific text for showing the repository the source is taken from.""). if(CLANG_REPOSITORY_STRING); add_definitions(-DCLANG_REPOSITORY_STRING=""${CLANG_REPOSITORY_STRING}""); endif(). set(CLANG_VENDOR_UTI ""org.llvm.clang"" CACHE STRING; ""Vendor-specific uti.""). set(CLANG_PYTHON_BINDINGS_VERSIONS """" CACHE STRING; ""Python versions to install libclang python bindings for""). set(CLANG_LINK_CLANG_DYLIB ${LLVM_LINK_LLVM_DYLIB} CACHE BOOL; ""Link tools against libclang-cpp.so""). if (NOT LLVM_LINK_LLVM_DYLIB AND CLANG_LINK_CLANG_DYLIB); message(FATAL_ERROR ""Cannot set CLANG_LINK_CLANG_DYLIB=ON when ""; ""LLVM_LINK_LLVM_DYLIB=OFF""); endif(). # The libdir suffix must exactly match whatever LLVM's configuration used.; set(CLANG_LIBDIR_SUFFIX ""${LLVM_LIBDIR_SUFFIX}""). set(CLANG_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE PATH; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(CLANG_TOOLS_INSTALL_DIR). set(CLANG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. ""; ""Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.; if(NOT DEFINED CLANG_VERSION_MAJOR); set(CLANG_VERSION_MAJOR ${LLVM_VERS",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:11064,Integrability,message,message,11064,"efinitions(-DCLANG_REPOSITORY_STRING=""${CLANG_REPOSITORY_STRING}""); endif(). set(CLANG_VENDOR_UTI ""org.llvm.clang"" CACHE STRING; ""Vendor-specific uti.""). set(CLANG_PYTHON_BINDINGS_VERSIONS """" CACHE STRING; ""Python versions to install libclang python bindings for""). set(CLANG_LINK_CLANG_DYLIB ${LLVM_LINK_LLVM_DYLIB} CACHE BOOL; ""Link tools against libclang-cpp.so""). if (NOT LLVM_LINK_LLVM_DYLIB AND CLANG_LINK_CLANG_DYLIB); message(FATAL_ERROR ""Cannot set CLANG_LINK_CLANG_DYLIB=ON when ""; ""LLVM_LINK_LLVM_DYLIB=OFF""); endif(). # The libdir suffix must exactly match whatever LLVM's configuration used.; set(CLANG_LIBDIR_SUFFIX ""${LLVM_LIBDIR_SUFFIX}""). set(CLANG_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE PATH; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(CLANG_TOOLS_INSTALL_DIR). set(CLANG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. ""; ""Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.; if(NOT DEFINED CLANG_VERSION_MAJOR); set(CLANG_VERSION_MAJOR ${LLVM_VERSION_MAJOR}); endif(); if(NOT DEFINED CLANG_VERSION_MINOR); set(CLANG_VERSION_MINOR ${LLVM_VERSION_MINOR}); endif(); if(NOT DEFINED CLANG_VERSION_PATCHLEVEL); set(CLANG_VERSION_PATCHLEVEL ${LLVM_VERSION_PATCH}); endif(); if(NOT DEFINED CLANG_VERSION_SUFFIX); set(CLANG_VERSION_SUFFIX ${LLVM_VERSION_SUFFIX}); endif(); set(CLANG_VERSION ""${CLANG_VERSION_MAJOR}.${CLANG_VERSION_MINOR}.${CLANG_VERSION_PATCHLEVEL}${CLANG_VERSION_SUFFIX}""); message(STATUS ""Clang version: ${CLANG_VERSION}""). # Configure the Version.inc file.; configure_file(; ${CMAKE_CURRE",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:11941,Integrability,message,message,11941,"DIR}); set(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. ""; ""Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.; if(NOT DEFINED CLANG_VERSION_MAJOR); set(CLANG_VERSION_MAJOR ${LLVM_VERSION_MAJOR}); endif(); if(NOT DEFINED CLANG_VERSION_MINOR); set(CLANG_VERSION_MINOR ${LLVM_VERSION_MINOR}); endif(); if(NOT DEFINED CLANG_VERSION_PATCHLEVEL); set(CLANG_VERSION_PATCHLEVEL ${LLVM_VERSION_PATCH}); endif(); if(NOT DEFINED CLANG_VERSION_SUFFIX); set(CLANG_VERSION_SUFFIX ${LLVM_VERSION_SUFFIX}); endif(); set(CLANG_VERSION ""${CLANG_VERSION_MAJOR}.${CLANG_VERSION_MINOR}.${CLANG_VERSION_PATCHLEVEL}${CLANG_VERSION_SUFFIX}""); message(STATUS ""Clang version: ${CLANG_VERSION}""). # Configure the Version.inc file.; configure_file(; ${CMAKE_CURRENT_SOURCE_DIR}/include/clang/Basic/Version.inc.in; ${CMAKE_CURRENT_BINARY_DIR}/include/clang/Basic/Version.inc). # Add appropriate flags for GCC; if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-common -Woverloaded-virtual""); if (NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing""); endif (). # Enable -pedantic for Clang even if it's not enabled for LLVM.; if (NOT LLVM_ENABLE_PEDANTIC); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Wno-long-long""); endif (). check_cxx_compiler_flag(""-Werror -Wnested-anon-types"" CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG); if( CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-nested-anon-types"" ); endif(); endif (). # Determine HOST_LINK_VERSION on Darwin.; set(HOST_LINK_VERSION); if (APPLE AND NOT CMAKE_LINK",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:13124,Integrability,message,message,13124,"ion.inc.in; ${CMAKE_CURRENT_BINARY_DIR}/include/clang/Basic/Version.inc). # Add appropriate flags for GCC; if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-common -Woverloaded-virtual""); if (NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fno-strict-aliasing""); endif (). # Enable -pedantic for Clang even if it's not enabled for LLVM.; if (NOT LLVM_ENABLE_PEDANTIC); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Wno-long-long""); endif (). check_cxx_compiler_flag(""-Werror -Wnested-anon-types"" CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG); if( CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-nested-anon-types"" ); endif(); endif (). # Determine HOST_LINK_VERSION on Darwin.; set(HOST_LINK_VERSION); if (APPLE AND NOT CMAKE_LINKER MATCHES "".*lld.*""); set(LD_V_OUTPUT); execute_process(; COMMAND sh -c ""${CMAKE_LINKER} -v 2>&1 | head -1""; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE LD_V_OUTPUT; ); if (HAD_ERROR); message(FATAL_ERROR ""${CMAKE_LINKER} failed with status ${HAD_ERROR}""); endif(); if (""${LD_V_OUTPUT}"" MATCHES "".*ld64-([0-9.]+).*""); string(REGEX REPLACE "".*ld64-([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); elseif (""${LD_V_OUTPUT}"" MATCHES ""[^0-9]*([0-9.]+).*""); string(REGEX REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT cl",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:13488,Integrability,message,message,13488,"d for LLVM.; if (NOT LLVM_ENABLE_PEDANTIC); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pedantic -Wno-long-long""); endif (). check_cxx_compiler_flag(""-Werror -Wnested-anon-types"" CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG); if( CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Wno-nested-anon-types"" ); endif(); endif (). # Determine HOST_LINK_VERSION on Darwin.; set(HOST_LINK_VERSION); if (APPLE AND NOT CMAKE_LINKER MATCHES "".*lld.*""); set(LD_V_OUTPUT); execute_process(; COMMAND sh -c ""${CMAKE_LINKER} -v 2>&1 | head -1""; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE LD_V_OUTPUT; ); if (HAD_ERROR); message(FATAL_ERROR ""${CMAKE_LINKER} failed with status ${HAD_ERROR}""); endif(); if (""${LD_V_OUTPUT}"" MATCHES "".*ld64-([0-9.]+).*""); string(REGEX REPLACE "".*ld64-([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); elseif (""${LD_V_OUTPUT}"" MATCHES ""[^0-9]*([0-9.]+).*""); string(REGEX REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:14225,Integrability,depend,depend,14225,""".*ld64-([0-9.]+).*""); string(REGEX REPLACE "".*ld64-([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); elseif (""${LD_V_OUTPUT}"" MATCHES ""[^0-9]*([0-9.]+).*""); string(REGEX REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); else(); set(HAVE_CLANG_PLUGIN_SUPPORT OFF); endif(); CMAKE_DEPENDENT_OPTION(CLANG_PLUGIN_SUPPORT; ""Build clang with plugin support"" ON; ""HAVE_CLANG_PLUGIN_SUPPORT"" ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:15814,Integrability,message,message,15814,"plete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); else(); set(HAVE_CLANG_PLUGIN_SUPPORT OFF); endif(); CMAKE_DEPENDENT_OPTION(CLANG_PLUGIN_SUPPORT; ""Build clang with plugin support"" ON; ""HAVE_CLANG_PLUGIN_SUPPORT"" OFF). # If libstdc++ is statically linked, clang-repl needs to statically link libstdc++; # itself, which is not possible in many platforms because of current limitations in; # JIT stack. (more platforms need to be supported by JITLink); if(NOT LLVM_STATIC_LINK_CXX_STDLIB); set(HAVE_CLANG_REPL_SUPPORT ON); endif(). option(CLANG_ENABLE_ARCMT ""Build ARCMT."" ON); option(CLANG_ENABLE_STATIC_ANALYZER; ""Include static analyzer in clang binary."" ON). option(CLANG_ENABLE_PROTO_FUZZER ""Build Clang protobuf fuzzer."" OFF). if(NOT CLANG_ENABLE_STATIC_ANALYZER AND CLANG_ENABLE_ARCMT); message(FATAL_ERROR ""Cannot disable static analyzer while enabling ARCMT or Z3""); endif(). if(CLANG_ENABLE_ARCMT); set(CLANG_ENABLE_OBJC_REWRITER ON); endif(). # This option is a stop-gap, we should commit to removing this as; # soon as possible. See discussion:; # https://discourse.llvm.org/t/rationale-for-removing-versioned-libclang-middle-ground-to-keep-it-behind-option/; option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; ""Force the SOVERSION of libclang to be equal to CLANG_MAJOR"" ON). # Clang version information; set(CLANG_EXECUTABLE_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the clang executable name""); set(LIBCLANG_LIBRARY_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the libclang library""); mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION). option(CLANG_INCLUDE_TESTS; ""Generate build targets for the Clang unit tests.""; ${LLVM_INCLUDE_TESTS}). option(CLANG_ENABLE_HLSL ""Include H",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:17158,Integrability,depend,depend,17158,"und-to-keep-it-behind-option/; option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; ""Force the SOVERSION of libclang to be equal to CLANG_MAJOR"" ON). # Clang version information; set(CLANG_EXECUTABLE_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the clang executable name""); set(LIBCLANG_LIBRARY_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the libclang library""); mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION). option(CLANG_INCLUDE_TESTS; ""Generate build targets for the Clang unit tests.""; ${LLVM_INCLUDE_TESTS}). option(CLANG_ENABLE_HLSL ""Include HLSL build products"" Off); # While HLSL support is experimental this should stay hidden.; mark_as_advanced(CLANG_ENABLE_HLSL). add_subdirectory(utils/TableGen). # Export CLANG_TABLEGEN_EXE for use by flang docs.; set(CLANG_TABLEGEN_EXE ""${CLANG_TABLEGEN_EXE}"" CACHE INTERNAL """"). add_subdirectory(include). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); add_custom_target(clang-tablegen-targets; DEPENDS; omp_gen; ClangDriverOptions; ${CLANG_TABLEGEN_TARGETS}); set_target_properties(clang-tablegen-targets PROPERTIES FOLDER ""Misc""); list(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets). # Force target to be built as soon as possible. Clang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intrinsics_gen.; if(LLVM_ENABLE_MODULES); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:17574,Integrability,depend,depend,17574,"bclang library""); mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION). option(CLANG_INCLUDE_TESTS; ""Generate build targets for the Clang unit tests.""; ${LLVM_INCLUDE_TESTS}). option(CLANG_ENABLE_HLSL ""Include HLSL build products"" Off); # While HLSL support is experimental this should stay hidden.; mark_as_advanced(CLANG_ENABLE_HLSL). add_subdirectory(utils/TableGen). # Export CLANG_TABLEGEN_EXE for use by flang docs.; set(CLANG_TABLEGEN_EXE ""${CLANG_TABLEGEN_EXE}"" CACHE INTERNAL """"). add_subdirectory(include). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); add_custom_target(clang-tablegen-targets; DEPENDS; omp_gen; ClangDriverOptions; ${CLANG_TABLEGEN_TARGETS}); set_target_properties(clang-tablegen-targets PROPERTIES FOLDER ""Misc""); list(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets). # Force target to be built as soon as possible. Clang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intrinsics_gen.; if(LLVM_ENABLE_MODULES); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); els",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:17711,Integrability,depend,depends,17711,"(CLANG_INCLUDE_TESTS; ""Generate build targets for the Clang unit tests.""; ${LLVM_INCLUDE_TESTS}). option(CLANG_ENABLE_HLSL ""Include HLSL build products"" Off); # While HLSL support is experimental this should stay hidden.; mark_as_advanced(CLANG_ENABLE_HLSL). add_subdirectory(utils/TableGen). # Export CLANG_TABLEGEN_EXE for use by flang docs.; set(CLANG_TABLEGEN_EXE ""${CLANG_TABLEGEN_EXE}"" CACHE INTERNAL """"). add_subdirectory(include). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); add_custom_target(clang-tablegen-targets; DEPENDS; omp_gen; ClangDriverOptions; ${CLANG_TABLEGEN_TARGETS}); set_target_properties(clang-tablegen-targets PROPERTIES FOLDER ""Misc""); list(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets). # Force target to be built as soon as possible. Clang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intrinsics_gen.; if(LLVM_ENABLE_MODULES); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endi",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:18608,Integrability,message,message,18608,"ang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intrinsics_gen.; if(LLVM_ENABLE_MODULES); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif()",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:19974,Integrability,message,message,19974,"BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/). if(BOOTSTRAP_LLVM_ENABLE_LLD); # adding lld to clang-bootstrap-deps without having it enabled in; # LLVM_ENABLE_PROJECTS just generates a cryptic error mes",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:20636,Integrability,message,message,20636,"NG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/). if(BOOTSTRAP_LLVM_ENABLE_LLD); # adding lld to clang-bootstrap-deps without having it enabled in; # LLVM_ENABLE_PROJECTS just generates a cryptic error message.; if (NOT ""lld"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""LLD is enabled in the bootstrap build, but lld is not in LLVM_ENABLE_PROJECTS""); endif(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_d",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:20999,Integrability,message,message,20999,"d_subdirectory(cmake/modules). if(CLANG_STAGE); message(STATUS ""Setting current clang stage to: ${CLANG_STAGE}""); endif(). if (CLANG_ENABLE_BOOTSTRAP); include(ExternalProject). add_custom_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/). if(BOOTSTRAP_LLVM_ENABLE_LLD); # adding lld to clang-bootstrap-deps without having it enabled in; # LLVM_ENABLE_PROJECTS just generates a cryptic error message.; if (NOT ""lld"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""LLD is enabled in the bootstrap build, but lld is not in LLVM_ENABLE_PROJECTS""); endif(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_dependencies(clang-bootstrap-deps LTO); # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work; # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH; # so that the host object file tools will use the just-built libLTO.; # However if System Integrity Protection is enabled th",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:21054,Integrability,message,message,21054,"om_target(clang-bootstrap-deps DEPENDS clang). if(NOT CLANG_STAGE); set(CLANG_STAGE stage1); endif(). string(REGEX MATCH ""stage([0-9]*)"" MATCHED_STAGE ""${CLANG_STAGE}""); if(MATCHED_STAGE); if(NOT LLVM_BUILD_INSTRUMENTED); math(EXPR STAGE_NUM ""${CMAKE_MATCH_1} + 1""); set(NEXT_CLANG_STAGE stage${STAGE_NUM}); else(); set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1}); endif(); else(); set(NEXT_CLANG_STAGE bootstrap); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented); endif(); message(STATUS ""Setting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/). if(BOOTSTRAP_LLVM_ENABLE_LLD); # adding lld to clang-bootstrap-deps without having it enabled in; # LLVM_ENABLE_PROJECTS just generates a cryptic error message.; if (NOT ""lld"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""LLD is enabled in the bootstrap build, but lld is not in LLVM_ENABLE_PROJECTS""); endif(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_dependencies(clang-bootstrap-deps LTO); # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work; # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH; # so that the host object file tools will use the just-built libLTO.; # However if System Integrity Protection is enabled the DYLD variables; # will be scrubbed from the environment of any base system commands. This; # includes /bin/sh, which ninja uses when executing build commands. To; # work around the en",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:21475,Integrability,depend,depend,21475,"etting next clang stage to: ${NEXT_CLANG_STAGE}""). set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/). if(BOOTSTRAP_LLVM_ENABLE_LLD); # adding lld to clang-bootstrap-deps without having it enabled in; # LLVM_ENABLE_PROJECTS just generates a cryptic error message.; if (NOT ""lld"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""LLD is enabled in the bootstrap build, but lld is not in LLVM_ENABLE_PROJECTS""); endif(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_dependencies(clang-bootstrap-deps LTO); # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work; # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH; # so that the host object file tools will use the just-built libLTO.; # However if System Integrity Protection is enabled the DYLD variables; # will be scrubbed from the environment of any base system commands. This; # includes /bin/sh, which ninja uses when executing build commands. To; # work around the envar being filtered away we pass it in as a CMake; # variable, and have LLVM's CMake append the envar to the archiver calls.; set(LTO_LIBRARY -DDARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib; -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR}); elseif(MSVC); add_dependencies(clang-bootstrap-deps llvm-lib); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-lib); elseif(NOT WIN32); add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib); if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR); add_depend",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:24032,Integrability,depend,depend,24032,"leared; ); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; DEPENDS clang-bootstrap-deps; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${STAMP_DIR}; COMMENT ""Clobberring ${NEXT_CLANG_STAGE} build and stamp directories""; ). if(CMAKE_VERBOSE_MAKEFILE); set(verbose -DCMAKE_VERBOSE_MAKEFILE=On); endif(). set(_BOOTSTRAP_DEFAULT_PASSTHROUGH; PACKAGE_VERSION; PACKAGE_VENDOR; LLVM_VERSION_MAJOR; LLVM_VERSION_MINOR; LLVM_VERSION_PATCH; CLANG_VERSION_MAJOR; CLANG_VERSION_MINOR; CLANG_VERSION_PATCHLEVEL; CLANG_VERSION_SUFFIX; CLANG_VENDOR; LLVM_VERSION_SUFFIX; LLVM_BINUTILS_INCDIR; CLANG_REPOSITORY_STRING; CMAKE_MAKE_PROGRAM; CMAKE_OSX_ARCHITECTURES; CMAKE_BUILD_TYPE; LLVM_ENABLE_PROJECTS; LLVM_ENABLE_RUNTIMES). # We don't need to depend on compiler-rt/libcxx if we're building instrumented; # because the next stage will use the same compiler used to build this stage.; if(NOT LLVM_BUILD_INSTRUMENTED); if(TARGET compiler-rt); add_dependencies(clang-bootstrap-deps compiler-rt); endif(); if(TARGET cxx-headers); add_dependencies(clang-bootstrap-deps cxx-headers); endif(); endif(). set(C_COMPILER ""clang""); set(CXX_COMPILER ""clang++""); if(WIN32); set(C_COMPILER ""clang-cl.exe""); set(CXX_COMPILER ""clang-cl.exe""); endif(). set(COMPILER_OPTIONS; -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${CXX_COMPILER}; -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${C_COMPILER}; -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${C_COMPILER}; -DCMAKE_ASM_COMPILER_ID=Clang). # cmake requires CMAKE_LINKER to be specified if the compiler is MSVC-like,; # otherwise it defaults the linker to be link.exe.; if(BOOTSTRAP_LLVM_ENABLE_LLD); if((WIN32 AND NOT BOOTSTRAP_CMAKE_SYSTEM_NAME) OR BOOTSTRAP_CMAKE_SYSTEM_NAME STREQUAL ""Windows""); set(${CLANG_STAGE}_LINKER -DCMAKE_LINKER=${LLVM_RUNTIME_",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:825,Modifiability,config,config,825,"cmake_minimum_required(VERSION 3.20.0). if(NOT DEFINED LLVM_COMMON_CMAKE_UTILS); set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); endif(); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # If we are not building as a part of LLVM, build Clang as an; # standalone project, using LLVM as an external library:; if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR); project(Clang); set(CLANG_BUILT_STANDALONE TRUE); endif(). # Must go below project(..); include(GNUInstallDirs). if(CLANG_BUILT_STANDALONE); set(CMAKE_CXX_STANDARD 17 CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES); set(CMAKE_CXX_EXTENSIONS NO). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). find_package(LLVM REQUIRED HINTS ""${LLVM_CMAKE_DIR}""); list(APPEND CMAKE_MODULE_PATH ""${LLVM_DIR}""). # Turn into CACHE PATHs for overwritting; set(LLVM_INCLUDE_DIRS ${LLVM_INCLUDE_DIRS} CACHE PATH ""Path to llvm/include and any other header dirs needed""); set(LLVM_BINARY_DIR ""${LLVM_BINARY_DIR}"" CACHE PATH ""Path to LLVM build tree""); set(LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../llvm"" CACHE PATH ""Path to LLVM source tree""); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_TOOLS_BINARY_DIR}"" CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ""${LLVM_LIBRARY_DIR}"" CACHE PATH ""Path to llvm/lib""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). opt",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:6937,Modifiability,config,configuration,6937,"file(dlfcn.h CLANG_HAVE_DLFCN_H); if( CLANG_HAVE_DLFCN_H ); include(CheckLibraryExists); include(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:7003,Modifiability,config,configuration-files,7003,"lude(CheckSymbolExists); check_library_exists(dl dlopen """" HAVE_LIBDL); if( HAVE_LIBDL ); list(APPEND CMAKE_REQUIRED_LIBRARIES dl); endif(); list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); check_symbol_exists(dladdr dlfcn.h CLANG_HAVE_DLADDR); list(REMOVE_ITEM CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE); if( HAVE_LIBDL ); list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES dl); endif(); endif(). set(CLANG_RESOURCE_DIR """" CACHE STRING; ""Relative directory from the Clang binary to its resource files.""). set(C_INCLUDE_DIRS """" CACHE STRING; ""Colon separated list of directories clang will search for headers.""). set(GCC_INSTALL_PREFIX """" CACHE PATH ""Directory where gcc is installed."" ); set(DEFAULT_SYSROOT """" CACHE STRING; ""Default <path> to all compiler invocations for --sysroot=<path>."" ); if(GCC_INSTALL_PREFIX); message(WARNING ""GCC_INSTALL_PREFIX is deprecated and will be removed. Use ""; ""configuration files (https://clang.llvm.org/docs/UsersManual.html#configuration-files)""; ""to specify the default --gcc-install-dir= or --gcc-triple=. --gcc-toolchain= is discouraged. ""; ""See https://github.com/llvm/llvm-project/pull/77537 for detail.""); endif(). set(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL ""pass --build-id to ld""). set(ENABLE_X86_RELAX_RELOCATIONS ON CACHE BOOL; ""enable x86 relax relocations by default""). set(PPC_LINUX_DEFAULT_IEEELONGDOUBLE OFF CACHE BOOL; ""Enable IEEE binary128 as default long double format on PowerPC Linux.""). set(CLANG_SPAWN_CC1 OFF CACHE BOOL; ""Whether clang should use a new process for the CC1 invocation""). option(CLANG_DEFAULT_PIE_ON_LINUX ""Default to -fPIE and -pie on linux-gnu"" ON). set(CLANG_DEFAULT_LINKER """" CACHE STRING; ""Default linker to use (linker name or absolute path, empty for platform default)""). set(CLANG_DEFAULT_CXX_STDLIB """" CACHE STRING; ""Default C++ stdlib to use (\""libstdc++\"" or \""libc++\"", empty for platform default""); if (NOT(CLANG_DEFAULT_CXX_STDLIB STREQUAL """" OR; CLANG_DEFAULT_CXX_STDLIB STREQUAL ""libstdc++"" OR; CLANG_DEFAULT_",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:10642,Modifiability,config,configuration,10642,"EFAULT_OPENMP_RUNTIME ""libomp"" CACHE STRING; ""Default OpenMP runtime used by -fopenmp.""). set(CLANG_SYSTEMZ_DEFAULT_ARCH ""z10"" CACHE STRING ""SystemZ Default Arch""). set(CLANG_VENDOR ${PACKAGE_VENDOR} CACHE STRING; ""Vendor-specific text for showing with version information.""). set(CLANG_REPOSITORY_STRING """" CACHE STRING; ""Vendor-specific text for showing the repository the source is taken from.""). if(CLANG_REPOSITORY_STRING); add_definitions(-DCLANG_REPOSITORY_STRING=""${CLANG_REPOSITORY_STRING}""); endif(). set(CLANG_VENDOR_UTI ""org.llvm.clang"" CACHE STRING; ""Vendor-specific uti.""). set(CLANG_PYTHON_BINDINGS_VERSIONS """" CACHE STRING; ""Python versions to install libclang python bindings for""). set(CLANG_LINK_CLANG_DYLIB ${LLVM_LINK_LLVM_DYLIB} CACHE BOOL; ""Link tools against libclang-cpp.so""). if (NOT LLVM_LINK_LLVM_DYLIB AND CLANG_LINK_CLANG_DYLIB); message(FATAL_ERROR ""Cannot set CLANG_LINK_CLANG_DYLIB=ON when ""; ""LLVM_LINK_LLVM_DYLIB=OFF""); endif(). # The libdir suffix must exactly match whatever LLVM's configuration used.; set(CLANG_LIBDIR_SUFFIX ""${LLVM_LIBDIR_SUFFIX}""). set(CLANG_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE PATH; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(CLANG_TOOLS_INSTALL_DIR). set(CLANG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}); set(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed. ""; ""Please create a directory and run cmake ""; ""from there, passing the path to this source directory as the last argument. ""; ""This process created the file `CMakeCache.txt' and the directory ""; ""`CMakeFiles'. Please delete them.""); endif(). # If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.; if(NOT DEFINED CLANG_VERSION_MAJOR); set(CLANG_VERSION_MAJOR ${LLVM_VERSION_MAJOR}); endif(); if(NOT DEFINED CLANG_VERSION_MINOR); set(CLANG_VERSION_MINOR ${LLVM_VERSION_MINOR}); endif(); if(",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:13959,Modifiability,config,config,13959,".*""); set(LD_V_OUTPUT); execute_process(; COMMAND sh -c ""${CMAKE_LINKER} -v 2>&1 | head -1""; RESULT_VARIABLE HAD_ERROR; OUTPUT_VARIABLE LD_V_OUTPUT; ); if (HAD_ERROR); message(FATAL_ERROR ""${CMAKE_LINKER} failed with status ${HAD_ERROR}""); endif(); if (""${LD_V_OUTPUT}"" MATCHES "".*ld64-([0-9.]+).*""); string(REGEX REPLACE "".*ld64-([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); elseif (""${LD_V_OUTPUT}"" MATCHES ""[^0-9]*([0-9.]+).*""); string(REGEX REPLACE ""[^0-9]*([0-9.]+).*"" ""\\1"" HOST_LINK_VERSION ${LD_V_OUTPUT}); endif(); message(STATUS ""Host linker version: ${HOST_LINK_VERSION}""); endif(). include(CMakeParseArguments); include(AddClang). set(CMAKE_INCLUDE_CURRENT_DIR ON). include_directories(BEFORE; ${CMAKE_CURRENT_BINARY_DIR}/include; ${CMAKE_CURRENT_SOURCE_DIR}/include; ). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/clang include/clang-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""config.h"" EXCLUDE; ). install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT clang-headers; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate b",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:15187,Modifiability,plugin,plugin,15187,"s; FILES_MATCHING; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""*.inc""; PATTERN ""*.h""; ). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(clang-headers DEPENDS clang-tablegen-targets); set_target_properties(clang-headers PROPERTIES FOLDER ""Misc""); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-headers; DEPENDS clang-headers; COMPONENT clang-headers); endif(). add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh); install(FILES utils/bash-autocomplete.sh; DESTINATION ""${CMAKE_INSTALL_DATADIR}/clang""; COMPONENT bash-autocomplete); if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-bash-autocomplete; DEPENDS bash-autocomplete; COMPONENT bash-autocomplete); endif(); endif(). option(CLANG_BUILD_TOOLS; ""Build the Clang tools. If OFF, just generate build targets."" ON). if(LLVM_ENABLE_PLUGINS OR LLVM_EXPORT_SYMBOLS_FOR_PLUGINS); set(HAVE_CLANG_PLUGIN_SUPPORT ON); else(); set(HAVE_CLANG_PLUGIN_SUPPORT OFF); endif(); CMAKE_DEPENDENT_OPTION(CLANG_PLUGIN_SUPPORT; ""Build clang with plugin support"" ON; ""HAVE_CLANG_PLUGIN_SUPPORT"" OFF). # If libstdc++ is statically linked, clang-repl needs to statically link libstdc++; # itself, which is not possible in many platforms because of current limitations in; # JIT stack. (more platforms need to be supported by JITLink); if(NOT LLVM_STATIC_LINK_CXX_STDLIB); set(HAVE_CLANG_REPL_SUPPORT ON); endif(). option(CLANG_ENABLE_ARCMT ""Build ARCMT."" ON); option(CLANG_ENABLE_STATIC_ANALYZER; ""Include static analyzer in clang binary."" ON). option(CLANG_ENABLE_PROTO_FUZZER ""Build Clang protobuf fuzzer."" OFF). if(NOT CLANG_ENABLE_STATIC_ANALYZER AND CLANG_ENABLE_ARCMT); message(FATAL_ERROR ""Cannot disable static analyzer while enabling ARCMT or Z3""); endif(). if(CLANG_ENABLE_ARCMT); set(CLANG_ENABLE_OBJC_REWRITER ON); endif(). # This option is a stop-gap, we should commit to removing this as; # soon as possible. See discussion:; # https://discourse.llvm.org/t",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:21934,Modifiability,variab,variables,21934,"n; # LLVM_ENABLE_PROJECTS just generates a cryptic error message.; if (NOT ""lld"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""LLD is enabled in the bootstrap build, but lld is not in LLVM_ENABLE_PROJECTS""); endif(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_dependencies(clang-bootstrap-deps LTO); # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work; # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH; # so that the host object file tools will use the just-built libLTO.; # However if System Integrity Protection is enabled the DYLD variables; # will be scrubbed from the environment of any base system commands. This; # includes /bin/sh, which ninja uses when executing build commands. To; # work around the envar being filtered away we pass it in as a CMake; # variable, and have LLVM's CMake append the envar to the archiver calls.; set(LTO_LIBRARY -DDARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib; -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR}); elseif(MSVC); add_dependencies(clang-bootstrap-deps llvm-lib); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-lib); elseif(NOT WIN32); add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib); if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR); add_dependencies(clang-bootstrap-deps LLVMgold); endif(); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar); set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib); endif(); endif(). if(CLANG_BOOTSTRAP_EXTRA_DEPS); add_dependencies(clang-bootstrap",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:22164,Modifiability,variab,variable,22164,"(); add_dependencies(clang-bootstrap-deps lld); endif(). if (WIN32); # Build llvm-rc and llvm-mt which are needed by the Windows build.; add_dependencies(clang-bootstrap-deps llvm-rc); if(LLVM_ENABLE_LIBXML2); add_dependencies(clang-bootstrap-deps llvm-mt); endif(); endif(). # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold; if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED); if(APPLE); add_dependencies(clang-bootstrap-deps LTO); # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work; # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH; # so that the host object file tools will use the just-built libLTO.; # However if System Integrity Protection is enabled the DYLD variables; # will be scrubbed from the environment of any base system commands. This; # includes /bin/sh, which ninja uses when executing build commands. To; # work around the envar being filtered away we pass it in as a CMake; # variable, and have LLVM's CMake append the envar to the archiver calls.; set(LTO_LIBRARY -DDARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib; -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR}); elseif(MSVC); add_dependencies(clang-bootstrap-deps llvm-lib); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-lib); elseif(NOT WIN32); add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib); if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR); add_dependencies(clang-bootstrap-deps LLVMgold); endif(); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar); set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib); endif(); endif(). if(CLANG_BOOTSTRAP_EXTRA_DEPS); add_dependencies(clang-bootstrap-deps ${CLANG_BOOTSTRAP_EXTRA_DEPS}); endif(). add_custom_target(${NEXT_CLANG_STAGE}-clear; DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; ); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${N",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:26816,Modifiability,variab,variables,26816,"LVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip); set(${CLANG_STAGE}_READELF -DCMAKE_READELF=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-readelf); endif(); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps llvm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:26835,Modifiability,variab,variableName,26835,"LVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip); set(${CLANG_STAGE}_READELF -DCMAKE_READELF=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-readelf); endif(); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps llvm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:26928,Modifiability,variab,variableName,26928,"LVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip); set(${CLANG_STAGE}_READELF -DCMAKE_READELF=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-readelf); endif(); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps llvm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:26952,Modifiability,variab,variableName,26952,"LVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip); set(${CLANG_STAGE}_READELF -DCMAKE_READELF=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-readelf); endif(); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps llvm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27039,Modifiability,variab,variableName,27039,"LVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip); set(${CLANG_STAGE}_READELF -DCMAKE_READELF=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-readelf); endif(); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps llvm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27105,Modifiability,variab,variableName,27105,"LVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip); set(${CLANG_STAGE}_READELF -DCMAKE_READELF=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-readelf); endif(); endif(). if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps llvm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27164,Modifiability,variab,variables,27164,"vm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27216,Modifiability,variab,variable,27216,"vm-profdata); set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata); endif(). if(LLVM_BUILD_INSTRUMENTED); add_dependencies(clang-bootstrap-deps generate-profdata); set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27259,Modifiability,variab,variableNames,27259,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27293,Modifiability,variab,variableName,27293,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27308,Modifiability,variab,variableNames,27308,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27328,Modifiability,variab,variableName,27328,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27384,Modifiability,variab,variableName,27384,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27448,Modifiability,variab,variableName,27448,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27539,Modifiability,variab,variableName,27539,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27557,Modifiability,variab,variableName,27557,"AKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata); # Use the current tools for LTO instead of the instrumented ones; list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH; CMAKE_CXX_COMPILER; CMAKE_C_COMPILER; CMAKE_ASM_COMPILER; CMAKE_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27649,Modifiability,variab,variableName,27649,"_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:27667,Modifiability,variab,variableName,27667,"_AR; CMAKE_RANLIB; DARWIN_LTO_LIBRARY; DYLD_LIBRARY_PATH). set(COMPILER_OPTIONS); set(LTO_LIBRARY); set(LTO_AR); set(LTO_RANLIB); endif(). # Populate the passthrough variables; foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH}); if(DEFINED ${variableName}); if(""${${variableName}}"" STREQUAL """"); set(value """"); else(); string(REPLACE "";"" ""|"" value ""${${variableName}}""); endif(); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${value}); endif(); endforeach(). # Find all variables that start with BOOTSTRAP_ and populate a variable with; # them.; get_cmake_property(variableNames VARIABLES); foreach(variableName ${variableNames}); if(variableName MATCHES ""^BOOTSTRAP_""); string(SUBSTRING ${variableName} 10 -1 varName); string(REPLACE "";"" ""|"" value ""${${variableName}}""); list(APPEND PASSTHROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:28754,Modifiability,config,config,28754,"THROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLAN",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:28838,Modifiability,config,configure,28838,"THROUGH_VARIABLES; -D${varName}=${value}); endif(); if(${variableName} AND variableName MATCHES ""LLVM_EXTERNAL_.*_SOURCE_DIR""); list(APPEND PASSTHROUGH_VARIABLES; -D${variableName}=${${variableName}}); endif(); endforeach(). # Build arguments for native tool used in CMake.; set(build_configuration ""$<CONFIG>""); set(build_tool_args ""${LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS}""); if(NOT build_tool_args STREQUAL """"); string(PREPEND build_tool_args ""-- ""); separate_arguments(build_tool_args UNIX_COMMAND ""${build_tool_args}""); endif(). ExternalProject_Add(${NEXT_CLANG_STAGE}; DEPENDS clang-bootstrap-deps; PREFIX ${NEXT_CLANG_STAGE}; SOURCE_DIR ${CMAKE_SOURCE_DIR}; STAMP_DIR ${STAMP_DIR}; BINARY_DIR ${BINARY_DIR}; EXCLUDE_FROM_ALL 1; CMAKE_ARGS; # We shouldn't need to set this here, but INSTALL_DIR doesn't; # seem to work, so instead I'm passing this through; -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}; ${PASSTHROUGH_VARIABLES}; ${CLANG_BOOTSTRAP_CMAKE_ARGS}; -DCLANG_STAGE=${NEXT_CLANG_STAGE}; ${COMPILER_OPTIONS}; ${${CLANG_STAGE}_TABLEGEN}; ${LTO_LIBRARY} ${verbose} ${PGO_OPT}; ${${CLANG_STAGE}_LINKER}; ${${CLANG_STAGE}_AR}; ${${CLANG_STAGE}_RANLIB}; ${${CLANG_STAGE}_OBJCOPY}; ${${CLANG_STAGE}_STRIP}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR}; --config ${build_configuration}; ${build_tool_args}; INSTALL_COMMAND """"; STEP_TARGETS configure build; USES_TERMINAL_CONFIGURE 1; USES_TERMINAL_BUILD 1; USES_TERMINAL_INSTALL 1; LIST_SEPARATOR |; ). # exclude really-install from main target; set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On); ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install; COMMENT ""Performing install step for '${NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLAN",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:30312,Modifiability,config,configure,30312,"NEXT_CLANG_STAGE}'""; DEPENDEES build; USES_TERMINAL 1; ); ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install); add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install). if(NOT CLANG_BOOTSTRAP_TARGETS); set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all); endif(); foreach(target ${CLANG_BOOTSTRAP_TARGETS}); # Install targets have side effects, so we always want to execute them.; # ""install"" is reserved by CMake and can't be used as a step name for; # ExternalProject_Add_Step, so we can match against ""^install-"" instead of; # ""^install"" to get a tighter match. CMake's installation scripts already; # skip up-to-date files, so there's no behavior change if you install to the; # same destination multiple times.; if(target MATCHES ""^install-""); set(step_always ON); else(); set(step_always OFF); endif(). ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}; COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/prof.fdata). # Instrument clang with BOLT; add_custom_target(clang-instrumented; DEPENDS ${CLANG_INSTRUMENTED}; ); add_custom_command(OUTPUT ${CLANG_INSTRUMENTED}; DEPENDS clang llvm-bolt; COMMAND llvm-bolt ${CLANG_PATH} -o ${CLANG_INSTRUMENTED}; -instrument --instrumentation-file-append-pid; --instrumentation-file=${BOLT_FDATA}; COMMENT ""Instrumenting clang binary with BOLT""; VERBATIM; ). # Optimize original (pre-bolt) Clang using the co",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:32162,Modifiability,config,config,32162,"et ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/prof.fdata). # Instrument clang with BOLT; add_custom_target(clang-instrumented; DEPENDS ${CLANG_INSTRUMENTED}; ); add_custom_command(OUTPUT ${CLANG_INSTRUMENTED}; DEPENDS clang llvm-bolt; COMMAND llvm-bolt ${CLANG_PATH} -o ${CLANG_INSTRUMENTED}; -instrument --instrumentation-file-append-pid; --instrumentation-file=${BOLT_FDATA}; COMMENT ""Instrumenting clang binary with BOLT""; VERBATIM; ). # Optimize original (pre-bolt) Clang using the collected profile; set(CLANG_OPTIMIZED ${CMAKE_CURRENT_BINARY_DIR}/clang.bolt); add_custom_target(clang-bolt; DEPENDS ${CLANG_OPTIMIZED}; ); add_custom_command(OUTPUT ${CLANG_OPTIMIZED}; DEPENDS clang-bolt-profile; COMMAND llvm-bolt ${CLANG_PATH}; -o ${CLANG_OPTIMIZED}; -data ${BOLT_FDATA}; -reorder-blocks=ext-tsp -reorder-functions=hfsort+ -split-functions; -split-all-cold -split-eh -dyno-stats -icf=1 -use-gnu-stack; COMMAND ${CMAKE_COMMAND} -E rename ${CLANG_OPTIMIZED} $<TARGET_FILE:clang>; COMMENT ""Optimizing Clang with BOLT""; VERBATIM; ); endif(). if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/ClangVisualizers); endif(); add_subdirectory(utils/hmaptool). if(CLANG_BUILT_STANDALONE); llvm_distribution_add_targets(); process_llvm_pass_plugins(); endif(). set(CLANG_INSTALL_LIBDIR_BASENAME ""lib${CLANG_LIBDIR_SUFFIX}""). configure_file(; ${CLANG_SOURCE_DIR}/include/clang/Config/config.h.cmake; ${CLANG_BINARY_DIR}/include/clang/Config/config.h); ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:32219,Modifiability,config,config,32219,"et ${target}; COMMENT ""Performing ${target} for '${NEXT_CLANG_STAGE}'""; DEPENDEES configure; ALWAYS ${step_always}; EXCLUDE_FROM_MAIN ON; USES_TERMINAL 1; ). if(target MATCHES ""^stage[0-9]*""); add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target}); endif(). ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target}); endforeach(); endif(). if (CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); set(CLANG_PATH ${LLVM_RUNTIME_OUTPUT_INTDIR}/clang); set(CLANG_INSTRUMENTED ${CLANG_PATH}-bolt.inst); set(BOLT_FDATA ${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/prof.fdata). # Instrument clang with BOLT; add_custom_target(clang-instrumented; DEPENDS ${CLANG_INSTRUMENTED}; ); add_custom_command(OUTPUT ${CLANG_INSTRUMENTED}; DEPENDS clang llvm-bolt; COMMAND llvm-bolt ${CLANG_PATH} -o ${CLANG_INSTRUMENTED}; -instrument --instrumentation-file-append-pid; --instrumentation-file=${BOLT_FDATA}; COMMENT ""Instrumenting clang binary with BOLT""; VERBATIM; ). # Optimize original (pre-bolt) Clang using the collected profile; set(CLANG_OPTIMIZED ${CMAKE_CURRENT_BINARY_DIR}/clang.bolt); add_custom_target(clang-bolt; DEPENDS ${CLANG_OPTIMIZED}; ); add_custom_command(OUTPUT ${CLANG_OPTIMIZED}; DEPENDS clang-bolt-profile; COMMAND llvm-bolt ${CLANG_PATH}; -o ${CLANG_OPTIMIZED}; -data ${BOLT_FDATA}; -reorder-blocks=ext-tsp -reorder-functions=hfsort+ -split-functions; -split-all-cold -split-eh -dyno-stats -icf=1 -use-gnu-stack; COMMAND ${CMAKE_COMMAND} -E rename ${CLANG_OPTIMIZED} $<TARGET_FILE:clang>; COMMENT ""Optimizing Clang with BOLT""; VERBATIM; ); endif(). if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/ClangVisualizers); endif(); add_subdirectory(utils/hmaptool). if(CLANG_BUILT_STANDALONE); llvm_distribution_add_targets(); process_llvm_pass_plugins(); endif(). set(CLANG_INSTALL_LIBDIR_BASENAME ""lib${CLANG_LIBDIR_SUFFIX}""). configure_file(; ${CLANG_SOURCE_DIR}/include/clang/Config/config.h.cmake; ${CLANG_BINARY_DIR}/include/clang/Config/config.h); ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:779,Testability,assert,assertions,779,"cmake_minimum_required(VERSION 3.20.0). if(NOT DEFINED LLVM_COMMON_CMAKE_UTILS); set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); endif(); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # If we are not building as a part of LLVM, build Clang as an; # standalone project, using LLVM as an external library:; if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR); project(Clang); set(CLANG_BUILT_STANDALONE TRUE); endif(). # Must go below project(..); include(GNUInstallDirs). if(CLANG_BUILT_STANDALONE); set(CMAKE_CXX_STANDARD 17 CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES); set(CMAKE_CXX_EXTENSIONS NO). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). find_package(LLVM REQUIRED HINTS ""${LLVM_CMAKE_DIR}""); list(APPEND CMAKE_MODULE_PATH ""${LLVM_DIR}""). # Turn into CACHE PATHs for overwritting; set(LLVM_INCLUDE_DIRS ${LLVM_INCLUDE_DIRS} CACHE PATH ""Path to llvm/include and any other header dirs needed""); set(LLVM_BINARY_DIR ""${LLVM_BINARY_DIR}"" CACHE PATH ""Path to LLVM build tree""); set(LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../llvm"" CACHE PATH ""Path to LLVM source tree""); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_TOOLS_BINARY_DIR}"" CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ""${LLVM_LIBRARY_DIR}"" CACHE PATH ""Path to llvm/lib""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). opt",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:4252,Testability,test,tests,4252,"ECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(). # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""). if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/llvm-lit); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/llvm-lit utils/llvm-lit); endif(); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); endif(). if (NOT TARGET llvm_gtest); message(FATAL_ERROR ""llvm-gtest not found. Please install llvm-gtest or disable tests with -DLLVM_INCLUDE_TESTS=OFF""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). get_errc_messages(LLVM_LIT_ERRC_MESSAGES). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); else(); set(LLVM_INCLUDE_TESTS OFF); endif(). umbrella_lit_testsuite_begin(check-all); endif() # LLVM_INCLUDE_TESTS; endif() # standalone. # Make sure that our source directory is on the current cmake module path so that; # we can include cmake files from this directory.; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # This allows disabling clang's",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:16760,Testability,test,tests,16760,"g protobuf fuzzer."" OFF). if(NOT CLANG_ENABLE_STATIC_ANALYZER AND CLANG_ENABLE_ARCMT); message(FATAL_ERROR ""Cannot disable static analyzer while enabling ARCMT or Z3""); endif(). if(CLANG_ENABLE_ARCMT); set(CLANG_ENABLE_OBJC_REWRITER ON); endif(). # This option is a stop-gap, we should commit to removing this as; # soon as possible. See discussion:; # https://discourse.llvm.org/t/rationale-for-removing-versioned-libclang-middle-ground-to-keep-it-behind-option/; option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; ""Force the SOVERSION of libclang to be equal to CLANG_MAJOR"" ON). # Clang version information; set(CLANG_EXECUTABLE_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the clang executable name""); set(LIBCLANG_LIBRARY_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the libclang library""); mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION). option(CLANG_INCLUDE_TESTS; ""Generate build targets for the Clang unit tests.""; ${LLVM_INCLUDE_TESTS}). option(CLANG_ENABLE_HLSL ""Include HLSL build products"" Off); # While HLSL support is experimental this should stay hidden.; mark_as_advanced(CLANG_ENABLE_HLSL). add_subdirectory(utils/TableGen). # Export CLANG_TABLEGEN_EXE for use by flang docs.; set(CLANG_TABLEGEN_EXE ""${CLANG_TABLEGEN_EXE}"" CACHE INTERNAL """"). add_subdirectory(include). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); add_custom_target(clang-tablegen-targets; DEPENDS; omp_gen; ClangDriverOptions; ${CLANG_TABLEGEN_TARGETS}); set_target_properties(clang-tablegen-targets PROPERTIES FOLDER ""Misc""); list(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets). # Force target to be built as soon as possible. Clang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intri",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:18901,Testability,test,test,18901,"if(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); ",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:18945,Testability,test,test,18945,"y default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules).",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:18985,Testability,test,tests,18985,"y default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); add_dependencies(install-clang-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(). add_subdirectory(cmake/modules).",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:23027,Usability,clear,clear,23027,"ARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib; -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR}); elseif(MSVC); add_dependencies(clang-bootstrap-deps llvm-lib); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-lib); elseif(NOT WIN32); add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib); if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR); add_dependencies(clang-bootstrap-deps LLVMgold); endif(); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar); set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib); endif(); endif(). if(CLANG_BOOTSTRAP_EXTRA_DEPS); add_dependencies(clang-bootstrap-deps ${CLANG_BOOTSTRAP_EXTRA_DEPS}); endif(). add_custom_target(${NEXT_CLANG_STAGE}-clear; DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; ); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; DEPENDS clang-bootstrap-deps; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${STAMP_DIR}; COMMENT ""Clobberring ${NEXT_CLANG_STAGE} build and stamp directories""; ). if(CMAKE_VERBOSE_MAKEFILE); set(verbose -DCMAKE_VERBOSE_MAKEFILE=On); endif(). set(_BOOTSTRAP_DEFAULT_PASSTHROUGH; PACKAGE_VERSION; PACKAGE_VENDOR; LLVM_VERSION_MAJOR; LLVM_VERSION_MINOR; LLVM_VERSION_PATCH; CLANG_VERSION_MAJOR; CLANG_VERSION_MINOR; CLANG_VERSION_PATCHLEVEL; CLANG_VERSION_SUFFIX; CLANG_VENDOR; LLVM_VERSION_SUFFIX; LLVM_BINUTILS_INCDIR; CLANG_REPOSITORY_STRING; CMAKE_MAKE_PROGRAM; CMAKE_OSX_ARCHITECTURES; CMAKE_BUILD_TYPE; LLVM_ENABLE_PROJECTS; LLVM_ENABLE_RUNTIMES). # We don't need to depend on compiler-rt/libcxx if we're building instrumented; # because the next stage will use the same compiler used to build this stage.; if(NOT LLVM_BUILD_INSTRUMENTED); if(TARGET compiler-rt); add_dependencies(clang-boot",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:23090,Usability,clear,cleared,23090,"ARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib; -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR}); elseif(MSVC); add_dependencies(clang-bootstrap-deps llvm-lib); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-lib); elseif(NOT WIN32); add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib); if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR); add_dependencies(clang-bootstrap-deps LLVMgold); endif(); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar); set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib); endif(); endif(). if(CLANG_BOOTSTRAP_EXTRA_DEPS); add_dependencies(clang-bootstrap-deps ${CLANG_BOOTSTRAP_EXTRA_DEPS}); endif(). add_custom_target(${NEXT_CLANG_STAGE}-clear; DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; ); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; DEPENDS clang-bootstrap-deps; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${STAMP_DIR}; COMMENT ""Clobberring ${NEXT_CLANG_STAGE} build and stamp directories""; ). if(CMAKE_VERBOSE_MAKEFILE); set(verbose -DCMAKE_VERBOSE_MAKEFILE=On); endif(). set(_BOOTSTRAP_DEFAULT_PASSTHROUGH; PACKAGE_VERSION; PACKAGE_VENDOR; LLVM_VERSION_MAJOR; LLVM_VERSION_MINOR; LLVM_VERSION_PATCH; CLANG_VERSION_MAJOR; CLANG_VERSION_MINOR; CLANG_VERSION_PATCHLEVEL; CLANG_VERSION_SUFFIX; CLANG_VENDOR; LLVM_VERSION_SUFFIX; LLVM_BINUTILS_INCDIR; CLANG_REPOSITORY_STRING; CMAKE_MAKE_PROGRAM; CMAKE_OSX_ARCHITECTURES; CMAKE_BUILD_TYPE; LLVM_ENABLE_PROJECTS; LLVM_ENABLE_RUNTIMES). # We don't need to depend on compiler-rt/libcxx if we're building instrumented; # because the next stage will use the same compiler used to build this stage.; if(NOT LLVM_BUILD_INSTRUMENTED); if(TARGET compiler-rt); add_dependencies(clang-boot",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:23178,Usability,clear,cleared,23178,"ARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib; -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR}); elseif(MSVC); add_dependencies(clang-bootstrap-deps llvm-lib); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-lib); elseif(NOT WIN32); add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib); if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR); add_dependencies(clang-bootstrap-deps LLVMgold); endif(); set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar); set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib); endif(); endif(). if(CLANG_BOOTSTRAP_EXTRA_DEPS); add_dependencies(clang-bootstrap-deps ${CLANG_BOOTSTRAP_EXTRA_DEPS}); endif(). add_custom_target(${NEXT_CLANG_STAGE}-clear; DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; ); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared; DEPENDS clang-bootstrap-deps; COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${BINARY_DIR}; COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}; COMMAND ${CMAKE_COMMAND} -E make_directory ${STAMP_DIR}; COMMENT ""Clobberring ${NEXT_CLANG_STAGE} build and stamp directories""; ). if(CMAKE_VERBOSE_MAKEFILE); set(verbose -DCMAKE_VERBOSE_MAKEFILE=On); endif(). set(_BOOTSTRAP_DEFAULT_PASSTHROUGH; PACKAGE_VERSION; PACKAGE_VENDOR; LLVM_VERSION_MAJOR; LLVM_VERSION_MINOR; LLVM_VERSION_PATCH; CLANG_VERSION_MAJOR; CLANG_VERSION_MINOR; CLANG_VERSION_PATCHLEVEL; CLANG_VERSION_SUFFIX; CLANG_VENDOR; LLVM_VERSION_SUFFIX; LLVM_BINUTILS_INCDIR; CLANG_REPOSITORY_STRING; CMAKE_MAKE_PROGRAM; CMAKE_OSX_ARCHITECTURES; CMAKE_BUILD_TYPE; LLVM_ENABLE_PROJECTS; LLVM_ENABLE_RUNTIMES). # We don't need to depend on compiler-rt/libcxx if we're building instrumented; # because the next stage will use the same compiler used to build this stage.; if(NOT LLVM_BUILD_INSTRUMENTED); if(TARGET compiler-rt); add_dependencies(clang-boot",MatchSource.DOCS,interpreter/llvm-project/clang/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:2033,Availability,avail,available,2033,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:245,Deployability,install,install,245,"//===----------------------------------------------------------------------===//; // Clang Installation Instructions; //===----------------------------------------------------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; co",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:609,Deployability,install,installed,609,"//===----------------------------------------------------------------------===//; // Clang Installation Instructions; //===----------------------------------------------------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; co",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1125,Deployability,install,installed,1125,"---------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.;",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1892,Deployability,install,install,1892,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1904,Deployability,install,install,1904,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:2106,Integrability,interface,interface,2106,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1999,Modifiability,config,configured,1999,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1531,Testability,test,tests,1531,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1628,Testability,test,test,1628,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt:1646,Testability,test,tests,1646,"--------------------------===//. These instructions describe how to build and install Clang. //===----------------------------------------------------------------------===//; // Step 1: Organization; //===----------------------------------------------------------------------===//. Clang is designed to be built as part of an LLVM build. Assuming that the LLVM; source code is located at $LLVM_SRC_ROOT, then the clang source code should be; installed as:. $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the; LLVM build system to automatically recognize it and build it along with LLVM. //===----------------------------------------------------------------------===//; // Step 2: Configure and Build LLVM; //===----------------------------------------------------------------------===//. Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html; for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will; automatically be built with LLVM. Otherwise, run 'make' in the Clang source; directory to build Clang. //===----------------------------------------------------------------------===//; // Step 3: (Optional) Verify Your Build; //===----------------------------------------------------------------------===//. It is a good idea to run the Clang tests to make sure your build works; correctly. From inside the Clang build directory, run 'make test' to run the; tests. //===----------------------------------------------------------------------===//; // Step 4: Install Clang; //===----------------------------------------------------------------------===//. From inside the Clang build directory, run 'make install' to install the Clang; compiler and header files into the prefix directory selected when LLVM was; configured. The Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like; command line interface. See the man page for clang for more information.; ",MatchSource.DOCS,interpreter/llvm-project/clang/INSTALL.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/INSTALL.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:1691,Availability,avail,available,1691,"t control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:8653,Availability,failure,failure,8653,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:1363,Deployability,configurat,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:867,Energy Efficiency,power,power,867,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:3558,Energy Efficiency,charge,charge,3558," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:3943,Energy Efficiency,charge,charge,3943,"nication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infringement, then any patent licenses; granted to You under this License for that Work shall terminate; as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the; Work or Derivative Works thereof in any medium, with or without; modifications, and in Source or Object form, provided that You; meet the following conditions:. (a) You must give any other recipients of the Work or; Derivative Works a copy of this License; and. (b) You must cause",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:8946,Energy Efficiency,charge,charge,8946," of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright n",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:12650,Energy Efficiency,charge,charge,12650,"ed clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2007-2019 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies; of the Software, and to permit persons to whom the Software is furnished to do; so, subject to the following conditions:. * Redistributions of source code must retain the above copyright notice,; this list of conditions and the following disclaimers. * Redistributions in binary form must reproduce the above copyright notice,; this list of conditions and the following disclaimers in the; documentation and/or other materials provided with the distribution. * Neither the names of the LLVM Team, University of Illinois at; Urbana-Champaign, nor the names of its contributors may be used to; endorse or promote products derived from this Software without specific; prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS; FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO ",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:959,Integrability,contract,contract,959,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:2259,Integrability,interface,interfaces,2259," ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""C",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:8201,Integrability,contract,contract,8201,"cing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability.",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:1363,Modifiability,config,configuration,1363,"licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:3682,Performance,perform,perform,3682," or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; copyright license to reproduce, prepare Derivative Works of,; publicly display, publicly perform, sublicense, and distribute the; Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of; this License, each Contributor hereby grants to You a perpetual,; worldwide, non-exclusive, no-charge, royalty-free, irrevocable; (except as stated in this section) patent license to make, have made,; use, offer to sell, sell, import, and otherwise transfer the Work,; where such license applies only to those patent claims licensable; by such Contributor that are necessarily infringed by their; Contribution(s) alone or by combination of their Contribution(s); with the Work to which such Contribution(s) was submitted. If You; institute patent litigation against any entity (including a; cross-claim or counterclaim in a lawsuit) alleging that the Work; or a Contribution incorporated within the Work constitutes direct; or contributory patent infrin",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:8022,Safety,risk,risks,8022,"ithout any additional terms or conditions.; Notwithstanding the above, nothing herein shall supersede or modify; the terms of any separate license agreement you may have executed; with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade; names, trademarks, service marks, or product names of the Licensor,; except as required for reasonable and customary use in describing the; origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or; agreed to in writing, Licensor provides the Work (and each; Contributor provides its Contributions) on an ""AS IS"" BASIS,; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or; implied, including, without limitation, any warranties or conditions; of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A; PARTICULAR PURPOSE. You are solely responsible for determining the; appropriateness of using or redistributing the Work and assume any; risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory,; whether in tort (including negligence), contract, or otherwise,; unless required by applicable law (such as deliberate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, in",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:579,Security,authoriz,authorized,579,"==============================================================================; The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:; ==============================================================================. Apache License; Version 2.0, January 2004; http://www.apache.org/licenses/. TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION. 1. Definitions. ""License"" shall mean the terms and conditions for use, reproduction,; and distribution as defined by Sections 1 through 9 of this document. ""Licensor"" shall mean the copyright owner or entity authorized by; the copyright owner that is granting the License. ""Legal Entity"" shall mean the union of the acting entity and all; other entities that control, are controlled by, or are under common; control with that entity. For the purposes of this definition,; ""control"" means (i) the power, direct or indirect, to cause the; direction or management of such entity, whether by contract or; otherwise, or (ii) ownership of fifty percent (50%) or more of the; outstanding shares, or (iii) beneficial ownership of such entity. ""You"" (or ""Your"") shall mean an individual or Legal Entity; exercising permissions granted by this License. ""Source"" form shall mean the preferred form for making modifications,; including but not limited to software source code, documentation; source, and configuration files. ""Object"" form shall mean any form resulting from mechanical; transformation or translation of a Source form, including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revi",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:2617,Security,authoriz,authorized,2617," including but; not limited to compiled object code, generated documentation,; and conversions to other media types. ""Work"" shall mean the work of authorship, whether in Source or; Object form, made available under the License, as indicated by a; copyright notice that is included in or attached to the work; (an example is provided in the Appendix below). ""Derivative Works"" shall mean any work, whether in Source or Object; form, that is based on (or derived from) the Work and for which the; editorial revisions, annotations, elaborations, or other modifications; represent, as a whole, an original work of authorship. For the purposes; of this License, Derivative Works shall not include works that remain; separable from, or merely link (or bind by name) to the interfaces of,; the Work and Derivative Works thereof. ""Contribution"" shall mean any work of authorship, including; the original version of the Work and any modifications or additions; to that Work or Derivative Works thereof, that is intentionally; submitted to Licensor for inclusion in the Work by the copyright owner; or by an individual or Legal Entity authorized to submit on behalf of; the copyright owner. For the purposes of this definition, ""submitted""; means any form of electronic, verbal, or written communication sent; to the Licensor or its representatives, including but not limited to; communication on electronic mailing lists, source code control systems,; and issue tracking systems that are managed by, or on behalf of, the; Licensor for the purpose of discussing and improving the Work, but; excluding communication that is conspicuously marked or otherwise; designated in writing by the copyright owner as ""Not a Contribution."". ""Contributor"" shall mean Licensor and any individual or Legal Entity; on behalf of whom a Contribution has been received by Licensor and; subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of; this License, each Contributor",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:9358,Testability,assert,asserted,9358,"erate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright notice for easier; identification within third-party archives. Copyright [yyyy] [name of copyright owner]. Licensed under the Apache License, Version 2.0 (the ""License"");; you may not use this file except in compliance with the License.; You may obtain a copy of the License at. http://www.apache.org/lice",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:11834,Usability,clear,clearly,11834,"hout complying; with the conditions of Sections 4(a), 4(b) and 4(d) of the License. In addition, if you combine or link compiled forms of this Software with; software that is licensed under the GPLv2 (""Combined Software"") and if a; court of competent jurisdiction determines that the patent provision (Section; 3), the indemnity provision (Section 9) or other Section of the License; conflicts with the conditions of the GPLv2, you may retroactively and; prospectively choose to deem waived or otherwise exclude such Section(s) of; the License, but only in their entirety and only with respect to the Combined; Software. ==============================================================================; Software from third parties included in the LLVM Project:; ==============================================================================; The LLVM Project contains third party software which is under different license; terms. All such code will be identified clearly using at least one of two; mechanisms:; 1) It will be in a separate directory tree with its own `LICENSE.txt` or; `LICENSE` file at the top containing the specific license and restrictions; which apply to that software, or; 2) It will contain specific license and restriction terms at the top of every; file. ==============================================================================; Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):; ==============================================================================; University of Illinois/NCSA; Open Source License. Copyright (c) 2007-2019 University of Illinois at Urbana-Champaign.; All rights reserved. Developed by:. LLVM Team. University of Illinois at Urbana-Champaign. http://llvm.org. Permission is hereby granted, free of charge, to any person obtaining a copy of; this software and associated documentation files (the ""Software""), to deal with; the Software without restriction, including without limitation the rights to; use, copy, modify, mer",MatchSource.DOCS,interpreter/llvm-project/clang/LICENSE.TXT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:803,Availability,failure,failures,803,"//===---------------------------------------------------------------------===//; // Random Notes; //===---------------------------------------------------------------------===//. //===---------------------------------------------------------------------===//. To time GCC preprocessing speed without output, use:; ""time gcc -MM file""; This is similar to -Eonly. //===---------------------------------------------------------------------===//. C++ Template Instantiation benchmark:; http://users.rcn.com/abrahams/instantiation_speed/index.html. //===---------------------------------------------------------------------===//. TODO: File Manager Speedup:. We currently do a lot of stat'ing for files that don't exist, particularly; when lots of -I paths exist (e.g. see the <iostream> example, check for; failures in stat in FileManager::getFile). It would be far better to make; the following changes:; 1. FileEntry contains a sys::Path instead of a std::string for Name.; 2. sys::Path contains timestamp and size, lazily computed. Eliminate from; FileEntry.; 3. File UIDs are created on request, not when files are opened.; These changes make it possible to efficiently have FileEntry objects for; files that exist on the file system, but have not been used yet. Once this is done:; 1. DirectoryEntry gets a boolean value ""has read entries"". When false, not; all entries in the directory are in the file mgr, when true, they are.; 2. Instead of stat'ing the file in FileManager::getFile, check to see if; the dir has been read. If so, fail immediately, if not, read the dir,; then retry.; 3. Reading the dir uses the getdirentries syscall, creating a FileEntry; for all files found. //===---------------------------------------------------------------------===//; // Specifying targets: -triple and -arch; //===---------------------------------------------------------------------===//. The clang supports ""-triple"" and ""-arch"" options. At most one -triple and one; -arch option may be specified. Both",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:1158,Energy Efficiency,efficient,efficiently,1158,"-------------------------------------------------------------===//. To time GCC preprocessing speed without output, use:; ""time gcc -MM file""; This is similar to -Eonly. //===---------------------------------------------------------------------===//. C++ Template Instantiation benchmark:; http://users.rcn.com/abrahams/instantiation_speed/index.html. //===---------------------------------------------------------------------===//. TODO: File Manager Speedup:. We currently do a lot of stat'ing for files that don't exist, particularly; when lots of -I paths exist (e.g. see the <iostream> example, check for; failures in stat in FileManager::getFile). It would be far better to make; the following changes:; 1. FileEntry contains a sys::Path instead of a std::string for Name.; 2. sys::Path contains timestamp and size, lazily computed. Eliminate from; FileEntry.; 3. File UIDs are created on request, not when files are opened.; These changes make it possible to efficiently have FileEntry objects for; files that exist on the file system, but have not been used yet. Once this is done:; 1. DirectoryEntry gets a boolean value ""has read entries"". When false, not; all entries in the directory are in the file mgr, when true, they are.; 2. Instead of stat'ing the file in FileManager::getFile, check to see if; the dir has been read. If so, fail immediately, if not, read the dir,; then retry.; 3. Reading the dir uses the getdirentries syscall, creating a FileEntry; for all files found. //===---------------------------------------------------------------------===//; // Specifying targets: -triple and -arch; //===---------------------------------------------------------------------===//. The clang supports ""-triple"" and ""-arch"" options. At most one -triple and one; -arch option may be specified. Both are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that ove",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:2855,Modifiability,variab,variables,2855,"------------------===//. The clang supports ""-triple"" and ""-arch"" options. At most one -triple and one; -arch option may be specified. Both are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:2968,Modifiability,variab,variables,2968,"Both are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//;",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:3089,Modifiability,variab,variable,3089,"Both are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//;",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:3283,Modifiability,variab,variables,3283,"th are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:3609,Modifiability,inherit,inheritance,3609,"th are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:3730,Modifiability,variab,variables,3730,"th are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:3576,Performance,optimiz,optimization,3576,"th are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:3744,Safety,safe,safely,3744,"th are optional. The ""selection of target"" behavior is defined as follows:. (1) If the user does not specify -triple, we default to the host triple.; (2) If the user specifies a -arch, that overrides the arch in the host or; specified triple. //===---------------------------------------------------------------------===//. verifyInputConstraint and verifyOutputConstraint should not return bool. Instead we should return something like:. enum VerifyConstraintResult {; Valid,. // Output only; OutputOperandConstraintLacksEqualsCharacter,; MatchingConstraintNotValidInOutputOperand,. // Input only; InputOperandConstraintContainsEqualsCharacter,; MatchingConstraintReferencesInvalidOperandNumber,. // Both; PercentConstraintUsedWithLastOperand; };. //===---------------------------------------------------------------------===//. Blocks should not capture variables that are only used in dead code. The rule that we came up with is that blocks are required to capture; variables if they're referenced in evaluated code, even if that code; doesn't actually rely on the value of the captured variable. For example, this requires a capture:; (void) var;; But this does not:; if (false) puts(var);. Summary of <rdar://problem/9851835>: if we implement this, we should; warn about non-POD variables that are referenced but not captured, but; only if the non-reachability is not due to macro or template; metaprogramming. //===---------------------------------------------------------------------===//. We can still apply a modified version of the constructor/destructor; delegation optimization in cases of virtual inheritance where:; - there is no function-try-block,; - the constructor signature is not variadic, and; - the parameter variables can safely be copied and repassed; to the base constructor because either; - they have not had their addresses taken by the vbase initializers or; - they were passed indirectly. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt:470,Testability,benchmark,benchmark,470,"//===---------------------------------------------------------------------===//; // Random Notes; //===---------------------------------------------------------------------===//. //===---------------------------------------------------------------------===//. To time GCC preprocessing speed without output, use:; ""time gcc -MM file""; This is similar to -Eonly. //===---------------------------------------------------------------------===//. C++ Template Instantiation benchmark:; http://users.rcn.com/abrahams/instantiation_speed/index.html. //===---------------------------------------------------------------------===//. TODO: File Manager Speedup:. We currently do a lot of stat'ing for files that don't exist, particularly; when lots of -I paths exist (e.g. see the <iostream> example, check for; failures in stat in FileManager::getFile). It would be far better to make; the following changes:; 1. FileEntry contains a sys::Path instead of a std::string for Name.; 2. sys::Path contains timestamp and size, lazily computed. Eliminate from; FileEntry.; 3. File UIDs are created on request, not when files are opened.; These changes make it possible to efficiently have FileEntry objects for; files that exist on the file system, but have not been used yet. Once this is done:; 1. DirectoryEntry gets a boolean value ""has read entries"". When false, not; all entries in the directory are in the file mgr, when true, they are.; 2. Instead of stat'ing the file in FileManager::getFile, check to see if; the dir has been read. If so, fail immediately, if not, read the dir,; then retry.; 3. Reading the dir uses the getdirentries syscall, creating a FileEntry; for all files found. //===---------------------------------------------------------------------===//; // Specifying targets: -triple and -arch; //===---------------------------------------------------------------------===//. The clang supports ""-triple"" and ""-arch"" options. At most one -triple and one; -arch option may be specified. Both",MatchSource.DOCS,interpreter/llvm-project/clang/NOTES.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/NOTES.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:1698,Availability,error,errors,1698,"FOR_BUILD_TREE); if(NOT LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON); endif(). if(NOT DEFINED LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR 18); endif(); if(NOT DEFINED LLVM_VERSION_MINOR); set(LLVM_VERSION_MINOR 1); endif(); if(NOT DEFINED LLVM_VERSION_PATCH); set(LLVM_VERSION_PATCH 6); endif(); if(NOT DEFINED LLVM_VERSION_SUFFIX); set(LLVM_VERSION_SUFFIX); endif(). if (NOT PACKAGE_VERSION); set(PACKAGE_VERSION; ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}""); endif(). if(NOT DEFINED LLVM_SHLIB_SYMBOL_VERSION); # ""Symbol version prefix for libLLVM.so""; set(LLVM_SHLIB_SYMBOL_VERSION ""LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""); endif(). if ((CMAKE_GENERATOR MATCHES ""Visual Studio"") AND (MSVC_TOOLSET_VERSION LESS 142) AND (CMAKE_GENERATOR_TOOLSET STREQUAL """")); message(WARNING ""Visual Studio generators use the x86 host compiler by ""; ""default, even for 64-bit targets. This can result in linker ""; ""instability and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode generator.; set(CMAKE_OSX_ARCHITECTURES ""x86_64""); endif(). project(LLVM; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}; LANGUAGES C CXX ASM). if (NOT DEFINED CMAKE_INSTALL_LIBDIR AND DEFINED LLVM_LIBDIR_SUFFIX); # Must go before `include(GNUInstallDirs)`.; set(CMAKE_INSTALL_LIBDIR ""lib${LLVM_LIBDIR_SUFFIX}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(..)`.; include(GNUInstallDirs). # This C++ standard is required to build LLVM.; set(LLVM_REQUIRED_CXX_STANDARD 17). # If we find that the cache contains",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:18030,Availability,avail,available,18030,"VC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed.; Please create a directory and run cmake from there, passing the path; to this source directory as the last argument.; This process created the file `CMakeCache.txt' and the directory `CMakeFiles'.; Please delete them.""); endif(). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE). option(LLVM_ADDITIONAL_BUILD_TYPES ""Additional build types that are allowed to be passed into CMAKE_BUILD_TYPE"" """"). set(ALLOWED_BUILD_TYPES DEBUG RELEASE RELWITHDEBINFO MINSIZEREL ${LLVM_ADDITIONAL_BUILD_TYPES}); string (REPLACE "";"" ""|"" ALLOWED_BUILD_TYPES_STRING ""${ALLOWED_BUILD_TYPES}""); string (TOUPPER ""${ALLOWED_BUILD_TYPES_STRING}"" uppercase_ALLOWED_BUILD_TYPES). if (CMAKE_BUILD_TYPE AND; NOT uppercase_CMAKE_BUILD_TYPE MATCHES ""^(${uppercase_ALLOWED_BUILD_TYPES})$""); message(FATAL_ERROR ""Unknown value for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}""); endif(). # LLVM_INSTALL_PACKAGE_DIR needs to be declared prior to adding the tools; # subdirectory in order to have the value available for llvm-config.; include(GNUInstallPackageDir); set(LLVM_INSTALL_PACKAGE_DIR ""${CMAKE_INSTALL_PACKAGEDIR}/llvm"" CACHE STRING; ""Path for CMake subdirectory for LLVM (defaults to '${CMAKE_INSTALL_PACKAGEDIR}/llvm')""). set(LLVM_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE STRING; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(LLVM_TOOLS_INSTALL_DIR). set(LLVM_UTILS_INSTALL_DIR ""${LLVM_TOOLS_INSTALL_DIR}"" CACHE STRING; ""Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)""); mark_as_advanced(LLVM_UTILS_INSTALL_DIR). set(LLVM_EXAMPLES_INSTALL_DIR ""examples"" CACHE STRING; ""Path for examples subdirectory (enabled by LLVM_BUILD_EXAMPLES=ON) (defaults to 'examples')""); mark_as_advanced(LLVM_EXAMPLES_INSTALL_DIR). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:21957,Availability,avail,available,21957,"OVERRIDES); set(ENABLE_CRASH_OVERRIDES 1); endif(). option(LLVM_ENABLE_CRASH_DUMPS ""Turn on memory dumps on crashes. Currently only implemented on Windows."" OFF). set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT OFF); if (MINGW); # Cygwin doesn't identify itself as Windows, and thus gets path::Style::posix; # as native path style, regardless of what this is set to.; set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22032,Availability,avail,available,22032,"ASH_DUMPS ""Turn on memory dumps on crashes. Currently only implemented on Windows."" OFF). set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT OFF); if (MINGW); # Cygwin doesn't identify itself as Windows, and thus gets path::Style::posix; # as native path style, regardless of what this is set to.; set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if availa",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22117,Availability,avail,available,22117,"(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT OFF); if (MINGW); # Cygwin doesn't identify itself as Windows, and thus gets path::Style::posix; # as native path style, regardless of what this is set to.; set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directo",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22200,Availability,avail,available,22200,"t identify itself as Windows, and thus gets path::Style::posix; # as native path style, regardless of what this is set to.; set(WINDOWS_PREFER_FORWARD_SLASH_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support fo",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22365,Availability,avail,available,22365,"_DEFAULT ON); endif(); option(LLVM_WINDOWS_PREFER_FORWARD_SLASH ""Prefer path names with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22434,Availability,avail,available,22434," with forward slashes on Windows."" ${WINDOWS_PREFER_FORWARD_SLASH_DEFAULT}). option(LLVM_ENABLE_FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INS",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22542,Availability,avail,available,22542,"FFI ""Use libffi to call external functions from the interpreter"" OFF); set(FFI_LIBRARY_DIR """" CACHE PATH ""Additional directory, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""L",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22666,Availability,avail,available,22666,"ry, where CMake should search for libffi.so""); set(FFI_INCLUDE_DIR """" CACHE PATH ""Additional directory, where CMake should search for ffi.h or ffi/ffi.h""). set(LLVM_TARGET_ARCH ""host""; CACHE STRING ""Set target to use for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""LLVM_ENABLE_Z3_SOLVER cannot be enabled when Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:22877,Availability,avail,available,22877,"se for LLVM JIT or use \""host\"" for automatic detection.""). option(LLVM_ENABLE_TERMINFO ""Use terminfo database if available."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""LLVM_ENABLE_Z3_SOLVER cannot be enabled when Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z3_SOLVER_DEFAULT ""${Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_T",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:23002,Availability,avail,available,23002,"e."" ON). set(LLVM_ENABLE_LIBXML2 ""ON"" CACHE STRING ""Use libxml2 if available. Can be ON, OFF, or FORCE_ON""). option(LLVM_ENABLE_LIBEDIT ""Use libedit if available."" ON). option(LLVM_ENABLE_LIBPFM ""Use libpfm for performance counters if available."" ON). # On z/OS, threads cannot be used because TLS is not supported.; if (CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""LLVM_ENABLE_Z3_SOLVER cannot be enabled when Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z3_SOLVER_DEFAULT ""${Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${LLVM_ALL_EXPERIMENTAL_TARGETS}); endif(). set(LLVM_TARGETS_TO_BUILD; ${LLVM_TARGETS_TO_BUILD}; ${LLVM_E",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:23560,Availability,avail,available,23560,"ression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""LLVM_ENABLE_Z3_SOLVER cannot be enabled when Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z3_SOLVER_DEFAULT ""${Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${LLVM_ALL_EXPERIMENTAL_TARGETS}); endif(). set(LLVM_TARGETS_TO_BUILD; ${LLVM_TARGETS_TO_BUILD}; ${LLVM_EXPERIMENTAL_TARGETS_TO_BUILD}); list(REMOVE_DUPLICATES LLVM_TARGETS_TO_BUILD). if (NOT CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_PIC ""Build Position-Independent Code"" ON); endif(); option(LLVM_ENABLE_MODULES ""Compile with C++ modules enabled."" OFF); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibili",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:24568,Availability,avail,available,24568," Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z3_SOLVER_DEFAULT ""${Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${LLVM_ALL_EXPERIMENTAL_TARGETS}); endif(). set(LLVM_TARGETS_TO_BUILD; ${LLVM_TARGETS_TO_BUILD}; ${LLVM_EXPERIMENTAL_TARGETS_TO_BUILD}); list(REMOVE_DUPLICATES LLVM_TARGETS_TO_BUILD). if (NOT CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_PIC ""Build Position-Independent Code"" ON); endif(); option(LLVM_ENABLE_MODULES ""Compile with C++ modules enabled."" OFF); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibility."" ON); option(LLVM_ENABLE_LIBCXX ""Use libc++ if available."" OFF); option(LLVM_ENABLE_LLVM_LIBC ""Set to on to link all LLVM executables against LLVM libc, assuming it is accessible by the host compiler."" OFF); option(LLVM_STATIC_LINK_CXX_STDLIB ""Statically link the standard library."" OFF); option(LLVM_ENABLE_LLD ""Use lld as C and C++ linker."" OFF); option(LLVM_ENABLE_PEDANTIC ""Compile with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; #",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:26726,Availability,error,error,26726,"ements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:27071,Availability,avail,available,27071,"e vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" O",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:27802,Availability,avail,available,27802,"NTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28155,Availability,avail,available,28155,"if(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BI",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28520,Availability,recover,recover,28520,"s for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43546,Availability,avail,available,43546," ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54409,Availability,down,download,54409," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54735,Availability,avail,available,54735," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:283,Deployability,install,install,283,"# See docs/CMake.html for instructions about how to build LLVM with CMake. cmake_minimum_required(VERSION 3.20.0). set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # Builds with custom install names and installation rpath setups may not work; # in the build tree. Allow these cases to use CMake's default build tree; # behavior by setting `LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE` to do this.; option(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE ""If set, use CMake's default build tree install name directory logic (Darwin only)"" OFF); mark_as_advanced(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); if(NOT LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON); endif(). if(NOT DEFINED LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR 18); endif(); if(NOT DEFINED LLVM_VERSION_MINOR); set(LLVM_VERSION_MINOR 1); endif(); if(NOT DEFINED LLVM_VERSION_PATCH); set(LLVM_VERSION_PATCH 6); endif(); if(NOT DEFINED LLVM_VERSION_SUFFIX); set(LLVM_VERSION_SUFFIX); endif(). if (NOT PACKAGE_VERSION); set(PACKAGE_VERSION; ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}""); endif(). if(NOT DEFINED LLVM_SHLIB_SYMBOL_VERSION); # ""Symbol version prefix for libLLVM.so""; set(LLVM_SHLIB_SYMBOL_VERSION ""LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""); endif(). if ((CMAKE_GENERATOR MATCHES ""Visual Studio"") AND (MSVC_TOOLSET_VERSION LESS 142) AND (CMAKE_GENERATOR_TOOLSET STREQUAL """")); message(WARNING ""Visual Studio generators use the x86 host compiler by ""; ""default, even for 64-bit targets. This can result in linker ""; ""instability and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode g",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:301,Deployability,install,installation,301,"# See docs/CMake.html for instructions about how to build LLVM with CMake. cmake_minimum_required(VERSION 3.20.0). set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # Builds with custom install names and installation rpath setups may not work; # in the build tree. Allow these cases to use CMake's default build tree; # behavior by setting `LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE` to do this.; option(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE ""If set, use CMake's default build tree install name directory logic (Darwin only)"" OFF); mark_as_advanced(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); if(NOT LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON); endif(). if(NOT DEFINED LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR 18); endif(); if(NOT DEFINED LLVM_VERSION_MINOR); set(LLVM_VERSION_MINOR 1); endif(); if(NOT DEFINED LLVM_VERSION_PATCH); set(LLVM_VERSION_PATCH 6); endif(); if(NOT DEFINED LLVM_VERSION_SUFFIX); set(LLVM_VERSION_SUFFIX); endif(). if (NOT PACKAGE_VERSION); set(PACKAGE_VERSION; ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}""); endif(). if(NOT DEFINED LLVM_SHLIB_SYMBOL_VERSION); # ""Symbol version prefix for libLLVM.so""; set(LLVM_SHLIB_SYMBOL_VERSION ""LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""); endif(). if ((CMAKE_GENERATOR MATCHES ""Visual Studio"") AND (MSVC_TOOLSET_VERSION LESS 142) AND (CMAKE_GENERATOR_TOOLSET STREQUAL """")); message(WARNING ""Visual Studio generators use the x86 host compiler by ""; ""default, even for 64-bit targets. This can result in linker ""; ""instability and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode g",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:579,Deployability,install,install,579,"# See docs/CMake.html for instructions about how to build LLVM with CMake. cmake_minimum_required(VERSION 3.20.0). set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # Builds with custom install names and installation rpath setups may not work; # in the build tree. Allow these cases to use CMake's default build tree; # behavior by setting `LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE` to do this.; option(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE ""If set, use CMake's default build tree install name directory logic (Darwin only)"" OFF); mark_as_advanced(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); if(NOT LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON); endif(). if(NOT DEFINED LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR 18); endif(); if(NOT DEFINED LLVM_VERSION_MINOR); set(LLVM_VERSION_MINOR 1); endif(); if(NOT DEFINED LLVM_VERSION_PATCH); set(LLVM_VERSION_PATCH 6); endif(); if(NOT DEFINED LLVM_VERSION_SUFFIX); set(LLVM_VERSION_SUFFIX); endif(). if (NOT PACKAGE_VERSION); set(PACKAGE_VERSION; ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}""); endif(). if(NOT DEFINED LLVM_SHLIB_SYMBOL_VERSION); # ""Symbol version prefix for libLLVM.so""; set(LLVM_SHLIB_SYMBOL_VERSION ""LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""); endif(). if ((CMAKE_GENERATOR MATCHES ""Visual Studio"") AND (MSVC_TOOLSET_VERSION LESS 142) AND (CMAKE_GENERATOR_TOOLSET STREQUAL """")); message(WARNING ""Visual Studio generators use the x86 host compiler by ""; ""default, even for 64-bit targets. This can result in linker ""; ""instability and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode g",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4707,Deployability,update,updated,4707,"p', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build directory for llvm and another; # one for llvm+clang+... using the same sources.; set(LLVM_ALL_PROJECTS ""bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl""); # The flang project is not yet part of ""all"" projects (see C++ requirements); set(LLVM_EXTRA_PROJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:11393,Deployability,configurat,configuration,11393,"# into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_CCACHE_DIR} ${CCACHE_PROGRAM}""); endif(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM}); else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expres",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:13979,Deployability,install,install,13979,"vide a filename prefix to collect the GlobalISel rule coverage""); endif(). # Add path for custom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool names to the corresponding LLVM tools."" OFF). # By default we use symlinks on Unix platforms and copy binaries on Windows; # If you have the correct setup on Windows you can use this option to enable; # symlinks and save a lot of diskspace.; option(LLVM_USE_SYMLINKS ""Use symlinks instead of copying binaries"" ${CMAKE_HOST_UNIX}). option(LLVM_INSTALL_UTILS ""Include utility binaries in the 'install' target."" OFF). option(LLVM_INSTALL_TOOLCHAIN_ONLY ""Only include toolchain files in the 'install' target."" OFF). # Unfortunatly Clang is too eager to search directories for module maps, which can cause the; # installed version of the maps to be found when building LLVM from source. Therefore we turn off; # the installation by default. See llvm.org/PR31905.; option(LLVM_INSTALL_MODULEMAPS ""Install the modulemap files in the 'install' target."" OFF). option(LLVM_USE_FOLDERS ""Enable solution folders in Visual Studio. Disable for Express versions."" ON); if ( LLVM_USE_FOLDERS ); set_property(GLOBAL PROPERTY USE_FOLDERS ON); endif(). include(VersionFromVCS). option(LLVM_APPEND_VC_REV; ""Embed the version control system revision in LLVM"" ON). set(LLVM_FORCE_VC_REVISION; """" CACHE STRING ""Force custom VC revision for LLVM_APPEND_VC_REV""). set(LLVM_FORCE_VC_REPOSITORY; """" CACHE STRING ""Force custom VC repository for LLVM_APPEND_VC_REV""). option(LLVM_TOOL_LLVM_DRIVER_B",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:14076,Deployability,install,install,14076,"ustom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool names to the corresponding LLVM tools."" OFF). # By default we use symlinks on Unix platforms and copy binaries on Windows; # If you have the correct setup on Windows you can use this option to enable; # symlinks and save a lot of diskspace.; option(LLVM_USE_SYMLINKS ""Use symlinks instead of copying binaries"" ${CMAKE_HOST_UNIX}). option(LLVM_INSTALL_UTILS ""Include utility binaries in the 'install' target."" OFF). option(LLVM_INSTALL_TOOLCHAIN_ONLY ""Only include toolchain files in the 'install' target."" OFF). # Unfortunatly Clang is too eager to search directories for module maps, which can cause the; # installed version of the maps to be found when building LLVM from source. Therefore we turn off; # the installation by default. See llvm.org/PR31905.; option(LLVM_INSTALL_MODULEMAPS ""Install the modulemap files in the 'install' target."" OFF). option(LLVM_USE_FOLDERS ""Enable solution folders in Visual Studio. Disable for Express versions."" ON); if ( LLVM_USE_FOLDERS ); set_property(GLOBAL PROPERTY USE_FOLDERS ON); endif(). include(VersionFromVCS). option(LLVM_APPEND_VC_REV; ""Embed the version control system revision in LLVM"" ON). set(LLVM_FORCE_VC_REVISION; """" CACHE STRING ""Force custom VC revision for LLVM_APPEND_VC_REV""). set(LLVM_FORCE_VC_REPOSITORY; """" CACHE STRING ""Force custom VC repository for LLVM_APPEND_VC_REV""). option(LLVM_TOOL_LLVM_DRIVER_BUILD ""Enables building the llvm multicall tool"" OFF). set(PACKAGE_NAME LLVM); set(PACKAGE_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:14196,Deployability,install,installed,14196,"_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool names to the corresponding LLVM tools."" OFF). # By default we use symlinks on Unix platforms and copy binaries on Windows; # If you have the correct setup on Windows you can use this option to enable; # symlinks and save a lot of diskspace.; option(LLVM_USE_SYMLINKS ""Use symlinks instead of copying binaries"" ${CMAKE_HOST_UNIX}). option(LLVM_INSTALL_UTILS ""Include utility binaries in the 'install' target."" OFF). option(LLVM_INSTALL_TOOLCHAIN_ONLY ""Only include toolchain files in the 'install' target."" OFF). # Unfortunatly Clang is too eager to search directories for module maps, which can cause the; # installed version of the maps to be found when building LLVM from source. Therefore we turn off; # the installation by default. See llvm.org/PR31905.; option(LLVM_INSTALL_MODULEMAPS ""Install the modulemap files in the 'install' target."" OFF). option(LLVM_USE_FOLDERS ""Enable solution folders in Visual Studio. Disable for Express versions."" ON); if ( LLVM_USE_FOLDERS ); set_property(GLOBAL PROPERTY USE_FOLDERS ON); endif(). include(VersionFromVCS). option(LLVM_APPEND_VC_REV; ""Embed the version control system revision in LLVM"" ON). set(LLVM_FORCE_VC_REVISION; """" CACHE STRING ""Force custom VC revision for LLVM_APPEND_VC_REV""). set(LLVM_FORCE_VC_REPOSITORY; """" CACHE STRING ""Force custom VC repository for LLVM_APPEND_VC_REV""). option(LLVM_TOOL_LLVM_DRIVER_BUILD ""Enables building the llvm multicall tool"" OFF). set(PACKAGE_NAME LLVM); set(PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}""); set(PACKAGE_BUGREPORT ""https://github.com/llvm/llvm-project/issues/""). set(BUG_REPORT_URL """,MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:14299,Deployability,install,installation,14299,"# for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool names to the corresponding LLVM tools."" OFF). # By default we use symlinks on Unix platforms and copy binaries on Windows; # If you have the correct setup on Windows you can use this option to enable; # symlinks and save a lot of diskspace.; option(LLVM_USE_SYMLINKS ""Use symlinks instead of copying binaries"" ${CMAKE_HOST_UNIX}). option(LLVM_INSTALL_UTILS ""Include utility binaries in the 'install' target."" OFF). option(LLVM_INSTALL_TOOLCHAIN_ONLY ""Only include toolchain files in the 'install' target."" OFF). # Unfortunatly Clang is too eager to search directories for module maps, which can cause the; # installed version of the maps to be found when building LLVM from source. Therefore we turn off; # the installation by default. See llvm.org/PR31905.; option(LLVM_INSTALL_MODULEMAPS ""Install the modulemap files in the 'install' target."" OFF). option(LLVM_USE_FOLDERS ""Enable solution folders in Visual Studio. Disable for Express versions."" ON); if ( LLVM_USE_FOLDERS ); set_property(GLOBAL PROPERTY USE_FOLDERS ON); endif(). include(VersionFromVCS). option(LLVM_APPEND_VC_REV; ""Embed the version control system revision in LLVM"" ON). set(LLVM_FORCE_VC_REVISION; """" CACHE STRING ""Force custom VC revision for LLVM_APPEND_VC_REV""). set(LLVM_FORCE_VC_REPOSITORY; """" CACHE STRING ""Force custom VC repository for LLVM_APPEND_VC_REV""). option(LLVM_TOOL_LLVM_DRIVER_BUILD ""Enables building the llvm multicall tool"" OFF). set(PACKAGE_NAME LLVM); set(PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}""); set(PACKAGE_BUGREPORT ""https://github.com/llvm/llvm-project/issues/""). set(BUG_REPORT_URL ""${PACKAGE_BUGREPORT}"" CACHE STRING; ""Default URL where bug reports are to be submitted.""); set(LLDB_BUG_REPORT_U",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:14415,Deployability,install,install,14415,"on(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool names to the corresponding LLVM tools."" OFF). # By default we use symlinks on Unix platforms and copy binaries on Windows; # If you have the correct setup on Windows you can use this option to enable; # symlinks and save a lot of diskspace.; option(LLVM_USE_SYMLINKS ""Use symlinks instead of copying binaries"" ${CMAKE_HOST_UNIX}). option(LLVM_INSTALL_UTILS ""Include utility binaries in the 'install' target."" OFF). option(LLVM_INSTALL_TOOLCHAIN_ONLY ""Only include toolchain files in the 'install' target."" OFF). # Unfortunatly Clang is too eager to search directories for module maps, which can cause the; # installed version of the maps to be found when building LLVM from source. Therefore we turn off; # the installation by default. See llvm.org/PR31905.; option(LLVM_INSTALL_MODULEMAPS ""Install the modulemap files in the 'install' target."" OFF). option(LLVM_USE_FOLDERS ""Enable solution folders in Visual Studio. Disable for Express versions."" ON); if ( LLVM_USE_FOLDERS ); set_property(GLOBAL PROPERTY USE_FOLDERS ON); endif(). include(VersionFromVCS). option(LLVM_APPEND_VC_REV; ""Embed the version control system revision in LLVM"" ON). set(LLVM_FORCE_VC_REVISION; """" CACHE STRING ""Force custom VC revision for LLVM_APPEND_VC_REV""). set(LLVM_FORCE_VC_REPOSITORY; """" CACHE STRING ""Force custom VC repository for LLVM_APPEND_VC_REV""). option(LLVM_TOOL_LLVM_DRIVER_BUILD ""Enables building the llvm multicall tool"" OFF). set(PACKAGE_NAME LLVM); set(PACKAGE_STRING ""${PACKAGE_NAME} ${PACKAGE_VERSION}""); set(PACKAGE_BUGREPORT ""https://github.com/llvm/llvm-project/issues/""). set(BUG_REPORT_URL ""${PACKAGE_BUGREPORT}"" CACHE STRING; ""Default URL where bug reports are to be submitted.""); set(LLDB_BUG_REPORT_URL ""${BUG_REPORT_URL}"" CACHE STRING; ""Default URL where lldb bug reports are to be submitted",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:18517,Deployability,install,install,18517,"ILD_TYPES}); string (REPLACE "";"" ""|"" ALLOWED_BUILD_TYPES_STRING ""${ALLOWED_BUILD_TYPES}""); string (TOUPPER ""${ALLOWED_BUILD_TYPES_STRING}"" uppercase_ALLOWED_BUILD_TYPES). if (CMAKE_BUILD_TYPE AND; NOT uppercase_CMAKE_BUILD_TYPE MATCHES ""^(${uppercase_ALLOWED_BUILD_TYPES})$""); message(FATAL_ERROR ""Unknown value for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}""); endif(). # LLVM_INSTALL_PACKAGE_DIR needs to be declared prior to adding the tools; # subdirectory in order to have the value available for llvm-config.; include(GNUInstallPackageDir); set(LLVM_INSTALL_PACKAGE_DIR ""${CMAKE_INSTALL_PACKAGEDIR}/llvm"" CACHE STRING; ""Path for CMake subdirectory for LLVM (defaults to '${CMAKE_INSTALL_PACKAGEDIR}/llvm')""). set(LLVM_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE STRING; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(LLVM_TOOLS_INSTALL_DIR). set(LLVM_UTILS_INSTALL_DIR ""${LLVM_TOOLS_INSTALL_DIR}"" CACHE STRING; ""Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)""); mark_as_advanced(LLVM_UTILS_INSTALL_DIR). set(LLVM_EXAMPLES_INSTALL_DIR ""examples"" CACHE STRING; ""Path for examples subdirectory (enabled by LLVM_BUILD_EXAMPLES=ON) (defaults to 'examples')""); mark_as_advanced(LLVM_EXAMPLES_INSTALL_DIR). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). # Each of them corresponds to llvm-config's.; set(LLVM_TOOLS_BINARY_DIR ${LLVM_RUNTIME_OUTPUT_INTDIR}) # --bindir; set(LLVM_LIBRARY_DIR ${LLVM_LIBRARY_OUTPUT_INTDIR}) # --libdir; set(LLVM_MAIN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR} ) # --src-root; set(LL",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:32788,Deployability,install,install,32788,"INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libraries from LLVM you want to include in the; # shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited; # list of LLVM components. All component names handled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:32939,Deployability,install,install,32939,"INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libraries from LLVM you want to include in the; # shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited; # list of LLVM components. All component names handled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:39380,Deployability,configurat,configuration,39380,"(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ""via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.""); else(); message(FATAL_ERROR ""The target `${t}' is not a core tier target. It may be ""; ""experimental, if so it must be passed via",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:42648,Deployability,install,installing,42648,"fig/AsmPrinters.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/AsmPrinters.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/AsmParsers.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/AsmParsers.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Disassemblers.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/Disassemblers.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Targets.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/Targets.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Te",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:42951,Deployability,install,installing,42951,"ig/Disassemblers.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Targets.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/Targets.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtim",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43138,Deployability,install,installed,43138,"Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43167,Deployability,install,install,43167,"Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43177,Deployability,upgrade,upgrade,43177,"Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43207,Deployability,install,install,43207,"Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43299,Deployability,install,install,43299,"IR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_P",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43436,Deployability,install,install,43436,"enced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogene",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:43858,Deployability,install,install,43858,"ind_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_f",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:44830,Deployability,configurat,configuration,44830,"TPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtime); set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS tf_xla_runtime); # Once we add more modules, we should handle this more automatically.; if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_INLINERSIZEMODEL); set(LLVM_INLINER_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_INLINER_MODEL_PATH; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_INLINER_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_INLINER_MODEL_PATH ""autogenerate""); set(LLVM_INLINER_MODEL_AUTOGENERATED 1); endif(); if (DEFINED LLVM_OVERRIDE_MODEL_HEADER_REGALLOCEVICTMODEL); set(LLVM_RAEVICT_MODEL_PATH ""none""); elseif(NOT DEFINED LLVM_RAEVICT_MODEL_PATH; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL """"; OR ""${LLVM_RAEVICT_MODEL_PATH}"" STREQUAL ""autogenerate""); set(LLVM_RAEVICT_MODEL_PATH ""autogenerate""); set(LLVM_RAEVICT_MODEL_AUTOGENERATED 1); endif(). endif(). # Configure the three LLVM configuration header files.; configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake; ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h). # Add target for generating source rpm package.; set(LLVM_SRPM_USER_BINARY_SPECFILE ${CMAKE_CURRENT_SOURCE_DIR}/llvm.spec.in; CACHE FILEPATH "".spec file to use for srpm generation""); set(LLVM_SRPM_BINARY_SPECFILE ${CMAKE_CURRENT_BINARY_DIR}/llvm.spec); set(LLVM_SRPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/srpm""). get_source_info(${CMAKE_CURRENT_SOURCE_DIR} revision repository); string(LENGTH ""${revision}"" revision_length); set(LLVM_RPM_SPEC_REVISION ""${revision}""). configure_file(; ${LLVM_SRPM_USER_BINARY_SPECFILE}; ${LLVM_SRPM_BINARY_SPECFILE} @ONLY). add_custom_target(srpm; COMMAND cpack -G TGZ --config CPac",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51589,Deployability,install,install,51589,"ALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51810,Deployability,install,install,51810,"ndif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52195,Deployability,install,install,52195,"ends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52336,Deployability,install,install,52336,"DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_de",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52365,Deployability,install,install,52365,"cs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-li",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52787,Deployability,install,install-llvm-headers,52787,"E.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UC",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52884,Deployability,install,install,52884,"INATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:53058,Deployability,install,install-llvm-libraries,53058,"s_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:53354,Deployability,install,install-llvm-libraries,53354,"lemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't i",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:53377,Deployability,install,install,53377,"lemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't i",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:53411,Deployability,install,install-llvm-libraries-stripped,53411,"lemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't i",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:53443,Deployability,install,install,53443,"lemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't i",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:53741,Deployability,deploy,deploy,53741,"lvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54061,Deployability,update,updated,54061," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54324,Deployability,install,install,54324," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:38188,Energy Efficiency,power,powerpc,38188,"ROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on th",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:1529,Integrability,message,message,1529,"_DIR_FOR_BUILD_TREE ""If set, use CMake's default build tree install name directory logic (Darwin only)"" OFF); mark_as_advanced(LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); if(NOT LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE); set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON); endif(). if(NOT DEFINED LLVM_VERSION_MAJOR); set(LLVM_VERSION_MAJOR 18); endif(); if(NOT DEFINED LLVM_VERSION_MINOR); set(LLVM_VERSION_MINOR 1); endif(); if(NOT DEFINED LLVM_VERSION_PATCH); set(LLVM_VERSION_PATCH 6); endif(); if(NOT DEFINED LLVM_VERSION_SUFFIX); set(LLVM_VERSION_SUFFIX); endif(). if (NOT PACKAGE_VERSION); set(PACKAGE_VERSION; ""${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}""); endif(). if(NOT DEFINED LLVM_SHLIB_SYMBOL_VERSION); # ""Symbol version prefix for libLLVM.so""; set(LLVM_SHLIB_SYMBOL_VERSION ""LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}""); endif(). if ((CMAKE_GENERATOR MATCHES ""Visual Studio"") AND (MSVC_TOOLSET_VERSION LESS 142) AND (CMAKE_GENERATOR_TOOLSET STREQUAL """")); message(WARNING ""Visual Studio generators use the x86 host compiler by ""; ""default, even for 64-bit targets. This can result in linker ""; ""instability and out of memory errors. To use the 64-bit ""; ""host compiler, pass -Thost=x64 on the CMake command line.""); endif(). if (CMAKE_GENERATOR STREQUAL ""Xcode"" AND NOT CMAKE_OSX_ARCHITECTURES); # Some CMake features like object libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode generator.; set(CMAKE_OSX_ARCHITECTURES ""x86_64""); endif(). project(LLVM; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}; LANGUAGES C CXX ASM). if (NOT DEFINED CMAKE_INSTALL_LIBDIR AND DEFINED LLVM_LIBDIR_SUFFIX); # Must go before `include(GNUInstallDirs)`.; set(CMAKE_INSTALL_LIBDIR ""lib${LLVM_LIBDIR_SUFFIX}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(.",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:2884,Integrability,message,message,2884,"libraries get confused if you don't; # explicitly specify an architecture setting with the Xcode generator.; set(CMAKE_OSX_ARCHITECTURES ""x86_64""); endif(). project(LLVM; VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}; LANGUAGES C CXX ASM). if (NOT DEFINED CMAKE_INSTALL_LIBDIR AND DEFINED LLVM_LIBDIR_SUFFIX); # Must go before `include(GNUInstallDirs)`.; set(CMAKE_INSTALL_LIBDIR ""lib${LLVM_LIBDIR_SUFFIX}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(..)`.; include(GNUInstallDirs). # This C++ standard is required to build LLVM.; set(LLVM_REQUIRED_CXX_STANDARD 17). # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt; # and we can just inform the user and then reset it.; if($CACHE{CMAKE_CXX_STANDARD} AND $CACHE{CMAKE_CXX_STANDARD} LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(WARNING ""Resetting cache value for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:3314,Integrability,message,message,3314,"}""); endif(). # Must go after `DEFINED LLVM_LIBDIR_SUFFIX` check.; set(LLVM_LIBDIR_SUFFIX """" CACHE STRING ""Define suffix of library directory name (32/64)"" ). # Must go after `project(..)`.; include(GNUInstallDirs). # This C++ standard is required to build LLVM.; set(LLVM_REQUIRED_CXX_STANDARD 17). # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt; # and we can just inform the user and then reset it.; if($CACHE{CMAKE_CXX_STANDARD} AND $CACHE{CMAKE_CXX_STANDARD} LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(WARNING ""Resetting cache value for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead o",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:3840,Integrability,message,message,3840,"_CXX_STANDARD} LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(WARNING ""Resetting cache value for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:6328,Integrability,message,message,6328,"ompiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl""); # The flang project is not yet part of ""all"" projects (see C++ requirements); set(LLVM_EXTRA_PROJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" CACHE STRING; ""Semicolon-separated list of projects to build (${LLVM_KNOWN_PROJECTS}), or \""all\"".""); # Make sure expansion happens first to not handle ""all"" in rest of the checks.; if( LLVM_ENABLE_PROJECTS STREQUAL ""all"" ); set( LLVM_ENABLE_PROJECTS ${LLVM_ALL_PROJECTS}); endif(); foreach(proj ${LLVM_ENABLE_PROJECTS}); if (NOT proj STREQUAL ""llvm"" AND NOT ""${proj}"" IN_LIST LLVM_KNOWN_PROJECTS); MESSAGE(FATAL_ERROR ""${proj} isn't a known project: ${LLVM_KNOWN_PROJECTS}. Did you mean to enable it as a runtime in LLVM_ENABLE_RUNTIMES?""); endif(); endforeach(). if (""flang"" IN_LIST LLVM_ENABLE_PROJECTS); if (NOT ""mlir"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling MLIR as a dependency to flang""); list(APPEND LLVM_ENABLE_PROJECTS ""mlir""); endif(). if (NOT ""clang"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""Clang is not enabled, but is required for the Flang driver""); endif(); endif(). # Select the runtimes to build; #; # As we migrate runtimes to using the bootstrapping build, the set of default runtimes; # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.; set(LLVM_DEFAULT_RUNTIMES ""libcxx;libcxxabi;libunwind""); set(LLVM_SUPPORTED_RUNTIMES ""libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:6363,Integrability,depend,dependency,6363,"ompiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl""); # The flang project is not yet part of ""all"" projects (see C++ requirements); set(LLVM_EXTRA_PROJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" CACHE STRING; ""Semicolon-separated list of projects to build (${LLVM_KNOWN_PROJECTS}), or \""all\"".""); # Make sure expansion happens first to not handle ""all"" in rest of the checks.; if( LLVM_ENABLE_PROJECTS STREQUAL ""all"" ); set( LLVM_ENABLE_PROJECTS ${LLVM_ALL_PROJECTS}); endif(); foreach(proj ${LLVM_ENABLE_PROJECTS}); if (NOT proj STREQUAL ""llvm"" AND NOT ""${proj}"" IN_LIST LLVM_KNOWN_PROJECTS); MESSAGE(FATAL_ERROR ""${proj} isn't a known project: ${LLVM_KNOWN_PROJECTS}. Did you mean to enable it as a runtime in LLVM_ENABLE_RUNTIMES?""); endif(); endforeach(). if (""flang"" IN_LIST LLVM_ENABLE_PROJECTS); if (NOT ""mlir"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling MLIR as a dependency to flang""); list(APPEND LLVM_ENABLE_PROJECTS ""mlir""); endif(). if (NOT ""clang"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""Clang is not enabled, but is required for the Flang driver""); endif(); endif(). # Select the runtimes to build; #; # As we migrate runtimes to using the bootstrapping build, the set of default runtimes; # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.; set(LLVM_DEFAULT_RUNTIMES ""libcxx;libcxxabi;libunwind""); set(LLVM_SUPPORTED_RUNTIMES ""libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:6484,Integrability,message,message,6484,"OJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" CACHE STRING; ""Semicolon-separated list of projects to build (${LLVM_KNOWN_PROJECTS}), or \""all\"".""); # Make sure expansion happens first to not handle ""all"" in rest of the checks.; if( LLVM_ENABLE_PROJECTS STREQUAL ""all"" ); set( LLVM_ENABLE_PROJECTS ${LLVM_ALL_PROJECTS}); endif(); foreach(proj ${LLVM_ENABLE_PROJECTS}); if (NOT proj STREQUAL ""llvm"" AND NOT ""${proj}"" IN_LIST LLVM_KNOWN_PROJECTS); MESSAGE(FATAL_ERROR ""${proj} isn't a known project: ${LLVM_KNOWN_PROJECTS}. Did you mean to enable it as a runtime in LLVM_ENABLE_RUNTIMES?""); endif(); endforeach(). if (""flang"" IN_LIST LLVM_ENABLE_PROJECTS); if (NOT ""mlir"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling MLIR as a dependency to flang""); list(APPEND LLVM_ENABLE_PROJECTS ""mlir""); endif(). if (NOT ""clang"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""Clang is not enabled, but is required for the Flang driver""); endif(); endif(). # Select the runtimes to build; #; # As we migrate runtimes to using the bootstrapping build, the set of default runtimes; # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.; set(LLVM_DEFAULT_RUNTIMES ""libcxx;libcxxabi;libunwind""); set(LLVM_SUPPORTED_RUNTIMES ""libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES);",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:7323,Integrability,message,message,7323,"IST LLVM_ENABLE_PROJECTS); if (NOT ""mlir"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling MLIR as a dependency to flang""); list(APPEND LLVM_ENABLE_PROJECTS ""mlir""); endif(). if (NOT ""clang"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""Clang is not enabled, but is required for the Flang driver""); endif(); endif(). # Select the runtimes to build; #; # As we migrate runtimes to using the bootstrapping build, the set of default runtimes; # should grow as we remove those runtimes from LLVM_ENABLE_PROJECTS above.; set(LLVM_DEFAULT_RUNTIMES ""libcxx;libcxxabi;libunwind""); set(LLVM_SUPPORTED_RUNTIMES ""libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES); # To build the libc runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:7714,Integrability,message,message,7714,"m LLVM_ENABLE_PROJECTS above.; set(LLVM_DEFAULT_RUNTIMES ""libcxx;libcxxabi;libunwind""); set(LLVM_SUPPORTED_RUNTIMES ""libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES); # To build the libc runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:9038,Integrability,message,message,9038,"CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresp",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:9237,Integrability,message,message,9237,"n-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as par",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:9677,Integrability,message,message,9677," set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:9764,Integrability,message,message,9764," set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:11365,Integrability,message,message,11365,"# into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_CCACHE_DIR} ${CCACHE_PROGRAM}""); endif(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM}); else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expres",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:11740,Integrability,message,message,11740,"ory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_CCACHE_DIR} ${CCACHE_PROGRAM}""); endif(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM}); else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ""Dependency debugging is only currently supported on Darwin hosts.""); endif(); if(LLVM_CCACHE_BUILD); message(FATAL_ERROR ""Cannot enable dependency debugging while using ccache.""); endif(); endif(). option(LLVM_ENABLE_DAGISEL_COV ""Debug: Pr",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:12160,Integrability,depend,dependencies,12160,"VM_CCACHE_DIR} ${CCACHE_PROGRAM}""); endif(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM}); else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ""Dependency debugging is only currently supported on Darwin hosts.""); endif(); if(LLVM_CCACHE_BUILD); message(FATAL_ERROR ""Cannot enable dependency debugging while using ccache.""); endif(); endif(). option(LLVM_ENABLE_DAGISEL_COV ""Debug: Prints tablegen patterns that were used for selecting"" OFF); option(LLVM_ENABLE_GISEL_COV ""Enable collection of GlobalISel rule coverage"" OFF); if(LLVM_ENABLE_GISEL_COV); set(LLVM_GISEL_COV_PREFIX ""${CMAKE_BINARY_DIR}/gisel-coverage-"" CACHE STRING ""Provide a filename prefix to collect the GlobalISel rule coverage""); endif(). # Add path for custom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cma",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:12251,Integrability,depend,dependency,12251,"; else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ""Dependency debugging is only currently supported on Darwin hosts.""); endif(); if(LLVM_CCACHE_BUILD); message(FATAL_ERROR ""Cannot enable dependency debugging while using ccache.""); endif(); endif(). option(LLVM_ENABLE_DAGISEL_COV ""Debug: Prints tablegen patterns that were used for selecting"" OFF); option(LLVM_ENABLE_GISEL_COV ""Enable collection of GlobalISel rule coverage"" OFF); if(LLVM_ENABLE_GISEL_COV); set(LLVM_GISEL_COV_PREFIX ""${CMAKE_BINARY_DIR}/gisel-coverage-"" CACHE STRING ""Provide a filename prefix to collect the GlobalISel rule coverage""); endif(). # Add path for custom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a Compilati",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:12446,Integrability,message,message,12446,"e environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ""Dependency debugging is only currently supported on Darwin hosts.""); endif(); if(LLVM_CCACHE_BUILD); message(FATAL_ERROR ""Cannot enable dependency debugging while using ccache.""); endif(); endif(). option(LLVM_ENABLE_DAGISEL_COV ""Debug: Prints tablegen patterns that were used for selecting"" OFF); option(LLVM_ENABLE_GISEL_COV ""Enable collection of GlobalISel rule coverage"" OFF); if(LLVM_ENABLE_GISEL_COV); set(LLVM_GISEL_COV_PREFIX ""${CMAKE_BINARY_DIR}/gisel-coverage-"" CACHE STRING ""Provide a filename prefix to collect the GlobalISel rule coverage""); endif(). # Add path for custom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils t",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:12568,Integrability,message,message,12568,"ome MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ""Dependency debugging is only currently supported on Darwin hosts.""); endif(); if(LLVM_CCACHE_BUILD); message(FATAL_ERROR ""Cannot enable dependency debugging while using ccache.""); endif(); endif(). option(LLVM_ENABLE_DAGISEL_COV ""Debug: Prints tablegen patterns that were used for selecting"" OFF); option(LLVM_ENABLE_GISEL_COV ""Enable collection of GlobalISel rule coverage"" OFF); if(LLVM_ENABLE_GISEL_COV); set(LLVM_GISEL_COV_PREFIX ""${CMAKE_BINARY_DIR}/gisel-coverage-"" CACHE STRING ""Provide a filename prefix to collect the GlobalISel rule coverage""); endif(). # Add path for custom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:12603,Integrability,depend,dependency,12603,"ome MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ""Dependency debugging is only currently supported on Darwin hosts.""); endif(); if(LLVM_CCACHE_BUILD); message(FATAL_ERROR ""Cannot enable dependency debugging while using ccache.""); endif(); endif(). option(LLVM_ENABLE_DAGISEL_COV ""Debug: Prints tablegen patterns that were used for selecting"" OFF); option(LLVM_ENABLE_GISEL_COV ""Enable collection of GlobalISel rule coverage"" OFF); if(LLVM_ENABLE_GISEL_COV); set(LLVM_GISEL_COV_PREFIX ""${CMAKE_BINARY_DIR}/gisel-coverage-"" CACHE STRING ""Provide a filename prefix to collect the GlobalISel rule coverage""); endif(). # Add path for custom modules; list(INSERT CMAKE_MODULE_PATH 0; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules""; ""${LLVM_COMMON_CMAKE_UTILS}/Modules""; ). # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; set(CMAKE_EXPORT_COMPILE_COMMANDS 1). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF). option(LLVM_INSTALL_CCTOOLS_SYMLINKS; ""Install symlinks from the cctools tool ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:16994,Integrability,message,message,16994,"32""); if(NOT DEFINED CPACK_PACKAGE_INSTALL_REGISTRY_KEY); set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY ""LLVM""); endif(); set(CPACK_PACKAGE_ICON ""${CMAKE_CURRENT_SOURCE_DIR}\\\\cmake\\\\nsis_logo.bmp""); set(CPACK_NSIS_MUI_ICON ""${CMAKE_CURRENT_SOURCE_DIR}\\\\cmake\\\\nsis_icon.ico""); set(CPACK_NSIS_MUI_UNIICON ""${CMAKE_CURRENT_SOURCE_DIR}\\\\cmake\\\\nsis_icon.ico""); set(CPACK_NSIS_MODIFY_PATH ""ON""); set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ""ON""); if( CMAKE_CL_64 ); if(NOT DEFINED CPACK_NSIS_INSTALL_ROOT); set(CPACK_NSIS_INSTALL_ROOT ""$PROGRAMFILES64""); endif(); endif(); endif(); include(CPack). # Sanity check our source directory to make sure that we are not trying to; # generate an in-source build (unless on MSVC_IDE, where it is ok), and to make; # sure that we don't have any stray generated files lying around in the tree; # (which would end up getting picked up by header search, instead of the correct; # versions).; if( CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed.; Please create a directory and run cmake from there, passing the path; to this source directory as the last argument.; This process created the file `CMakeCache.txt' and the directory `CMakeFiles'.; Please delete them.""); endif(). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE). option(LLVM_ADDITIONAL_BUILD_TYPES ""Additional build types that are allowed to be passed into CMAKE_BUILD_TYPE"" """"). set(ALLOWED_BUILD_TYPES DEBUG RELEASE RELWITHDEBINFO MINSIZEREL ${LLVM_ADDITIONAL_BUILD_TYPES}); string (REPLACE "";"" ""|"" ALLOWED_BUILD_TYPES_STRING ""${ALLOWED_BUILD_TYPES}""); string (TOUPPER ""${ALLOWED_BUILD_TYPES_STRING}"" uppercase_ALLOWED_BUILD_TYPES). if (CMAKE_BUILD_TYPE AND; NOT uppercase_CMAKE_BUILD_TYPE MATCHES ""^(${uppercase_ALLOWED_BUILD_TYPES})$""); message(FATAL_ERROR ""Unknown value for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}""); endif(). # LLVM_INSTALL_PACKAGE_DIR needs to be declared prior to adding th",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:17824,Integrability,message,message,17824," # (which would end up getting picked up by header search, instead of the correct; # versions).; if( CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR AND NOT MSVC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed.; Please create a directory and run cmake from there, passing the path; to this source directory as the last argument.; This process created the file `CMakeCache.txt' and the directory `CMakeFiles'.; Please delete them.""); endif(). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE). option(LLVM_ADDITIONAL_BUILD_TYPES ""Additional build types that are allowed to be passed into CMAKE_BUILD_TYPE"" """"). set(ALLOWED_BUILD_TYPES DEBUG RELEASE RELWITHDEBINFO MINSIZEREL ${LLVM_ADDITIONAL_BUILD_TYPES}); string (REPLACE "";"" ""|"" ALLOWED_BUILD_TYPES_STRING ""${ALLOWED_BUILD_TYPES}""); string (TOUPPER ""${ALLOWED_BUILD_TYPES_STRING}"" uppercase_ALLOWED_BUILD_TYPES). if (CMAKE_BUILD_TYPE AND; NOT uppercase_CMAKE_BUILD_TYPE MATCHES ""^(${uppercase_ALLOWED_BUILD_TYPES})$""); message(FATAL_ERROR ""Unknown value for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}""); endif(). # LLVM_INSTALL_PACKAGE_DIR needs to be declared prior to adding the tools; # subdirectory in order to have the value available for llvm-config.; include(GNUInstallPackageDir); set(LLVM_INSTALL_PACKAGE_DIR ""${CMAKE_INSTALL_PACKAGEDIR}/llvm"" CACHE STRING; ""Path for CMake subdirectory for LLVM (defaults to '${CMAKE_INSTALL_PACKAGEDIR}/llvm')""). set(LLVM_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE STRING; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(LLVM_TOOLS_INSTALL_DIR). set(LLVM_UTILS_INSTALL_DIR ""${LLVM_TOOLS_INSTALL_DIR}"" CACHE STRING; ""Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)""); mark_as_advanced(LLVM_UTILS_INSTALL_DIR). set(LLVM_EXAMPLES_INSTALL_DIR ""examples"" CACHE STRING; ""Path for examples subdirectory (enabled by LLVM_BUILD_EXAMPLES=ON) (defaults to 'examples')""); mark_as",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:23344,Integrability,message,message,23344,"NABLE_THREADS ""Use threads if available."" OFF); else(); option(LLVM_ENABLE_THREADS ""Use threads if available."" ON); endif(). set(LLVM_ENABLE_ZLIB ""ON"" CACHE STRING ""Use zlib for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""LLVM_ENABLE_Z3_SOLVER cannot be enabled when Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z3_SOLVER_DEFAULT ""${Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${LLVM_ALL_EXPERIMENTAL_TARGETS}); endif(). set(LLVM_TARGETS_TO_BUILD; ${LLVM_TARGETS_TO_BUILD}; ${LLVM_EXPERIMENTAL_TARGETS_TO_BUILD}); list(REMOVE_DUPLICATES LLVM_TARGETS_TO_BUILD). if (NOT CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_PIC ""Build Position-Independent Code"" ON); endif(); option(LLVM_ENABLE_MODULES ""Compile with C++ modules enabled."" OFF); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" ON)",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:23484,Integrability,message,message,23484,"ression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_ZSTD ""ON"" CACHE STRING ""Use zstd for compression/decompression if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_USE_STATIC_ZSTD FALSE CACHE BOOL ""Use static version of zstd. Can be TRUE, FALSE""). set(LLVM_ENABLE_CURL ""OFF"" CACHE STRING ""Use libcurl for the HTTP client if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_ENABLE_HTTPLIB ""OFF"" CACHE STRING ""Use cpp-httplib HTTP server library if available. Can be ON, OFF, or FORCE_ON""). set(LLVM_Z3_INSTALL_DIR """" CACHE STRING ""Install directory of the Z3 solver.""). option(LLVM_ENABLE_Z3_SOLVER; ""Enable Support for the Z3 constraint solver in LLVM.""; ${LLVM_ENABLE_Z3_SOLVER_DEFAULT}; ). if (LLVM_ENABLE_Z3_SOLVER); find_package(Z3 4.7.1). if (LLVM_Z3_INSTALL_DIR); if (NOT Z3_FOUND); message(FATAL_ERROR ""Z3 >= 4.7.1 has not been found in LLVM_Z3_INSTALL_DIR: ${LLVM_Z3_INSTALL_DIR}.""); endif(); endif(). if (NOT Z3_FOUND); message(FATAL_ERROR ""LLVM_ENABLE_Z3_SOLVER cannot be enabled when Z3 is not available.""); endif(). set(LLVM_WITH_Z3 1); endif(). set(LLVM_ENABLE_Z3_SOLVER_DEFAULT ""${Z3_FOUND}""). if( LLVM_TARGETS_TO_BUILD STREQUAL ""all"" ); set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} ); endif(). if(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD STREQUAL ""all""); set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${LLVM_ALL_EXPERIMENTAL_TARGETS}); endif(). set(LLVM_TARGETS_TO_BUILD; ${LLVM_TARGETS_TO_BUILD}; ${LLVM_EXPERIMENTAL_TARGETS_TO_BUILD}); list(REMOVE_DUPLICATES LLVM_TARGETS_TO_BUILD). if (NOT CMAKE_SYSTEM_NAME MATCHES ""OS390""); option(LLVM_ENABLE_PIC ""Build Position-Independent Code"" ON); endif(); option(LLVM_ENABLE_MODULES ""Compile with C++ modules enabled."" OFF); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" ON); else(); option(LLVM_ENABLE_MODULE_DEBUGGING ""Compile with -gmodules."" OFF); endif(); option(LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY ""Compile with -fmodules-local-submodule-visibili",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:27024,Integrability,message,message,27024,"e vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" O",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:27198,Integrability,interface,interface,27198,"KING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_S",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:27761,Integrability,message,message,27761,"NTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we are on a supported platform; if( NOT CMAKE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:27942,Integrability,interface,interface,27942,"KE_SYSTEM_NAME MATCHES ""Windows"" AND NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR; ""Intel JIT API support is available on Linux and Windows only.""); endif(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supp",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28118,Integrability,message,message,28118,"if(); endif( LLVM_USE_INTEL_JITEVENTS ). option(LLVM_USE_OPROFILE; ""Use opagent JIT interface to inform OProfile about JIT code"" OFF). option(LLVM_EXTERNALIZE_DEBUGINFO; ""Generate dSYM files and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BI",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:30121,Integrability,message,message,30121,"xecutables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --per-test-coverage""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERROR ""The Debug target isn't supported along with LLVM_INTEGRATED_CRT_ALLOC!""); endif(); endif(). # Define options to control the inclusion and default build behavior for; # components which may not strictly be necessary (tools, examples, and tests).; #; # This is primarily to support building smaller or faster project files.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate b",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:30234,Integrability,message,message,30234,"AULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --per-test-coverage""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERROR ""The Debug target isn't supported along with LLVM_INTEGRATED_CRT_ALLOC!""); endif(); endif(). # Define options to control the inclusion and default build behavior for; # components which may not strictly be necessary (tools, examples, and tests).; #; # This is primarily to support building smaller or faster project files.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:30409,Integrability,message,message,30409,"AULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --per-test-coverage""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERROR ""The Debug target isn't supported along with LLVM_INTEGRATED_CRT_ALLOC!""); endif(); endif(). # Define options to control the inclusion and default build behavior for; # components which may not strictly be necessary (tools, examples, and tests).; #; # This is primarily to support building smaller or faster project files.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:33801,Integrability,message,message,33801,"set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libraries from LLVM you want to include in the; # shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited; # list of LLVM components. All component names handled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message(FATAL_ERROR ""BUILD_SHARED_LIBS options is not supported on Windows.""); endif(); else(); option(LLVM_LINK_LLVM_DYLIB ""Link tools against the libllvm dynamic library"" OFF); option(LLVM_BUILD_LLVM_C_DYLIB ""Build libllvm-c re-export library (Darwin only)"" OFF); set(LLVM_BUILD_LLVM_DYLIB_default OFF); if(LLVM_LINK_LLVM_DYLIB OR LLVM_BUILD_LLVM_C_DYLIB); set(LLVM_BUILD_LLVM_DYLIB_default ON); endif(); option(LLVM_BUILD_LLVM_DYLIB ""Build libllvm dynamic library"" ${LLVM_BUILD_LLVM_DYLIB_default}); endif(). if (LLVM_LINK_LLVM_DYLIB AND BUILD_SHARED_LIBS); message(FATAL_ERROR ""Cannot enable BUILD_SHARED_LIBS with LLVM_LINK_LLVM_DYLIB. We recommend disabling BUILD_SHARED_LIBS.""); endif(). option(LLVM_OPTIMIZED_TABLEGEN ""Force TableGen to be built with optimization"" OFF); if(CMAKE_CROSSCOMPILING OR (LLVM_OPTIMIZED_TABLEGEN AND (LLVM_ENABLE_ASSERTIONS OR CMAKE_CONFIGURATION_TYPES))); set(LLVM_USE_HOST_TOOLS ON); endif(). option(LLVM_OMIT_DAGISEL_COMMENTS ""Do not add comments to DAG ISel"" ON); if (CM",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:34362,Integrability,message,message,34362,"dled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message(FATAL_ERROR ""BUILD_SHARED_LIBS options is not supported on Windows.""); endif(); else(); option(LLVM_LINK_LLVM_DYLIB ""Link tools against the libllvm dynamic library"" OFF); option(LLVM_BUILD_LLVM_C_DYLIB ""Build libllvm-c re-export library (Darwin only)"" OFF); set(LLVM_BUILD_LLVM_DYLIB_default OFF); if(LLVM_LINK_LLVM_DYLIB OR LLVM_BUILD_LLVM_C_DYLIB); set(LLVM_BUILD_LLVM_DYLIB_default ON); endif(); option(LLVM_BUILD_LLVM_DYLIB ""Build libllvm dynamic library"" ${LLVM_BUILD_LLVM_DYLIB_default}); endif(). if (LLVM_LINK_LLVM_DYLIB AND BUILD_SHARED_LIBS); message(FATAL_ERROR ""Cannot enable BUILD_SHARED_LIBS with LLVM_LINK_LLVM_DYLIB. We recommend disabling BUILD_SHARED_LIBS.""); endif(). option(LLVM_OPTIMIZED_TABLEGEN ""Force TableGen to be built with optimization"" OFF); if(CMAKE_CROSSCOMPILING OR (LLVM_OPTIMIZED_TABLEGEN AND (LLVM_ENABLE_ASSERTIONS OR CMAKE_CONFIGURATION_TYPES))); set(LLVM_USE_HOST_TOOLS ON); endif(). option(LLVM_OMIT_DAGISEL_COMMENTS ""Do not add comments to DAG ISel"" ON); if (CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE MATCHES ""^(RELWITHDEBINFO|DEBUG)$""); set(LLVM_OMIT_DAGISEL_COMMENTS OFF); endif(). if (MSVC_IDE); option(LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION ""Configure project to use Visual Studio native visualizers"" TRUE); endif(). if(NOT LLVM_INDIVIDUAL_TEST_COVERAGE); if(LLVM_BUILD_INSTRUMENTED OR LLVM_BUILD_INSTRUMENTED_COVERAGE OR LLVM_ENABLE_IR_PGO); if(NOT LLVM_PROFILE_MERGE_POOL_SIZE); # A pool size of 1-2 is probably sufficient on an SSD. 3-4 should be fine; # for spinning disks. Anything higher may only help on slower",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:38568,Integrability,message,message,38568,"eds to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:39149,Integrability,message,message,39149,"werpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:39367,Integrability,depend,depend,39367,"(LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); endif(); endif(). set(LLVM_DEFAULT_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT}"" CACHE STRING; ""Default target for which LLVM will generate code."" ); message(STATUS ""LLVM default target triple: ${LLVM_DEFAULT_TARGET_TRIPLE}""). set(LLVM_TARGET_TRIPLE ""${LLVM_DEFAULT_TARGET_TRIPLE}""). if(WIN32 OR CYGWIN); if(BUILD_SHARED_LIBS OR LLVM_BUILD_LLVM_DYLIB); set(LLVM_ENABLE_PLUGINS_default ON); else(); set(LLVM_ENABLE_PLUGINS_default OFF); endif(); else(); set(LLVM_ENABLE_PLUGINS_default ${LLVM_ENABLE_PIC}); endif(); option(LLVM_ENABLE_PLUGINS ""Enable plugin support"" ${LLVM_ENABLE_PLUGINS_default}). set(LLVM_ENABLE_NEW_PASS_MANAGER TRUE CACHE BOOL; ""Enable the new pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ""via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.""); else(); message(FATAL_ERROR ""The target `${t}' is not a core tier target. It may be ""; ""experimental, if so it must be passed via",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:40101,Integrability,message,message,40101,"w pass manager by default.""); if(NOT LLVM_ENABLE_NEW_PASS_MANAGER); message(FATAL_ERROR ""Enabling the legacy pass manager on the cmake level is""; "" no longer supported.""); endif(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ""via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.""); else(); message(FATAL_ERROR ""The target `${t}' is not a core tier target. It may be ""; ""experimental, if so it must be passed via ""; ""LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.\n""; ""Core tier targets: ${LLVM_ALL_TARGETS}\n""; ""Known experimental targets: ${LLVM_ALL_EXPERIMENTAL_TARGETS}""); endif(); else(); set(LLVM_ENUM_TARGETS ""${LLVM_ENUM_TARGETS}LLVM_TARGET(${t})\n""); string(TOUPPER ${t} T_UPPER); set(LLVM_HAS_${T_UPPER}_TARGET 1); endif(). file(GLOB asmp_file ""${td}/*AsmPrinter.cpp""); if( asmp_file ); set(LLVM_ENUM_ASM_PRINTERS; ""${LLVM_ENUM_ASM_PRINTERS}LLVM_ASM_PRINTER(${t})\n""); endif(); if( EXISTS ${td}/AsmParser/CMakeLists.txt ); set(LLVM_ENUM_ASM_PARSERS; ""${LLVM_ENUM_ASM_PARSERS}LLVM_ASM_PARSER(${t})\n""); endif(); if( EXISTS ${td}/Disassembler/CMakeLists.txt ); set(LLVM_ENUM_DISASSEMBLERS; ""${LLVM_ENUM_DISASSEMBLERS}LLVM_DISASSEMBLER(${t})\n""); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:40230,Integrability,message,message,40230,"if(). include(HandleLLVMOptions). ######. # Configure all of the various header file fragments LLVM uses which depend on; # configuration variables.; set(LLVM_ENUM_TARGETS """"); set(LLVM_ENUM_ASM_PRINTERS """"); set(LLVM_ENUM_ASM_PARSERS """"); set(LLVM_ENUM_DISASSEMBLERS """"); set(LLVM_ENUM_TARGETMCAS """"); set(LLVM_ENUM_EXEGESIS """"); foreach(t ${LLVM_TARGETS_TO_BUILD}); set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} ). # Make sure that any experimental targets were passed via; # LLVM_EXPERIMENTAL_TARGETS_TO_BUILD, not LLVM_TARGETS_TO_BUILD.; # We allow experimental targets that are not in LLVM_ALL_EXPERIMENTAL_TARGETS,; # as long as they are passed via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.; if ( NOT ""${t}"" IN_LIST LLVM_ALL_TARGETS AND NOT ""${t}"" IN_LIST LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ); if( ""${t}"" IN_LIST LLVM_ALL_EXPERIMENTAL_TARGETS ); message(FATAL_ERROR ""The target `${t}' is experimental and must be passed ""; ""via LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.""); else(); message(FATAL_ERROR ""The target `${t}' is not a core tier target. It may be ""; ""experimental, if so it must be passed via ""; ""LLVM_EXPERIMENTAL_TARGETS_TO_BUILD.\n""; ""Core tier targets: ${LLVM_ALL_TARGETS}\n""; ""Known experimental targets: ${LLVM_ALL_EXPERIMENTAL_TARGETS}""); endif(); else(); set(LLVM_ENUM_TARGETS ""${LLVM_ENUM_TARGETS}LLVM_TARGET(${t})\n""); string(TOUPPER ${t} T_UPPER); set(LLVM_HAS_${T_UPPER}_TARGET 1); endif(). file(GLOB asmp_file ""${td}/*AsmPrinter.cpp""); if( asmp_file ); set(LLVM_ENUM_ASM_PRINTERS; ""${LLVM_ENUM_ASM_PRINTERS}LLVM_ASM_PRINTER(${t})\n""); endif(); if( EXISTS ${td}/AsmParser/CMakeLists.txt ); set(LLVM_ENUM_ASM_PARSERS; ""${LLVM_ENUM_ASM_PARSERS}LLVM_ASM_PARSER(${t})\n""); endif(); if( EXISTS ${td}/Disassembler/CMakeLists.txt ); set(LLVM_ENUM_DISASSEMBLERS; ""${LLVM_ENUM_DISASSEMBLERS}LLVM_DISASSEMBLER(${t})\n""); endif(); if( EXISTS ${td}/MCA/CMakeLists.txt ); set(LLVM_ENUM_TARGETMCAS; ""${LLVM_ENUM_TARGETMCAS}LLVM_TARGETMCA(${t})\n""); endif(); if( EXISTS ${LLVM_MAIN_SRC_DIR}/tools/llvm",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:42670,Integrability,depend,dependency,42670,"fig/AsmPrinters.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/AsmPrinters.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/AsmParsers.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/AsmParsers.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Disassemblers.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/Disassemblers.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Targets.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/Targets.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Te",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:42977,Integrability,depend,dependency,42977,"ig/Disassemblers.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Targets.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/Targets.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetMCAs.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetMCAs.def; ); configure_file(; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/TargetExegesis.def.in; ${LLVM_INCLUDE_DIR}/llvm/Config/TargetExegesis.def; ). # They are not referenced. See set_output_directory().; set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_TOOLS_BINARY_DIR} ); set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ); set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_LIBRARY_DIR} ). # For up-to-date instructions for installing the TFLite dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; set(LLVM_HAVE_TFLITE """" CACHE BOOL ""Use tflite""); if (LLVM_HAVE_TFLITE); find_package(tensorflow-lite REQUIRED); endif(). # For up-to-date instructions for installing the Tensorflow dependency, refer to; # the bot setup script: https://github.com/google/ml-compiler-opt/blob/main/buildbot/buildbot_init.sh; # Specifically, assuming python3 is installed:; # python3 -m pip install --upgrade pip && python3 -m pip install --user tf_nightly==2.3.0.dev20200528; # Then set TENSORFLOW_AOT_PATH to the package install - usually it's ~/.local/lib/python3.7/site-packages/tensorflow; #; set(TENSORFLOW_AOT_PATH """" CACHE PATH ""Path to TensorFlow pip install dir""). if (NOT TENSORFLOW_AOT_PATH STREQUAL """"); set(LLVM_HAVE_TF_AOT ""ON"" CACHE BOOL ""Tensorflow AOT available""); set(TENSORFLOW_AOT_COMPILER; ""${TENSORFLOW_AOT_PATH}/../../../../bin/saved_model_cli""; CACHE PATH ""Path to the Tensorflow AOT compiler""); include_directories(${TENSORFLOW_AOT_PATH}/include); add_subdirectory(${TENSORFLOW_AOT_PATH}/xla_aot_runtime_src; ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/tf_runtime); install(TARGETS tf_xla_runtime EXPORT LLVMExports; ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX} COMPONENT tf_xla_runtim",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:48834,Integrability,depend,dependence,48834,"CROSSCOMPILE_HOST); # Dummy use to avoid CMake Warning: Manually-specified variables were not used; # (this is a variable that CrossCompile sets on recursive invocations); endif(). if( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ); # special hack for Solaris to handle crazy system sys/regset.h; include_directories(""${LLVM_MAIN_INCLUDE_DIR}/llvm/Support/Solaris""); endif( ${CMAKE_SYSTEM_NAME} MATCHES SunOS ). # Make sure we don't get -rdynamic in every binary. For those that need it,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. Else we have a circular dependence.; add_subdirectory(lib/Demangle); add_subdirectory(lib/Support); add_subdirectory(lib/TableGen). add_subdirectory(utils/TableGen). add_subdirectory(include). add_subdirectory(lib). if( LLVM_INCLUDE_UTILS ); add_subdirectory(utils/FileCheck); add_subdirectory(utils/PerfectShuffle); add_subdirectory(utils/count); add_subdirectory(utils/not); add_subdirectory(utils/UnicodeData); add_subdirectory(utils/yaml-bench); add_subdirectory(utils/split-file); # add_subdirectory(utils/mlgo-utils); if( LLVM_INCLUDE_TESTS ); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/unittest ${CMAKE_CURRENT_BINARY_DIR}/third-party/unittest); endif(); else(); if ( LLVM_INCLUDE_TESTS ); message(FATAL_ERROR ""Including tests when not building utils will not work.; Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION)",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:49505,Integrability,message,message,49505,"t,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. Else we have a circular dependence.; add_subdirectory(lib/Demangle); add_subdirectory(lib/Support); add_subdirectory(lib/TableGen). add_subdirectory(utils/TableGen). add_subdirectory(include). add_subdirectory(lib). if( LLVM_INCLUDE_UTILS ); add_subdirectory(utils/FileCheck); add_subdirectory(utils/PerfectShuffle); add_subdirectory(utils/count); add_subdirectory(utils/not); add_subdirectory(utils/UnicodeData); add_subdirectory(utils/yaml-bench); add_subdirectory(utils/split-file); # add_subdirectory(utils/mlgo-utils); if( LLVM_INCLUDE_TESTS ); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/unittest ${CMAKE_CURRENT_BINARY_DIR}/third-party/unittest); endif(); else(); if ( LLVM_INCLUDE_TESTS ); message(FATAL_ERROR ""Including tests when not building utils will not work.; Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); se",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:50356,Integrability,wrap,wrapper,50356,"INCLUDE_TESTS ); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/unittest ${CMAKE_CURRENT_BINARY_DIR}/third-party/unittest); endif(); else(); if ( LLVM_INCLUDE_TESTS ); message(FATAL_ERROR ""Including tests when not building utils will not work.; Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_D",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51133,Integrability,depend,depends,51133,"_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51239,Integrability,depend,depends,51239,"_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:51307,Integrability,depend,depends,51307,"_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); set(LLVM_GTEST_RUN_UNDER; """" CACHE STRING; ""Define the wrapper program that LLVM unit tests should be run under.""); if(EXISTS ${LLVM_MAIN_SRC_DIR}/projects/test-suite AND TARGET clang); include(LLVMExternalProjectUtils); llvm_ExternalProject_Add(test-suite ${LLVM_MAIN_SRC_DIR}/projects/test-suite; USE_TOOLCHAIN; EXCLUDE_FROM_ALL; NO_INSTALL; ALWAYS_CLEAN); endif(); add_subdirectory(utils/lit); add_subdirectory(test); add_subdirectory(unittests). if (WIN32); # This utility is used to prevent crashing tests from calling Dr. Watson on; # Windows.; add_subdirectory(utils/KillTheDoctor); endif(). umbrella_lit_testsuite_end(check-all); get_property(LLVM_ALL_LIT_DEPENDS GLOBAL PROPERTY LLVM_ALL_LIT_DEPENDS); get_property(LLVM_ALL_ADDITIONAL_TEST_DEPENDS; GLOBAL PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS); add_custom_target(test-depends; DEPENDS ${LLVM_ALL_LIT_DEPENDS} ${LLVM_ALL_ADDITIONAL_TEST_DEPENDS}); set_target_properties(test-depends PROPERTIES FOLDER ""Tests""); add_dependencies(check-all test-depends); endif(). if (LLVM_INCLUDE_DOCS); add_subdirectory(docs); endif(). add_subdirectory(cmake/modules). # Do this last so that all lit targets have already been created.; if (LLVM_INCLUDE_UTILS); add_subdirectory(utils/llvm-lit); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:52554,Integrability,depend,depend,52554,"_INSTALL_TOOLCHAIN_ONLY); install(DIRECTORY include/llvm include/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.td""; PATTERN ""*.inc""; PATTERN ""LICENSE.TXT""; ). install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm ${LLVM_INCLUDE_DIR}/llvm-c; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""*.def""; PATTERN ""*.h""; PATTERN ""*.gen""; PATTERN ""*.inc""; # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by ""*.def""; PATTERN ""CMakeFiles"" EXCLUDE; PATTERN ""config.h"" EXCLUDE; ). if (LLVM_INSTALL_MODULEMAPS); install(DIRECTORY include; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; FILES_MATCHING; PATTERN ""module.modulemap""; ); install(FILES include/module.install.modulemap; DESTINATION ""${CMAKE_INSTALL_INCLUDEDIR}""; COMPONENT llvm-headers; RENAME ""module.extern.modulemap""; ); endif(LLVM_INSTALL_MODULEMAPS). # Installing the headers needs to depend on generating any public; # tablegen'd headers.; add_custom_target(llvm-headers DEPENDS intrinsics_gen omp_gen); set_target_properties(llvm-headers PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-headers; DEPENDS llvm-headers; COMPONENT llvm-headers); endif(). # Custom target to install all libraries.; add_custom_target(llvm-libraries); set_target_properties(llvm-libraries PROPERTIES FOLDER ""Misc""). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:54418,Integrability,depend,dependencies,54418," add_llvm_install_targets(install-llvm-libraries; DEPENDS llvm-libraries; COMPONENT llvm-libraries); endif(). get_property(LLVM_LIBS GLOBAL PROPERTY LLVM_LIBS); if(LLVM_LIBS); list(REMOVE_DUPLICATES LLVM_LIBS); foreach(lib ${LLVM_LIBS}); add_dependencies(llvm-libraries ${lib}); if (NOT LLVM_ENABLE_IDE); add_dependencies(install-llvm-libraries install-${lib}); add_dependencies(install-llvm-libraries-stripped install-${lib}-stripped); endif(); endforeach(); endif(); endif(). # This must be at the end of the LLVM root CMakeLists file because it must run; # after all targets are created.; llvm_distribution_add_targets(); process_llvm_pass_plugins(GEN_CONFIG); include(CoverageReport). # This allows us to deploy the Universal CRT DLLs by passing -DCMAKE_INSTALL_UCRT_LIBRARIES=ON to CMake; if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL ""Windows"" AND CMAKE_INSTALL_UCRT_LIBRARIES); include(InstallRequiredSystemLibraries); endif(). if (LLVM_INCLUDE_BENCHMARKS); # Override benchmark defaults so that when the library itself is updated these; # modifications are not lost.; set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL ""Disable benchmark testing"" FORCE); set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL ""Disable benchmark exceptions"" FORCE); set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL ""Don't install benchmark"" FORCE); set(BENCHMARK_DOWNLOAD_DEPENDENCIES OFF CACHE BOOL ""Don't download dependencies"" FORCE); set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL ""Disable Google Test in benchmark"" FORCE); set(BENCHMARK_ENABLE_WERROR ${LLVM_ENABLE_WERROR} CACHE BOOL; ""Handle -Werror for Google Benchmark based on LLVM_ENABLE_WERROR"" FORCE); # Since LLVM requires C++11 it is safe to assume that std::regex is available.; set(HAVE_STD_REGEX ON CACHE BOOL ""OK"" FORCE); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/benchmark; ${CMAKE_CURRENT_BINARY_DIR}/third-party/benchmark); add_subdirectory(benchmarks); endif(). if (LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TOOLS); add_subdirectory(utils/llvm-locstats); endif(); ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:3942,Modifiability,config,configure,3942,"e for CMAKE_CXX_STANDARD to ${LLVM_REQUIRED_CXX_STANDARD}""); unset(CMAKE_CXX_STANDARD CACHE); endif(). # if CMAKE_CXX_STANDARD is still set after the cache unset above it means that the user requested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGU",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:7945,Modifiability,variab,variable,7945,"tl;libcxx;compiler-rt;openmp;llvm-libgcc""); set(LLVM_ENABLE_RUNTIMES """" CACHE STRING; ""Semicolon-separated list of runtimes to build, or \""all\"" (${LLVM_DEFAULT_RUNTIMES}). Supported runtimes are ${LLVM_SUPPORTED_RUNTIMES}.""); if(LLVM_ENABLE_RUNTIMES STREQUAL ""all""); set(LLVM_ENABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES); # To build the libc runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS})",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:8201,Modifiability,variab,variables,8201,"NABLE_RUNTIMES ${LLVM_DEFAULT_RUNTIMES}); endif(); foreach(proj IN LISTS LLVM_ENABLE_RUNTIMES); if (NOT ""${proj}"" IN_LIST LLVM_SUPPORTED_RUNTIMES); message(FATAL_ERROR ""Runtime \""${proj}\"" is not a supported runtime. Supported runtimes are: ${LLVM_SUPPORTED_RUNTIMES}""); endif(); endforeach(). if (""libc"" IN_LIST LLVM_ENABLE_RUNTIMES); # To build the libc runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:8524,Modifiability,variab,variables,8524," runtime, we need to be able to build few libc build; # tools from the ""libc"" project. So, we add it to the list of enabled; # projects.; if (NOT ""libc"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling libc project to build libc build tools""); list(APPEND LLVM_ENABLE_PROJECTS ""libc""); endif(); endif(). # LLVM_ENABLE_PROJECTS_USED is `ON` if the user has ever used the; # `LLVM_ENABLE_PROJECTS` CMake cache variable. This exists for; # several reasons:; #; # * As an indicator that the `LLVM_ENABLE_PROJECTS` list is now the single; # source of truth for which projects to build. This means we will ignore user; # supplied `LLVM_TOOL_<project>_BUILD` CMake cache variables and overwrite; # them.; #; # * The case where the user previously had `LLVM_ENABLE_PROJECTS` set to a; # non-empty list but now the user wishes to disable building all other projects; # by setting `LLVM_ENABLE_PROJECTS` to an empty string. In that case we still; # need to set the `LLVM_TOOL_${upper_proj}_BUILD` variables so that we disable; # building all the projects that were previously enabled.; set(LLVM_ENABLE_PROJECTS_USED OFF CACHE BOOL """"); mark_as_advanced(LLVM_ENABLE_PROJECTS_USED). if (LLVM_ENABLE_PROJECTS_USED OR NOT LLVM_ENABLE_PROJECTS STREQUAL """"); set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTER",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:9894,Modifiability,variab,variables,9894," set(LLVM_ENABLE_PROJECTS_USED ON CACHE BOOL """" FORCE); foreach(proj ${LLVM_KNOWN_PROJECTS} ${LLVM_EXTERNAL_PROJECTS}); string(TOUPPER ""${proj}"" upper_proj); string(REGEX REPLACE ""-"" ""_"" upper_proj ${upper_proj}); if (""${proj}"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:10034,Modifiability,variab,variables,10034,"IST LLVM_ENABLE_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); set(PROJ_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MA",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:10121,Modifiability,variab,variables,10121,"""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_C",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:10168,Modifiability,variab,variables,10168,"""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_C",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:10196,Modifiability,variab,variables,10196,"""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}""); if(NOT EXISTS ""${PROJ_DIR}"" OR NOT IS_DIRECTORY ""${PROJ_DIR}""); message(FATAL_ERROR ""LLVM_ENABLE_PROJECTS requests ${proj} but directory not found: ${PROJ_DIR}""); endif(); if( LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR STREQUAL """" ); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """" FORCE); else(); set(LLVM_EXTERNAL_${upper_proj}_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../${proj}"" CACHE PATH """"); endif(); elseif (""${proj}"" IN_LIST LLVM_EXTERNAL_PROJECTS); message(STATUS ""${proj} project is enabled""); set(SHOULD_ENABLE_PROJECT TRUE); else(); message(STATUS ""${proj} project is disabled""); set(SHOULD_ENABLE_PROJECT FALSE); endif(); # Force `LLVM_TOOL_${upper_proj}_BUILD` variables to have values that; # corresponds with `LLVM_ENABLE_PROJECTS`. This prevents the user setting; # `LLVM_TOOL_${upper_proj}_BUILD` variables externally. At some point; # we should deprecate allowing users to set these variables by turning them; # into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_C",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:11393,Modifiability,config,configuration,11393,"# into normal CMake variables rather than cache variables.; set(LLVM_TOOL_${upper_proj}_BUILD; ${SHOULD_ENABLE_PROJECT}; CACHE; BOOL ""Whether to build ${upper_proj} as part of LLVM"" FORCE; ); endforeach(); endif(); unset(SHOULD_ENABLE_PROJECT). # Build llvm with ccache if the package is present; set(LLVM_CCACHE_BUILD OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_CCACHE_DIR} ${CCACHE_PROGRAM}""); endif(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM}); else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expres",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:11473,Modifiability,variab,variables,11473," OFF CACHE BOOL ""Set to ON for a ccache enabled build""); if(LLVM_CCACHE_BUILD); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); set(LLVM_CCACHE_MAXSIZE """" CACHE STRING ""Size of ccache""); set(LLVM_CCACHE_DIR """" CACHE STRING ""Directory to keep ccached data""); set(LLVM_CCACHE_PARAMS ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""; CACHE STRING ""Parameters to pass through to ccache""). if(NOT CMAKE_SYSTEM_NAME MATCHES ""Windows""); set(CCACHE_PROGRAM ""${LLVM_CCACHE_PARAMS} ${CCACHE_PROGRAM}""); if (LLVM_CCACHE_MAXSIZE); set(CCACHE_PROGRAM ""CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE} ${CCACHE_PROGRAM}""); endif(); if (LLVM_CCACHE_DIR); set(CCACHE_PROGRAM ""CCACHE_DIR=${LLVM_CCACHE_DIR} ${CCACHE_PROGRAM}""); endif(); set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM}); else(); if(LLVM_CCACHE_MAXSIZE OR LLVM_CCACHE_DIR OR; NOT LLVM_CCACHE_PARAMS MATCHES ""CCACHE_CPP2=yes CCACHE_HASHDIR=yes""); message(FATAL_ERROR ""Ccache configuration through CMake is not supported on Windows. Please use environment variables.""); endif(); # RULE_LAUNCH_COMPILE should work with Ninja but currently has issues; # with cmd.exe and some MSVC tools other than cl.exe; set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM}); endif(); else(); message(FATAL_ERROR ""Unable to find the program ccache. Set LLVM_CCACHE_BUILD to OFF""); endif(); endif(). set(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS """" CACHE STRING; ""Optional arguments for the native tool used in CMake --build invocations for external projects.""); mark_as_advanced(LLVM_EXTERNAL_PROJECT_BUILD_TOOL_ARGS). option(LLVM_DEPENDENCY_DEBUGGING ""Dependency debugging mode to verify correctly expressed library dependencies (Darwin only)"" OFF). # Some features of the LLVM build may be disallowed when dependency debugging is; # enabled. In particular you cannot use ccache because we want to force compile; # operations to always happen.; if(LLVM_DEPENDENCY_DEBUGGING); if(NOT CMAKE_HOST_APPLE); message(FATAL_ERROR ",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:18049,Modifiability,config,config,18049,"VC_IDE ); message(FATAL_ERROR ""In-source builds are not allowed.; Please create a directory and run cmake from there, passing the path; to this source directory as the last argument.; This process created the file `CMakeCache.txt' and the directory `CMakeFiles'.; Please delete them.""); endif(). string(TOUPPER ""${CMAKE_BUILD_TYPE}"" uppercase_CMAKE_BUILD_TYPE). option(LLVM_ADDITIONAL_BUILD_TYPES ""Additional build types that are allowed to be passed into CMAKE_BUILD_TYPE"" """"). set(ALLOWED_BUILD_TYPES DEBUG RELEASE RELWITHDEBINFO MINSIZEREL ${LLVM_ADDITIONAL_BUILD_TYPES}); string (REPLACE "";"" ""|"" ALLOWED_BUILD_TYPES_STRING ""${ALLOWED_BUILD_TYPES}""); string (TOUPPER ""${ALLOWED_BUILD_TYPES_STRING}"" uppercase_ALLOWED_BUILD_TYPES). if (CMAKE_BUILD_TYPE AND; NOT uppercase_CMAKE_BUILD_TYPE MATCHES ""^(${uppercase_ALLOWED_BUILD_TYPES})$""); message(FATAL_ERROR ""Unknown value for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}""); endif(). # LLVM_INSTALL_PACKAGE_DIR needs to be declared prior to adding the tools; # subdirectory in order to have the value available for llvm-config.; include(GNUInstallPackageDir); set(LLVM_INSTALL_PACKAGE_DIR ""${CMAKE_INSTALL_PACKAGEDIR}/llvm"" CACHE STRING; ""Path for CMake subdirectory for LLVM (defaults to '${CMAKE_INSTALL_PACKAGEDIR}/llvm')""). set(LLVM_TOOLS_INSTALL_DIR ""${CMAKE_INSTALL_BINDIR}"" CACHE STRING; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(LLVM_TOOLS_INSTALL_DIR). set(LLVM_UTILS_INSTALL_DIR ""${LLVM_TOOLS_INSTALL_DIR}"" CACHE STRING; ""Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)""); mark_as_advanced(LLVM_UTILS_INSTALL_DIR). set(LLVM_EXAMPLES_INSTALL_DIR ""examples"" CACHE STRING; ""Path for examples subdirectory (enabled by LLVM_BUILD_EXAMPLES=ON) (defaults to 'examples')""); mark_as_advanced(LLVM_EXAMPLES_INSTALL_DIR). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:19331,Modifiability,config,config,19331,"TRING; ""Path for binary subdirectory (defaults to '${CMAKE_INSTALL_BINDIR}')""); mark_as_advanced(LLVM_TOOLS_INSTALL_DIR). set(LLVM_UTILS_INSTALL_DIR ""${LLVM_TOOLS_INSTALL_DIR}"" CACHE STRING; ""Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)""); mark_as_advanced(LLVM_UTILS_INSTALL_DIR). set(LLVM_EXAMPLES_INSTALL_DIR ""examples"" CACHE STRING; ""Path for examples subdirectory (enabled by LLVM_BUILD_EXAMPLES=ON) (defaults to 'examples')""); mark_as_advanced(LLVM_EXAMPLES_INSTALL_DIR). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). # Each of them corresponds to llvm-config's.; set(LLVM_TOOLS_BINARY_DIR ${LLVM_RUNTIME_OUTPUT_INTDIR}) # --bindir; set(LLVM_LIBRARY_DIR ${LLVM_LIBRARY_OUTPUT_INTDIR}) # --libdir; set(LLVM_MAIN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR} ) # --src-root; set(LLVM_MAIN_INCLUDE_DIR ${LLVM_MAIN_SRC_DIR}/include ) # --includedir; set(LLVM_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} ) # --prefix. # Note: LLVM_CMAKE_DIR does not include generated files; set(LLVM_CMAKE_DIR ${LLVM_MAIN_SRC_DIR}/cmake/modules); set(LLVM_EXAMPLES_BINARY_DIR ${LLVM_BINARY_DIR}/examples); set(LLVM_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/include). # List of all targets to be built by default:; set(LLVM_ALL_TARGETS; AArch64; AMDGPU; ARM; AVR; BPF; Hexagon; Lanai; LoongArch; Mips; MSP430; NVPTX; PowerPC; RISCV; Sparc; SystemZ; VE; WebAssembly; X86; XCore; ). set(LLVM_ALL_EXPERIMENTAL_TARGETS; ARC; CSKY; DirectX; M68k; SPIRV; Xtensa; ). # List of targets with JIT support:; set(LLVM_TARGETS_WITH_JIT X86 PowerPC AArch64 ARM Mips SystemZ). set(LLVM_TARGETS_",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:33185,Modifiability,config,configure,33185,"e llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libraries from LLVM you want to include in the; # shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited; # list of LLVM components. All component names handled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message(FATAL_ERROR ""BUILD_SHARED_LIBS options is not supported on Windows.""); endif(); else(); option(LLVM_LINK_LLVM_DYLIB ""Link tools against the libllvm dynamic library"" OFF); option(LLVM_BUILD_LLVM_C_DYLIB ""Build libllvm-c re-export library (Darwin only)"" OFF); set(LLVM_BUILD_LLVM_DYLIB_default OFF); if(LLVM_LINK_LLVM_DYLIB OR LLVM_BUILD_LLVM_C_DYLIB); set(LLVM_BUILD_LLVM_DYLIB_default ON); endif(); option(LLVM_BUILD_LLVM_DYLIB ""Build libllvm dynamic lib",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:33389,Modifiability,config,config,33389,"(LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamldoc-generated HTML documentation install directory""). option (LLVM_BUILD_EXTERNAL_COMPILER_RT; ""Build compiler-rt as an external project."" OFF). option (LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO; ""Show target and host info when tools are invoked with --version."" ON). # You can configure which libraries from LLVM you want to include in the; # shared library by setting LLVM_DYLIB_COMPONENTS to a semi-colon delimited; # list of LLVM components. All component names handled by llvm-config are valid.; if(NOT DEFINED LLVM_DYLIB_COMPONENTS); set(LLVM_DYLIB_COMPONENTS ""all"" CACHE STRING; ""Semicolon-separated list of components to include in libLLVM, or \""all\"".""); endif(). if(MSVC); option(LLVM_BUILD_LLVM_C_DYLIB ""Build LLVM-C.dll (Windows only)"" ON); # Set this variable to OFF here so it can't be set with a command-line; # argument.; set (LLVM_LINK_LLVM_DYLIB OFF); if (BUILD_SHARED_LIBS); message(FATAL_ERROR ""BUILD_SHARED_LIBS options is not supported on Windows.""); endif(); else(); option(LLVM_LINK_LLVM_DYLIB ""Link tools against the libllvm dynamic library"" OFF); option(LLVM_BUILD_LLVM_C_DYLIB ""Build libllvm-c re-export library (Darwin only)"" OFF); set(LLVM_BUILD_LLVM_DYLIB_default OFF); if(LLVM_LINK_LLVM_DYLIB OR LLVM_BUILD_LLVM_C_DYLIB); set(LLVM_BUILD_LLVM_DYLIB_default ON); endif(); option(LLVM_BUILD_LLVM_DYLIB ""Build libllvm dynamic library"" ${LLVM_BUILD_LLVM_DYLIB_default}); endif(). if (LLVM_LINK_LLVM_DYLIB AND BUILD_SHARED_LIBS); message(FATAL_ERR",MatchSource.DOCS,interpreter/llvm-project/llvm/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt
