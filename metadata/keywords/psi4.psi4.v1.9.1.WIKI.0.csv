id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/index-wcopy.html:1558,Availability,down,downloads,1558, v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psicon-2014; ; Developers' Conference 2014 — GaTech | Posts. /psicon-2015; ; Developers' Conference 2015 — Emory | Posts. /psicon-2016; ; Developers' Conference 2016 — UGA | Posts. /psicon-2017; ; WWDC 2017 — Virginia Tech | Posts. /psicon-2018; ; PsiCon 2018 — GaTech | Posts. /psicon-2019; ; PsiCon 2019 and Psi4Education Meetings — Emory | Posts. /psicon-2020; ; PsiCon 2020 and Psi4Education Meetings — Virtual | Posts. /psicon-2021; ; PsiCon 2021 — University of Georgia | Posts. /psicon-2022; ; PsiCon 2022 — Virginia Tech | Posts. /psicon-2023; ; PsiCon 2023 — Georgia Tech ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:27,Deployability,release,releases,27,﻿. PsiCode. categories; . /releases; ; releases |. css; ; custom.css; installs-menu.css; style.min.css. images; ; favicon-psi4.ico. installs; . /latest; ; /installs/v191/. /v13; ; Install v1.3+ | Installs. /v131; ; Install v1.3.1+ | Installs. /v132; ; Install v1.3.2+ | Installs. /v14; ; Install v1.4+ | Installs. /v141; ; Install v1.4.1+ | Installs. /v15; ; Install v1.5+ | Installs. /v16; ; Install v1.6+ | Installs. /v161; ; Install v1.6.1+ | Installs. /v17; ; Install v1.7+ | Installs. /v18; ; Install v1.8+ | Installs. /v181; ; Install v1.8.1+ | Installs. /v182; ; Install v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psic,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:39,Deployability,release,releases,39,﻿. PsiCode. categories; . /releases; ; releases |. css; ; custom.css; installs-menu.css; style.min.css. images; ; favicon-psi4.ico. installs; . /latest; ; /installs/v191/. /v13; ; Install v1.3+ | Installs. /v131; ; Install v1.3.1+ | Installs. /v132; ; Install v1.3.2+ | Installs. /v14; ; Install v1.4+ | Installs. /v141; ; Install v1.4.1+ | Installs. /v15; ; Install v1.5+ | Installs. /v16; ; Install v1.6+ | Installs. /v161; ; Install v1.6.1+ | Installs. /v17; ; Install v1.7+ | Installs. /v18; ; Install v1.8+ | Installs. /v181; ; Install v1.8.1+ | Installs. /v182; ; Install v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psic,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:70,Deployability,install,installs-menu,70,﻿. PsiCode. categories; . /releases; ; releases |. css; ; custom.css; installs-menu.css; style.min.css. images; ; favicon-psi4.ico. installs; . /latest; ; /installs/v191/. /v13; ; Install v1.3+ | Installs. /v131; ; Install v1.3.1+ | Installs. /v132; ; Install v1.3.2+ | Installs. /v14; ; Install v1.4+ | Installs. /v141; ; Install v1.4.1+ | Installs. /v15; ; Install v1.5+ | Installs. /v16; ; Install v1.6+ | Installs. /v161; ; Install v1.6.1+ | Installs. /v17; ; Install v1.7+ | Installs. /v18; ; Install v1.8+ | Installs. /v181; ; Install v1.8.1+ | Installs. /v182; ; Install v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psic,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:132,Deployability,install,installs,132,﻿. PsiCode. categories; . /releases; ; releases |. css; ; custom.css; installs-menu.css; style.min.css. images; ; favicon-psi4.ico. installs; . /latest; ; /installs/v191/. /v13; ; Install v1.3+ | Installs. /v131; ; Install v1.3.1+ | Installs. /v132; ; Install v1.3.2+ | Installs. /v14; ; Install v1.4+ | Installs. /v141; ; Install v1.4.1+ | Installs. /v15; ; Install v1.5+ | Installs. /v16; ; Install v1.6+ | Installs. /v161; ; Install v1.6.1+ | Installs. /v17; ; Install v1.7+ | Installs. /v18; ; Install v1.8+ | Installs. /v181; ; Install v1.8.1+ | Installs. /v182; ; Install v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psic,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:156,Deployability,install,installs,156,﻿. PsiCode. categories; . /releases; ; releases |. css; ; custom.css; installs-menu.css; style.min.css. images; ; favicon-psi4.ico. installs; . /latest; ; /installs/v191/. /v13; ; Install v1.3+ | Installs. /v131; ; Install v1.3.1+ | Installs. /v132; ; Install v1.3.2+ | Installs. /v14; ; Install v1.4+ | Installs. /v141; ; Install v1.4.1+ | Installs. /v15; ; Install v1.5+ | Installs. /v16; ; Install v1.6+ | Installs. /v161; ; Install v1.6.1+ | Installs. /v17; ; Install v1.7+ | Installs. /v18; ; Install v1.8+ | Installs. /v181; ; Install v1.8.1+ | Installs. /v182; ; Install v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psic,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1111532,Deployability,install,installfile,1111532,le__omp3.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CONVERGENCE — PSI4 [beta3] documentation;,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1216641,Deployability,install,installfile,1216641,le__omp3.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CONVERGENCE — PSI4 [beta3] documentation; NORM_TOLERANCE — PSI4 [beta3] document,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1322567,Deployability,install,installfile,1322567,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1431568,Deployability,install,installfile,1431568,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI4 [beta4] documentation; NORM_TOLERANCE,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1540584,Deployability,install,installfile,1540584,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1648627,Deployability,install,installfile,1648627,t; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI4 [beta5] documentation; NORM_TOLERANCE,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:37174,Energy Efficiency,energy,energy,37174,xt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_physconst.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psimod.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite_cfour.txt; autodoc_testsuite_corepsi4.txt; autodoc_testsuite_dftd3.txt; autodoc_testsuite_dmrg.txt; autodoc_testsuite_libefp.txt; autodoc_testsuite_mrcc.txt; autodoc_testsuite_pcmsolver.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; basissets_tables.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cfour.txt; cfour_table_energy.txt; cfour_table_grad.txt; chemps2.txt; conda.txt; contents.txt; contributing.txt; cubeprop.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; dkh.txt; documentation.txt; energy.txt; external.txt; fchk.txt; fnocc.txt; freq.txt; gdma.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; libefp.txt; methods.txt; molden.txt; mrcc.txt; mrcc_table_energy.txt; nbody.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pcmsolver.txt; pep0001.txt; plugins.txt; proc_py.txt; prog_basissets.txt; programming.txt; prop.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; psithonmol.txt; quickaddalias.txt; quickadddatabase.txt; relativistic.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; thermo.txt; tutorial.txt. _static; ; basic.css; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. Programmers’ Manual — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:141119,Energy Efficiency,energy,energy,141119,"1b] Docs; CI: Configuration Interaction — Psi4 [1.0.0 6a9a71b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Index — Psi4 [1.0.0 6a9a71b] Docs;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:141178,Energy Efficiency,energy,energy,141178,"1b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Index — Psi4 [1.0.0 6a9a71b] Docs; PSI Variables by Alpha — Psi4 [1.0.0 6a9a71b] Docs; PSI Va",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:180622,Energy Efficiency,energy,energy,180622,xt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_physconst.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psimod.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite_cfour.txt; autodoc_testsuite_corepsi4.txt; autodoc_testsuite_dftd3.txt; autodoc_testsuite_dmrg.txt; autodoc_testsuite_libefp.txt; autodoc_testsuite_mrcc.txt; autodoc_testsuite_pcmsolver.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; basissets_tables.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cfour.txt; cfour_table_energy.txt; cfour_table_grad.txt; chemps2.txt; conda.txt; contents.txt; contributing.txt; cubeprop.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; dkh.txt; documentation.txt; energy.txt; external.txt; fchk.txt; fnocc.txt; freq.txt; gdma.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; libefp.txt; methods.txt; molden.txt; mrcc.txt; mrcc_table_energy.txt; nbody.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pcmsolver.txt; pep0001.txt; plugins.txt; proc_py.txt; prog_basissets.txt; programming.txt; prop.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; psithonmol.txt; quickaddalias.txt; quickadddatabase.txt; relativistic.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; thermo.txt; tutorial.txt. /_static; ; basic.css; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:284521,Energy Efficiency,energy,energy,284521,"1b] Docs; CI: Configuration Interaction — Psi4 [1.0.0 6a9a71b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Index — Psi4 [1.0.0 6a9a71b] Docs;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:284580,Energy Efficiency,energy,energy,284580,"1b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT: Density Functional Theory — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; DFT Functionals — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Interface to DFTD3 by S. Grimme — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Spectroscopic Constants for Diatomics — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Documentation — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Single-Point Energy, energy() — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Installation and Runtime Configuration — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; Interface to programs through FCHK files, fchk() — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4 — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Harmonic Vibrational Analysis, frequency() and hessian() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma() — Psi4 [1.0.0 6a9a71b] Docs; Index — Psi4 [1.0.0 6a9a71b] Docs; PSI Variables by Alpha — Psi4 [1.0.0 6a9a71b] Docs; PSI Va",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:297423,Energy Efficiency,energy,energy,297423,ore.SymmetryOperation; psi4.core.thermo; psi4.core.ThreeCenterOverlapInt; psi4.core.TracelessQuadrupoleInt; psi4.core.tstart; psi4.core.tstop; psi4.core.TwoBodyAOInt; psi4.core.TwoElectronInt; psi4.core.UHF; psi4.core.VBase; psi4.core.Vector; psi4.core.Vector3; psi4.core.VectorMatrix; psi4.core.version; psi4.core.View; psi4.core.Wavefunction; psi4.driver.activate; psi4.driver.ancestor; psi4.driver.banner; psi4.driver.basis_helper; psi4.driver.BFS; psi4.driver.cbs; psi4.driver.compare_arrays; psi4.driver.compare_csx; psi4.driver.compare_cubes; psi4.driver.compare_integers; psi4.driver.compare_matrices; psi4.driver.compare_strings; psi4.driver.compare_values; psi4.driver.compare_vectors; psi4.driver.ConvergenceError; psi4.driver.copy_file_from_scratch; psi4.driver.copy_file_to_scratch; psi4.driver.create_plugin; psi4.driver.csx2endict; psi4.driver.CSXError; psi4.driver.cubeprop; psi4.driver.Dftd3Error; psi4.driver.dynamic_variable_bind; psi4.driver.EmpericalDispersion; psi4.driver.energy; psi4.driver.extract_cluster_indexing; psi4.driver.extract_clusters; psi4.driver.fchk; psi4.driver.filter_comments; psi4.driver.find_approximate_string_matches; psi4.driver.freq; psi4.driver.frequencies; psi4.driver.frequency; psi4.driver.gdma; psi4.driver.geometry; psi4.driver.get_memory; psi4.driver.getFromDict; psi4.driver.gradient; psi4.driver.hessian; psi4.driver.join_path; psi4.driver.levenshtein; psi4.driver.ManagedMethodError; psi4.driver.molden; psi4.driver.molecule_get_attr; psi4.driver.molecule_set_attr; psi4.driver.oeprop; psi4.driver.opt; psi4.driver.optimize; psi4.driver.ParsingError; psi4.driver.PastureRequiredError; psi4.driver.pcm_helper; psi4.driver.print_stderr; psi4.driver.print_stdout; psi4.driver.process_input; psi4.driver.process_pubchem_command; psi4.driver.prop; psi4.driver.property; psi4.driver.PsiException; psi4.driver.PsiImportError; psi4.driver.QMMM; psi4.driver.sanitize_name; psi4.driver.scf_helper; psi4.driver.scf_wavefunction_factory; psi4.driver.set_mem,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:327479,Energy Efficiency,energy,energy,327479,"stribution; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; Index; PSI Variables by Alpha; PSI V",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:327511,Energy Efficiency,energy,energy,327511,"stribution; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; Index; PSI Variables by Alpha; PSI V",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:338847,Energy Efficiency,energy,energy,338847,ore.SymmetryOperation; psi4.core.thermo; psi4.core.ThreeCenterOverlapInt; psi4.core.TracelessQuadrupoleInt; psi4.core.tstart; psi4.core.tstop; psi4.core.TwoBodyAOInt; psi4.core.TwoElectronInt; psi4.core.UHF; psi4.core.VBase; psi4.core.Vector; psi4.core.Vector3; psi4.core.VectorMatrix; psi4.core.version; psi4.core.View; psi4.core.Wavefunction; psi4.driver.activate; psi4.driver.ancestor; psi4.driver.banner; psi4.driver.basis_helper; psi4.driver.BFS; psi4.driver.cbs; psi4.driver.compare_arrays; psi4.driver.compare_csx; psi4.driver.compare_cubes; psi4.driver.compare_integers; psi4.driver.compare_matrices; psi4.driver.compare_strings; psi4.driver.compare_values; psi4.driver.compare_vectors; psi4.driver.ConvergenceError; psi4.driver.copy_file_from_scratch; psi4.driver.copy_file_to_scratch; psi4.driver.create_plugin; psi4.driver.csx2endict; psi4.driver.CSXError; psi4.driver.cubeprop; psi4.driver.Dftd3Error; psi4.driver.dynamic_variable_bind; psi4.driver.EmpericalDispersion; psi4.driver.energy; psi4.driver.extract_cluster_indexing; psi4.driver.extract_clusters; psi4.driver.fchk; psi4.driver.filter_comments; psi4.driver.find_approximate_string_matches; psi4.driver.freq; psi4.driver.frequencies; psi4.driver.frequency; psi4.driver.gdma; psi4.driver.geometry; psi4.driver.get_memory; psi4.driver.getFromDict; psi4.driver.gradient; psi4.driver.hessian; psi4.driver.join_path; psi4.driver.levenshtein; psi4.driver.ManagedMethodError; psi4.driver.molden; psi4.driver.molecule_get_attr; psi4.driver.molecule_set_attr; psi4.driver.oeprop; psi4.driver.opt; psi4.driver.optimize; psi4.driver.ParsingError; psi4.driver.PastureRequiredError; psi4.driver.pcm_helper; psi4.driver.print_stderr; psi4.driver.print_stdout; psi4.driver.process_input; psi4.driver.process_pubchem_command; psi4.driver.prop; psi4.driver.property; psi4.driver.PsiException; psi4.driver.PsiImportError; psi4.driver.QMMM; psi4.driver.sanitize_name; psi4.driver.scf_helper; psi4.driver.scf_wavefunction_factory; psi4.driver.set_mem,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:368905,Energy Efficiency,energy,energy,368905,"stribution; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; Index; PSI Variables by Alpha; PSI V",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:368937,Energy Efficiency,energy,energy,368937,"stribution; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; Index; PSI Variables by Alpha; PSI V",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:380113,Energy Efficiency,energy,energy,380113,ay_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:380121,Energy Efficiency,energy,energy,380121,ay_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:411148,Energy Efficiency,energy,energy,411148,"on; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multi",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:411180,Energy Efficiency,energy,energy,411180,"on; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multi",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:422608,Energy Efficiency,energy,energy,422608,ay_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:422616,Energy Efficiency,energy,energy,422616,ay_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:453645,Energy Efficiency,energy,energy,453645,"on; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multi",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:453677,Energy Efficiency,energy,energy,453677,"on; Contributions: Intro to Programming in PSI4; Contributions: Intro to Programming in PSI4; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Documentation; Documentation; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to GDMA Distributed Multi",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:465387,Energy Efficiency,energy,energy,465387,set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; compare_wavefunctions; compare_wavefunctions; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:465395,Energy Efficiency,energy,energy,465395,set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; compare_wavefunctions; compare_wavefunctions; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:496181,Energy Efficiency,energy,energy,496181,"ers; Conda Binary Distribution; Conda Binary Distribution; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:496213,Energy Efficiency,energy,energy,496213,"ers; Conda Binary Distribution; Conda Binary Distribution; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:508413,Energy Efficiency,energy,energy,508413,set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; compare_wavefunctions; compare_wavefunctions; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:508421,Energy Efficiency,energy,energy,508421,set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_parent_symmetry; set_parent_symmetry; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; VBase; Vector; Vector3; VectorMatrix; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_arrays; compare_arrays; compare_csx; compare_csx; compare_cubes; compare_cubes; compare_fcidumps; compare_fcidumps; compare_integers; compare_integers; compare_matrices; compare_matrices; compare_strings; compare_strings; compare_values; compare_values; compare_vectors; compare_vectors; compare_wavefunctions; compare_wavefunctions; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; csx2endict; csx2endict; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:539209,Energy Efficiency,energy,energy,539209,"ers; Conda Binary Distribution; Conda Binary Distribution; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:539241,Energy Efficiency,energy,energy,539241,"ers; Conda Binary Distribution; Conda Binary Distribution; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCFT: Density Cumulant Functional Theory; DCFT: Density Cumulant Functional Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:551896,Energy Efficiency,energy,energy,551896,efix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_non,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:551904,Energy Efficiency,energy,energy,551904,t_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; fil,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:591797,Energy Efficiency,energy,energy,591797,"ution; Interface to CPPE by M. Scheurer; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:591829,Energy Efficiency,energy,energy,591829,"ution; Interface to CPPE by M. Scheurer; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:605020,Energy Efficiency,energy,energy,605020,efix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_non,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:605028,Energy Efficiency,energy,energy,605028,t_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; fil,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:644923,Energy Efficiency,energy,energy,644923,"ution; Interface to CPPE by M. Scheurer; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:644955,Energy Efficiency,energy,energy,644955,"ution; Interface to CPPE by M. Scheurer; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to gCP by S. Grimme; Interface to GDMA Distributed ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:658261,Energy Efficiency,energy,energy,658261,efix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_non,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:658269,Energy Efficiency,energy,energy,658269,t_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; fil,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:698756,Energy Efficiency,energy,energy,698756,"PE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Inter",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:698788,Energy Efficiency,energy,energy,698788,"PE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Inter",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:712014,Energy Efficiency,energy,energy,712014,efix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_non,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:712022,Energy Efficiency,energy,energy,712022,t_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; fil,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:752511,Energy Efficiency,energy,energy,752511,"PE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Inter",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:752543,Energy Efficiency,energy,energy,752543,"PE by M. Scheurer; Generation of Cube Files — cubeprop(); Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Customization: Adding Simple Extensions; Database — database(); Database — database(); DCT: Density Cumulant Theory; DCT: Density Cumulant Theory; CI: Configuration Interaction; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT: Density Functional Theory; DFT Functionals; DFT Functionals; Interface to DFTD3 by S. Grimme; Interface to DFTD3 by S. Grimme; DFT-NL; DFT-NL; Spectroscopic Constants for Diatomics; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Updating the PSI4 Users’ and Programmers’ Manual; Single-Point Energy — energy(); Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; Installation and Runtime Configuration; External API Objects; External API Objects; Interface to programs through FCHK files — fchk(); Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Inter",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:763667,Energy Efficiency,energy,energy,763667,lcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_wavefunction; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; timer_off; timer_on; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; ancestor; AtomicComputer; banner; basis_helper; cbs; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; CSXError; cubeprop; Dftd3Error; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fchkfile_to_string; fcidump; fcidump_from_file; find_approximate_string_matches; free_atom_volumes; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; join_path; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; print_stderr; print_stdout; process_input; prop; properties; PsiException; PsiImportError; compare_vibinfos; filter_nonvib; filter_omega_to_real; harmonic_analysis; hessian_symmetrize; print_molden_vibs; print_vibs; thermo; QMMM; QMMMbohr; sanitize_name; scf_helper; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_module_options; set_options; Table; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:784535,Energy Efficiency,energy,energy,784535,"ts; Basis Sets by Family; Bibliography; Interface to the BrianQC GPU module by the BrianQC team; Build & Run FAQ; Obtaining PSI4; Compiling and Installing from Source; Complete Basis Set; <no title>; CC: Coupled Cluster Theory; Interface to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:792775,Energy Efficiency,energy,energy,792775,SFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:814753,Energy Efficiency,energy,energy,814753,"Obtaining PSI4; Compiling and Installing from Source; Capabilities and Alternate Implementations; Complete Basis Set; <no title>; CC: Coupled Cluster Theory; Interface to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:823124,Energy Efficiency,energy,energy,823124,SFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; li,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:845342,Energy Efficiency,energy,energy,845342,"Obtaining PSI4; Compiling and Installing from Source; Capabilities and Alternate Implementations; Complete Basis Set; <no title>; CC: Coupled Cluster Theory; Interface to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:853633,Energy Efficiency,energy,energy,853633,SFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; li,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:875853,Energy Efficiency,energy,energy,875853,"Obtaining PSI4; Compiling and Installing from Source; Capabilities and Alternate Implementations; Complete Basis Set; <no title>; CC: Coupled Cluster Theory; Interface to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:902332,Energy Efficiency,energy,energy,902332,er_norm.txt; solver__solver_precondition.txt. /autodir_psivariables; ; module__adc.txt; module__ccenergy.txt; module__cceom.txt; module__cctriples.txt; module__dcft.txt; module__detci.txt; module__dfmp2.txt; module__lmp2.txt; module__mcscf.txt; module__mp2.txt; module__omp2.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. <no title> — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1006942,Energy Efficiency,energy,energy,1006942,er_norm.txt; solver__solver_precondition.txt. /autodir_psivariables; ; module__adc.txt; module__ccenergy.txt; module__cceom.txt; module__cctriples.txt; module__dcft.txt; module__detci.txt; module__dfmp2.txt; module__lmp2.txt; module__mcscf.txt; module__mp2.txt; module__omp2.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentatio,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1111458,Energy Efficiency,energy,energy,1111458,odule__mp2.txt; module__mrcc.txt; module__oeprop.txt; module__omp2.txt; module__omp3.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY —,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1216567,Energy Efficiency,energy,energy,1216567,odule__mp2.txt; module__mrcc.txt; module__oeprop.txt; module__omp2.txt; module__omp3.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CON,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1322482,Energy Efficiency,energy,energy,1322482,dule__lmp2.txt; module__mcscf.txt; module__mrcc.txt; module__occ.txt; module__oeprop.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. autodir_options_c; ; CACHELEVEL — P,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1431483,Energy Efficiency,energy,energy,1431483,dule__lmp2.txt; module__mcscf.txt; module__mrcc.txt; module__occ.txt; module__oeprop.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1540499,Energy Efficiency,energy,energy,1540499,ule__fnocc.txt; module__mcscf.txt; module__mrcc.txt; module__occ.txt; module__oeprop.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. autodir_options_c; ; CACHELEVEL — P,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1648542,Energy Efficiency,energy,energy,1648542,ule__fnocc.txt; module__mcscf.txt; module__mrcc.txt; module__occ.txt; module__oeprop.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt; module__thermo.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_basissets_byfamily.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1737645,Energy Efficiency,energy,energy,1737645,ons; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; li,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1760617,Energy Efficiency,energy,energy,1760617,"to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Pertur",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1768926,Energy Efficiency,energy,energy,1768926,d; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; li,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1791102,Energy Efficiency,energy,energy,1791102,"Obtaining PSI4; Compiling and Installing from Source; Capabilities and Alternate Implementations; Complete Basis Set; <no title>; CC: Coupled Cluster Theory; Interface to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1799350,Energy Efficiency,energy,energy,1799350,d; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; li,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1821528,Energy Efficiency,energy,energy,1821528,"Obtaining PSI4; Compiling and Installing from Source; Capabilities and Alternate Implementations; Complete Basis Set; <no title>; CC: Coupled Cluster Theory; Interface to CFOUR by J. Stanton & J. Gauss; <no title>; <no title>; Interface to CheMPS2 by S. Wouters; Code style conventions; Conda Binary Distribution; Interface to CPPE by M. Scheurer; Generation of Cube Files — cubeprop(); Customization: Adding Simple Extensions; Database — database(); DCT: Density Cumulant Theory; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; CI: Configuration Interaction; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DFT: Density Functional Theory; DFT Functionals; Interface to DFTD3 by S. Grimme; DFT-NL; Spectroscopic Constants for Diatomics; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; Updating the PSI4 Users’ and Programmers’ Manual; Interface to LibECPInt by R. Shaw; Single-Point Energy — energy(); Interface to ERD by N. Flocke and V. Lotrich; Installation and Runtime Configuration; External API Objects; Interface to programs through FCHK files — fchk(); F/I-SAPT: Functional Group and/or Intramolecular SAPT; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:597179,Integrability,depend,dependent,597179,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:597245,Integrability,depend,dependent,597245,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:650305,Integrability,depend,dependent,650305,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.5.0; . PSI4: Open-Source Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_u,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:650371,Integrability,depend,dependent,650371,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.5.0; . PSI4: Open-Source Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_u,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:704138,Integrability,depend,dependent,704138,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:704204,Integrability,depend,dependent,704204,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:757893,Integrability,depend,dependent,757893,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.6.x; . /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. /util; ; psi4.driver.util.filesystem. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_nbody; psi4.driver.inputpars,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:757959,Integrability,depend,dependent,757959,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.6.x; . /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. /util; ; psi4.driver.util.filesystem. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_nbody; psi4.driver.inputpars,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:787258,Integrability,depend,dependent,787258," Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. /1.7.x; . /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:817476,Integrability,depend,dependent,817476," Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. /1.8.x; . PSI4: Open-Source Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_n",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:848065,Integrability,depend,dependent,848065," Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputpars",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:878576,Integrability,depend,dependent,878576," Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. /4.0b2; . <no title> — PSI4 [beta2] documentation. _modules; ; aliases — PSI4 [beta2] documentation; driver — PSI4 [beta2] documentation; frac — PSI4 [beta2] documentation; functional — PSI4 [beta2] documentation; input — PSI4 [beta2] documentation; molutil — PSI4 [beta2] documentation; proc — PSI4 [beta2] documentation; procutil — PSI4 [beta2] documentation; psiexceptions — PSI4 [beta2] documentation; pubchem — PSI4 [beta2] documentation; qmmm — PSI4 [beta2] documentation; text — PSI4 [beta2] documentation; util — PSI4 [beta2] documentation; wrappers — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation. _sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__refer",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:879297,Integrability,wrap,wrappers,879297,ntation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. /4.0b2; . <no title> — PSI4 [beta2] documentation. _modules; ; aliases — PSI4 [beta2] documentation; driver — PSI4 [beta2] documentation; frac — PSI4 [beta2] documentation; functional — PSI4 [beta2] documentation; input — PSI4 [beta2] documentation; molutil — PSI4 [beta2] documentation; proc — PSI4 [beta2] documentation; procutil — PSI4 [beta2] documentation; psiexceptions — PSI4 [beta2] documentation; pubchem — PSI4 [beta2] documentation; qmmm — PSI4 [beta2] documentation; text — PSI4 [beta2] documentation; util — PSI4 [beta2] documentation; wrappers — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation. _sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:983906,Integrability,wrap,wrappers,983906,Database — PSI4 [beta2] documentation; Creating a Database — PSI4 [beta2] documentation; Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation; Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation; Hartree–Fock Theory — PSI4 [beta2] documentation; Hartree–Fock Theory — PSI4 [beta2] documentation; Search — PSI4 [beta2] documentation; Embarrassing Parallelism — PSI4 [beta2] documentation; Embarrassing Parallelism — PSI4 [beta2] documentation; Test Suite and Sample Inputs — PSI4 [beta2] documentation; Test Suite and Sample Inputs — PSI4 [beta2] documentation; A PSI4 Tutorial — PSI4 [beta2] documentation; A PSI4 Tutorial — PSI4 [beta2] documentation. /_modules; ; aliases — PSI4 [beta2] documentation; driver — PSI4 [beta2] documentation; frac — PSI4 [beta2] documentation; functional — PSI4 [beta2] documentation; input — PSI4 [beta2] documentation; molutil — PSI4 [beta2] documentation; proc — PSI4 [beta2] documentation; procutil — PSI4 [beta2] documentation; psiexceptions — PSI4 [beta2] documentation; pubchem — PSI4 [beta2] documentation; qmmm — PSI4 [beta2] documentation; text — PSI4 [beta2] documentation; util — PSI4 [beta2] documentation; wrappers — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation. /_sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccener,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1089155,Integrability,wrap,wrappers,1089155,listother — PSI4 [beta3] documentation; dashparam — PSI4 [beta3] documentation; diatomic — PSI4 [beta3] documentation; diatomic_fits — PSI4 [beta3] documentation; driver — PSI4 [beta3] documentation; frac — PSI4 [beta3] documentation; functional — PSI4 [beta3] documentation; input — PSI4 [beta3] documentation; molutil — PSI4 [beta3] documentation; optproc — PSI4 [beta3] documentation; proc — PSI4 [beta3] documentation; procutil — PSI4 [beta3] documentation; psiexceptions — PSI4 [beta3] documentation; pubchem — PSI4 [beta3] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta3] documentation; qcdb.exceptions — PSI4 [beta3] documentation; qcdb.libmintscoordentry — PSI4 [beta3] documentation; qcdb.libmintsmolecule — PSI4 [beta3] documentation; qcdb.molecule — PSI4 [beta3] documentation; qcdb.psiutil — PSI4 [beta3] documentation; qcdb.vecutil — PSI4 [beta3] documentation. qmmm — PSI4 [beta3] documentation; text — PSI4 [beta3] documentation; util — PSI4 [beta3] documentation; wrappers — PSI4 [beta3] documentation; Overview: module code — PSI4 [beta3] documentation; Overview: module code — PSI4 [beta3] documentation. _sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenergy,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1194263,Integrability,wrap,wrappers,1194263,listother — PSI4 [beta3] documentation; dashparam — PSI4 [beta3] documentation; diatomic — PSI4 [beta3] documentation; diatomic_fits — PSI4 [beta3] documentation; driver — PSI4 [beta3] documentation; frac — PSI4 [beta3] documentation; functional — PSI4 [beta3] documentation; input — PSI4 [beta3] documentation; molutil — PSI4 [beta3] documentation; optproc — PSI4 [beta3] documentation; proc — PSI4 [beta3] documentation; procutil — PSI4 [beta3] documentation; psiexceptions — PSI4 [beta3] documentation; pubchem — PSI4 [beta3] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta3] documentation; qcdb.exceptions — PSI4 [beta3] documentation; qcdb.libmintscoordentry — PSI4 [beta3] documentation; qcdb.libmintsmolecule — PSI4 [beta3] documentation; qcdb.molecule — PSI4 [beta3] documentation; qcdb.psiutil — PSI4 [beta3] documentation; qcdb.vecutil — PSI4 [beta3] documentation. qmmm — PSI4 [beta3] documentation; text — PSI4 [beta3] documentation; util — PSI4 [beta3] documentation; wrappers — PSI4 [beta3] documentation; Overview: module code — PSI4 [beta3] documentation; Overview: module code — PSI4 [beta3] documentation. /_sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenerg,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1299381,Integrability,wrap,wrappers,1299381,sislistother — PSI4 [beta4] documentation; dashparam — PSI4 [beta4] documentation; diatomic — PSI4 [beta4] documentation; driver — PSI4 [beta4] documentation; frac — PSI4 [beta4] documentation; functional — PSI4 [beta4] documentation; gaussian_n — PSI4 [beta4] documentation; input — PSI4 [beta4] documentation; molutil — PSI4 [beta4] documentation; optproc — PSI4 [beta4] documentation; proc — PSI4 [beta4] documentation; procutil — PSI4 [beta4] documentation; psiexceptions — PSI4 [beta4] documentation; pubchem — PSI4 [beta4] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta4] documentation; qcdb.exceptions — PSI4 [beta4] documentation; qcdb.libmintscoordentry — PSI4 [beta4] documentation; qcdb.libmintsmolecule — PSI4 [beta4] documentation; qcdb.molecule — PSI4 [beta4] documentation; qcdb.psiutil — PSI4 [beta4] documentation; qcdb.vecutil — PSI4 [beta4] documentation. qmmm — PSI4 [beta4] documentation; text — PSI4 [beta4] documentation; util — PSI4 [beta4] documentation; wrappers — PSI4 [beta4] documentation; Overview: module code — PSI4 [beta4] documentation; Overview: module code — PSI4 [beta4] documentation. _sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenergy,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1408381,Integrability,wrap,wrappers,1408381,sislistother — PSI4 [beta4] documentation; dashparam — PSI4 [beta4] documentation; diatomic — PSI4 [beta4] documentation; driver — PSI4 [beta4] documentation; frac — PSI4 [beta4] documentation; functional — PSI4 [beta4] documentation; gaussian_n — PSI4 [beta4] documentation; input — PSI4 [beta4] documentation; molutil — PSI4 [beta4] documentation; optproc — PSI4 [beta4] documentation; proc — PSI4 [beta4] documentation; procutil — PSI4 [beta4] documentation; psiexceptions — PSI4 [beta4] documentation; pubchem — PSI4 [beta4] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta4] documentation; qcdb.exceptions — PSI4 [beta4] documentation; qcdb.libmintscoordentry — PSI4 [beta4] documentation; qcdb.libmintsmolecule — PSI4 [beta4] documentation; qcdb.molecule — PSI4 [beta4] documentation; qcdb.psiutil — PSI4 [beta4] documentation; qcdb.vecutil — PSI4 [beta4] documentation. qmmm — PSI4 [beta4] documentation; text — PSI4 [beta4] documentation; util — PSI4 [beta4] documentation; wrappers — PSI4 [beta4] documentation; Overview: module code — PSI4 [beta4] documentation; Overview: module code — PSI4 [beta4] documentation. /_sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenerg,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1517585,Integrability,wrap,wrappers,1517585,; molutil — PSI4 [beta5] documentation. /p4util; ; p4util.basislist — PSI4 [beta5] documentation; p4util.basislistdunning — PSI4 [beta5] documentation; p4util.basislistother — PSI4 [beta5] documentation; p4util.optproc — PSI4 [beta5] documentation; p4util.procutil — PSI4 [beta5] documentation; p4util.text — PSI4 [beta5] documentation; p4util.util — PSI4 [beta5] documentation. pcmgetkw — PSI4 [beta5] documentation; pcmpreprocess — PSI4 [beta5] documentation; proc — PSI4 [beta5] documentation; psiexceptions — PSI4 [beta5] documentation; pubchem — PSI4 [beta5] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta5] documentation; qcdb.exceptions — PSI4 [beta5] documentation; qcdb.libmintscoordentry — PSI4 [beta5] documentation; qcdb.libmintsmolecule — PSI4 [beta5] documentation; qcdb.molecule — PSI4 [beta5] documentation; qcdb.psiutil — PSI4 [beta5] documentation; qcdb.vecutil — PSI4 [beta5] documentation. qmmm — PSI4 [beta5] documentation; wrappers — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation. _sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenergy__cachelevel.txt; ccenergy__cachety,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1625627,Integrability,wrap,wrappers,1625627,; molutil — PSI4 [beta5] documentation. /p4util; ; p4util.basislist — PSI4 [beta5] documentation; p4util.basislistdunning — PSI4 [beta5] documentation; p4util.basislistother — PSI4 [beta5] documentation; p4util.optproc — PSI4 [beta5] documentation; p4util.procutil — PSI4 [beta5] documentation; p4util.text — PSI4 [beta5] documentation; p4util.util — PSI4 [beta5] documentation. pcmgetkw — PSI4 [beta5] documentation; pcmpreprocess — PSI4 [beta5] documentation; proc — PSI4 [beta5] documentation; psiexceptions — PSI4 [beta5] documentation; pubchem — PSI4 [beta5] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta5] documentation; qcdb.exceptions — PSI4 [beta5] documentation; qcdb.libmintscoordentry — PSI4 [beta5] documentation; qcdb.libmintsmolecule — PSI4 [beta5] documentation; qcdb.molecule — PSI4 [beta5] documentation; qcdb.psiutil — PSI4 [beta5] documentation; qcdb.vecutil — PSI4 [beta5] documentation. qmmm — PSI4 [beta5] documentation; wrappers — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation. /_sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenergy__cachelevel.txt; ccenergy__cachet,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1763294,Integrability,depend,dependent,1763294," Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. PSI4: Open-Source Quantum Chemistry. PSI4: Open-Source Quantum Chemistry. _downloads; . /15093ea218ca0a61a6f46db92e78ed97; ; gdma-2.3.pdf. _modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_find",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1793825,Integrability,depend,dependent,1793825," Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /15093ea218ca0a61a6f46db92e78ed97; ; gdma-2.3.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1824251,Integrability,depend,dependent,1824251,"onsistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Creating a Database; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; PSI4: Open-Source Quantum Chemistry. ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:748,Modifiability,plugin,plugins,748,﻿. PsiCode. categories; . /releases; ; releases |. css; ; custom.css; installs-menu.css; style.min.css. images; ; favicon-psi4.ico. installs; . /latest; ; /installs/v191/. /v13; ; Install v1.3+ | Installs. /v131; ; Install v1.3.1+ | Installs. /v132; ; Install v1.3.2+ | Installs. /v14; ; Install v1.4+ | Installs. /v141; ; Install v1.4.1+ | Installs. /v15; ; Install v1.5+ | Installs. /v16; ; Install v1.6+ | Installs. /v161; ; Install v1.6.1+ | Installs. /v17; ; Install v1.7+ | Installs. /v18; ; Install v1.8+ | Installs. /v181; ; Install v1.8.1+ | Installs. /v182; ; Install v1.8.2+ | Installs. /v19; ; Install v1.9+ | Installs. /v191; ; Install v1.9.1+ | Installs. js; ; bootstrap.bundle.min.js; script.min.js; scroll-behavior-polyfill.min.js. plugins; . /animate-css; ; animate.css. /bootstrap; . /dist; . /css; ; bootstrap.min.css. /count-to; ; jquery.countTo.js. /jquery; . /dist; ; jquery.min.js. /magnific-popup; . /dist; ; jquery.magnific-popup.min.js; magnific-popup.css. /mixitup; ; mixitup.min.js. /slick-carousel; . /slick; . /fonts; . slick.eot. slick.eot; slick-1.eot. slick-1.eot; slick.svg; slick.ttf; slick.woff. slick.css; slick.min.js; slick-theme.css. /themefisher-font; . /fonts; ; themefisher-font.eot; themefisher-font.ttf; themefisher-font.woff. style.css. /wow; . /dist; ; wow.min.js. posts; . /acs-spring-2019; ; ACS Spring 2019 — Orlando | Posts. /beta1; ; Beta1 — Feb 2012 | Posts. /beta2; ; Beta2 — May 2012 | Posts. /beta3; ; Beta3 — Oct 2012 | Posts. /beta4; ; Beta4 — Apr 2013 | Posts. /beta5; ; Beta5 — July 2013 | Posts. /downloads; ; Installer Downloads | Posts. /ghauthors; ; Developers | Posts. /history; ; History | Posts. /latest; ; Latest Docs | Posts. /psi4edu_chemcompute; ; Using ChemCompute for Jupyter Notebook Labs | Posts. /psi4education; ; Psi4Education: Computational Labs Using Free Software | Posts. /psi4education_setup; ; Installing Psi4 for Psi4Education labs | Posts. /psi4jupyter_labs; ; Psi4Education Jupyter Labs Prerequisites | Posts. /psic,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:37530,Modifiability,plugin,plugins,37530,dule.txt; autodoc_testsuite_cfour.txt; autodoc_testsuite_corepsi4.txt; autodoc_testsuite_dftd3.txt; autodoc_testsuite_dmrg.txt; autodoc_testsuite_libefp.txt; autodoc_testsuite_mrcc.txt; autodoc_testsuite_pcmsolver.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; basissets_tables.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cfour.txt; cfour_table_energy.txt; cfour_table_grad.txt; chemps2.txt; conda.txt; contents.txt; contributing.txt; cubeprop.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; dkh.txt; documentation.txt; energy.txt; external.txt; fchk.txt; fnocc.txt; freq.txt; gdma.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; libefp.txt; methods.txt; molden.txt; mrcc.txt; mrcc_table_energy.txt; nbody.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pcmsolver.txt; pep0001.txt; plugins.txt; proc_py.txt; prog_basissets.txt; programming.txt; prop.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; psithonmol.txt; quickaddalias.txt; quickadddatabase.txt; relativistic.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; thermo.txt; tutorial.txt. _static; ; basic.css; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. Programmers’ Manual — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs. autodir_options_c; ; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; MEMORY — Psi4 [1.0.0 6a9a71b] Docs; NEWTON_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; NORM_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; POLE_MAXITER — Psi4 [1.0.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:180978,Modifiability,plugin,plugins,180978,dule.txt; autodoc_testsuite_cfour.txt; autodoc_testsuite_corepsi4.txt; autodoc_testsuite_dftd3.txt; autodoc_testsuite_dmrg.txt; autodoc_testsuite_libefp.txt; autodoc_testsuite_mrcc.txt; autodoc_testsuite_pcmsolver.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; basissets_tables.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cfour.txt; cfour_table_energy.txt; cfour_table_grad.txt; chemps2.txt; conda.txt; contents.txt; contributing.txt; cubeprop.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; dkh.txt; documentation.txt; energy.txt; external.txt; fchk.txt; fnocc.txt; freq.txt; gdma.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; libefp.txt; methods.txt; molden.txt; mrcc.txt; mrcc_table_energy.txt; nbody.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pcmsolver.txt; pep0001.txt; plugins.txt; proc_py.txt; prog_basissets.txt; programming.txt; prop.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; psithonmol.txt; quickaddalias.txt; quickadddatabase.txt; relativistic.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; thermo.txt; tutorial.txt. /_static; ; basic.css; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs. /autodir_options_c; ; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; MEMORY — Psi4 [1.0.0 6a9a71b] Docs; NEWTON_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; NORM_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; POLE_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; PR — Psi4 [1.0.0 6a9a71b] Docs,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:290636,Modifiability,plugin,plugin,290636,6a9a71b] Docs; HF: Hartree–Fock Theory — Psi4 [1.0.0 6a9a71b] Docs; Search — Psi4 [1.0.0 6a9a71b] Docs; Embarrassing Parallelism — Psi4 [1.0.0 6a9a71b] Docs; Embarrassing Parallelism — Psi4 [1.0.0 6a9a71b] Docs; Test Suite and Sample Inputs — Psi4 [1.0.0 6a9a71b] Docs; Test Suite and Sample Inputs — Psi4 [1.0.0 6a9a71b] Docs; Vibrational and Thermochemical Analysis — Psi4 [1.0.0 6a9a71b] Docs; Vibrational and Thermochemical Analysis — Psi4 [1.0.0 6a9a71b] Docs; A Psi4 Tutorial — Psi4 [1.0.0 6a9a71b] Docs; A Psi4 Tutorial — Psi4 [1.0.0 6a9a71b] Docs. /1.1.0; . PSI4: Open-Source Quantum Chemistry. _downloads; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.plugin. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.proc. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcdb; ; qcdb.interface_dftd3; qcdb.interface_gcp. Overview: module code. _static; ; basic.css; cloud.css; cloud.js; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; underscore.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator. api; ; psi4.core.adc; psi4.core.AngularMomentumInt; psi4.core.AOShellCombinationsIterator; psi4.core.atomic_displacements; psi4.core.BasisSet; psi4.core.BasisSetParser; psi4.core.be_quiet; psi4.core.benchmark_blas1; psi4.core.benchmark_blas2; psi4.core.benchmark_blas3; psi4.core.benchmark_disk; psi4.core.benchmark_integrals; psi4.core.benchmark_math; psi4.core.BoysLocalizer; psi4.core.BSVec; psi4.core.ccdensity; psi4.core.ccenergy; psi4.core.cceom; psi4.core.cchbar,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:295095,Modifiability,plugin,plugin,295095,ariable; psi4.core.get_variables; psi4.core.get_writer_file_prefix; psi4.core.git_version; psi4.core.has_global_option_changed; psi4.core.has_local_option_changed; psi4.core.has_option_changed; psi4.core.has_variable; psi4.core.HF; psi4.core.IDAMAX; psi4.core.initialize; psi4.core.IntegralFactory; psi4.core.IntVector; psi4.core.IO; psi4.core.IOManager; psi4.core.JK; psi4.core.KineticInt; psi4.core.LaplaceDenominator; psi4.core.legacy_wavefunction; psi4.core.libfock; psi4.core.Localizer; psi4.core.Matrix; psi4.core.MatrixFactory; psi4.core.mcscf; psi4.core.MintsHelper; psi4.core.MoldenWriter; psi4.core.Molecule; psi4.core.MOWriter; psi4.core.mrcc_generate_input; psi4.core.mrcc_load_densities; psi4.core.MultipoleInt; psi4.core.MultipoleSymmetry; psi4.core.NablaInt; psi4.core.NBOWriter; psi4.core.occ; psi4.core.OEProp; psi4.core.OneBodyAOInt; psi4.core.opt_clean; psi4.core.optking; psi4.core.OrbitalSpace; psi4.core.outfile_name; psi4.core.OverlapInt; psi4.core.PetiteList; psi4.core.plugin; psi4.core.plugin_close; psi4.core.plugin_close_all; psi4.core.plugin_load; psi4.core.PMLocalizer; psi4.core.PointGroup; psi4.core.PotentialInt; psi4.core.prepare_options_for_module; psi4.core.PrimitiveType; psi4.core.print_global_options; psi4.core.print_options; psi4.core.print_out; psi4.core.print_variables; psi4.core.Prop; psi4.core.PseudospectralInt; psi4.core.PseudoTrial; psi4.core.psi_top_srcdir; psi4.core.psimrcc; psi4.core.PsiReturnType; psi4.core.QuadrupoleInt; psi4.core.reopen_outfile; psi4.core.revoke_global_option_changed; psi4.core.revoke_local_option_changed; psi4.core.RHF; psi4.core.ROHF; psi4.core.run_gdma; psi4.core.sapt; psi4.core.scatter; psi4.core.scfgrad; psi4.core.scfhess; psi4.core.set_active_molecule; psi4.core.set_array_variable; psi4.core.set_efp_torque; psi4.core.set_environment; psi4.core.set_frequencies; psi4.core.set_global_option; psi4.core.set_global_option_python; psi4.core.set_gradient; psi4.core.set_legacy_molecule; psi4.core.set_legacy_wavefunction;,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:332095,Modifiability,plugin,plugin,332095,ting a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.plugin. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.proc. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcdb; ; qcdb.interface_dftd3; qcdb.interface_gcp. Overview: module code. /_static; ; basic.css; cloud.css; cloud.js; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator. /api; ; psi4.core.adc; psi4.core.AngularMomentumInt; psi4.core.AOShellCombinationsIterator; psi4.core.atomic_displacements; psi4.core.BasisSet; psi4.core.BasisSetParser; psi4.core.be_quiet; psi4.core.benchmark_blas1; psi4.core.benchmark_blas2; psi4.core.benchmark_blas3; psi4.core.benchmark_disk; psi4.core.benchmark_integrals; psi4.core.benchmark_math; psi4.core.BoysLocalizer; psi4.core.BSVec; psi4.core.ccdensity; psi4.core.ccenergy; psi4.core.cceom; psi4.core.cchbar; psi4.core.cclambda; psi4.core.ccr,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:336519,Modifiability,plugin,plugin,336519,ariable; psi4.core.get_variables; psi4.core.get_writer_file_prefix; psi4.core.git_version; psi4.core.has_global_option_changed; psi4.core.has_local_option_changed; psi4.core.has_option_changed; psi4.core.has_variable; psi4.core.HF; psi4.core.IDAMAX; psi4.core.initialize; psi4.core.IntegralFactory; psi4.core.IntVector; psi4.core.IO; psi4.core.IOManager; psi4.core.JK; psi4.core.KineticInt; psi4.core.LaplaceDenominator; psi4.core.legacy_wavefunction; psi4.core.libfock; psi4.core.Localizer; psi4.core.Matrix; psi4.core.MatrixFactory; psi4.core.mcscf; psi4.core.MintsHelper; psi4.core.MoldenWriter; psi4.core.Molecule; psi4.core.MOWriter; psi4.core.mrcc_generate_input; psi4.core.mrcc_load_densities; psi4.core.MultipoleInt; psi4.core.MultipoleSymmetry; psi4.core.NablaInt; psi4.core.NBOWriter; psi4.core.occ; psi4.core.OEProp; psi4.core.OneBodyAOInt; psi4.core.opt_clean; psi4.core.optking; psi4.core.OrbitalSpace; psi4.core.outfile_name; psi4.core.OverlapInt; psi4.core.PetiteList; psi4.core.plugin; psi4.core.plugin_close; psi4.core.plugin_close_all; psi4.core.plugin_load; psi4.core.PMLocalizer; psi4.core.PointGroup; psi4.core.PotentialInt; psi4.core.prepare_options_for_module; psi4.core.PrimitiveType; psi4.core.print_global_options; psi4.core.print_options; psi4.core.print_out; psi4.core.print_variables; psi4.core.Prop; psi4.core.PseudospectralInt; psi4.core.PseudoTrial; psi4.core.psi_top_srcdir; psi4.core.psimrcc; psi4.core.PsiReturnType; psi4.core.QuadrupoleInt; psi4.core.reopen_outfile; psi4.core.revoke_global_option_changed; psi4.core.revoke_local_option_changed; psi4.core.RHF; psi4.core.ROHF; psi4.core.run_gdma; psi4.core.sapt; psi4.core.scatter; psi4.core.scfgrad; psi4.core.scfhess; psi4.core.set_active_molecule; psi4.core.set_array_variable; psi4.core.set_efp_torque; psi4.core.set_environment; psi4.core.set_frequencies; psi4.core.set_global_option; psi4.core.set_global_option_python; psi4.core.set_gradient; psi4.core.set_legacy_molecule; psi4.core.set_legacy_wavefunction;,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:373594,Modifiability,plugin,plugin,373594,miltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.2.1; . PSI4: Open-Source Quantum Chemistry. _downloads; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.plugin. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcdb; ; qcdb.interface_dftd3; qcdb.interface_gcp. Overview: module code. _static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; underscore.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Adding Test Cases; Adding Test Cases. api; ; adc; adc; AngularMomentumInt; AOShellCombinationsIterator; atomic_displacements; atomic_displacements; BasisExtents; BasisFunctions; BasisSet; be_quiet; be_quiet; benchmark_blas1; benchmark_blas1; benchmark_blas2; benchmark_blas2; benchmark_blas3; benchmark_blas3; benchmark_disk; benchmark_disk; benchmark_integ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:377737,Modifiability,plugin,plugin,377737,ut_file; get_output_file; get_variable; get_variable; get_variables; get_variables; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; libfock; libfock; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; sapt; sapt; SaveType; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molec,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:377745,Modifiability,plugin,plugin,377745, get_output_file; get_variable; get_variable; get_variables; get_variables; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; libfock; libfock; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; sapt; sapt; SaveType; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molecule; set,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:416124,Modifiability,plugin,plugin,416124, Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; C++ Style; C++ Style; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.plugin. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcdb; ; qcdb.interface_dftd3; qcdb.interface_gcp. Overview: module code. /_static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Adding Test Cases; Adding Test Cases. /api; ; adc; adc; AngularMomentumInt; AOShellCombinationsIterator; atomic_displacements; atomic_displacements; BasisExtents; BasisFunctions; BasisSet; be_quiet; be_quiet; benchmark_blas1; benchmark_blas1; benchmark_blas2; benchmark_blas2; benchmark_blas3; benchmark_blas3; benchmark_disk; benchmark_disk; benchmark_integrals; benchmark_integrals; benchmar,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:420232,Modifiability,plugin,plugin,420232,ut_file; get_output_file; get_variable; get_variable; get_variables; get_variables; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; libfock; libfock; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; sapt; sapt; SaveType; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molec,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:420240,Modifiability,plugin,plugin,420240, get_output_file; get_variable; get_variable; get_variables; get_variables; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; libfock; libfock; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; sapt; sapt; SaveType; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_efp_torque; set_efp_torque; set_frequencies; set_frequencies; set_global_option; set_global_option; set_gradient; set_gradient; set_legacy_molecule; set,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:458703,Modifiability,plugin,plugin,458703,T: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; C++ Style; C++ Style; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.3.2; . PSI4: Open-Source Quantum Chemistry. _downloads; . /6b06aea2f974f887d435bebc240ce203; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.plugin. /procrouting; ; psi4.driver.procrouting.empirical_dispersion. /libcubeprop; ; psi4.driver.procrouting.libcubeprop.cubeprop. psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /scf_proc; ; psi4.driver.procrouting.scf_proc.scf_iterator. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.parker. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcdb; ; qcdb.interface_gcp. Overview: module code. _static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Adding Test Cases; Adding Test Cases. api; ; adc; adc; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variable; array_variables; array_variables; BasisExtents; BasisFunctions; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:462794,Modifiability,plugin,plugin,462794,utput_file; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_legacy_gradient; set_,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:462802,Modifiability,plugin,plugin,462802,le; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_legacy_gradient; set_legacy_g,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:501764,Modifiability,plugin,plugin,501764,istic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /6b06aea2f974f887d435bebc240ce203; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.plugin. /procrouting; ; psi4.driver.procrouting.empirical_dispersion. /libcubeprop; ; psi4.driver.procrouting.libcubeprop.cubeprop. psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /scf_proc; ; psi4.driver.procrouting.scf_proc.scf_iterator. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.parker. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcdb; ; qcdb.interface_gcp. Overview: module code. /_static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Adding Test Cases; Adding Test Cases. /api; ; adc; adc; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variable; array_variables; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; be_quiet; bench,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:505820,Modifiability,plugin,plugin,505820,utput_file; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_legacy_gradient; set_,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:505828,Modifiability,plugin,plugin,505828,le; get_writer_file_prefix; get_writer_file_prefix; git_version; git_version; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_legacy_gradient; set_legacy_g,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:544940,Modifiability,plugin,pluginutil,544940,Theory; Search; Search; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.4.0; . PSI4: Open-Source Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcelemental; ; qcelemental.datum; qcelemental.exceptions. /models; ; qcelemental.models.types. /molparse; ; qcelemental.molparse.from_arrays. /molutil; ; qcelemental.molutil.align. Overview: module code. _static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to adcc by M. F. Herbst and M. Scheurer; Adding PSIthon Test Cases; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:549477,Modifiability,plugin,plugin,549477,sion; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; s,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:549485,Modifiability,plugin,plugin,549485,s_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_globa,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:551275,Modifiability,variab,variable,551275, scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ip,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:551285,Modifiability,variab,variable,551285,scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:551295,Modifiability,variab,variables,551295,fgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:551306,Modifiability,variab,variables,551306,rad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:598099,Modifiability,plugin,pluginutil,598099,Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcelemental; ; qcelemental.datum; qcelemental.exceptions. /models; ; qcelemental.models.types. /molparse; ; qcelemental.molparse.from_arrays. /molutil; ; qcelemental.molutil.align. Overview: module code. /_static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to adcc by M. F. Herbst and M. Scheurer; Adding PSIthon Test Cases; Adding PSIthon Test Cases. /api; ; a,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:602601,Modifiability,plugin,plugin,602601,sion; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; s,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:602609,Modifiability,plugin,plugin,602609,s_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_globa,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:604399,Modifiability,variab,variable,604399, scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ip,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:604409,Modifiability,variab,variable,604409,scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:604419,Modifiability,variab,variables,604419,fgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:604430,Modifiability,variab,variables,604430,rad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:651270,Modifiability,plugin,pluginutil,651270,sing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.5.0; . PSI4: Open-Source Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcelemental; ; qcelemental.datum; qcelemental.exceptions. /models; ; qcelemental.models.types. /molparse; ; qcelemental.molparse.from_arrays. /molutil; ; qcelemental.molutil.align. Overview: module code. _static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to adcc by M. F. Herbst and M. Scheurer; Adding PSIthon Test Cases; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:655842,Modifiability,plugin,plugin,655842,sion; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; s,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:655850,Modifiability,plugin,plugin,655850,s_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_globa,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:657640,Modifiability,variab,variable,657640, scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ip,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:657650,Modifiability,variab,variable,657650,scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:657660,Modifiability,variab,variables,657660,fgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:657671,Modifiability,variab,variables,657671,rad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:705058,Modifiability,plugin,pluginutil,705058,Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.qmmm. /util; ; psi4.driver.util.filesystem. psi4.driver.wrapper_database. /qcelemental; ; qcelemental.datum; qcelemental.exceptions. /models; ; qcelemental.models.types. /molparse; ; qcelemental.molparse.from_arrays. /molutil; ; qcelemental.molutil.align. Overview: module code. /_static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to adcc by M. F. Herbst and M. Scheurer; Adding PSIthon Test Cases; Adding PSIthon Test Cases. /api; ; a,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:709595,Modifiability,plugin,plugin,709595,sion; has_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; s,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:709603,Modifiability,plugin,plugin,709603,s_array_variable; has_array_variable; has_global_option_changed; has_global_option_changed; has_local_option_changed; has_local_option_changed; has_option_changed; has_option_changed; has_scalar_variable; has_scalar_variable; has_variable; has_variable; HF; IDAMAX; initialize; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_generate_input; mrcc_load_densities; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; opt_clean; option_exists_in_module; option_exists_in_module; Options; options_to_python; options_to_python; optking; optking; OrbitalSpace; outfile_name; outfile_name; OverlapInt; PetiteList; plugin; plugin; plugin_close; plugin_close; plugin_close_all; plugin_close_all; plugin_load; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; prepare_options_for_module; PrimitiveType; print_global_options; print_global_options; print_options; print_options; print_out; print_out; print_variables; print_variables; Prop; PseudospectralInt; psi_top_srcdir; psi_top_srcdir; psimrcc; psimrcc; psio_entry; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; reopen_outfile; revoke_global_option_changed; revoke_global_option_changed; revoke_local_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; run_gdma; SADGuess; SalcComponent; sapt; sapt; SaveType; scalar_variable; scalar_variable; scalar_variables; scalar_variables; scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_globa,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:711393,Modifiability,variab,variable,711393, scatter; scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ip,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:711403,Modifiability,variab,variable,711403,scatter; scfgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:711413,Modifiability,variab,variables,711413,fgrad; scfgrad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:711424,Modifiability,variab,variables,711424,rad; scfhess; scfhess; set_active_molecule; set_active_molecule; set_array_variable; set_array_variable; set_datadir; set_datadir; set_global_option; set_global_option; set_global_option_python; set_global_option_python; set_gradient; set_gradient; set_legacy_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_molecule; set_legacy_wavefunction; set_legacy_wavefunction; set_local_option; set_local_option; set_local_option_python; set_local_option_python; set_memory_bytes; set_memory_bytes; set_num_threads; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_psi_file_prefix; set_scalar_variable; set_scalar_variable; set_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; TaskListComputer; ThreeCenterOverlapInt; timer_off; timer_off; timer_on; timer_on; TracelessQuadrupoleInt; triplet; triplet; tstart; tstart; tstop; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variable; variables; variables; VBase; Vector; Vector3; version; version; Wavefunction; activate; activate; ancestor; ancestor; banner; banner; basis_helper; basis_helper; cbs; cbs; check_iwl_file_from_scf_type; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fchkfiles; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:759118,Modifiability,plugin,pluginutil,759118,and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.6.x; . /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. /util; ; psi4.driver.util.filesystem. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.wrapper_database. /qcdb; ; qcdb.vib. /qcelemental; . /models; ; qcelemental.models.types. /molparse; ; qcelemental.molparse.from_arrays. /molutil; ; qcelemental.molutil.align. qcelemental.datum; qcelemental.exceptions; qcelemental.testing. Overview: module code. /_static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; adc; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cct,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:762221,Modifiability,plugin,plugin,762221,bles; get_atomic_point_charges; get_datadir; get_global_option; get_global_option_list; get_gradient; get_legacy_gradient; get_legacy_molecule; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; legacy_wavefunction; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; occ; OEProp; OneBodyAOInt; OneBodySOInt; opt_clean; option_exists_in_module; Options; options_to_python; optking; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_wavefunction; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; timer_off; timer_on; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoB,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:763270,Modifiability,variab,variable,763270,PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_wavefunction; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; timer_off; timer_on; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; ancestor; AtomicComputer; banner; basis_helper; cbs; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; CSXError; cubeprop; Dftd3Error; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fchkfile_to_string; fcidump; fcidump_from_file; find_approximate_string_matches; free_atom_volumes; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; join_path; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; print_stderr; print_stdout; process_input; prop; properties; PsiException; PsiImportError; compare_vibinfos; filter_nonvib; filter_omega_to_real; harmon,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:763280,Modifiability,variab,variables,763280,; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_wavefunction; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; timer_off; timer_on; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; ancestor; AtomicComputer; banner; basis_helper; cbs; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; CSXError; cubeprop; Dftd3Error; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fchkfile_to_string; fcidump; fcidump_from_file; find_approximate_string_matches; free_atom_volumes; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; join_path; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; print_stderr; print_stdout; process_input; prop; properties; PsiException; PsiImportError; compare_vibinfos; filter_nonvib; filter_omega_to_real; harmonic_analysi,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:788414,Modifiability,plugin,pluginutil,788414,utable. /1.7.x; . /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; ; _sphinx_javascript_frameworks_compat.js; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdS,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:791378,Modifiability,plugin,plugin,791378,ctional; GaussianShell; GaussianType; GeometryUnits; get_active_molecule; get_array_variable; get_array_variables; get_datadir; get_global_option; get_global_option_list; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NBOWriter; NumIntHelper; occ; OEProp; OneBodyAOInt; OneBodySOInt; option_exists_in_module; Options; options_to_python; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyA,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:792423,Modifiability,variab,variable,792423,ad; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:792433,Modifiability,variab,variables,792433,izer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; f,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:818667,Modifiability,plugin,pluginutil,818667, Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. _static; . autodoc_pydantic-1.css. autodoc_pydantic-1.css; autodoc_pydantic.css. autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; documentation_options-1.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocali,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:821727,Modifiability,plugin,plugin,821727,ntType; Functional; GaussianShell; GaussianType; GeometryUnits; get_active_molecule; get_array_variable; get_array_variables; get_datadir; get_global_option; get_global_option_list; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NumIntHelper; occ; OEProp; OneBodyAOInt; OneBodySOInt; option_exists_in_module; Options; options_to_python; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyA,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:822772,Modifiability,variab,variable,822772,ad; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicate,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:822782,Modifiability,variab,variables,822782,izer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energie,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:849211,Modifiability,plugin,pluginutil,849211,as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; . autodoc_pydantic-1.css. autodoc_pydantic-1.css; autodoc_pydantic.css. autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; documentation_options-1.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cc,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:852236,Modifiability,plugin,plugin,852236,ntType; Functional; GaussianShell; GaussianType; GeometryUnits; get_active_molecule; get_array_variable; get_array_variables; get_datadir; get_global_option; get_global_option_list; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NumIntHelper; occ; OEProp; OneBodyAOInt; OneBodySOInt; option_exists_in_module; Options; options_to_python; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyA,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:853281,Modifiability,variab,variable,853281,ad; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicate,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:853291,Modifiability,variab,variables,853291,izer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; run_gdma; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energie,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:902529,Modifiability,plugin,plugins,902529,dfmp2.txt; module__lmp2.txt; module__mcscf.txt; module__mp2.txt; module__omp2.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. <no title> — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documenta,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1007139,Modifiability,plugin,plugins,1007139,dfmp2.txt; module__lmp2.txt; module__mcscf.txt; module__mp2.txt; module__omp2.txt; module__optking.txt; module__psimrcc.txt; module__sapt.txt; module__scf.txt. adc.txt; appendices.txt; autodoc_available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEM_MAXITER — PSI4 [beta2] docume,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1111728,Modifiability,plugin,plugins,1111728,y.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CONVERGENCE — PSI4 [beta3] documentation; NORM_TOLERANCE — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; POLE_MAXITER — PSI4 [beta3] documentation; PR — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] do,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1216837,Modifiability,plugin,plugins,1216837,y.txt; autodoc_dft_all.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CONVERGENCE — PSI4 [beta3] documentation; NORM_TOLERANCE — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; POLE_MAXITER — PSI4 [beta3] documentation; PR — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; ROOTS_PER_IRREP — PSI4 [be,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1322774,Modifiability,plugin,plugins,1322774,.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI4 [beta4] documentation; NORM_TOLERANCE — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; POLE_MAXITER — PSI4 [beta4] documentation; PR — PSI4 [beta4] documentation; REFERENCE — PS,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1431775,Modifiability,plugin,plugins,1431775,.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI4 [beta4] documentation; NORM_TOLERANCE — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; POLE_MAXITER — PSI4 [beta4] documentation; PR — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; ROOTS_PER_IRR,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1540791,Modifiability,plugin,plugins,1540791,.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI4 [beta5] documentation; NORM_TOLERANCE — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; POLE_MAXITER — PSI4 [beta5] documentation; PR — PSI4 [beta5] documentation; REFERENCE — PS,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1648834,Modifiability,plugin,plugins,1648834,.txt; autodoc_dft_dhybrid.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI4 [beta5] documentation; NORM_TOLERANCE — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; POLE_MAXITER — PSI4 [beta5] documentation; PR — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; ROOTS_PER_IRR,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1733301,Modifiability,plugin,pluginutil,1733301,entation. /master; . /_downloads; . /15093ea218ca0a61a6f46db92e78ed97; ; gdma-2.3.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; ; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js; tabs.css; tabs.js. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1736230,Modifiability,plugin,plugin,1736230,ometryUnits; get_active_molecule; get_array_variable; get_array_variables; get_datadir; get_global_option; get_global_option_list; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; libint2_solid_harmonics_ordering; LibXCFunctional; Localizer; LS_THC_Computer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NumIntHelper; occ; OEProp; OneBodyAOInt; OneBodySOInt; option_exists_in_module; Options; options_to_python; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstar,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1737293,Modifiability,variab,variable,1737293,ointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicate,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1737303,Modifiability,variab,variables,1737303,ns; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energie,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1764509,Modifiability,plugin,pluginutil,1764509,rce Quantum Chemistry. _downloads; . /15093ea218ca0a61a6f46db92e78ed97; ; gdma-2.3.pdf. _modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. _static; ; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js; tabs.css; tabs.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransor,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1767539,Modifiability,plugin,plugin,1767539, GaussianType; GeometryUnits; get_active_molecule; get_array_variable; get_array_variables; get_datadir; get_global_option; get_global_option_list; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; libint2_solid_harmonics_ordering; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NumIntHelper; occ; OEProp; OneBodyAOInt; OneBodySOInt; option_exists_in_module; Options; options_to_python; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoE,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1768574,Modifiability,variab,variable,1768574, plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicate,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1768584,Modifiability,variab,variables,1768584,d; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energie,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1794968,Modifiability,plugin,pluginutil,1794968,I4 as an Executable. /_downloads; . /15093ea218ca0a61a6f46db92e78ed97; ; gdma-2.3.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; ; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js; tabs.css; tabs.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSal,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1797963,Modifiability,plugin,plugin,1797963, GaussianType; GeometryUnits; get_active_molecule; get_array_variable; get_array_variables; get_datadir; get_global_option; get_global_option_list; get_local_option; get_memory; get_num_threads; get_option; get_options; get_output_file; get_variable; get_variables; get_writer_file_prefix; git_version; has_array_variable; has_global_option_changed; has_local_option_changed; has_option_changed; has_scalar_variable; has_variable; HF; IDAMAX; initialize; IntegralFactory; IntegralTransform; IntVector; IO; IOManager; IrreducibleRepresentation; JK; KineticInt; LaplaceDenominator; libint2_solid_harmonics_ordering; LibXCFunctional; Localizer; Matrix; MatrixFactory; mcscf; MemDFJK; MintsHelper; MoldenWriter; MolecularGrid; Molecule; MOSpace; MOWriter; mrcc_generate_input; mrcc_load_densities; MultipoleInt; MultipoleSymmetry; NablaInt; NumIntHelper; occ; OEProp; OneBodyAOInt; OneBodySOInt; option_exists_in_module; Options; options_to_python; OrbitalSpace; outfile_name; OverlapInt; PetiteList; plugin; plugin_close; plugin_close_all; plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoE,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1798998,Modifiability,variab,variable,1798998, plugin_load; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicate,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1799008,Modifiability,variab,variables,1799008,d; PMLocalizer; PointFunctions; PointGroup; PotentialInt; prepare_options_for_module; PrimitiveType; print_global_options; print_options; print_out; print_variables; Prop; ProtoIntVector; ProtoVector; psi_top_srcdir; psimrcc; psio_entry; PsiReturnType; QuadrupoleInt; reopen_outfile; revoke_global_option_changed; revoke_local_option_changed; RHF; RKSFunctions; ROHF; SADGuess; SalcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energie,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:143827,Performance,optimiz,optimize,143827," Docs; Interface to Molden, molden() — Psi4 [1.0.0 6a9a71b] Docs; Interface to Molden, molden() — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; Programming: Using the Core Libraries — Psi4 ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:143905,Performance,optimiz,optimize,143905," Molden, molden() — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; Programming: Using the Core Libraries — Psi4 [1.0.0 6a9a71b] Docs; Programming: Using the Core Libraries — Psi4 [1.0.0 6a9a",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:287229,Performance,optimiz,optimize,287229," Docs; Interface to Molden, molden() — Psi4 [1.0.0 6a9a71b] Docs; Interface to Molden, molden() — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; Programming: Using the Core Libraries — Psi4 ",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:287307,Performance,optimiz,optimize,287307," Molden, molden() — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; Interface to MRCC by M. Kállay — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; <no title> — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Counterpoise Correct — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; Notes on Options — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; oeprop() Evaluation of One-Electron Properties — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization, optimize() and gradient() — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; LibOptions: globals, locals, has_changed and all that — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Geometry Optimization — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; Interface to PCMSolver — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; PEP1: Proposing PsiPEP for Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Plugins: Adding New Functionality to Psi4 — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; Adding Methods to Driver — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; BasisSet — Psi4 [1.0.0 6a9a71b] Docs; Programming: Using the Core Libraries — Psi4 [1.0.0 6a9a71b] Docs; Programming: Using the Core Libraries — Psi4 [1.0.0 6a9a",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:298000,Performance,optimiz,optimize,298000, psi4.driver.compare_matrices; psi4.driver.compare_strings; psi4.driver.compare_values; psi4.driver.compare_vectors; psi4.driver.ConvergenceError; psi4.driver.copy_file_from_scratch; psi4.driver.copy_file_to_scratch; psi4.driver.create_plugin; psi4.driver.csx2endict; psi4.driver.CSXError; psi4.driver.cubeprop; psi4.driver.Dftd3Error; psi4.driver.dynamic_variable_bind; psi4.driver.EmpericalDispersion; psi4.driver.energy; psi4.driver.extract_cluster_indexing; psi4.driver.extract_clusters; psi4.driver.fchk; psi4.driver.filter_comments; psi4.driver.find_approximate_string_matches; psi4.driver.freq; psi4.driver.frequencies; psi4.driver.frequency; psi4.driver.gdma; psi4.driver.geometry; psi4.driver.get_memory; psi4.driver.getFromDict; psi4.driver.gradient; psi4.driver.hessian; psi4.driver.join_path; psi4.driver.levenshtein; psi4.driver.ManagedMethodError; psi4.driver.molden; psi4.driver.molecule_get_attr; psi4.driver.molecule_set_attr; psi4.driver.oeprop; psi4.driver.opt; psi4.driver.optimize; psi4.driver.ParsingError; psi4.driver.PastureRequiredError; psi4.driver.pcm_helper; psi4.driver.print_stderr; psi4.driver.print_stdout; psi4.driver.process_input; psi4.driver.process_pubchem_command; psi4.driver.prop; psi4.driver.property; psi4.driver.PsiException; psi4.driver.PsiImportError; psi4.driver.QMMM; psi4.driver.sanitize_name; psi4.driver.scf_helper; psi4.driver.scf_wavefunction_factory; psi4.driver.set_memory; psi4.driver.set_module_options; psi4.driver.set_options; psi4.driver.success; psi4.driver.Table; psi4.driver.TestComparisonError; psi4.driver.ValidationError; psi4.driver.xml2dict. Appendices; Appendices. autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>;,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:329734,Performance,optimiz,optimize,329734,"; Interfaces: Enhancing PSI4 Capabilities; Interfaces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Adding Add-Ons; Adding Add-Ons; Management FAQ; Management FAQ; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI4 API: Linking C++ and Python; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementat",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:329785,Performance,optimiz,optimize,329785,"; Interfaces: Enhancing PSI4 Capabilities; Interfaces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Adding Add-Ons; Adding Add-Ons; Management FAQ; Management FAQ; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI4 API: Linking C++ and Python; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementat",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:339424,Performance,optimiz,optimize,339424, psi4.driver.compare_matrices; psi4.driver.compare_strings; psi4.driver.compare_values; psi4.driver.compare_vectors; psi4.driver.ConvergenceError; psi4.driver.copy_file_from_scratch; psi4.driver.copy_file_to_scratch; psi4.driver.create_plugin; psi4.driver.csx2endict; psi4.driver.CSXError; psi4.driver.cubeprop; psi4.driver.Dftd3Error; psi4.driver.dynamic_variable_bind; psi4.driver.EmpericalDispersion; psi4.driver.energy; psi4.driver.extract_cluster_indexing; psi4.driver.extract_clusters; psi4.driver.fchk; psi4.driver.filter_comments; psi4.driver.find_approximate_string_matches; psi4.driver.freq; psi4.driver.frequencies; psi4.driver.frequency; psi4.driver.gdma; psi4.driver.geometry; psi4.driver.get_memory; psi4.driver.getFromDict; psi4.driver.gradient; psi4.driver.hessian; psi4.driver.join_path; psi4.driver.levenshtein; psi4.driver.ManagedMethodError; psi4.driver.molden; psi4.driver.molecule_get_attr; psi4.driver.molecule_set_attr; psi4.driver.oeprop; psi4.driver.opt; psi4.driver.optimize; psi4.driver.ParsingError; psi4.driver.PastureRequiredError; psi4.driver.pcm_helper; psi4.driver.print_stderr; psi4.driver.print_stdout; psi4.driver.process_input; psi4.driver.process_pubchem_command; psi4.driver.prop; psi4.driver.property; psi4.driver.PsiException; psi4.driver.PsiImportError; psi4.driver.QMMM; psi4.driver.sanitize_name; psi4.driver.scf_helper; psi4.driver.scf_wavefunction_factory; psi4.driver.set_memory; psi4.driver.set_module_options; psi4.driver.set_options; psi4.driver.success; psi4.driver.Table; psi4.driver.TestComparisonError; psi4.driver.ValidationError; psi4.driver.xml2dict. Appendices; Appendices. /autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:371160,Performance,optimiz,optimize,371160,"; Interfaces: Enhancing PSI4 Capabilities; Interfaces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Adding Add-Ons; Adding Add-Ons; Management FAQ; Management FAQ; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI4 API: Linking C++ and Python; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementat",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:371211,Performance,optimiz,optimize,371211,"; Interfaces: Enhancing PSI4 Capabilities; Interfaces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Adding Add-Ons; Adding Add-Ons; Management FAQ; Management FAQ; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI4 API: Linking C++ and Python; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Python Module; PsiAPI Tutorial: Using Psi4 as a Python Module; PSIMRCC Implementat",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:380854,Performance,optimiz,optimize,380854,EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; process_pubchem_command; process_pubchem_command; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:380864,Performance,optimiz,optimize,380864,EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; process_pubchem_command; process_pubchem_command; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:413533,Performance,optimiz,optimize,413533,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Programmers FAQ; Programmers FAQ; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:413584,Performance,optimiz,optimize,413584,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Programmers FAQ; Programmers FAQ; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:423349,Performance,optimiz,optimize,423349,EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; process_pubchem_command; process_pubchem_command; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. /autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:423359,Performance,optimiz,optimize,423359,EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; process_pubchem_command; process_pubchem_command; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. /autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:456030,Performance,optimiz,optimize,456030,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Programmers FAQ; Programmers FAQ; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:456081,Performance,optimiz,optimize,456081,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Plugins: Adding New Functionality to PSI4; Plugins: Adding New Functionality to PSI4; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Programmers FAQ; Programmers FAQ; Programming: Using the Core Libraries; Programming: Using the Core Libraries; Property; Property; PSI",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:466094,Performance,optimiz,optimize,466094,es_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no tit,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:466104,Performance,optimiz,optimize,466104,es_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no tit,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:498566,Performance,optimiz,optimize,498566,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; Programming with the Core Libraries; Programming with the Core Libraries; Debugging and Profiling; Debugging and Profiling;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:498617,Performance,optimiz,optimize,498617,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; Programming with the Core Libraries; Programming with the Core Libraries; Debugging and Profiling; Debugging and Profiling;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:509120,Performance,optimiz,optimize,509120,es_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. /autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no ti,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:509130,Performance,optimiz,optimize,509130,es_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. /autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no ti,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:541594,Performance,optimiz,optimize,541594,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; Programming with the Core Libraries; Programming with the Core Libraries; Debugging and Profiling; Debugging and Profiling;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:541645,Performance,optimiz,optimize,541645,"faces: Enhancing PSI4 Capabilities; Introduction; Introduction; Interface to LIBEFP by I. Kaliman; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; Programming with the Core Libraries; Programming with the Core Libraries; Debugging and Profiling; Debugging and Profiling;",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:552582,Performance,optimiz,optimize,552582,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:552592,Performance,optimiz,optimize,552592,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:594370,Performance,optimiz,optimize,594370,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:594421,Performance,optimiz,optimize,594421,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:605706,Performance,optimiz,optimize,605706,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:605716,Performance,optimiz,optimize,605716,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:647496,Performance,optimiz,optimize,647496,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:647547,Performance,optimiz,optimize,647547,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:658947,Performance,optimiz,optimize,658947,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:658957,Performance,optimiz,optimize,658957,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:701329,Performance,optimiz,optimize,701329,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:701380,Performance,optimiz,optimize,701380,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:712700,Performance,optimiz,optimize,712700,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:712710,Performance,optimiz,optimize,712710,s; compare_fcidumps; compare_fcidumps; ConvergenceError; copy_file_from_scratch; copy_file_from_scratch; copy_file_to_scratch; copy_file_to_scratch; create_plugin; create_plugin; CSXError; cubeprop; cubeprop; Dftd3Error; dynamic_variable_bind; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energies_from_fcidump; energy; energy; fchk; fchk; fchkfile_to_string; fchkfile_to_string; fcidump; fcidump; fcidump_from_file; fcidump_from_file; find_approximate_string_matches; find_approximate_string_matches; free_atom_volumes; free_atom_volumes; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; gradient; gradient; hessian; hessian; ipi_broker; ipi_broker; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; mdi_run; mdi_run; message_box; message_box; MissingMethodError; molden; molden; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; optimize_geometric; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; prop; prop; properties; properties; PsiException; PsiImportError; compare_vibinfos; compare_vibinfos; filter_nonvib; filter_nonvib; filter_omega_to_real; filter_omega_to_real; harmonic_analysis; harmonic_analysis; hessian_symmetrize; hessian_symmetrize; print_molden_vibs; print_molden_vibs; print_vibs; print_vibs; thermo; thermo; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; Table; tdscf; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:755084,Performance,optimiz,optimize,755084,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:755135,Performance,optimiz,optimize,755135,"to Libint by E. Valeev; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Adding Add-Ons; Git, Versioning; Git, Versioning; Managing: Git, Conda, CMake and all that; Managing: Git, Conda, CMake and all that; Release Procedures; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to MRCC by M. Kállay; <no title>; <no title>; Basis Set Superposition Corrections; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Notes on Options; Notes on Options; Interface to NumPy; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Creating New Plugins; Adding Methods to Driver; Adding Methods to Driver; Linear Algebra in PSI4; Linear Algebra in PSI4; Community Code of Conduct; Community Code of Conduct; P",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:764045,Performance,optimiz,optimize,764045,lcComponent; sapt; SaveType; scalar_variable; scalar_variables; scatter; scfgrad; scfhess; set_active_molecule; set_array_variable; set_datadir; set_global_option; set_global_option_python; set_gradient; set_legacy_gradient; set_legacy_molecule; set_legacy_wavefunction; set_local_option; set_local_option_python; set_memory_bytes; set_num_threads; set_output_file; set_psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; timer_off; timer_on; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; ancestor; AtomicComputer; banner; basis_helper; cbs; check_iwl_file_from_scf_type; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; CSXError; cubeprop; Dftd3Error; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fchkfile_to_string; fcidump; fcidump_from_file; find_approximate_string_matches; free_atom_volumes; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; join_path; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; ParsingError; PastureRequiredError; pcm_helper; print_stderr; print_stdout; process_input; prop; properties; PsiException; PsiImportError; compare_vibinfos; filter_nonvib; filter_omega_to_real; harmonic_analysis; hessian_symmetrize; print_molden_vibs; print_vibs; thermo; QMMM; QMMMbohr; sanitize_name; scf_helper; scf_wavefunction_factory; SCFConvergenceError; set_memory; set_module_options; set_options; Table; tdscf; TDSCFConvergenceError; temp_circular_import_blocker; TestComparisonError; UpgradeHelper; ValidationError; vibanal_wfn; write_eigenvalues.,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:785841,Performance,optimiz,optimize,785841,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:793103,Performance,optimiz,optimize,793103,psi_file_prefix; set_scalar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicinput; temp_circular_import_blocker; ParsingError; PastureRequir,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:816059,Performance,optimiz,optimize,816059,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:823494,Performance,optimiz,optimize,823494,variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; libint2_print_out; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicinput; temp_circular_i,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:846648,Performance,optimiz,optimize,846648,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:854003,Performance,optimiz,optimize,854003,variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; libint2_print_out; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicinput; temp_circular_i,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:877159,Performance,optimiz,optimize,877159,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1738015,Performance,optimiz,optimize,1738015,variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; libint2_print_out; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicinput; ParsingError; P,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1761877,Performance,optimiz,optimize,1761877,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1769296,Performance,optimiz,optimize,1769296,variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; libint2_print_out; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicinput; ParsingError; P,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1792408,Performance,optimiz,optimize,1792408,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1799720,Performance,optimiz,optimize,1799720,variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; libint2_print_out; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicinput; ParsingError; P,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1822834,Performance,optimiz,optimize,1822834,"natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Index; PSI Variables by Alpha; PSI4: Open-Source Quantum Chemistry; A PSI4 Tutorial; Function Intercalls; Interfaces: Enhancing PSI4 Capabilities; Introduction; Interface to LIBEFP by I. Kaliman; Interface to Libint by E. Valeev; Interface to Libxc by M. A. L. Marques; Adding Add-Ons; Git, Versioning; Managing: Git, Conda, CMake and all that; Release Procedures; MCSCF: Multi-Configurational Self-Consistent-Field; Theoretical Methods: SCF to FCI; Interface to Molden — molden(); Interface to MRCC by M. Kállay; <no title>; Basis Set Superposition Corrections; Notes on Options; Notes on Options; Interface to NumPy; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Evaluation of One-Electron Properties — oeprop(); Geometry Optimization — optimize() and gradient(); LibOptions: globals, locals, has_changed and all that; Geometry Optimization; Interface to PCMSolver by R. Di Remigio; PEP1: Proposing PsiPEP for PSI4; Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Creating New Plugins; Adding Methods to Driver; Linear Algebra in PSI4; Community Code of Conduct; Programming with the Core Libraries; Debugging and Profiling; Programmers FAQ; Integrating New Features into PSI4; Where to Get Help; Integrals in PSI4; Introduction to Programming in PSI4; Adding New Code to PSI4; Setting Up Your Development Environment; C++ Style; Python Style; General layout of the core: where new C++ code should live; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Welcome to New Programmers; Property; PSI4 API: Linking C++ and Python; PsiAPI Tutorial: Using Psi4 as a Pyt",MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:37770,Testability,test,testsuite,37770,ts_byelement.txt; basissets_byfamily.txt; basissets_tables.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cfour.txt; cfour_table_energy.txt; cfour_table_grad.txt; chemps2.txt; conda.txt; contents.txt; contributing.txt; cubeprop.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; dkh.txt; documentation.txt; energy.txt; external.txt; fchk.txt; fnocc.txt; freq.txt; gdma.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; libefp.txt; methods.txt; molden.txt; mrcc.txt; mrcc_table_energy.txt; nbody.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pcmsolver.txt; pep0001.txt; plugins.txt; proc_py.txt; prog_basissets.txt; programming.txt; prop.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; psithonmol.txt; quickaddalias.txt; quickadddatabase.txt; relativistic.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; thermo.txt; tutorial.txt. _static; ; basic.css; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. Programmers’ Manual — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs. autodir_options_c; ; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; MEMORY — Psi4 [1.0.0 6a9a71b] Docs; NEWTON_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; NORM_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; POLE_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; PR — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; ROOTS_PER_IRREP — Psi4 [1.0.0 6a9a71b] Docs; SEM_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; AEL — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Do,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:181218,Testability,test,testsuite,181218,ts_byelement.txt; basissets_byfamily.txt; basissets_tables.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cfour.txt; cfour_table_energy.txt; cfour_table_grad.txt; chemps2.txt; conda.txt; contents.txt; contributing.txt; cubeprop.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; dkh.txt; documentation.txt; energy.txt; external.txt; fchk.txt; fnocc.txt; freq.txt; gdma.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; libefp.txt; methods.txt; molden.txt; mrcc.txt; mrcc_table_energy.txt; nbody.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pcmsolver.txt; pep0001.txt; plugins.txt; proc_py.txt; prog_basissets.txt; programming.txt; prop.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; psithonmol.txt; quickaddalias.txt; quickadddatabase.txt; relativistic.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; thermo.txt; tutorial.txt. /_static; ; basic.css; doctools.js; favicon-psi4.ico; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs; Appendices — Psi4 [1.0.0 6a9a71b] Docs. /autodir_options_c; ; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; MEMORY — Psi4 [1.0.0 6a9a71b] Docs; NEWTON_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; NORM_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; POLE_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; PR — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; ROOTS_PER_IRREP — Psi4 [1.0.0 6a9a71b] Docs; SEM_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; AEL — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; GAU,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:759414,Testability,test,testing,759414,til.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. /util; ; psi4.driver.util.filesystem. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.wrapper_database. /qcdb; ; qcdb.vib. /qcelemental; . /models; ; qcelemental.models.types. /molparse; ; qcelemental.molparse.from_arrays. /molutil; ; qcelemental.molutil.align. qcelemental.datum; qcelemental.exceptions; qcelemental.testing. Overview: module code. /_static; ; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; adc; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; clean_variables; close_outfile; CorrelationFactor; CorrelationTable; CubeProperties; CUHF; DASUM; DAXPY; DCOPY; dct; DDOT; del_array_variable; del_scalar_var,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:788613,Testability,test,testing,788613,ver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; ; _sphinx_javascript_frameworks_compat.js; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; jquery.js; language_data.js; psi4.css; pygments.css; searchtools.js; underscore.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; clean_variables; close_outfile; CorrelationFactor; CorrelationTable; CubeProperties; CUHF; DASUM; D,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:818866,Testability,test,testing,818866,ver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. _static; . autodoc_pydantic-1.css. autodoc_pydantic-1.css; autodoc_pydantic.css. autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; documentation_options-1.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; c,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:849410,Testability,test,testing,849410,ver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; . autodoc_pydantic-1.css. autodoc_pydantic-1.css; autodoc_pydantic.css. autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; documentation_options-1.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; clean_variables; close,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:902721,Testability,test,testsuite,902721,available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. <no title> — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEM_MAXITER — PSI4 [beta2] documentation; AEL — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentat,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1007331,Testability,test,testsuite,1007331,available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEM_MAXITER — PSI4 [beta2] documentation; AEL — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] docu,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1111919,Testability,test,testsuite,1111919,oc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CONVERGENCE — PSI4 [beta3] documentation; NORM_TOLERANCE — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; POLE_MAXITER — PSI4 [beta3] documentation; PR — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; ROOTS_PER_IRREP — PSI4 [beta3] documentation; SEM_MAXITER — PSI4 [beta3] documentation; AEL — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1217028,Testability,test,testsuite,1217028,oc_dft_opt.txt; autodoc_dft_scsdhybrid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; cepa.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; oeprop.txt; ompn.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation; Appendices — PSI4 [beta3] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta3] documentation; MEMORY — PSI4 [beta3] documentation; NEWTON_CONVERGENCE — PSI4 [beta3] documentation; NORM_TOLERANCE — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; POLE_MAXITER — PSI4 [beta3] documentation; PR — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; ROOTS_PER_IRREP — PSI4 [beta3] documentation; SEM_MAXITER — PSI4 [beta3] documentation; AEL — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; GAUGE — PSI4 [be,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1322978,Testability,test,testsuite,1322978,rid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI4 [beta4] documentation; NORM_TOLERANCE — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; POLE_MAXITER — PSI4 [beta4] documentation; PR — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; ROOTS_PER_IRREP — PSI4 [beta4] documentation; SEM_MAXITER — PSI4 [beta4] documentation; AEL — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1431979,Testability,test,testsuite,1431979,rid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation; Appendices — PSI4 [beta4] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta4] documentation; MEMORY — PSI4 [beta4] documentation; NEWTON_CONVERGENCE — PSI4 [beta4] documentation; NORM_TOLERANCE — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; POLE_MAXITER — PSI4 [beta4] documentation; PR — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; ROOTS_PER_IRREP — PSI4 [beta4] documentation; SEM_MAXITER — PSI4 [beta4] documentation; AEL — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; GAUGE — PSI4 [be,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1540995,Testability,test,testsuite,1540995,rid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. <no title> — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI4 [beta5] documentation; NORM_TOLERANCE — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; POLE_MAXITER — PSI4 [beta5] documentation; PR — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; ROOTS_PER_IRREP — PSI4 [beta5] documentation; SEM_MAXITER — PSI4 [beta5] documentation; AEL — PSI4 [beta5] documentation; AO_BASIS — PSI4 [beta5] documentation; CACHELEVEL — PSI4 ,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1649038,Testability,test,testsuite,1649038,rid.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psifiles.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; basissets_byfamily.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contents.txt; contributing.txt; cp.txt; customizing.txt; db.txt; dcft.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; dftd3.txt; diatomic.txt; documentation.txt; energy.txt; external.txt; fnocc.txt; freq.txt; glossary_psivariables.txt; index.txt; installfile.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; molden.txt; mrcc.txt; notes_c.txt; notes_py.txt; occ.txt; oeprop.txt; opt.txt; optionshandling.txt; optking.txt; pep0001.txt; plugins.txt; proc_py.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psipep.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; doctools.js; jquery.cookie.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_codeprompt.js; toggle_sections.js; toggle_sidebar.js; underscore.js. ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; ADC: Ab Initio Polarization Propagator — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation; Appendices — PSI4 [beta5] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta5] documentation; MEMORY — PSI4 [beta5] documentation; NEWTON_CONVERGENCE — PSI4 [beta5] documentation; NORM_TOLERANCE — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; POLE_MAXITER — PSI4 [beta5] documentation; PR — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; ROOTS_PER_IRREP — PSI4 [beta5] documentation; SEM_MAXITER — PSI4 [beta5] documentation; AEL — PSI4 [beta5] documentation; AO_BASIS — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; GAUGE — PSI4 [be,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1733500,Testability,test,testing,1733500,ver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; ; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js; tabs.css; tabs.js. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; clean_variables; close_outfile; CompositeJK; CorrelationFactor; CorrelationTable; CubeProperties; CUHF; DASUM; DAXPY; DCOPY; dct; DDOT; del_array_variable; del_scalar_variable; del_variable; Der,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1764708,Testability,test,testing,1764708,ver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. _static; ; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js; tabs.css; tabs.js. PSI4: Open-Source Quantum Chemistry; ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; clean_variables; close_outfile; CompositeJK; CorrelationFactor; Co,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/index-wcopy.html:1795167,Testability,test,testing,1795167,ver.p4util.fcidump; psi4.driver.p4util.inpsight; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.optproc; psi4.driver.p4util.procutil; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.solvers; psi4.driver.p4util.spectrum; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_findif; psi4.driver.driver_nbody; psi4.driver.frac; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil; psi4.driver.pluginutil; psi4.driver.qmmm; psi4.driver.task_base; psi4.driver.task_planner; psi4.driver.wrapper_autofrag; psi4.driver.wrapper_database. psi4.extras. /qcdb; ; qcdb.vib. /qcelemental; ; qcelemental.testing. Overview: module code. /_static; ; autodoc_pydantic.css; basic.css; cloud.base.js; cloud.css; cloud.js; doctools.js; documentation_options.js; favicon-psi4.ico; graphviz.css; jquery.cookie.js; language_data.js; nbsphinx-code-cells.css; psi4.css; pygments.css; searchtools.js; sphinx_highlight.js; tabs.css; tabs.js. ADC: Ab Initio Polarization Propagator; Interface to adcc by M. F. Herbst and M. Scheurer; Test Suite. /api; ; AngularMomentumInt; AOShellCombinationsIterator; array_variable; array_variables; BasisExtents; BasisFunctions; BasisSet; be_quiet; benchmark_blas1; benchmark_blas2; benchmark_blas3; benchmark_disk; benchmark_integrals; benchmark_math; BlockOPoints; BoysLocalizer; BSVec; ccdensity; ccenergy; cceom; cchbar; cclambda; ccresponse; cctransort; cctriples; CCWavefunction; CdSalc; CdSalcList; CharacterTable; CIVector; CIWavefunction; clean; clean_options; clean_timers; clean_variables; close_outfile; CompositeJK; CorrelationFactor; CorrelationTable; CubeProperties; CUH,MatchSource.WIKI,index-wcopy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/index-wcopy.html
https://psicode.org/psi4manual/1.9.x.html:5949,Deployability,update,updated,5949,"onduct; Setting Up Your Development Environment; General layout of the core: where new C++ code should live; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integrating New Features into PSI4; Adding Methods to Driver; Python Style; C++ Style; FAQ. Programming with the Core Libraries; LibOptions: globals, locals, has_changed and all that; Linear Algebra in PSI4. Integrals in PSI4; Introduction; The older style; The new syntax; One Electron Integrals in PSI4. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; Adding PsiAPI Test Cases; Comparison Functions. Debugging and Profiling; Debugging; Profiling. Updating the PSI4 Users’ and Programmers’ Manual; Installing Sphinx; Documentation Structure; reStructuredText; Math in the Codebase; The Map of the Sphinx. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons; Git, Versioning; Release Procedures. PSI4 API: Linking C++ and Python; psi4.core Module; psi4.driver Package; psi4.driver.p4util Package. External API Objects; Molecule; IPIBroker; auto_fragments(); process_input(); ip_fitting(); frac_traverse(); frac_nuke(); set_output_file(); BaseComputer; TaskComputers; SubTaskComputers; expand_cbs_methods(); task_planner(). Indices. Index; Module Index; Search Page. table of contents. PSI4: Open-Source Quantum Chemistry. Programmers’ Manual. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.9.1;  · . PSI4. PSI4: Open-Source Quantum Chemistry. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.9.x.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html
https://psicode.org/psi4manual/1.9.x.html:3090,Energy Efficiency,energy,energy,3090,"e to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LibECPInt by R. Shaw; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. QCVariables (aka PSI Variables); PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; General layout of the core: where new C++ code should live; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating Ne",MatchSource.WIKI,psi4manual/1.9.x.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html
https://psicode.org/psi4manual/1.9.x.html:1832,Integrability,depend,dependent,1832,"Installing from Binary; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable; PsiAPI Tutorial: Using Psi4 as a Python Module. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Theoretical Methods: SCF to FCI; Capabilities and Alternate Implementations; Notes on Options; Notes on PSI Variables; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DFT-NL; DCT: Density Cumulant Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; CC: Coupled Cluster Theory; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; MCSCF: Multi-Configurational Self-Consistent-Field; SAPT: Symmetry-Adapted Perturbation Theory; F/I-SAPT: Functional Group and/or Intramolecular SAPT; ADC: Ab Initio Polarization Propagator; Scalar relativistic Hamiltonians; Geometry Optimization; Evaluation of One-Electron Properties — oeprop(); Vibrational and Thermochemical Analysis; TDSCF: Time-dependent Hartree–Fock and density-functional theory. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to the BrianQC GPU module by the BrianQC team; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to CPPE by M. Scheurer; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LibECPInt by R. Shaw; Interface to LIBEFP by I",MatchSource.WIKI,psi4manual/1.9.x.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html
https://psicode.org/psi4manual/1.9.x.html:3171,Performance,optimiz,optimize,3171,"e to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LibECPInt by R. Shaw; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. QCVariables (aka PSI Variables); PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; General layout of the core: where new C++ code should live; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating Ne",MatchSource.WIKI,psi4manual/1.9.x.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:3830,Availability,toler,tolerably,3830,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:4271,Deployability,configurat,configurations,4271,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:6980,Deployability,update,updated,6980,"mple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:456,Energy Efficiency,energy,energy,456,"﻿. ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». ADC: Ab Initio Polarization Propagator¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; Module: Keywords, PSI Variables, ADC; The ADC code seeks the pole structure of the polarization; propagator, which is equivalent to the correlated excitation energy,; in terms of the second order algebraic-diagrammatic construction; (ADC(2)) scheme. Originally, the ADC scheme was derived in purely; the diagrammatic language by Schirmer [Schirmer:1982] and later,; a sophisticated algebraic scheme was developed [Trofimov:2006]; by Trofimov et al. In general by n-th order ADC theory, the; excited state is treated at completely equivalent level to the; Møller–Plesset perturbation expansion of the same order.; Hence the ADC(2); can be described as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In Psi4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; productio",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:1882,Energy Efficiency,efficient,efficient,1882,"ribed as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In Psi4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:2913,Energy Efficiency,energy,energy,2913,"the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:3046,Energy Efficiency,energy,energy,3046,"the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:5875,Energy Efficiency,reduce,reduces,5875,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a7",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:6163,Energy Efficiency,energy,energy,6163,"mple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:6312,Energy Efficiency,energy,energy,6312,"mple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:3370,Integrability,depend,dependence,3370,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:1896,Modifiability,flexible,flexible,1896,"ribed as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In Psi4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:4271,Modifiability,config,configurations,4271,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:4104,Performance,perform,performing,4104,"ntation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories ",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc-1.html:5911,Usability,simpl,simple,5911,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a7",MatchSource.WIKI,psi4manual/1.0.0/adc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc-1.html
https://psicode.org/psi4manual/1.0.0/adc.html:3830,Availability,toler,tolerably,3830,"790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:4271,Deployability,configurat,configurations,4271,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:6980,Deployability,update,updated,6980,"mple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:456,Energy Efficiency,energy,energy,456,"﻿. ADC: Ab Initio Polarization Propagator — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». ADC: Ab Initio Polarization Propagator¶; Code author: Masaaki Saitow; Section author: Masaaki Saitow; Module: Keywords, PSI Variables, ADC; The ADC code seeks the pole structure of the polarization; propagator, which is equivalent to the correlated excitation energy,; in terms of the second order algebraic-diagrammatic construction; (ADC(2)) scheme. Originally, the ADC scheme was derived in purely; the diagrammatic language by Schirmer [Schirmer:1982] and later,; a sophisticated algebraic scheme was developed [Trofimov:2006]; by Trofimov et al. In general by n-th order ADC theory, the; excited state is treated at completely equivalent level to the; Møller–Plesset perturbation expansion of the same order.; Hence the ADC(2); can be described as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In Psi4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; productio",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:1882,Energy Efficiency,efficient,efficient,1882,"ribed as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In Psi4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:2913,Energy Efficiency,energy,energy,2913,"the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:3046,Energy Efficiency,energy,energy,3046,"the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for t",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:5875,Energy Efficiency,reduce,reduces,5875,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a7",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:6163,Energy Efficiency,energy,energy,6163,"mple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:6312,Energy Efficiency,energy,energy,6312,"mple inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:3370,Integrability,depend,dependence,3370,"ions of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arrow symbol; and the pseudo-perturbative value, which is calculated in very similar; fashion to the CIS(D) energy, is also presented on the following line. In; this implementation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:1896,Modifiability,flexible,flexible,1896,"ribed as MP2 theory for the excited state and the relation; to such other response theories as CC2-LR, CIS(D) and CIS(D) has; been addressed [Haettig:2002] by Hattig et al. In the ADC theory,; the residue calculus of the propagator is translated into the eigenvalue; problem with respect to the correlated response matrix, also known as the; shifted-Hamiltonian. The σ-vectors (Hamiltonian-vector products); are constructed several times in the simultaneous expansion method (SEM); to solve the eigenvalue problem, and each σ-vector construction; has a computational cost that scales as . In addition,; the tensorial form of the σ-vector resembles to that of the; doubles correction in the CIS(D) energetic equation. As a consequence,; the pre-factor in the polynomial scaling becomes far larger than that; of the CIS(D) even though the quasi-degeneracy of the excited state is; properly accounted for in the ADC(2) model.; In Psi4 the quite efficient and flexible integral-transformation; library named libtrans is newly equipped and utilized in the; production level DCFT code. The ADC code is also based on; libtrans, and it is also based on libdpd, a library to; utilize molecular symmetry in the tensorial manipulations in framework; of the direct-product decomposition algorithm. By this feature, the Ritz; space and intermediate tensors are blocked according to the irreducible; representations of the point group, and the excited states that belong; to different symmetry are sought separately.; In the output of ADC, the ADC(2) results may look as follows:; -> 1 B1 state : 0.2565095 (a.u.), 6.9799824 (eV); Non-iterative: 0.2565636 (a.u.), 6.9814532 (eV); Occ Vir Coefficient; ---------------------------------------------; 3 0 -0.9017047264; 3 2 0.3038332241; 3 1 0.2907567119; 3 5 -0.0790167706; 3 4 -0.0425829926. Converged in 4 iteration.; Squared norm of the S component: 0.9315336; The S vector is rotated up to 8.102 (deg.). in which the ADC(2) excitation energy is indicated with arr",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:4271,Modifiability,config,configurations,4271,"fold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:4104,Performance,perform,performing,4104,"ntation, the ADC(2) secular matrix is treated effectively; by renormalization of the double excitation manifold into the single; excitation manifold. So, the effective secular equation is solved for; several times for the specific state due to the eigenvalue dependence of; the effective response matrix. Only the S component of the transition; amplitude is obtained explicitly and the squared norm of the S block; and the rotation angle from the corresponding CIS vector are given; below the element of the amplitude. The difference between the ADC(2); value and its non-iterative counterpart is mostly negligible if the; mixture among the CIS excited states is small and the quasi-degeneracy; in the excited state is tolerably weak. But if there is a significant; discrepancy in these energies, or the rotation angle is visibly large,; special care may have to be taken for the strong effects caused by the; higher excited states. Partial Renormalization Scheme¶; The ADC code is capable of performing the partially-renormalized; ADC(2) computation, termed PR-ADC(2). In the perturbative treatment of; the singly-excited state, the doubly and triply excited configurations; are accounted for as in the case of CIS(D). In the language of; CIS(D), the former is regarded to introduce the orbital relaxation (OR); effect while the latter is argued to give rise to the differential; correlation (DC) correction to the excited state. In the PR-ADC(2); scheme, the the DC term is corrected according to the ground state; PR-MP2 correlation, in which the correlation between the electron pairs; is accounted for in size-consistent and unitary-invariant fashion by; modulating the MP1 amplitude. By utilizing the PR scheme, substantial; resistance against quasi-degeneracy is readily granted as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories ",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/adc.html:5911,Usability,simpl,simple,5911,"d as discussed; in Ref. [Saitow:2012]. Using the ADC(2) code¶; A complete list of keywords related to ADC(2) computations is provided in; Appendix ADC. Some sample inputs are provided in; psi4/samples, in directories starting with the name adc. The most; important keyword is ROOTS_PER_IRREP, which is an array; giving the number of excited states desired for each irreducible; representation. Implementation¶; Some very essential points are emphasized for understanding of the; nature and the limitations of the theory. The ADC(2) response matrix,; denoted as , is expanded in the single (S) and double (D); excitation manifolds as. where the superscript on each matrix block indicates the order of; the fluctuation. Instead of solving the above equation explicitly,; the large D manifold is treated effectively as. This form of the ADC(2) equation requires 7 – 10 iterations for; convergence on only one root. But thanks to Newton-Raphson; acceleration,. the computational time reduces to shorter than half of the simple iterative; procedure. Construction of the denominator of the second term in the above; equation is less computationally expensive than contruction of one $sigma$-vector with respect to the effective response matrix. The non-iterative excitation energy stated above is calculated as a diagonal element of the Davidson mini-Hamiltonian matrix in the SEM as,. where and denote the CIS; excitation energy and wave function, respectively. The explicit form of the; σ-vector is provided in a note accompanying the source code,; in the file psi4/src/bin/adc/sigma.pdf. Table Of Contents. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Implementation. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; Scalar relativistic Hamiltonians. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a7",MatchSource.WIKI,psi4manual/1.0.0/adc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/adc.html
https://psicode.org/psi4manual/1.0.0/appendices-1.html:1451,Deployability,update,updated,1451,"﻿. Appendices — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Appendices¶. Keywords¶. Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; TRANSQT2. Basis Sets¶. Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables¶. PSI Variables by Alpha; PSI Variables by Module; ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Miscellaneous¶. Test Suite and Sample Inputs; DFTD3; MRCC; CFOUR; LIBEFP; PCMSOLVER; DMRG. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Physical Constants; Bibliography. Table Of Contents. Appendices; Keywords; Basis Sets; PSI Variables; Miscellaneous. Previous topic; Creating a Database; Next topic; Keywords by Alpha. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/appendices-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/appendices-1.html
https://psicode.org/psi4manual/1.0.0/appendices.html:1451,Deployability,update,updated,1451,"﻿. Appendices — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Appendices¶. Keywords¶. Keywords by Alpha; Keywords by Module; GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; TRANSQT2. Basis Sets¶. Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables¶. PSI Variables by Alpha; PSI Variables by Module; ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Miscellaneous¶. Test Suite and Sample Inputs; DFTD3; MRCC; CFOUR; LIBEFP; PCMSOLVER; DMRG. DFT Functionals; All Available; GGA; Meta; Long-Range Corrected; Hybrid; Double-Hybrid; SCS Double-Hybrid; Dispersion-Corrected. PSIOH Intermediate Files; Physical Constants; Bibliography. Table Of Contents. Appendices; Keywords; Basis Sets; PSI Variables; Miscellaneous. Previous topic; Creating a Database; Next topic; Keywords by Alpha. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/appendices.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/appendices.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:8263,Availability,error,error,8263,"valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:11789,Deployability,update,updated,11789,"not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve dispersion-dominated systems. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. Table Of Contents. RSE42; S22; A24; BAKERJCC96; HBC6; NBC10; HTBH; ACENES; RGC10; CORE; BENCH12; HSG; A24alt; BAKERJCC93; BASIC; S22by5; HTR40; NHTBH; JSCH; S66by8; NCB31; S66. Previous topic; Database, database(); Next topic; Complete Basis Set. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:6207,Energy Efficiency,energy,energy,6207,"- decacene dimers. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:10854,Energy Efficiency,charge,charge-transfer,10854,"embers are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve dispersion-dominated systems. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. Table Of Contents. RSE42; S22; A24; BAKERJCC96; HBC6; NBC10; HTBH; ACENES; RGC10; CORE; BENCH12; HSG; A24alt; BAKERJCC93; BASIC; S22by5; HTR40; NHTBH; JSCH; S66by8; NCB31; S66. Previous topic; Database, database(); Next topic; Complete Basis Set. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:7540,Performance,optimiz,optimize,7540,"HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:449,Testability,benchmark,benchmark,449,"﻿. RSE42 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:1064,Testability,benchmark,benchmark,1064,"    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:1770,Testability,benchmark,benchmark,1770,"scription>. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium point",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:2509,Testability,benchmark,benchmark,2509,"exes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:3784,Testability,benchmark,benchmark,3784,"imer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:6301,Testability,benchmark,benchmark,6301,"tries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>'",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:6838,Testability,benchmark,benchmark,6838,"sociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:7293,Testability,benchmark,benchmark,7293,"m <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:7838,Testability,test,testing,7838,"on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:8731,Testability,benchmark,benchmark,8731,"rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:10677,Testability,benchmark,benchmark,10677," (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve dispersion-dominated systems. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. Table Of Contents. RSE42; S22; A24; BAKERJCC96; HBC6; NBC10; HTBH; ACENES; RGC10; CORE; BENCH12; HSG; A24alt; BAKERJCC93; BASIC; S22by5; HTR40; NHTBH; JSCH; S66by8; NCB31; S66. Previous topic; Database, database(); Next topic; Complete Basis Set. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; P",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:7809,Usability,simpl,simple,7809,"on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:8263,Availability,error,error,8263,"valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:11789,Deployability,update,updated,11789,"not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve dispersion-dominated systems. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. Table Of Contents. RSE42; S22; A24; BAKERJCC96; HBC6; NBC10; HTBH; ACENES; RGC10; CORE; BENCH12; HSG; A24alt; BAKERJCC93; BASIC; S22by5; HTR40; NHTBH; JSCH; S66by8; NCB31; S66. Previous topic; Database, database(); Next topic; Complete Basis Set. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:6207,Energy Efficiency,energy,energy,6207,"- decacene dimers. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:10854,Energy Efficiency,charge,charge-transfer,10854,"embers are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve dispersion-dominated systems. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. Table Of Contents. RSE42; S22; A24; BAKERJCC96; HBC6; NBC10; HTBH; ACENES; RGC10; CORE; BENCH12; HSG; A24alt; BAKERJCC93; BASIC; S22by5; HTR40; NHTBH; JSCH; S66by8; NCB31; S66. Previous topic; Database, database(); Next topic; Complete Basis Set. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:7540,Performance,optimiz,optimize,7540,"HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:449,Testability,benchmark,benchmark,449,"﻿. RSE42 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:1064,Testability,benchmark,benchmark,1064,"    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation »; Database, database() ». RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:1770,Testability,benchmark,benchmark,1770,"scription>. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium point",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:2509,Testability,benchmark,benchmark,2509,"exes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:3784,Testability,benchmark,benchmark,3784,"imer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:6301,Testability,benchmark,benchmark,6301,"tries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>'",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:6838,Testability,benchmark,benchmark,6838,"sociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:7293,Testability,benchmark,benchmark,7293,"m <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:7838,Testability,test,testing,7838,"on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:8731,Testability,benchmark,benchmark,8731,"rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:10677,Testability,benchmark,benchmark,10677," (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) dissociation curve dispersion-dominated systems. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. Table Of Contents. RSE42; S22; A24; BAKERJCC96; HBC6; NBC10; HTBH; ACENES; RGC10; CORE; BENCH12; HSG; A24alt; BAKERJCC93; BASIC; S22by5; HTR40; NHTBH; JSCH; S66by8; NCB31; S66. Previous topic; Database, database(); Next topic; Complete Basis Set. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; P",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html:7809,Usability,simpl,simple,7809,"on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_databases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_efpfrag-1.html:23268,Deployability,update,updated,23268,"28589 0.000000; O 1.508925 1.789508 0.000000; C 2.648712 -0.848917 0.000000; H 2.838441 -1.920120 0.000000; H 3.122602 -0.405796 -0.874359; H 3.122602 -0.405796 0.874359. uracil¶. rotate: click+drag; translate: alt+click+drag; zoom: scroll. Visualization by ChemDoodle Web; Comment; Uracil, S22 H-Bond, Stack Dimer Elec.: 6-31G* Rest: 6-311++G(3df,2p). Full Geometry in Angstroms; N -1.176150 -1.013895 0.009636; C -0.014859 -1.735764 -0.010189; H -0.135102 -2.807995 -0.049711; C 1.195422 -1.139958 0.012847; H 2.105169 -1.714739 -0.003735; C 1.284759 0.308466 0.015077; O 2.313695 0.963702 -0.052809; N 0.038116 0.943313 0.083774; H 0.044958 1.955145 0.033206; C -1.216003 0.367805 0.015837; O -2.251460 1.002337 -0.044844; H -2.065926 -1.465704 -0.127550. ammonia¶. rotate: click+drag; translate: alt+click+drag; zoom: scroll. Visualization by ChemDoodle Web; Comment; Ammonia Elec.: 6-31+G* Rest: 6-311++G(3df,2p). Full Geometry in Angstroms; N 0.000000 0.000000 0.069609; H 0.000000 0.932400 -0.322391; H 0.807400 -0.466200 -0.322391; H -0.807400 -0.466200 -0.322391. Table Of Contents. 2aminopyridine; pyrazine; phenol; pyridone; adenine-wc; dcm; pentane; thymine-wc; c2h5oh; acetone; ethane; dmso; aceticacid-gp; ethene; methane; methylamine; h2o; ch4; hydrogencyanide; acetamide-gp; ch3oh; ccl4; cyclopentane; uracil-gp; neopentane; adenine-stack; water; formicacid; pyridine; cl2; benzene; h2; nmethylacetamide; c6h6; nh3; methanol; formamide; indole; aceticacid-hb; ethyne; acetamide-hb; thymine-stack; uracil; ammonia. Previous topic; Interface to LIBEFP by I. Kaliman; Next topic; Interface to PCMSolver. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities »; Interface to LIBEFP by I. Kaliman ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_efpfrag-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_efpfrag-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_available_efpfrag.html:23268,Deployability,update,updated,23268,"28589 0.000000; O 1.508925 1.789508 0.000000; C 2.648712 -0.848917 0.000000; H 2.838441 -1.920120 0.000000; H 3.122602 -0.405796 -0.874359; H 3.122602 -0.405796 0.874359. uracil¶. rotate: click+drag; translate: alt+click+drag; zoom: scroll. Visualization by ChemDoodle Web; Comment; Uracil, S22 H-Bond, Stack Dimer Elec.: 6-31G* Rest: 6-311++G(3df,2p). Full Geometry in Angstroms; N -1.176150 -1.013895 0.009636; C -0.014859 -1.735764 -0.010189; H -0.135102 -2.807995 -0.049711; C 1.195422 -1.139958 0.012847; H 2.105169 -1.714739 -0.003735; C 1.284759 0.308466 0.015077; O 2.313695 0.963702 -0.052809; N 0.038116 0.943313 0.083774; H 0.044958 1.955145 0.033206; C -1.216003 0.367805 0.015837; O -2.251460 1.002337 -0.044844; H -2.065926 -1.465704 -0.127550. ammonia¶. rotate: click+drag; translate: alt+click+drag; zoom: scroll. Visualization by ChemDoodle Web; Comment; Ammonia Elec.: 6-31+G* Rest: 6-311++G(3df,2p). Full Geometry in Angstroms; N 0.000000 0.000000 0.069609; H 0.000000 0.932400 -0.322391; H 0.807400 -0.466200 -0.322391; H -0.807400 -0.466200 -0.322391. Table Of Contents. 2aminopyridine; pyrazine; phenol; pyridone; adenine-wc; dcm; pentane; thymine-wc; c2h5oh; acetone; ethane; dmso; aceticacid-gp; ethene; methane; methylamine; h2o; ch4; hydrogencyanide; acetamide-gp; ch3oh; ccl4; cyclopentane; uracil-gp; neopentane; adenine-stack; water; formicacid; pyridine; cl2; benzene; h2; nmethylacetamide; c6h6; nh3; methanol; formamide; indole; aceticacid-hb; ethyne; acetamide-hb; thymine-stack; uracil; ammonia. Previous topic; Interface to LIBEFP by I. Kaliman; Next topic; Interface to PCMSolver. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities »; Interface to LIBEFP by I. Kaliman ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_available_efpfrag.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_efpfrag.html
https://psicode.org/psi4manual/1.0.0/autodoc_basissets_byfamily-1.html:17230,Deployability,update,updated,17230,"-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; def2-sv_p_-jkfit; def2-sv_p_-ri; —. def2-SVP; def2-svp; def2-svp-jkfit; def2-svp-ri; —. def2-SVPD; def2-svpd; def2-svp-jkfit; def2-svpd-ri; —. def2-TZVP; def2-tzvp; def2-tzvp-jkfit; def2-tzvp-ri; —. def2-TZVPD; def2-tzvpd; def2-tzvp-jkfit; def2-tzvpd-ri; —. def2-TZVPP; def2-tzvpp; def2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; Auxiliary Basis Sets; Next topic; PSI Variables by Alpha. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Auxiliary Basis Sets ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_basissets_byfamily-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_basissets_byfamily.html:17230,Deployability,update,updated,17230,"-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; def2-sv_p_-jkfit; def2-sv_p_-ri; —. def2-SVP; def2-svp; def2-svp-jkfit; def2-svp-ri; —. def2-SVPD; def2-svpd; def2-svp-jkfit; def2-svpd-ri; —. def2-TZVP; def2-tzvp; def2-tzvp-jkfit; def2-tzvp-ri; —. def2-TZVPD; def2-tzvpd; def2-tzvp-jkfit; def2-tzvpd-ri; —. def2-TZVPP; def2-tzvpp; def2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; Auxiliary Basis Sets; Next topic; PSI Variables by Alpha. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Auxiliary Basis Sets ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_basissets_byfamily.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_all-1.html:182,Availability,avail,available,182,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». DFT functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_all-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_all-1.html:13714,Deployability,update,updated,13714,"0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; DFT Functionals; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_all-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_all-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_all.html:182,Availability,avail,available,182,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». DFT functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_all.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_all.html:13714,Deployability,update,updated,13714,"0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; DFT Functionals; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_all.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid-1.html:192,Availability,avail,available,192,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid-1.html:1677,Deployability,update,updated,1677,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_dhybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid.html:192,Availability,avail,available,192,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid.html:1677,Deployability,update,updated,1677,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Double-Hybrid functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. PBE0-2; PBE0-2 Double Hydrid Exchange-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_dhybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_dhybrid.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp-1.html:199,Availability,avail,available,199,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Dispersion-Corrected functionals available in Psi4¶. Name; Description; S6; S8; SR6; ALPHA6; A1; A2; Dispersion?; Dispersion Description. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.55000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 1.02200; 1.42700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.91470; —; —; 0.30650; 5.05700; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.71754; 1.31313; 0.01604; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.67282; —; —; 0.48643; 3.65647; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.05000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.05000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.00000; 1.70300; 1.26100; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.00000; 1.98890; —; —; 0.39810; 4.42110; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP-D3M; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp-1.html:9649,Deployability,update,updated,9649,"3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D3M; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.00008; 2.07795; 0.11675; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. PBE0-D3MBJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.52882; —; —; 0.00791; 6.16233; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. WPBE-D3; PBE SR-XC Functional (HJS Model); 1.00000; 1.27900; 1.35500; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. WPBE-D3M; PBE SR-XC Functional (HJS Model); 1.00000; 1.28062; 1.36636; 0.00316; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); 1.00000; 1.85410; —; —; 0.39190; 5.08970; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); 1.00000; 0.90656; —; —; 0.56376; 3.59368; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_disp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp.html:199,Availability,avail,available,199,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Dispersion-Corrected functionals available in Psi4¶. Name; Description; S6; S8; SR6; ALPHA6; A1; A2; Dispersion?; Dispersion Description. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.55000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 1.02200; 1.42700; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.91470; —; —; 0.30650; 5.05700; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.71754; 1.31313; 0.01604; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; 0.64000; 0.67282; —; —; 0.48643; 3.65647; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.05000; —; —; 20.00000; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.05000; —; —; 23.00000; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.00000; 1.70300; 1.26100; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); 1.00000; 1.98890; —; —; 0.39810; 4.42110; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B3LYP-D3M; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp.html:9649,Deployability,update,updated,9649,"3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 1.21770; —; —; 0.41450; 4.85930; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D3M; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.00008; 2.07795; 0.11675; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. PBE0-D3MBJ; PBE0 Hybrid GGA Exchange-Correlation Functional; 1.00000; 0.52882; —; —; 0.00791; 6.16233; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. WPBE-D3; PBE SR-XC Functional (HJS Model); 1.00000; 1.27900; 1.35500; 14.00000; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. WPBE-D3M; PBE SR-XC Functional (HJS Model); 1.00000; 1.28062; 1.36636; 0.00316; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; 1.00000; —; —; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; 1.00000; —; —; 6.00000; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); 1.00000; 1.85410; —; —; 0.39190; 5.08970; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); 1.00000; 0.90656; —; —; 0.56376; 3.59368; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_disp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_disp.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_energy-1.html:9932,Deployability,update,updated,9932,"elation, RPA Parameters, VWN5 Spin Polarization. vwn5_c; VWN5 LSDA Correlation, QMC Parameters, VWN5 Spin Polarization. wpbe-d3; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (zero-damping) Dispersion Correction. wpbe-d3m; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. wpbe-d3mbj; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe2; Double-Hybrid PBE LRC Functional. wpbe_c; Short-Range PBE Correlation Functional. wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wpw92_c; Short-Range PW92 Correlation Functional. wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_energy-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_energy.html:9932,Deployability,update,updated,9932,"elation, RPA Parameters, VWN5 Spin Polarization. vwn5_c; VWN5 LSDA Correlation, QMC Parameters, VWN5 Spin Polarization. wpbe-d3; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (zero-damping) Dispersion Correction. wpbe-d3m; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. wb88_x; B88 Short-Range GGA Exchange (HJS Model). wb97; Parameterized LRC B97 GGA XC Functional. wb97x; Parameterized Hybrid LRC B97 GGA XC Functional. wb97x-d; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion w/ Chai and Head-Gordon Dispersion Correction. wblyp; BLYP SR-XC Functional (HJS Model). wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. wpbe-d3mbj; PBE SR-XC Functional (HJS Model) w/ Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wpbe0; PBE0 SR-XC Functional (HJS Model). wpbe2; Double-Hybrid PBE LRC Functional. wpbe_c; Short-Range PBE Correlation Functional. wpbe_x; PBE Short-Range GGA Exchange (HJS Model). wpbesol; PBEsol SR-XC Functional (HJS Model). wpbesol0; PBEsol0 SR-XC Functional (HJS Model). wpbesol_x; PBEsol Short-Range GGA Exchange (HJS Model). wpw92_c; Short-Range PW92 Correlation Functional. wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_energy.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga-1.html:182,Availability,avail,available,182,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». GGA functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D3; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B97-D3BJ; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-D3M; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B97-D3MBJ; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. BLYP; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BLYP-D; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BLYP-D3; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. BLYP-D3BJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. BLYP-D3M; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. BLYP-D3MBJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. BP86; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BP86-D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga-1.html:5897,Deployability,update,updated,5897,"elation Functional; Y; —; —; —; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE-D3M; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. PBE-D3MBJ; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. PBEA_C; New Implementation of PBEC in wPBEc-sr.; Y; —; —; —; —; —; —; —; —. PBESOL_X; PBEsol GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. PBE_C; PBE Correlation; Y; —; —; —; —; —; —; —; —. PBE_X; PBE GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. PW91; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91_C; PW91 Correlation; Y; —; —; —; —; —; —; —; —. PW91_X; PW91 Parameterized GGA Exchange; Y; —; —; —; —; —; —; —; —. PW92A_C; New Implementation of PW92C in wPBEc-sr.; Y; —; —; —; —; —; —; —; —. RPBE_X; RPBE GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. SOGGA; Second Order GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. SOGGA_X; Second Order GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_gga-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga.html:182,Availability,avail,available,182,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». GGA functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B3_X; Becke88 GGA Exchange (B3LYP weighting); Y; —; —; —; —; —; —; —; —. B88_X; Becke88 GGA Exchange; Y; —; —; —; —; —; —; —; —. B97-D; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B97-D3; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B97-D3BJ; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B97-D3M; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B97-D3MBJ; B97-D Pure-GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. BLYP; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BLYP-D; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. BLYP-D3; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. BLYP-D3BJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. BLYP-D3M; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. BLYP-D3MBJ; BLYP GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. BP86; BP86 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. BP86-D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga.html:5897,Deployability,update,updated,5897,"elation Functional; Y; —; —; —; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. PBE-D3; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE-D3BJ; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE-D3M; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. PBE-D3MBJ; PBE GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. PBEA_C; New Implementation of PBEC in wPBEc-sr.; Y; —; —; —; —; —; —; —; —. PBESOL_X; PBEsol GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. PBE_C; PBE Correlation; Y; —; —; —; —; —; —; —; —. PBE_X; PBE GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. PW91; PW91 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. PW91_C; PW91 Correlation; Y; —; —; —; —; —; —; —; —. PW91_X; PW91 Parameterized GGA Exchange; Y; —; —; —; —; —; —; —; —. PW92A_C; New Implementation of PW92C in wPBEc-sr.; Y; —; —; —; —; —; —; —; —. RPBE_X; RPBE GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. SOGGA; Second Order GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. SOGGA_X; Second Order GGA Exchange Hole (Parameter Free); Y; —; —; —; —; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_gga.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_gga.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid-1.html:185,Availability,avail,available,185,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Hybrid functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid-1.html:6490,Deployability,update,updated,6490,"ge-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D3M; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. PBE0-D3MBJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_hybrid-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid.html:185,Availability,avail,available,185,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Hybrid functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. B2PLYP; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; —; —. B2PLYP-D; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D2; Grimme’s -D2 Dispersion Correction. B2PLYP-D3; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B2PLYP-D3BJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. B2PLYP-D3M; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. B2PLYP-D3MBJ; B2PLYP Double Hybrid Exchange-Correlation Functional; Y; —; —; 0.530000; —; 0.270000; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. B3LYP; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; —; —. B3LYP-CHG; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. B3LYP-D; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. B3LYP-D1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D1; Grimme’s -D1 Dispersion Correction. B3LYP-D3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA); Y; —; —; 0.200000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. B3LYP-D3BJ; B3LYP Hybrid-GGA Exchange-Correlation Function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid.html:6490,Deployability,update,updated,6490,"ge-Correlation Functional; Y; —; —; 0.793701; —; 0.500000; —; —; —. PBE0-D; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D2; Grimme’s -D2 Dispersion Correction. PBE0-D3; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. PBE0-D3BJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. PBE0-D3M; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. PBE0-D3MBJ; PBE0 Hybrid GGA Exchange-Correlation Functional; Y; —; —; 0.250000; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_hybrid.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_hybrid.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc-1.html:199,Availability,avail,available,199,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. WPBE-D3; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. WPBE-D3M; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc-1.html:2603,Deployability,update,updated,2603,"; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_lrc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc.html:199,Availability,avail,available,199,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Long-Range-Corrected functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. WPBE-D3; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. WPBE-D3M; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MZERO; Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. wB88_X; B88 Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc.html:2603,Deployability,update,updated,2603,"; —; 0.300000; —; —; —; —; —; —. wB97; Parameterized LRC B97 GGA XC Functional; Y; —; 0.400000; —; —; —; —; —; —. wB97X; Parameterized Hybrid LRC B97 GGA XC Functional; Y; —; 0.400000; 0.157706; —; —; —; —; —. wB97X-D; Parameterized Hybrid LRC B97 GGA XC Functional with Dispersion; Y; —; 0.200000; 0.222036; —; —; —; -CHG; Chai and Head-Gordon Dispersion Correction. wBLYP; BLYP SR-XC Functional (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3BJ; Grimme’s -D3 (BJ-damping) Dispersion Correction. wPBE-D3MBJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; -D3MBJ; Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. wPBE0; PBE0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBE2; Double-Hybrid PBE LRC Functional; Y; —; 0.300000; —; 0.500000; —; —; —; —. wPBE_C; Short-Range PBE Correlation Functional; Y; —; —; —; 0.500000; —; —; —; —. wPBE_X; PBE Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPBEsol; PBEsol SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. wPBEsol0; PBEsol0 SR-XC Functional (HJS Model); Y; —; 0.300000; 0.250000; —; —; —; —; —. wPBEsol_X; PBEsol Short-Range GGA Exchange (HJS Model); Y; —; 0.300000; —; —; —; —; —; —. wPW92_C; Short-Range PW92 Correlation Functional; Y; —; —; —; 0.300000; —; —; —; —. wSVWN; LSDA SR-XC Functional; —; —; 0.300000; —; —; —; —; —; —. wS_X; Slater Short-Range LSDA Exchange; —; —; 0.300000; —; —; —; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_lrc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_lrc.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta-1.html:183,Availability,avail,available,183,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Meta functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta-1.html:1490,Deployability,update,updated,1490,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Meta functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_meta-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta.html:183,Availability,avail,available,183,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Meta functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta.html:1490,Deployability,update,updated,1490,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». Meta functionals available in Psi4¶. Name; Description; GGA?; Meta?; X_LRC?; X_Hybrid?; C_LRC?; C_Hybrid?; C_SCS? SS/OS; Dispersion?; Dispersion Description. M05; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; —; —. M05-2X; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; —; —. M05-2X-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.560000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. M05-D3; Heavily Parameterized Hybrid Meta-GGA XC Functional; Y; Y; —; 0.280000; —; —; —; -D3ZERO; Grimme’s -D3 (zero-damping) Dispersion Correction. dlDF; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; —; —. dlDF+D; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2010; Podeszwa and Szalewicz Dispersion Correction. dlDF+D09; Dispersionless Hybrid Meta-GGA XC Functional; Y; Y; —; 0.614413; —; —; —; -DAS2009; Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_meta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_meta.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_opt-1.html:7968,Deployability,update,updated,7968,"ation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. pbe0-d3bj; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbe0-d3m; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. pbe0-d3mbj; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. pbea_c; New Implementation of PBEC in wPBEc-sr. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92a_c; New Implementation of PW92C in wPBEc-sr. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 LSDA Correlation, RPA Parameters, VWN1 Spin Polarization. vwn3_c; VWN3 LSDA Correlation, QMC Parameters, VWN1 Spin Polarization. vwn5rpa_c; VWN5 LSDA Correlation, RPA Parameters, VWN5 Spin Polarization. vwn5_c; VWN5 LSDA Correlation, QMC Parameters, VWN5 Spin Polarization. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; PSIOH Intermediate Files. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_opt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_opt-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_dft_opt.html:7968,Deployability,update,updated,7968,"ation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. pbe0-d3bj; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping) Dispersion Correction. pbe0-d3m; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping, short-range refitted) Dispersion Correction. pbe0-d3mbj; PBE0 Hybrid GGA Exchange-Correlation Functional w/ Grimme’s -D3 (BJ-damping, short-range refitted) Dispersion Correction. pbea_c; New Implementation of PBEC in wPBEc-sr. pbesol_x; PBEsol GGA Exchange Hole (Parameter Free). pbe_c; PBE Correlation. pbe_x; PBE GGA Exchange Hole (Parameter Free). pw91; PW91 GGA Exchange-Correlation Functional. pw91_c; PW91 Correlation. pw91_x; PW91 Parameterized GGA Exchange. pw92a_c; New Implementation of PW92C in wPBEc-sr. pw92_c;  . pz81_c; PZ81 Correlation. rpbe_x; RPBE GGA Exchange Hole (Parameter Free). sogga; Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 LSDA Correlation, RPA Parameters, VWN1 Spin Polarization. vwn3_c; VWN3 LSDA Correlation, QMC Parameters, VWN1 Spin Polarization. vwn5rpa_c; VWN5 LSDA Correlation, RPA Parameters, VWN5 Spin Polarization. vwn5_c; VWN5 LSDA Correlation, QMC Parameters, VWN5 Spin Polarization. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Previous topic; <no title>; Next topic; PSIOH Intermediate Files. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; DFT Functionals ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_dft_opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_dft_opt.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:885,Availability,error,errors,885,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:1377,Availability,fault,faulty,1377,"eal pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule obje",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:7972,Availability,avail,available,7972,"Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:18143,Availability,fault,faulty,18143,"i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. sigma_xy()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:21885,Availability,avail,available,21885,"lemental symbol, with expectation; that element identity will be established in mixed basis section.; For ghost atoms when mixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:21954,Availability,avail,available,21954,"l be established in mixed basis section.; For ghost atoms when mixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:22513,Availability,avail,available,22513,"ystem(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:22582,Availability,avail,available,22582,"em. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:30786,Availability,error,error,30786,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:30873,Availability,avail,available,30873,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31125,Availability,error,errors,31125,"se keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31319,Availability,error,error,31319,"ts in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32289,Availability,avail,available,32289,"bases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.Rea",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:34203,Availability,avail,available,34203,", path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:35332,Availability,avail,available,35332,"). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:35730,Availability,error,errors,35730," bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:35886,Availability,error,errors,35886,"atistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36329,Availability,avail,available,36329," them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36665,Availability,error,errors,36665,"csformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single model",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37294,Availability,avail,available,37294,"structions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbench",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37660,Availability,error,errors,37660,"; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemist",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37856,Availability,avail,available,37856,"oring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform spe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38562,Availability,error,errors,38562,"tle='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:39347,Availability,avail,available,39347,"ue, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. promote_Subset(name=None)[source]¶; Examine component databases and elevate subset name not necessarily; present for all component databases to a subset for the self. When name; is None, promotes all subsets found for component databases. Also promotes; entirety of each component database as a subset with name of component; database dbse in lowercase. sset = None¶; subset assembly pattern; >>> print asdf.sset.k",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:42383,Availability,error,errors,42383," if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:42643,Availability,error,error,42643,"clusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43476,Availability,error,errors,43476,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43543,Availability,error,error,43543,"eme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43711,Availability,error,error,43711,"s; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:44011,Availability,error,errors,44011," Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:44637,Availability,avail,available,44637,"loninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:45895,Availability,error,error,45895,"turned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47100,Availability,error,errors,47100,"ts and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47167,Availability,error,error,47167,"'kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47335,Availability,error,error,47335,"value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47523,Availability,error,error,47523,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47608,Availability,error,error,47608,"el chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modname function; funcname. Module search path can be prepended with pythonpath. load_qcdata_byproject(project, pythonpath=None)[source]¶; Loads qcdb.ReactionDatums from standard location for project; :mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:49605,Availability,error,error,49605,"ythonpath=None)[source]¶; Loads qcdb.ReactionDatums from standard location for project; :module dbse_project and function load_project. Module search path; can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaT",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:49688,Availability,error,error,49688,":module dbse_project and function load_project. Module search path; can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form Or",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:49765,Availability,error,error,49765,"ended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:50547,Availability,error,error,50547,"ce]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_elaborate(e=None, pe=None, pbe=None, pce=None, extrema=True)[source]¶. oxcom(lst)[source]¶; Returns gramatical comma separated string of lst. string_contrast(ss)[source]¶; From an array of strings, ss, returns maximum common prefix; string, maximum common suffix string, and array of middles. File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate entries. There is no guarantee of which; duplicate entry is dropped. useful()[source]¶. find_start(lines, start_str, reverse=True)[source]¶; Find the start of a block, iterate backwards by default,; Usually the last one is wanted; If not found, return -1. harvest(p4Mol, orca_out, **largs)[source]¶; Harvest variables, gradient, and the molecule from the",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:55330,Availability,down,down,55330,"urce]¶; If E is a dict instance, does: for k in E: od[k] = E[k]; If E has a .keys() method, does: for k in E.keys(): od[k] = E[k]; Or if E is an iterable of items, does: for k, v in E: od[k] = v; In either case, this is followed by: for k, v in F.items(): od[k] = v. values() → list of values in od[source]¶. viewitems() → a set-like object providing a view on od's items[source]¶. viewkeys() → a set-like object providing a view on od's keys[source]¶. viewvalues() → an object providing a view on od's values[source]¶. Parent classes for quantum chemistry program input and output file; formats. class InputFormat(mem, mtd, bas, mol, sys, cast)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. class InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:55808,Availability,down,down,55808,"providing a view on od's values[source]¶. Parent classes for quantum chemistry program input and output file; formats. class InputFormat(mem, mtd, bas, mol, sys, cast)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. class InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error me",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56406,Availability,error,error,56406,"s InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56676,Availability,error,error,56676,"alence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56809,Availability,error,error,56809,"t cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to Fals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:57009,Availability,error,error,57009,"e]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:58094,Availability,checkpoint,checkpoint,58094,"file(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*args)[source]¶; Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). LIBINT_MAX_AM = 6¶. add(b)[source]¶; Adds this plus another basis set and returns the result.; Equivalent to the ‘+’ operator. Appears defunct. ao_to_shell(i)[source]¶; Given a Cartesian function (AO) number what shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:58152,Availability,checkpoint,checkpoint,58152," portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*args)[source]¶; Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). LIBINT_MAX_AM = 6¶. add(b)[source]¶; Adds this plus another basis set and returns the result.; Equivalent to the ‘+’ operator. Appears defunct. ao_to_shell(i)[source]¶; Given a Cartesian function (AO) number what shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compute_phi(phi_ao, x, y, z)[source]¶; Returns the values of the basis functions at a point. concatenate(b)[source]¶; Concatenates tw",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:67469,Availability,error,error,67469,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:68071,Availability,error,error,68071,"tion; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:70324,Availability,error,errors,70324,"cified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; geometry. Presently catches some errors of orientation that; Cfour as Cmol should properly fulfill. These are unnecessary; restrictions and can be relaxed later. transform_coordinates(coord)[source]¶. transform_coordinates2(coord)[source]¶. transform_elementlist(elem)[source]¶; Applies to elem the transformation appropriate to bring a; list of atomic numbers in molChangeable orientation into; molPermanent orientation. In particular, applies a row exchange; to place it in the atom ordering. transform_gradient(arr)[source]¶; Applies to arr the transformation appropriate to bring a; gradient in molChangeable orientation into molPermanent; orientation. In particular, applies a rotation to place it; in the inertial frame, a column exchange and phasing to place; it in the axis system, a row exchange to place it in the atom; ordering, and a rotation to remove it from the inertial frame. transform_vector(vec)[source]¶; Applies to vec the transformation appropriate to bring a; vector in molChangeable orientation into molPermanent; orientation. In ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:75540,Availability,toler,tolerance,75540,"1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:81821,Availability,error,error,81821,"r; >>> print H2OH2O.fx(4); 2.55231135823. fxyz(atom)[source]¶; Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies); >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. fy(atom)[source]¶; y position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fy(4); 0.210645882307. fz(atom)[source]¶; z position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:89631,Availability,checkpoint,checkpoint,89631,"pgname)[source]¶; Override symmetry from outside the molecule string. rotate(R)[source]¶; Rotates the molecule using rotation matrix R.; >>> H2OH2O.rotate([[0,-1,0],[-1,0,0],[0,0,1]]). rotate_full(R)[source]¶; Rotates the full molecule using rotation matrix R.; >>> H2OH2O.rotate_full([[0,-1,0],[-1,0,0],[0,0,1]]). rotational_constants(tol=1e-08)[source]¶; Compute the rotational constants and return them in wavenumbers. rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. save_string_xyz(save_ghosts=True)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; _; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. save_to_checkpoint(chkpt, prefix='')[source]¶; NYI Save information to checkpoint file; (method name in libmints is save_to_chkpt). save_xyz(filename, save_ghosts=True)[source]¶; Save an XYZ file.; >>> H2OH2O.save_xyz('h2o.xyz'). schoenflies_symbol()[source]¶; Returns the Schoenflies symbol. set_active_fragment(fr)[source]¶; Tags fragment index fr as composed of real atoms. set_active_fragments(reals)[source]¶; Tags the fragments in array reals as composed of real atoms. set_basis_all_atoms(name, role='BASIS')[source]¶; Assigns basis name to all atoms. set_basis_by_label(label, name, role='BASIS')[source]¶; Assigns basis name to all atoms with label. set_basis_by_number(number, name, role='BASIS')[source]¶; Assigns basis name to atom number number (0-indexed, excludes dummies). set_basis_by_symbol(symbol, name, role='BASIS')[source]¶; Assigns basis name to all symbol atoms. set_com_fixed(_fix=True)[source]¶; NYI Fix the center of mass at its current frame.; Not used in libmints so not implemented. set_full_geometry(geom)[source]¶; Sets the full geom",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:95933,Availability,failure,failure,95933," rotate (need not be normalized); @param phi double : magnitude of rotation in rad; @param Sn bool : if true, then also reflect in plane through origin and perpendicular to rotation; @returns SharedMatrix with rotated points (rows). matrix_3d_rotation_Cn(coord, axis, reflect, tol=1e-08, max_Cn_to_check=-1)[source]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in inpu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96215,Availability,failure,failure,96215,"ce]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96513,Availability,failure,failure,96513,"k for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if availabl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96840,Availability,failure,failure,96840," when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96896,Availability,error,error,96896," when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:97297,Availability,avail,available,97297,"nput files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[sour",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:97423,Availability,avail,available,97423,"two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:97495,Availability,avail,available,97495," a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but in Python differences; minimal. nprimitive()[source]¶; The number of primitive Gaussians. INT_CART",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:97647,Availability,avail,available,97647,"n to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but in Python differences; minimal. nprimitive()[source]¶; The number of primitive Gaussians. INT_CARTINDEX(am, i, j)[source]¶; Computes offset index for cartesian function.; #define INT_CARTINDEX(am,i,j) (((i) == (am))? 0 : (((((am) - (i) + 1)*((am) - ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:108764,Availability,error,error,108764," v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:109116,Availability,error,error,109116,"nt out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename inform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:109191,Availability,error,errors,109191,"nt out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename inform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:109474,Availability,error,errors,109474,"ormat_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename information from def_prefix + def_filename is; inserted. def_prefix is intended to be something like mplthread_; to identify the type of figure. flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:110502,Availability,error,errors,110502,"aussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename information from def_prefix + def_filename is; inserted. def_prefix is intended to be something like mplthread_; to identify the type of figure. flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a slat diagram between model chemistries with errors in; single-item list data, which is supplied as part of the dictionary; for each participating reaction, along with dbse and rxn keys in; argument data. Limits of plot are xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from; sapt_colors module. Summary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:111184,Availability,error,errors,111184,"; and/or filename information from def_prefix + def_filename is; inserted. def_prefix is intended to be something like mplthread_; to identify the type of figure. flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a slat diagram between model chemistries with errors in; single-item list data, which is supplied as part of the dictionary; for each participating reaction, along with dbse and rxn keys in; argument data. Limits of plot are xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from; sapt_colors module. Summary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:111532,Availability,avail,availibility,111532,"between model chemistries with errors in; single-item list data, which is supplied as part of the dictionary; for each participating reaction, along with dbse and rxn keys in; argument data. Limits of plot are xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from; sapt_colors module. Summary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, sl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:112171,Availability,error,errors,112171,"me pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:115252,Availability,down,down,115252,"the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=Fals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126092,Availability,error,error,126092,"lied. copy()[source]¶; Function to return a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126479,Availability,error,error,126479,"=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126696,Availability,error,error,126696,"ction returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126886,Availability,error,error,126886,"t of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:127044,Availability,error,error,127044,"rint stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). restore()[source]¶. class InPsight(molecule)[source]¶. atoms = []¶. azimuth = 0.0",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:131857,Availability,failure,failure,131857,"0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132269,Availability,failure,failure,132269,", light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132499,Availability,failure,failure,132499," = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.su",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132781,Availability,failure,failure,132781,"xpected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133079,Availability,failure,failure,133079,"write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133333,Availability,failure,failure,133333,"e_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133613,Availability,failure,failure,133613,"matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:135510,Availability,avail,available,135510,"‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convention.; Arguments:; @arg filename full path to file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron propert",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:138807,Availability,avail,available,138807,"lled for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. form",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:138838,Availability,avail,available,138838,"s the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. format_kwargs_for_input(filename, lmode=1, **kwargs)[source]¶; Funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:141077,Availability,avail,available,141077,"mat_molecule_for_input(mol, name='', forcexyz=False)[source]¶; Function to return a string of the output of; inputparser.process_input() applied to the XYZ; format of molecule, passed as either fragmented; geometry string mol or molecule instance mol.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see molutil.geometry(). format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. get_psifile(fileno, pidspace='8619')[source]¶; Function to return the full path and filename for psi file; fileno (e.g., psi.32) in current namespace pidspace. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary; with all keys made lowercase. Should be called by every; function that could be called directly by the user.; Also turns boolean-like values into actual booleans.; Also turns values lowercase if sensible. mat2arr(mat)[source]¶; Function to convert psi4.Matrix mat to Python array of arrays.; Expects psi4.Matrix to be flat with respect to symmetry. prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not y",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:141149,Availability,avail,available,141149,"utput of; inputparser.process_input() applied to the XYZ; format of molecule, passed as either fragmented; geometry string mol or molecule instance mol.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see molutil.geometry(). format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. get_psifile(fileno, pidspace='8619')[source]¶; Function to return the full path and filename for psi file; fileno (e.g., psi.32) in current namespace pidspace. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary; with all keys made lowercase. Should be called by every; function that could be called directly by the user.; Also turns boolean-like values into actual booleans.; Also turns values lowercase if sensible. mat2arr(mat)[source]¶; Function to convert psi4.Matrix mat to Python array of arrays.; Expects psi4.Matrix to be flat with respect to symmetry. prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Need some option to get either all or changed; Need some ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:141301,Availability,avail,available,141301,"l.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see molutil.geometry(). format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. get_psifile(fileno, pidspace='8619')[source]¶; Function to return the full path and filename for psi file; fileno (e.g., psi.32) in current namespace pidspace. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary; with all keys made lowercase. Should be called by every; function that could be called directly by the user.; Also turns boolean-like values into actual booleans.; Also turns values lowercase if sensible. mat2arr(mat)[source]¶; Function to convert psi4.Matrix mat to Python array of arrays.; Expects psi4.Matrix to be flat with respect to symmetry. prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Need some option to get either all or changed; Need some option to either get dict or set string or psimod command list; command return doesn’t revoke has_changed setting for unchanged with changedOnly=False.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:146670,Availability,error,error,146670,"d builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:148057,Availability,error,error,148057,"atted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:148261,Availability,recover,recovery,148261," vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the parti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:149466,Availability,avail,available,149466," on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the particular displacement number item and the; associated zmat file contents and linkage, and common contents; inputSansMol, returns contents of input file to be sown. Module with a procedures dictionary specifying available quantum; chemical methods.; Module to provide lightweight definitions of functionals and; SuperFunctionals. build_b2plyp_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd2gr_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd2p4_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3bj_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3mbj_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3mzero_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3zero_superfunctional(name, npoints, deriv)[source]¶. build_b3_x_functional(name)[source]¶. build_b3lyp5_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d2gr_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d2p4_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d3bj_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d3mbj_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d3mzero_superfunctional(name, npoints, deriv)[s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:479,Deployability,install,install,479,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8815,Deployability,integrat,integrate,8815,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:41547,Deployability,toggle,toggle,41547,"ed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; foo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:41622,Deployability,toggle,toggle,41622,"oin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:54276,Deployability,update,update,54276,"class OrderedDict(*args, **kwds)[source]¶; Dictionary that remembers insertion order. clear() → None. Remove all items from od.[source]¶. copy() → a shallow copy of od[source]¶. classmethod fromkeys(S[, v]) → New ordered dictionary with keys from S[source]¶; and values equal to v (which defaults to None). items() → list of (key, value) pairs in od[source]¶. iteritems()[source]¶; od.iteritems -> an iterator over the (key, value) items in od. iterkeys() → an iterator over the keys in od[source]¶. itervalues()[source]¶; od.itervalues -> an iterator over the values in od. keys() → list of keys in od[source]¶. pop(k[, d]) → v, remove specified key and return the corresponding value.[source]¶; If key is not found, d is returned if given, otherwise KeyError is raised. popitem() → (k, v), return and remove a (key, value) pair.[source]¶; Pairs are returned in LIFO order if last is true or FIFO order if false. setdefault(k[, d]) → od.get(k,d), also set od[k]=d if k not in od[source]¶. update(E, **F) → None. Update od from dict/iterable E and F.[source]¶; If E is a dict instance, does: for k in E: od[k] = E[k]; If E has a .keys() method, does: for k in E.keys(): od[k] = E[k]; Or if E is an iterable of items, does: for k, v in E: od[k] = v; In either case, this is followed by: for k, v in F.items(): od[k] = v. values() → list of values in od[source]¶. viewitems() → a set-like object providing a view on od's items[source]¶. viewkeys() → a set-like object providing a view on od's keys[source]¶. viewvalues() → an object providing a view on od's values[source]¶. Parent classes for quantum chemistry program input and output file; formats. class InputFormat(mem, mtd, bas, mol, sys, cast)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66590,Deployability,update,updated,66590," i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, valu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:67594,Deployability,update,update,67594,"he classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:113717,Deployability,update,updated,113717,"g specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:113822,Deployability,update,updated,113822,"ve/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD pur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114003,Deployability,update,updates,114003,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:118495,Deployability,update,updated,118495,"omputes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:118600,Deployability,update,updated,118600," the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:118727,Deployability,update,updates,118727,"¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which the orbital basis orbital; (usually the coded form of ornate) and jfit, jkfit,; rifit, and dualfit auxiliary bases can be found. add_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:120831,Deployability,install,installed,120831,"add basis fit as associated helper basis; member dualfit to a BasisFamily object. add_jfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jfit to a BasisFamily object. add_jfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:121032,Deployability,install,installed,121032,"default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the default parameters for functional; func. When mode is ‘psi4’, returns a tuple of arguments suitable for building; a Dispersion object with dashlvl parameters for functional func.; There are four computational d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:121224,Deployability,install,installed,121224," associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the default parameters for functional; func. When mode is ‘psi4’, returns a tuple of arguments suitable for building; a Dispersion object with dashlvl parameters for functional func.; There are four computational dashlvl choices. ‘d2p4’ calls the -D2 correction; within psi4 (hence, faked for mode=’dftd3’). The other three, ‘d2gr’, ‘d3zero’,; and ‘d3bj’ call the three dftd3 modes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:144190,Deployability,install,installed,144190,"mily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method recei",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:144619,Deployability,install,installed,144619,"d or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the im",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:144811,Deployability,install,installed,144811,"nate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:161465,Deployability,configurat,configuration,161465,"[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:161637,Deployability,configurat,configuration,161637,"for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[sour",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:172301,Deployability,update,updated,172301,"ting to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from each displaced computation, and computes final result. Table Of Contents. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver; wrapper_autofrag; qmmm; qcdb; p4util; p4const; procedures. Previous topic; BasisSet; Next topic; psi4: Linking C++ and Python. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:243,Energy Efficiency,energy,energy,243,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8587,Energy Efficiency,energy,energy,8587,"quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8828,Energy Efficiency,charge,charges,8828,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8986,Energy Efficiency,charge,charges,8986,"ing available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:9087,Energy Efficiency,charge,charges,9087,"ty, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:9236,Energy Efficiency,charge,charge,9236,"; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note tha",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:9352,Energy Efficiency,charge,charge,9352,"turns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:9459,Energy Efficiency,charge,charge,9459," molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotations and 3 distinct reflections, each; with a separate character. Thus symop has 6 elements ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:9529,Energy Efficiency,charge,charge,9529,"odel chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotations and 3 distinct reflections, each; with a separate character. Thus symop has 6 elements rather than the 3; you’ll find in most published character tables. bits()[source]¶; Returns bitwise re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:9594,Energy Efficiency,charge,charges,9594,"odel chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotations and 3 distinct reflections, each; with a separate character. Thus symop has 6 elements rather than the 3; you’ll find in most published character tables. bits()[source]¶; Returns bitwise re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:18441,Energy Efficiency,charge,charge,18441,"the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s fa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:18595,Energy Efficiency,charge,charge,18595,"ion. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:21999,Energy Efficiency,charge,charge,21999,"ixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:22627,Energy Efficiency,charge,charge,22627,"e]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:22959,Energy Efficiency,charge,charge,22959,"om second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:23590,Energy Efficiency,energy,energy,23590,"st column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:23655,Energy Efficiency,energy,energy,23655,"st column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:24874,Energy Efficiency,energy,energy,24874,".Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Pars",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:25153,Energy Efficiency,energy,energy,25153,"0712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:25264,Energy Efficiency,energy,energy,25264,"0712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:26226,Energy Efficiency,charge,charge,26226,"putation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coordinates that govern the reading of molecule; orientation by Cfour. Return qcdb.Molecule and gradient array. harvest_outfile_pass(outtext)[source]¶; Function to read CFOUR output file outtext and parse important; quantum chemical information from it in. harvest_output(outtext)[source]¶; Function to separate portions of a CFOUR output file outtest,; divided by xjoda. harvest_zmat(zmat)[source]¶; Parses the contents of the Cfour ZMAT file into array and; coordinate information. The coordinate info is converted into a; rather dinky Molecule (no fragment, but does read charge, mult,; unit). Return qcdb.Molecule. Written for findif zmat* where; geometry always Cartesian and Bohr. jajo2mol(jajodic)[source]¶; Returns a Molecule from entries in dictionary jajodic extracted; from JAINDX and JOBARC. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for cfour. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:26856,Energy Efficiency,charge,charge,26856,"ith p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coordinates that govern the reading of molecule; orientation by Cfour. Return qcdb.Molecule and gradient array. harvest_outfile_pass(outtext)[source]¶; Function to read CFOUR output file outtext and parse important; quantum chemical information from it in. harvest_output(outtext)[source]¶; Function to separate portions of a CFOUR output file outtest,; divided by xjoda. harvest_zmat(zmat)[source]¶; Parses the contents of the Cfour ZMAT file into array and; coordinate information. The coordinate info is converted into a; rather dinky Molecule (no fragment, but does read charge, mult,; unit). Return qcdb.Molecule. Written for findif zmat* where; geometry always Cartesian and Bohr. jajo2mol(jajodic)[source]¶; Returns a Molecule from entries in dictionary jajodic extracted; from JAINDX and JOBARC. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for cfour. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37733,Energy Efficiency,green,green-to-purple,37733,"r; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; lengt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:53276,Energy Efficiency,energy,energy,53276," of the last geometry. harvest_mp2(lines, psivar)[source]¶; Harvest the MP2 results. harvest_scf_from_outfile(lines, psivar)[source]¶; Harvest SCF results from the SCF section of the output file. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for orca. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for orca. While deliberately requested pieces,; generally orca__orca_deriv_level and orca__orca_calc_level,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, can be countermanded by keywords in input file; (‘clobber’ set to False). Occasionally, we want these pieces to actually; overcome keywords in input file (‘superclobber’ set to True). orca_gradient_list()[source]¶; Return an array of Orca methods with analytical gradients.; Appended to procedures[‘gradient’]. orca_list()[source]¶; Return an array of Orca methods with energies. Appended; to procedures[‘energy’]. class OrderedDict(*args, **kwds)[source]¶; Dictionary that remembers insertion order. clear() → None. Remove all items from od.[source]¶. copy() → a shallow copy of od[source]¶. classmethod fromkeys(S[, v]) → New ordered dictionary with keys from S[source]¶; and values equal to v (which defaults to None). items() → list of (key, value) pairs in od[source]¶. iteritems()[source]¶; od.iteritems -> an iterator over the (key, value) items in od. iterkeys() → an iterator over the keys in od[source]¶. itervalues()[source]¶; od.itervalues -> an iterator over the values in od. keys() → list of keys in od[source]¶. pop(k[, d]) → v, remove specified key and return the corresponding value.[source]¶; If key is not found, d is returned if given, otherwise KeyError is raised. popitem() → (k, v), return and remove a (key, value) pair.[source]¶; Pairs are returned in LIFO order if last is true or FIFO order if false. setdefault(k[, d]) → od.get(k,d), also set od[k]=d if k not in od[so",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:69243,Energy Efficiency,energy,energy,69243,"one, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:69308,Energy Efficiency,energy,energy,69308,"one, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:71617,Energy Efficiency,power,power,71617,"opriate to bring a; list of atomic numbers in molChangeable orientation into; molPermanent orientation. In particular, applies a row exchange; to place it in the atom ordering. transform_gradient(arr)[source]¶; Applies to arr the transformation appropriate to bring a; gradient in molChangeable orientation into molPermanent; orientation. In particular, applies a rotation to place it; in the inertial frame, a column exchange and phasing to place; it in the axis system, a row exchange to place it in the atom; ordering, and a rotation to remove it from the inertial frame. transform_vector(vec)[source]¶; Applies to vec the transformation appropriate to bring a; vector in molChangeable orientation into molPermanent; orientation. In particular, applies a rotation to place it; in the inertial frame, a column exchange and phasing to place; it in the axis system, and a rotation to remove it from the; inertial frame. conv_float2negexp(val)[source]¶; Returns the least restrictive negative exponent of the power 10; that would achieve the floating point convergence criterium val. format_option_for_cfour(opt, val)[source]¶; Function to reformat value val for option opt from python; into cfour-speak. Arrays are the primary target. prepare_options_for_cfour(options)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary options, find the options directable toward; Cfour (options[‘CFOUR’][‘CFOUR_**’]) that aren’t default, then write; a CFOUR deck with those options. prepare_options_for_orca(options)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary options, find the options directable toward; Orca (options[‘ORCA’][‘ORCA_**’]) that aren’t default, then write; an ORCA deck with those options. prepare_options_for_psi4(options)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary options, find the options directable toward; Cfour (options[‘CFOUR’][‘CFOUR_**’]) that aren",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:74038,Energy Efficiency,charge,charge,74038,"th those options. reconcile_options(full, partial)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary full and reconcile it with proposed options; value changes in partial. Overwrites full with partial if; option untouched, touches full if full and partial are in; agreement, balks if full and partial conflict. Returns full. reconcile_options2(full, partial)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary full and reconcile it with proposed options; value changes in partial. Overwrites full with partial if; option untouched, touches full if full and partial are in; agreement, balks if full and partial conflict. Returns full.; Note: this is surprisingly similar to reconcile_options except; that full is essentially empty and lacking in has_changed keys; so presence is enough to satisfy has_changed. consider merging; once mature. class LibmintsMolecule(psi4molstr=None)[source]¶; Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4’s libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major; differences from the C++ class are: no basisset handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:74959,Energy Efficiency,charge,charge,74959,"]¶; Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4’s libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major; differences from the C++ class are: no basisset handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:75138,Energy Efficiency,charge,charge,75138,"stin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major; differences from the C++ class are: no basisset handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:75350,Energy Efficiency,charge,charge,75350," handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:75357,Energy Efficiency,charge,charge,75357," handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:76234,Energy Efficiency,charge,charge,76234,"e; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances be",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:76265,Energy Efficiency,charge,charge,76265,"e; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances be",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:76354,Energy Efficiency,charge,charge,76354,"rge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Dista",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:76411,Energy Efficiency,charge,charge,76411,"aken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Distances (Angstroms); [1] [2] [3] [4] [5] [6]; [1] 0.0000",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:77051,Energy Efficiency,charge,charges,77051,"enter_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Distances (Angstroms); [1] [2] [3] [4] [5] [6]; [1] 0.00000; [2] 0.95711 0.00000; [3] 0.96391 1.51726 0.00000; [4] 2.91042 3.34878 1.95159 0.00000; [5] 3.32935 3.86422 2.43843 0.95895 0.00000; [6] 3.32935 3.86422 2.43843 0.95895 1.51712 0.00000. equivalent(iuniq, j)[source]¶; Returns the j’th atom equivalent to iuniq. everything()[source]¶; Quick print of class data. extract_fragments(reals, ghosts=[])[source]¶; Makes a copy of the molecule, returning a new molecule with; only certain fragment atoms present as either ghost or real atoms; reals: The list or int of fragments (1-indexed) that should be present in the molecule as real atoms.; ghosts: The list or int of fragments (1-indexed) that s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:78756,Energy Efficiency,charge,charge,78756,"]¶; Makes a copy of the molecule, returning a new molecule with; only certain fragment atoms present as either ghost or real atoms; reals: The list or int of fragments (1-indexed) that should be present in the molecule as real atoms.; ghosts: The list or int of fragments (1-indexed) that should be present in the molecule as ghosts.; (method name in libmints is extract_subsets. This is different; in qcdb because the psi4 input parser tries to process lines with; that term, giving rise to Boost:Python type conlicts.) See usage; at extract_fragments(). extract_subsets(reals, ghosts=[])[source]¶; Wrapper for extract_fragments().; See note there. This function can be used as long as not; in psi4 input file. Use extract_fragments directly, then.; >>> H2OH2O.extract_subsets(2) # monomer B, unCP-corrected; >>> H2OH2O.extract_subsets(2,1) # monomer B, CP-corrected; >>> obj.extract_subsets(1,[2,3]) # monomer A, CP-corrected if obj is tri-molecular complex. fZ(atom)[source]¶; Nuclear charge of atom (includes dummies); >>> print H2OH2O.fZ(4); 8. fcharge(atom)[source]¶; Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version.; >>> print H2OH2O.fcharge(4); 8.0. find_highest_point_group(tol=1e-08)[source]¶; Find the highest D2h point group from Jet and Ed’s code: c1; ci c2 cs d2 c2v c2h d2h. Ignore the user-specified subgroup in; this case. find_point_group(tol=1e-08)[source]¶; Find computational molecular point group, user can override; this with the “symmetry” keyword. Result is highest D2h subgroup; attendant on molecule and allowed by the user. fix_orientation(_fix=True)[source]¶; Fix the orientation at its current frame; (method name in libmints is set_orientation_fixed). flabel(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in; the input file (C2, H4) (includes dummies); >>> print H2OH2O.flabel(4); O2. fmass(atom)[source]¶; Returns mass of atom (0-indexed, includes dummies); >>> print H2OH2O.fmass(4); 15.99",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:78850,Energy Efficiency,charge,charge,78850,"toms present as either ghost or real atoms; reals: The list or int of fragments (1-indexed) that should be present in the molecule as real atoms.; ghosts: The list or int of fragments (1-indexed) that should be present in the molecule as ghosts.; (method name in libmints is extract_subsets. This is different; in qcdb because the psi4 input parser tries to process lines with; that term, giving rise to Boost:Python type conlicts.) See usage; at extract_fragments(). extract_subsets(reals, ghosts=[])[source]¶; Wrapper for extract_fragments().; See note there. This function can be used as long as not; in psi4 input file. Use extract_fragments directly, then.; >>> H2OH2O.extract_subsets(2) # monomer B, unCP-corrected; >>> H2OH2O.extract_subsets(2,1) # monomer B, CP-corrected; >>> obj.extract_subsets(1,[2,3]) # monomer A, CP-corrected if obj is tri-molecular complex. fZ(atom)[source]¶; Nuclear charge of atom (includes dummies); >>> print H2OH2O.fZ(4); 8. fcharge(atom)[source]¶; Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version.; >>> print H2OH2O.fcharge(4); 8.0. find_highest_point_group(tol=1e-08)[source]¶; Find the highest D2h point group from Jet and Ed’s code: c1; ci c2 cs d2 c2v c2h d2h. Ignore the user-specified subgroup in; this case. find_point_group(tol=1e-08)[source]¶; Find computational molecular point group, user can override; this with the “symmetry” keyword. Result is highest D2h subgroup; attendant on molecule and allowed by the user. fix_orientation(_fix=True)[source]¶; Fix the orientation at its current frame; (method name in libmints is set_orientation_fixed). flabel(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in; the input file (C2, H4) (includes dummies); >>> print H2OH2O.flabel(4); O2. fmass(atom)[source]¶; Returns mass of atom (0-indexed, includes dummies); >>> print H2OH2O.fmass(4); 15.9949146196. form_symmetry_information(tol=1e-08)[source]¶; Initialize molecular specific s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:84312,Energy Efficiency,charge,charge,84312,"; Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). (0-indexed); >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶; Returns the maximum number of equivalent atoms. molecular_charge()[source]¶; Gets the molecular charge; >>> print H2OH2O.molecular_charge(); -2. move_to_com()[source]¶; Moves molecule to center of mass. multiplicity()[source]¶; Get the multiplicity (defined as 2Ms + 1); >>> print H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; The number of active fragments in the molecule.; >>> print H2OH2O.nactive_fragments(); 2. nallatom()[source]¶; Number of all atoms (includes dummies); >>> print H2OH2O.nallatom(); 7. name()[source]¶; Get molecule name; >>> print H2OH2O.name(); water_dimer. natom()[source]¶; Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:85374,Energy Efficiency,energy,energy,85374,"r_charge(); -2. move_to_com()[source]¶; Moves molecule to center of mass. multiplicity()[source]¶; Get the multiplicity (defined as 2Ms + 1); >>> print H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; The number of active fragments in the molecule.; >>> print H2OH2O.nactive_fragments(); 2. nallatom()[source]¶; Number of all atoms (includes dummies); >>> print H2OH2O.nallatom(); 7. name()[source]¶; Get molecule name; >>> print H2OH2O.name(); water_dimer. natom()[source]¶; Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_core(); 2. nuclear_repulsion_energy()[source]¶; Computes nuclear repulsion energy.; >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. nuclear_repulsion_energy_deriv1()[source]¶; Computes nuclear repulsion energy derivatives; >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. nuclear_repulsion_energy_deriv2()[source]¶; NYI Computes nuclear repulsion energy second derivatives. nunique()[source]¶; Return the number of unique atoms. orientation_fixed()[source]¶; Get whether or not orientation is fixed.; >>> H2OH2O.orientation_fixed(); True. point_group()[source]¶; Returns the point group (object) if set. print_bond_angles()[source]¶; Print the geometrical parameters (bond_angles) of the molecule.; >>> print H2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:85514,Energy Efficiency,energy,energy,85514," H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; The number of active fragments in the molecule.; >>> print H2OH2O.nactive_fragments(); 2. nallatom()[source]¶; Number of all atoms (includes dummies); >>> print H2OH2O.nallatom(); 7. name()[source]¶; Get molecule name; >>> print H2OH2O.name(); water_dimer. natom()[source]¶; Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_core(); 2. nuclear_repulsion_energy()[source]¶; Computes nuclear repulsion energy.; >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. nuclear_repulsion_energy_deriv1()[source]¶; Computes nuclear repulsion energy derivatives; >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. nuclear_repulsion_energy_deriv2()[source]¶; NYI Computes nuclear repulsion energy second derivatives. nunique()[source]¶; Return the number of unique atoms. orientation_fixed()[source]¶; Get whether or not orientation is fixed.; >>> H2OH2O.orientation_fixed(); True. point_group()[source]¶; Returns the point group (object) if set. print_bond_angles()[source]¶; Print the geometrical parameters (bond_angles) of the molecule.; >>> print H2OH2O.print_bond_angles(); Bond Angles (degrees); Angle 2-1-3: 104.337; Angle 2-1-4: 109.152; Angle 2-1-5: 117.387; ... print_dihedrals()[source]¶; Print",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:85981,Energy Efficiency,energy,energy,85981," Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_core(); 2. nuclear_repulsion_energy()[source]¶; Computes nuclear repulsion energy.; >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. nuclear_repulsion_energy_deriv1()[source]¶; Computes nuclear repulsion energy derivatives; >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. nuclear_repulsion_energy_deriv2()[source]¶; NYI Computes nuclear repulsion energy second derivatives. nunique()[source]¶; Return the number of unique atoms. orientation_fixed()[source]¶; Get whether or not orientation is fixed.; >>> H2OH2O.orientation_fixed(); True. point_group()[source]¶; Returns the point group (object) if set. print_bond_angles()[source]¶; Print the geometrical parameters (bond_angles) of the molecule.; >>> print H2OH2O.print_bond_angles(); Bond Angles (degrees); Angle 2-1-3: 104.337; Angle 2-1-4: 109.152; Angle 2-1-5: 117.387; ... print_dihedrals()[source]¶; Print the geometrical parameters (dihedrals) of the molecule.; >>> print H2OH2O.print_dihedrals(); Dihedral Angles (Degrees); Dihedral 1-2-3-4: 180.000; Dihedral 1-2-3-5: 133.511; Dihedral 1-2-3-6: 133.511; ... print_distances()[source]¶; Print the geometrical parameters (distances) of the molecule.; suspect libmints version actually prints Bohr.; >>> print H2OH2O.print_distances(); Interatomic Distances (Angstroms); Distance 1 to 2 0.957; Distance 1 to 3 0.96",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:87301,Energy Efficiency,charge,charge,87301," H2OH2O.print_bond_angles(); Bond Angles (degrees); Angle 2-1-3: 104.337; Angle 2-1-4: 109.152; Angle 2-1-5: 117.387; ... print_dihedrals()[source]¶; Print the geometrical parameters (dihedrals) of the molecule.; >>> print H2OH2O.print_dihedrals(); Dihedral Angles (Degrees); Dihedral 1-2-3-4: 180.000; Dihedral 1-2-3-5: 133.511; Dihedral 1-2-3-6: 133.511; ... print_distances()[source]¶; Print the geometrical parameters (distances) of the molecule.; suspect libmints version actually prints Bohr.; >>> print H2OH2O.print_distances(); Interatomic Distances (Angstroms); Distance 1 to 2 0.957; Distance 1 to 3 0.964; Distance 1 to 4 2.910; ... print_full()[source]¶; Print full atom list. Same as print_out() only displays dummy atoms. print_in_input_format()[source]¶; Print the molecule in the same format that the user provided. print_out()[source]¶; Print the molecule.; (method name in libmints is print); >>> H2OH2O.print_out(); Geometry (in Angstrom), charge = -2, multiplicity = 3:; Center X Y Z; ------------ ----------------- ----------------- -----------------; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. print_out_in_angstrom()[source]¶; Print the molecule in Angstroms. Same as print_out() only always in Angstroms.; (method name in libmints is print_in_angstrom). print_out_in_bohr()[source]¶; Print the molecule in Bohr. Same as print_out() only in Bohr.; (method name in libmints is print_in_bohr). print_out_of_planes()[source]¶; Print the geometrical parameters (out_of_planes) of the molecule.; >>> print H2OH2O.print_out_of_planes(); Out-Of-Plane Angles (Degrees); Out-of-plane 1-2-3-4: 0.000; Out-of-plane 1-2-3-5: -7.373; Out-of-plane 1-2-3-6: 7.373; ... reinterpret_coordentries()[source]¶; Reinterpret the fragments for real",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:91438,Energy Efficiency,charge,charge,91438,"fixed(_fix=True)[source]¶; NYI Fix the center of mass at its current frame.; Not used in libmints so not implemented. set_full_geometry(geom)[source]¶; Sets the full geometry (dummies included), given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_full geometry([[1,2,3],[4,5,6],[7,8,9],[0,0,0],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_full_point_group(tol=1e-08)[source]¶; Determine and set FULL point group. self.PYfull_pg_n is highest; order n in Cn. 0 for atoms or infinity. set_geometry(geom)[source]¶; Sets the geometry, given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:91475,Energy Efficiency,charge,charge,91475,"fixed(_fix=True)[source]¶; NYI Fix the center of mass at its current frame.; Not used in libmints so not implemented. set_full_geometry(geom)[source]¶; Sets the full geometry (dummies included), given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_full geometry([[1,2,3],[4,5,6],[7,8,9],[0,0,0],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_full_point_group(tol=1e-08)[source]¶; Determine and set FULL point group. self.PYfull_pg_n is highest; order n in Cn. 0 for atoms or infinity. set_geometry(geom)[source]¶; Sets the geometry, given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:98366,Energy Efficiency,efficient,efficient,98366,"attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but in Python differences; minimal. nprimitive()[source]¶; The number of primitive Gaussians. INT_CARTINDEX(am, i, j)[source]¶; Computes offset index for cartesian function.; #define INT_CARTINDEX(am,i,j) (((i) == (am))? 0 : (((((am) - (i) + 1)*((am) - (i)))>>1) + (am) - (i) - (j))). INT_ICART(a, b, c)[source]¶; Given a, b, and c compute a cartesian offset.; #define INT_ICART(a, b, c) (((((((a)+(b)+(c)+1)<<1)-(a))*((a)+1))>>1)-(b)-1). INT_IPURE(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class Shel",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:99649,Energy Efficiency,efficient,efficient,99649,") - (i)))>>1) + (am) - (i) - (j))). INT_ICART(a, b, c)[source]¶; Given a, b, and c compute a cartesian offset.; #define INT_ICART(a, b, c) (((((((a)+(b)+(c)+1)<<1)-(a))*((a)+1))>>1)-(b)-1). INT_IPURE(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100106,Energy Efficiency,reduce,reduce,100106,"]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[so",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:113208,Energy Efficiency,charge,charge,113208,"g reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attribu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114181,Energy Efficiency,charge,charge,114181," y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114409,Energy Efficiency,charge,charge,114409,", independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114752,Energy Efficiency,charge,charge,114752,"at_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114783,Energy Efficiency,charge,charge,114783,"at_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:117973,Energy Efficiency,charge,charge,117973," Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:135889,Energy Efficiency,energy,energy,135889,"rg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). set_memory(b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:136154,Energy Efficiency,energy,energy,136154,"2345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). set_memory(bytes)[source]¶; Function to reset the total memory allocation. set_num_threads(nthread)[source]¶; Function to reset the number of threads to parallelize across. success(label)[source]¶",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:136787,Energy Efficiency,energy,energy,136787,"generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). set_memory(bytes)[source]¶; Function to reset the total memory allocation. set_num_threads(nthread)[source]¶; Function to reset the number of threads to parallelize across. success(label)[source]¶; Function to print a ‘label...PASSED’ line to screen.; Used by util.compare_values() family when functions pass. xml2dict(filename=None)[source]¶; Read XML filename into nested OrderedDict-s. filename defaults to; active CSX file. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:138962,Energy Efficiency,energy,energy,138962,"si4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. format_kwargs_for_input(filename, lmode=1, **kwargs)[source]¶; Function to pickle to file filename the options dictionary; kwargs. Mode lmode =2 pickles appropriate settings for; reap mode. Used to capture Python options information for; distributed (sow/reap) input files",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:139081,Energy Efficiency,energy,energy,139081,"si4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. format_kwargs_for_input(filename, lmode=1, **kwargs)[source]¶; Function to pickle to file filename the options dictionary; kwargs. Mode lmode =2 pickles appropriate settings for; reap mode. Used to capture Python options information for; distributed (sow/reap) input files",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:157825,Energy Efficiency,energy,energy,157825,"perfunctional(name, npoints, deriv)[source]¶. build_wpbesol0_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_x_functional(name)[source]¶. build_wpbesol_x_superfunctional(name, npoints, deriv)[source]¶. build_wpw92_c_superfunctional(name, npoints, deriv)[source]¶. build_ws_x_functional(name)[source]¶. build_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:158187,Energy Efficiency,energy,energy,158187,"d_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unne",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:159998,Energy Efficiency,energy,energy,159998,"ectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. write_zmat(name, dertype)[source]¶; Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. Module with functions that encode the sequence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:160300,Energy Efficiency,energy,energy,160300,"ough; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. write_zmat(name, dertype)[source]¶; Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. Module with functions that encode the sequence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:160931,Energy Efficiency,energy,energy,160931,"ence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI modu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:163970,Energy Efficiency,energy,energy,163970,"alculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_fisapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an F/ISAPT0 computation. run_fnocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation.; >>> energy('fno-ccsd(t)'). run_fnodfcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DF-CCSD(T) computation.; >>> set cc_type df; >>> energy('fno-ccsd(t)'). run_libfock(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:164134,Energy Efficiency,energy,energy,164134,"sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_fisapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an F/ISAPT0 computation. run_fnocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation.; >>> energy('fno-ccsd(t)'). run_fnodfcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DF-CCSD(T) computation.; >>> set cc_type df; >>> energy('fno-ccsd(t)'). run_libfock(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC comp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:165532,Energy Efficiency,charge,charge-transfer,165532,"ction that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166365,Energy Efficiency,energy,energy,166365,"on encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166532,Energy Efficiency,energy,energy,166532," for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166867,Energy Efficiency,energy,energy,166867,"ame, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167202,Energy Efficiency,energy,energy,167202,"revious SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradien",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167368,Energy Efficiency,energy,energy,167368,"CSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167540,Energy Efficiency,energy,energy,167540,") energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167699,Energy Efficiency,energy,energy,167699,"CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168026,Energy Efficiency,energy,energy,168026,"thm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168523,Energy Efficiency,energy,energy,168523,"ecting to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168852,Energy Efficiency,energy,energy,168852,"orithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169177,Energy Efficiency,energy,energy,169177,"gorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169339,Energy Efficiency,energy,energy,169339,"g the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169672,Energy Efficiency,energy,energy,169672,"he algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorith",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170178,Energy Efficiency,energy,energy,170178,"d or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170513,Energy Efficiency,energy,energy,170513," gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of runn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:775,Integrability,depend,dependency,775,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:3152,Integrability,wrap,wrappers,3152,"ster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. new_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. driver_util¶. parse_arbitrary_order(name)[source]¶; Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. parse_cotton_irreps(irrep, point_group)[source]¶; Function to return validated Cotton ordering index for molecular; point_group from string or integer irreducible representation irrep. aliases¶; Module with functions that call upon those in modules; proc, driver, and wrappers. Place in this file quickly defined procedures such as. aliases for complex methods; simple modifications to existing methods. fake_file11(wfn, filename='fake_file11.dat', **kwargs)[source]¶; Function to print a file filename of the old file11 format; from molecule and gradient information in wfn. New in version 0.6: wfn parameter passed explicitly. Returns:None. Parameters:; filename (string) – destination file name for file11 file; wfn (Wavefunction) – set of molecule, gradient from which to generate file11. Examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:7531,Integrability,wrap,wrapping,7531,"... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:7614,Integrability,wrap,wrap,7614,"e)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8815,Integrability,integrat,integrate,8815,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:23933,Integrability,interface,interface,23933,"es molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with ke",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:25046,Integrability,wrap,wrapper,25046,"ce]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56412,Integrability,message,message,56412,"s InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56626,Integrability,message,message,56626,"alence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56815,Integrability,message,message,56815,"t cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to Fals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:57015,Integrability,message,message,57015,"e]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:62595,Integrability,contract,contractions,62595,"ile name. max_am()[source]¶; Maximum angular momentum used in the basis set.; * @return Maximum angular momentum. max_function_per_shell()[source]¶; Compute the maximum number of basis functions contained in a shell.; * @return The max number of basis functions in a shell. max_nprimitive()[source]¶; Maximum number of primitives in a shell.; * Examines each shell and find the shell with the maximum number of primitives returns that; * number of primitives.; * @return Maximum number of primitives. molecule()[source]¶; Molecule this basis is for.; * @return Shared pointer to the molecule for this basis set. name()[source]¶; Returns the name of this basis set. nao()[source]¶; Number of atomic orbitals (Cartesian).; * @return The number of atomic orbitals (Cartesian orbitals, always). nbf()[source]¶; Number of basis functions (Spherical).; * @return The number of basis functions (Spherical, if has_puream() == true). nprimitive()[source]¶; Number of primitives.; * @return The total number of primitives in all contractions. nshell()[source]¶; Number of shells.; * @return Number of shells. nshell_on_center(i)[source]¶; Return the number of shells on a given center. print_by_level(out=None, level=2)[source]¶; Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing ; * 1: Brief summary ; * 2: Summary and contraction details ; * > 2: Full details. print_detail(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_detail_cfour(out=None)[source]¶; Returns a string in CFOUR-style of the basis (per-atom); * Format from http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.OldFormatOfAnEntryInTheGENBASFile. print_detail_gamess(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:63033,Integrability,contract,contraction,63033,"at; * number of primitives.; * @return Maximum number of primitives. molecule()[source]¶; Molecule this basis is for.; * @return Shared pointer to the molecule for this basis set. name()[source]¶; Returns the name of this basis set. nao()[source]¶; Number of atomic orbitals (Cartesian).; * @return The number of atomic orbitals (Cartesian orbitals, always). nbf()[source]¶; Number of basis functions (Spherical).; * @return The number of basis functions (Spherical, if has_puream() == true). nprimitive()[source]¶; Number of primitives.; * @return The total number of primitives in all contractions. nshell()[source]¶; Number of shells.; * @return Number of shells. nshell_on_center(i)[source]¶; Return the number of shells on a given center. print_by_level(out=None, level=2)[source]¶; Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing ; * 1: Brief summary ; * 2: Summary and contraction details ; * > 2: Full details. print_detail(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_detail_cfour(out=None)[source]¶; Returns a string in CFOUR-style of the basis (per-atom); * Format from http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.OldFormatOfAnEntryInTheGENBASFile. print_detail_gamess(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_summary(out=None)[source]¶; Prints a short string summarizing the basis set; * @param out The file stream to use for printing. Defaults to outfile. static pyconstruct(mol, key, target, fitrole='BASIS', other=None)[source]¶; Builds a BasisSet object for mol (either a qcdb.Molecule or; a string that can be instantiated into one) from basis set; sp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66802,Integrability,contract,contraction,66802,"s first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:67053,Integrability,contract,contraction,67053," @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:68770,Integrability,interface,interface,68770,"ntial for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:69586,Integrability,interface,interface,69586,"literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; geometry. Presently catches some errors of orientation that; Cfour as Cmol should properly fulfill. These are unnecessary; restrictions and can be relaxed later. transform_coordinates(coord)[source]¶. transform_coordinates2(coord)[source]¶. transform_elementlist(elem)[source]¶; Applies to elem th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:81827,Integrability,message,message,81827,"r; >>> print H2OH2O.fx(4); 2.55231135823. fxyz(atom)[source]¶; Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies); >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. fy(atom)[source]¶; y position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fy(4); 0.210645882307. fz(atom)[source]¶; z position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:93291,Integrability,rout,routine,93291,"> C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_group() to scan a given geometry; and determine if an atom is present at a given location. compute_atom_map(m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96902,Integrability,message,message,96902," when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:99839,Integrability,contract,contraction,99839,"E(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100398,Integrability,contract,contraction,100398,"). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if cont",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100473,Integrability,contract,contraction,100473,"is class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100564,Integrability,contract,contraction,100564,"sing; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. nce",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100773,Integrability,contract,contraction,100773," Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100845,Integrability,contract,contraction,100845,"m c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalizat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:100925,Integrability,contract,contraction,100925,"ll is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of prim",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:101367,Integrability,contract,contraction,101367,"l for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:101429,Integrability,contract,contraction,101429,"e). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=None)[source]¶; Print out the shell in Gamess format. set_funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:102093,Integrability,contract,contraction,102093,"malized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=None)[source]¶; Print out the shell in Gamess format. set_function_index(i)[source]¶; Set basis function index where this shell starts. df(n)[source]¶; Gives the double factorial of n. Module containing functions that, when passed a qcdb.WrappedDatabase instance; dbinstance, return an array of reaction names that are a subset of; dbinstance.hrxn.keys(). Since the full database is passed in, reactions; can be filtered by molecule characteristics, reaction names, existing; subsets, etc. The official name of the subset is specified by the function; docstring. Second line of docstring becomes tagl. genset_DDn5min(dbinstance)[source]¶; DD-5min; near-equilibrium systems also in dd. genset_HBn5m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:108492,Integrability,rout,routines,108492,"ate identity matrix. matadd(matrix1, matrix2, fac1=1.0, fac2=1.0)[source]¶; Matrix addition. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. naivemult(v, u)[source]¶; Compute by-element multiplication of vectors v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:111807,Integrability,depend,depending,111807,"mmary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114077,Integrability,depend,depend,114077,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:117348,Integrability,depend,depends,117348,"ass to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:118802,Integrability,depend,depend,118802,"¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which the orbital basis orbital; (usually the coded form of ornate) and jfit, jkfit,; rifit, and dualfit auxiliary bases can be found. add_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126485,Integrability,message,message,126485,"=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126675,Integrability,depend,dependencies,126675,"ght for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[so",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126702,Integrability,message,message,126702,"ction returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126892,Integrability,message,message,126892,"t of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:127050,Integrability,message,message,127050,"rint stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). restore()[source]¶. class InPsight(molecule)[source]¶. atoms = []¶. azimuth = 0.0",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:146019,Integrability,interface,interface,146019,"and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix +",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:146689,Integrability,message,messages,146689,"d builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:148318,Integrability,wrap,wrapper,148318," vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the parti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:157466,Integrability,interface,interface,157466,"superfunctional(name, npoints, deriv)[source]¶. build_wpbe_x_functional(name)[source]¶. build_wpbe_x_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3bj_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3mbj_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3mzero_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3zero_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol0_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_x_functional(name)[source]¶. build_wpbesol_x_superfunctional(name, npoints, deriv)[source]¶. build_wpw92_c_superfunctional(name, npoints, deriv)[source]¶. build_ws_x_functional(name)[source]¶. build_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:171000,Integrability,rout,routine,171000,"e, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from each displaced computation, and computes final result. Table Of Contents. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:435,Modifiability,config,configured,435,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:573,Modifiability,config,configured,573,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:7711,Modifiability,variab,variables,7711,"e)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:18384,Modifiability,variab,variable,18384,"e]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molec",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:19224,Modifiability,variab,variables,19224,"uto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values to external and any; cartesian external values to internal. format_molecule_for_mol2()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. format_molecule_for_molpro()[source]¶. format_molecule_for_numpy(npobj=True)[source]¶; Returns a NumPy array of the non-dummy atoms of the geometry; in Cartesian coordinates in Angstroms with element encoded as; atomic number. If npobj is False, returns representation of; NumPy array. format_molecule_for_nwchem()[source]¶. format_molecule_for_orca()[source]¶; Format the molecule into an orca xyz format. format_molecule_for_psi4()[source]¶; Returns string of m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:19301,Modifiability,variab,variables,19301,"uto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values to external and any; cartesian external values to internal. format_molecule_for_mol2()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. format_molecule_for_molpro()[source]¶. format_molecule_for_numpy(npobj=True)[source]¶; Returns a NumPy array of the non-dummy atoms of the geometry; in Cartesian coordinates in Angstroms with element encoded as; atomic number. If npobj is False, returns representation of; NumPy array. format_molecule_for_nwchem()[source]¶. format_molecule_for_orca()[source]¶; Format the molecule into an orca xyz format. format_molecule_for_psi4()[source]¶; Returns string of m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:23884,Modifiability,extend,extended,23884,"es molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with ke",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:41896,Modifiability,variab,variables,41896,"s are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:51522,Modifiability,variab,variables,51522,"[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_elaborate(e=None, pe=None, pbe=None, pce=None, extrema=True)[source]¶. oxcom(lst)[source]¶; Returns gramatical comma separated string of lst. string_contrast(ss)[source]¶; From an array of strings, ss, returns maximum common prefix; string, maximum common suffix string, and array of middles. File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate entries. There is no guarantee of which; duplicate entry is dropped. useful()[source]¶. find_start(lines, start_str, reverse=True)[source]¶; Find the start of a block, iterate backwards by default,; Usually the last one is wanted; If not found, return -1. harvest(p4Mol, orca_out, **largs)[source]¶; Harvest variables, gradient, and the molecule from the output and other; files. harvest_coupled_cluster(lines, psivar)[source]¶; Harvest coupled cluster results; WARNING: Canonical and DLPNO print the coupled cluster results differently. harvest_dipole(lines, psivar)[source]¶; Harvest the dipole, and return as a tuple (x, y, z); Multiple different dipole moments can be output if post-HF calculations are; run and their dipoles are requested resulting in highly similar blocks.; It by default collects the last which appears to always be the one requested; TODO: collect all the different types of dipole moments. harvest_engrad(engrad)[source]¶; Parse the engrad file for the gradient. harvest_molecule_from_outfile(lines)[source]¶; Return a molecule of the last geometry. harvest_mp2(lines, psivar)[source]¶; Harvest the MP2 results. harvest_scf_from_outfile(lines, psivar)[source]¶; Harvest SCF results from the SCF section of the output file. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56522,Modifiability,variab,variables,56522,"basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:59479,Modifiability,config,configured,59479,"t shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compute_phi(phi_ao, x, y, z)[source]¶; Returns the values of the basis functions at a point. concatenate(b)[source]¶; Concatenates two basis sets together into a new basis without; reordering anything. Unless you know what you’re doing, you should; use the ‘+’ operator instead of this method. Appears defunct. classmethod construct(parser, mol, role, deffit=None, basstrings=None)[source]¶; Returns a new BasisSet object configured from the mol; Molecule object for role (generally a Psi4 keyword: BASIS,; DF_BASIS_SCF, etc.). Fails utterly if a basis has not been set for; role for every atom in mol, unless deffit is set (JFIT,; JKFIT, or RIFIT), whereupon empty atoms are assigned to role; from the BasisFamily. This function is significantly; re-worked from its libmints analog. constructor_basisset_center(bs, center)[source]¶. Creates a new basis set object for an atom, from an existing basis set; bs: the basis set to copy data from; center: the atom in bs to copy over. constructor_role_mol_shellmap(role, mol, shell_map)[source]¶; The most commonly used constructor. Extracts basis set name for role; from each atom of mol, looks up basis and role entries in the; shell_map dictionary, retrieves the GaussianShell objects and returns; the BasisSet. constructor_zero_ao_basis()[source]¶; Constructs a zero AO basis set. exp_ao = [[], [], [], [], [], []]¶. export_for_libmints(role)[source]¶; From complete Ba",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:69537,Modifiability,extend,extended,69537,"literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; geometry. Presently catches some errors of orientation that; Cfour as Cmol should properly fulfill. These are unnecessary; restrictions and can be relaxed later. transform_coordinates(coord)[source]¶. transform_coordinates2(coord)[source]¶. transform_elementlist(elem)[source]¶; Applies to elem th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:82006,Modifiability,variab,variable,82006," dummies); >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. fy(atom)[source]¶; y position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fy(4); 0.210645882307. fz(atom)[source]¶; z position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:82190,Modifiability,variab,variable,82190,"cludes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:83668,Modifiability,variab,variable,83668,"t H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). (0-indexed); >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶; Returns the maximum number of equivalent atoms. molecular_charge()[source]¶; Gets the molecular charge; >>> print H2OH2O.molecular_charge(); -2. move_to_com()[source]¶; Moves molecule to center of mass. multiplicity()[source]¶; Get the multiplicity (defined as 2Ms + 1); >>> print H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:92058,Modifiability,variab,variable,92058,"t_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:92108,Modifiability,variab,variables,92108,"t_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:93227,Modifiability,variab,variables,93227,"source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:114058,Modifiability,variab,variables,114058,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:116405,Modifiability,variab,variables,116405,"e]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:117605,Modifiability,variab,variable,117605,"validate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; P",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:117701,Modifiability,variab,variable,117701,"ource]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:118783,Modifiability,variab,variables,118783,"¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which the orbital basis orbital; (usually the coded form of ornate) and jfit, jkfit,; rifit, and dualfit auxiliary bases can be found. add_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:124845,Modifiability,flexible,flexible,124845,"n the desired order. val(kw)[source]¶. p4util¶. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class Table(rows=(), row_label_width=10, row_label_precision=4, cols=(), width=16, precision=10)[source]¶; Class defining a flexible Table object for storing data. absolute_to_relative(Factor=627.5095)[source]¶; Function to shift the data of each column of the Table object; such that the lowest value is zero. A scaling factor of Factor is applied. copy()[source]¶; Function to return a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:135472,Modifiability,variab,variables,135472,"‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convention.; Arguments:; @arg filename full path to file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron propert",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:161465,Modifiability,config,configuration,161465,"[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:161637,Modifiability,config,configuration,161637,"for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[sour",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:258,Performance,optimiz,optimize,258,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8111,Performance,optimiz,optimizations,8111,"Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8953,Performance,perform,perform,8953,"ing available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:16469,Performance,perform,performs,16469,"t symmetry operation. d is; hardwired to 5x5 since the H irrep in Ih is 5 dimensional. E()[source]¶; Set equal to the identity. SymmetryOperation()[source]¶; Cast SymRep to SymmetryOperation. c2_x()[source]¶; Set equal to C2 about the x axis. c2_y()[source]¶; Set equal to C2 about the y axis. c2_z()[source]¶; Set equal to C2 about the z axis. constructor_order(i)[source]¶; Initialize order only. constructor_symmetryoperation(so)[source]¶; Initialize from 3x3 SymmetryOperation. i()[source]¶; Set equal to an inversion. operate(r)[source]¶; This operates on this with r (i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. set_dim(i)[source]¶; Set the dimension of d. sigma_h()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. class SymmetryOperation(*args)[source]¶; The SymmetryOperation class provides a 3 by 3 matrix; representation of a symmetry operation, such as a rotation or reflection. E()[source]¶; Set equal to E. analyze_d()[source]¶. bit()[source]¶; Get the bit value. c2_x()[source]¶; Set equal to C2 about the x axis. c2_y()[source]¶; Set equal to C2 about the y axis. c2_z()[source]¶; Set equal to C2 about the z axis. constructor_symmetryoperation(so)[source]¶. i()[source]¶; Set equal to an inversion. operate(r)[source]¶; This operates on this with r (i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. sigma_xy()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:17512,Performance,perform,performs,17512,"urce]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. class SymmetryOperation(*args)[source]¶; The SymmetryOperation class provides a 3 by 3 matrix; representation of a symmetry operation, such as a rotation or reflection. E()[source]¶; Set equal to E. analyze_d()[source]¶. bit()[source]¶; Get the bit value. c2_x()[source]¶; Set equal to C2 about the x axis. c2_y()[source]¶; Set equal to C2 about the y axis. c2_z()[source]¶; Set equal to C2 about the z axis. constructor_symmetryoperation(so)[source]¶. i()[source]¶; Set equal to an inversion. operate(r)[source]¶; This operates on this with r (i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. sigma_xy()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:27996,Performance,load,loadfrompickle,27996," a Molecule from entries in dictionary jajodic extracted; from JAINDX and JOBARC. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for cfour. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since explicitly set Cfour module keyword; values will always be used preferentially to these inferred from; psi4, the ‘clobber’ property is set to False. class DB4(pythonpath=None, loadfrompickle=False, path=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. make_dhdft_Figure_1()[source]¶; Plot all the graphics needed for the grey bars plot; in Fig. 1 of DHDFT. make_dhdft_Figure_2()[source]¶; Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT.; Note that benchmark set as reminder, not necessity, since default. make_dhdft_Table_I()[source]¶; Generate the in-manuscript summary slat table for DHDFT. make_dhdft_Table_II()[source]¶; Generate the in-manuscript CP slat table for DHDFT. make_dhdft_Table_III()[source]¶; Generate the in-manuscript unCP slat table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:29620,Performance,load,loadfrompickle,29620,"at table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. make_pt2_Figure_3()[source]¶; Plot all the graphics needed for the calendar grey bars plot; in Fig. 3 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. plot_dhdft_flats()[source]¶; Generate pieces for grey bars figure for DH-DFT paper. plot_dhdft_modelchems()[source]¶. plot_minn_modelchems()[source]¶. class Database(dbnamelist, dbse=None, pythonpath=None, loadfrompickle=False, path=None)[source]¶; Collection for handling single or multiple qcdb.WrappedDatabase objects.; Particularly, unifying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchem",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32966,Performance,load,loads,32966,"t_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); X",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:33214,Performance,load,loads,33214,"ing the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:33593,Performance,load,loads,33593,"tionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:33745,Performance,load,loads,33745,"ey needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:39818,Performance,load,loads,39818,"delchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. promote_Subset(name=None)[source]¶; Examine component databases and elevate subset name not necessarily; present for all component databases to a subset for the self. When name; is None, promotes all subsets found for component databases. Also promotes; entirety of each component database as a subset with name of component; database dbse in lowercase. sset = None¶; subset assembly pattern; >>> print asdf.sset.keys(); XXXX. table_merge_abbr(plotpath, subjoin)[source]¶; Specialization of table_generic into table with minimal statistics; (three S22 and three overall) plus embedded slat diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:46702,Performance,load,loaded,46702," define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:120950,Performance,load,load,120950,"default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the default parameters for functional; func. When mode is ‘psi4’, returns a tuple of arguments suitable for building; a Dispersion object with dashlvl parameters for functional func.; There are four computational d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:144537,Performance,load,load,144537,"d or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the im",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:158199,Performance,optimiz,optimize,158199,"d_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unne",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:160008,Performance,optimiz,optimize,160008,"ectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. write_zmat(name, dertype)[source]¶; Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. Module with functions that encode the sequence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:162251,Performance,optimiz,optimized,162251,"t calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:162412,Performance,optimiz,optimized,162412,"and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:162573,Performance,optimiz,optimized,162573,"n, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:165293,Performance,optimiz,optimized,165293,"calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166413,Performance,perform,performance,166413,"on encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166580,Performance,perform,performance,166580," for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166750,Performance,perform,performance,166750,"y (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166915,Performance,perform,performance,166915,"ame, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167091,Performance,perform,performance,167091,"h oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167250,Performance,perform,performance,167250,"revious SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradien",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167416,Performance,perform,performance,167416,"CSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167588,Performance,perform,performance,167588,") energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167747,Performance,perform,performance,167747,"CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:167917,Performance,perform,performance,167917,"CSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168074,Performance,perform,performance,168074,"thm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168242,Performance,perform,performance,168242,"ithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168410,Performance,perform,performance,168410,"or a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168571,Performance,perform,performance,168571,"ecting to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168743,Performance,perform,performance,168743,"ecified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:168900,Performance,perform,performance,168900,"orithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169068,Performance,perform,performance,169068,"thm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169225,Performance,perform,performance,169225,"gorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169387,Performance,perform,performance,169387,"g the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169560,Performance,perform,performance,169560,"algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169720,Performance,perform,performance,169720,"he algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorith",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169891,Performance,perform,performance,169891,"lgorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170062,Performance,perform,performance,170062,"thm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170226,Performance,perform,performance,170226,"d or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170401,Performance,perform,performance,170401,"rformance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170561,Performance,perform,performance,170561," gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of runn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170732,Performance,perform,performance,170732,"ergy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:511,Safety,avoid,avoid,511,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:21834,Safety,detect,detected,21834,"Q-Chem.; For ghost atoms, prints Gh as elemental symbol, with expectation; that element identity will be established in mixed basis section.; For ghost atoms when mixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set cont",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:22462,Safety,detect,detected,22462,"ensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to sup",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:25057,Safety,avoid,avoid,25057,"ce]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:83216,Safety,detect,detected,83216," in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). (0-indexed); >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:148261,Safety,recover,recovery,148261," vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the parti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:2953,Security,validat,validated,2953," size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. new_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. driver_util¶. parse_arbitrary_order(name)[source]¶; Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. parse_cotton_irreps(irrep, point_group)[source]¶; Function to return validated Cotton ordering index for molecular; point_group from string or integer irreducible representation irrep. aliases¶; Module with functions that call upon those in modules; proc, driver, and wrappers. Place in this file quickly defined procedures such as. aliases for complex methods; simple modifications to existing methods. fake_file11(wfn, filename='fake_file11.dat', **kwargs)[source]¶; Function to print a file filename of the old file11 format; from molecule and gradient information in wfn. New in version 0.6: wfn parameter passed explicitly. Returns:None. Parameters:; filename (string) – destination file name for file11 file; wfn (Wavefunction) – set of molecule, gradient from which to generate file11. Examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:4698,Security,access,access,4698,">> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. inputparser¶; Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. basname(name)[source]¶; Imitates BasisSet.make_filename() without the gbs extension. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name? { ... }. process_cfour_command(matchobj)[source]¶; Function to process match of cfour name? { ... }. process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_from_file_command(matchobj)[source]¶; Function that pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:5864,Security,validat,validate,5864,")[source]¶; Imitates BasisSet.make_filename() without the gbs extension. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name? { ... }. process_cfour_command(matchobj)[source]¶; Function to process match of cfour name? { ... }. process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_from_file_command(matchobj)[source]¶; Function that process a match of from_file in molecule block. process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; raw_input is printed to the output file unless print_level =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. process_literal_blocks(matchobj)[source]¶; Function to process match of literals_psi4_yo-.... process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32688,Security,access,access,32688,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32735,Security,access,access,32735,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:33379,Security,validat,validated,33379,"_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:35029,Security,access,accessible,35029,"source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36022,Security,access,accessible,36022,"format; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36991,Security,access,accessible,36991,"accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pd",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38063,Security,access,access,38063,"requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File exten",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38150,Security,access,accessible,38150,"an absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved fi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38213,Security,access,accessible,38213,"an absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved fi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:39042,Security,access,accessible,39042,"t of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. promote_Subset(name=None)[source]¶; Examine component databases and elevate subset name not necessarily; present for all component databases to a subset for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:44332,Security,access,accessible,44332,"efault', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and base",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:45802,Security,validat,validation,45802,"turned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:45851,Security,access,accessors,45851,"turned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:48990,Security,validat,validated,48990,"(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modname function; funcname. Module search path can be prepended with pythonpath. load_qcdata_byproject(project, pythonpath=None)[source]¶; Loads qcdb.ReactionDatums from standard location for project; :module dbse_project and function load_project. Module search path; can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:58236,Security,access,accessed,58236," portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*args)[source]¶; Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). LIBINT_MAX_AM = 6¶. add(b)[source]¶; Adds this plus another basis set and returns the result.; Equivalent to the ‘+’ operator. Appears defunct. ao_to_shell(i)[source]¶; Given a Cartesian function (AO) number what shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compute_phi(phi_ao, x, y, z)[source]¶; Returns the values of the basis functions at a point. concatenate(b)[source]¶; Concatenates tw",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:60564,Security,hash,hash,60564,"Psi4 keyword: BASIS,; DF_BASIS_SCF, etc.). Fails utterly if a basis has not been set for; role for every atom in mol, unless deffit is set (JFIT,; JKFIT, or RIFIT), whereupon empty atoms are assigned to role; from the BasisFamily. This function is significantly; re-worked from its libmints analog. constructor_basisset_center(bs, center)[source]¶. Creates a new basis set object for an atom, from an existing basis set; bs: the basis set to copy data from; center: the atom in bs to copy over. constructor_role_mol_shellmap(role, mol, shell_map)[source]¶; The most commonly used constructor. Extracts basis set name for role; from each atom of mol, looks up basis and role entries in the; shell_map dictionary, retrieves the GaussianShell objects and returns; the BasisSet. constructor_zero_ao_basis()[source]¶; Constructs a zero AO basis set. exp_ao = [[], [], [], [], [], []]¶. export_for_libmints(role)[source]¶; From complete BasisSet object, returns array where; triplets of elements are each unique atom label, the hash; of the string shells entry in gbs format and the; shells entry in gbs format for that label. This packaging is; intended for return to libmints BasisSet::pyconstruct for; instantiation of a libmints BasisSet clone of self. function_to_center(i)[source]¶; Given a function what is its atomic center; * @param i Function number; * @return The atomic center for the i’th function. function_to_shell(i)[source]¶; Given a function number what shell does it correspond to. get_ao_sorted_list()[source]¶; Returns the vector of sorted shell list. Defunct. get_ao_sorted_shell(i)[source]¶; Returns the value of the sorted shell list. Defunct. has_puream()[source]¶; Spherical harmonics?; * @return true if using spherical harmonics. initialize_singletons()[source]¶; Initialize singleton values that are shared by all basis set objects. initialized_shared = False¶. l = 5¶. static make_filename(name)[source]¶; Converts basis set name to a compatible filename.; * @param basisname ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:67319,Security,validat,validate,67319,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:106855,Security,access,accessory,106855,"urce]¶; Reads binary files JOBARC and JAINDX and returns contents; of each record in reclabelarray. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_cdsgroup_options()[source]¶. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. Elemental masses (most common isotope), symbols, and atomic numbers from psi4.; File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagonalize3x3symmat(M)[source]¶; Given an real symmetric 3x3 matrix M, compute the eigenvalues. distance(v, u)[source]¶; Compute the distance between points defined by vectors v and u. dot(v, u)[source]¶; Compute dot product of vectors v and u. identity(m)[source]¶; Create identity matrix. matadd(matrix1, matrix2, fac1=1.0, fac2=1.0)[source]¶; Matrix addition. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. naivemult(v, u)[source]¶; Compute by-element multiplication of vectors v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vect",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:115872,Security,hash,hash,115872,"l (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent Numbe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:115969,Security,hash,hash,115969,"this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everythi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:116044,Security,hash,hash,116044,"s_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:116128,Security,hash,hash,116128,"(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:120749,Security,validat,validate,120749,"add basis fit as associated helper basis; member dualfit to a BasisFamily object. add_jfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jfit to a BasisFamily object. add_jfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132000,Security,validat,validate,132000,"0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when strin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:144108,Security,validat,validate,144108,"mily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method recei",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:147208,Security,validat,validated,147208,"not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC recor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:158466,Security,access,accessible,158466," Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:28341,Testability,benchmark,benchmark,28341,"_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since explicitly set Cfour module keyword; values will always be used preferentially to these inferred from; psi4, the ‘clobber’ property is set to False. class DB4(pythonpath=None, loadfrompickle=False, path=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. make_dhdft_Figure_1()[source]¶; Plot all the graphics needed for the grey bars plot; in Fig. 1 of DHDFT. make_dhdft_Figure_2()[source]¶; Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT.; Note that benchmark set as reminder, not necessity, since default. make_dhdft_Table_I()[source]¶; Generate the in-manuscript summary slat table for DHDFT. make_dhdft_Table_II()[source]¶; Generate the in-manuscript CP slat table for DHDFT. make_dhdft_Table_III()[source]¶; Generate the in-manuscript unCP slat table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. make_pt2_Figure_3()[source]¶; Plot all the graphics needed for the calendar grey bars plot; in Fig. 3 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:30651,Testability,benchmark,benchmark,30651,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:30855,Testability,benchmark,benchmark,30855,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:30962,Testability,benchmark,benchmark,30962,"se keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31177,Testability,benchmark,benchmark,31177,"se keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31701,Testability,benchmark,benchmark,31701,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31859,Testability,benchmark,benchmark,31859,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31873,Testability,benchmark,benchmark,31873,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32326,Testability,benchmark,benchmark,32326,"l chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32393,Testability,benchmark,benchmark,32393,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32533,Testability,benchmark,benchmark,32533,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32742,Testability,benchmark,benchmark,32742,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:34346,Testability,benchmark,benchmark,34346,"project(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:34522,Testability,benchmark,benchmark,34522,"ad_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, save",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:34764,Testability,benchmark,benchmark,34764,"ad_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, save",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:35558,Testability,benchmark,benchmark,35558," bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:35805,Testability,benchmark,benchmark,35805," bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36454,Testability,benchmark,benchmark,36454,"tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', ss",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36740,Testability,benchmark,benchmark,36740,"csformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single model",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37466,Testability,benchmark,benchmark,37466,"e, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=Fal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37696,Testability,benchmark,benchmark,37696,"; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemist",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37915,Testability,benchmark,benchmark,37915,"or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spect",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38252,Testability,benchmark,benchmark,38252,"lable (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram inst",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38673,Testability,benchmark,benchmark,38673,"tle='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38783,Testability,benchmark,benchmark,38783,"t xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:40966,Testability,benchmark,benchmark,40966,"subset with name of component; database dbse in lowercase. sset = None¶; subset assembly pattern; >>> print asdf.sset.keys(); XXXX. table_merge_abbr(plotpath, subjoin)[source]¶; Specialization of table_generic into table with minimal statistics; (three S22 and three overall) plus embedded slat diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], iali",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:41519,Testability,benchmark,benchmark,41519,"diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:42065,Testability,benchmark,benchmark,42065,"] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:42461,Testability,benchmark,benchmark,42461," if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43334,Testability,benchmark,benchmark,43334,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43505,Testability,benchmark,benchmark,43505,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43729,Testability,benchmark,benchmark,43729,"es and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:44128,Testability,benchmark,benchmark,44128," Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:46853,Testability,benchmark,benchmark,46853,"error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:46928,Testability,benchmark,benchmark,46928,"error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:46965,Testability,benchmark,benchmark,46965,"ts and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47129,Testability,benchmark,benchmark,47129,"ts and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47378,Testability,benchmark,benchmark,47378,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47570,Testability,benchmark,benchmark,47570,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:50168,Testability,benchmark,benchmark,50168,"subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_elaborate(e=None, pe=None, pbe=None, pce=None, extrema=True)[source]¶. oxcom(lst)[source]¶; Returns gramatical comma separated string of lst. string_contrast(ss)[source]¶; From an array of strings, ss, returns maximum common prefix; string, maximum common suffix string, and array of middles. File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate ent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66337,Testability,test,test,66337,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66469,Testability,test,test,66469,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66491,Testability,benchmark,benchmarking,66491,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66520,Testability,benchmark,benchmark,66520,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:67376,Testability,test,testing,67376,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:95969,Testability,test,test,95969,"ram phi double : magnitude of rotation in rad; @param Sn bool : if true, then also reflect in plane through origin and perpendicular to rotation; @returns SharedMatrix with rotated points (rows). matrix_3d_rotation_Cn(coord, axis, reflect, tol=1e-08, max_Cn_to_check=-1)[source]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96311,Testability,test,test,96311,"er rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; availa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96549,Testability,test,test,96549,"olen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(modu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96938,Testability,test,test,96938," on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126823,Testability,test,test,126823,"eq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function retur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:131952,Testability,test,test,131952,", 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132305,Testability,test,test,132305," color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132535,Testability,test,test,132535,"()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132877,Testability,test,test,132877,"match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133115,Testability,test,test,133115,"cted, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133369,Testability,test,test,133369,"[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133708,Testability,test,test,133708,"match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; conventi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:146414,Testability,test,tests,146414," a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:3246,Usability,simpl,simple,3246,"ll possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. new_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. driver_util¶. parse_arbitrary_order(name)[source]¶; Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. parse_cotton_irreps(irrep, point_group)[source]¶; Function to return validated Cotton ordering index for molecular; point_group from string or integer irreducible representation irrep. aliases¶; Module with functions that call upon those in modules; proc, driver, and wrappers. Place in this file quickly defined procedures such as. aliases for complex methods; simple modifications to existing methods. fake_file11(wfn, filename='fake_file11.dat', **kwargs)[source]¶; Function to print a file filename of the old file11 format; from molecule and gradient information in wfn. New in version 0.6: wfn parameter passed explicitly. Returns:None. Parameters:; filename (string) – destination file name for file11 file; wfn (Wavefunction) – set of molecule, gradient from which to generate file11. Examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferenti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8533,Usability,simpl,simple,8533,"quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:14360,Usability,simpl,simple,14360,"]¶; Returns the order of the group. p(x1, x2, i=None)[source]¶; Returns the element (x1, x2) of the i’th representation matrix.; Or Returns the character for the x1’th contribution to the x2’th; representation matrix. symbol()[source]¶; Returns the Mulliken symbol for the irrep. symbol_ns()[source]¶; Returns the Mulliken symbol for the irrep without special; characters. class PointGroup(*args)[source]¶; The PointGroup class is really a place holder for a CharacterTable.; It contains a string representation of the Schoenflies symbol of a; point group, a frame of reference for the symmetry operation; transformation matrices, and a point of origin. The origin is not; respected by the symmetry operations, so if you want to use a point; group with a nonzero origin, first translate all your coordinates to; the origin and then set the origin to zero. bits()[source]¶; Returns the bitwise representation of the point group. static bits_to_basic_name(bits)[source]¶; From bit representation of point group, returns string of simple; (non-directional) Schoenflies symbol. static bits_to_full_name(bits)[source]¶. char_table()[source]¶; Returns the CharacterTable for this point group. constructor_bits(bits)[source]¶; Using the bitwise representation constructor the point group; object. constructor_bits_origin(bits, origin)[source]¶; Using the bitwise representation constructor the point group; object. constructor_schoenflies(s)[source]¶; This constructor takes a string containing the Schoenflies; symbol of the point group as its only argument. constructor_schoenflies_origin(s, origin)[source]¶; Like the above, but this constructor also takes a point of; origin as an argument. static full_name_to_bits(pg)[source]¶. origin()[source]¶; Returns the origin of the symmetry frame. set_symbol(sym)[source]¶; Sets (or resets) the Schoenflies symbol. symbol()[source]¶; Returns the Schoenflies symbol for this point group. class SymRep(*args)[source]¶; The SymRep class provides an n dimensional ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:53372,Usability,clear,clear,53372,"nes, psivar)[source]¶; Harvest SCF results from the SCF section of the output file. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for orca. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for orca. While deliberately requested pieces,; generally orca__orca_deriv_level and orca__orca_calc_level,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, can be countermanded by keywords in input file; (‘clobber’ set to False). Occasionally, we want these pieces to actually; overcome keywords in input file (‘superclobber’ set to True). orca_gradient_list()[source]¶; Return an array of Orca methods with analytical gradients.; Appended to procedures[‘gradient’]. orca_list()[source]¶; Return an array of Orca methods with energies. Appended; to procedures[‘energy’]. class OrderedDict(*args, **kwds)[source]¶; Dictionary that remembers insertion order. clear() → None. Remove all items from od.[source]¶. copy() → a shallow copy of od[source]¶. classmethod fromkeys(S[, v]) → New ordered dictionary with keys from S[source]¶; and values equal to v (which defaults to None). items() → list of (key, value) pairs in od[source]¶. iteritems()[source]¶; od.iteritems -> an iterator over the (key, value) items in od. iterkeys() → an iterator over the keys in od[source]¶. itervalues()[source]¶; od.itervalues -> an iterator over the values in od. keys() → list of keys in od[source]¶. pop(k[, d]) → v, remove specified key and return the corresponding value.[source]¶; If key is not found, d is returned if given, otherwise KeyError is raised. popitem() → (k, v), return and remove a (key, value) pair.[source]¶; Pairs are returned in LIFO order if last is true or FIFO order if false. setdefault(k[, d]) → od.get(k,d), also set od[k]=d if k not in od[source]¶. update(E, **F) → None. Update od from dict/iterable E and F.[source]¶; If E is a dict instance, does: f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:76484,Usability,clear,clear,76484,"s at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Distances (Angstroms); [1] [2] [3] [4] [5] [6]; [1] 0.00000; [2] 0.95711 0.00000; [3] 0.96391 1.51726 0.00000; [4] 2.91042 3.34878 1.95159 0.00",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:93257,Usability,clear,cleared,93257,"> C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_group() to scan a given geometry; and determine if an atom is present at a given location. compute_atom_map(m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:112182,Usability,simpl,simply,112182,"me pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:116448,Usability,simpl,simplifying,116448,"e]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:116809,Usability,simpl,simply,116809,"]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:138110,Usability,simpl,simply,138110,"D’ line to screen.; Used by util.compare_values() family when functions pass. xml2dict(filename=None)[source]¶; Read XML filename into nested OrderedDict-s. filename defaults to; active CSX file. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about inde",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:163001,Usability,simpl,simple,163001,"n encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_fisapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an F/ISAPT0 computation. run_fnocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation.; >>> energy('fno-ccsd(t)'). run_fnodfcc(name, **kwargs)[source]¶; Fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:165965,Usability,simpl,simple,165965,"ence from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Fun",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:885,Availability,error,errors,885,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:1377,Availability,fault,faulty,1377,"eal pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule obje",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:7972,Availability,avail,available,7972,"Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:18143,Availability,fault,faulty,18143,"i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. sigma_xy()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:21885,Availability,avail,available,21885,"lemental symbol, with expectation; that element identity will be established in mixed basis section.; For ghost atoms when mixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:21954,Availability,avail,available,21954,"l be established in mixed basis section.; For ghost atoms when mixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:22513,Availability,avail,available,22513,"ystem(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:22582,Availability,avail,available,22582,"em. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:30786,Availability,error,error,30786,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:30873,Availability,avail,available,30873,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:31125,Availability,error,errors,31125,"se keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:31319,Availability,error,error,31319,"ts in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32289,Availability,avail,available,32289,"bases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.Rea",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:34203,Availability,avail,available,34203,", path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:35332,Availability,avail,available,35332,"). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:35730,Availability,error,errors,35730," bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:35886,Availability,error,errors,35886,"atistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:36329,Availability,avail,available,36329," them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:36665,Availability,error,errors,36665,"csformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single model",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37294,Availability,avail,available,37294,"structions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbench",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37660,Availability,error,errors,37660,"; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemist",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37856,Availability,avail,available,37856,"oring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform spe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38562,Availability,error,errors,38562,"tle='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:39347,Availability,avail,available,39347,"ue, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. promote_Subset(name=None)[source]¶; Examine component databases and elevate subset name not necessarily; present for all component databases to a subset for the self. When name; is None, promotes all subsets found for component databases. Also promotes; entirety of each component database as a subset with name of component; database dbse in lowercase. sset = None¶; subset assembly pattern; >>> print asdf.sset.k",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:42383,Availability,error,errors,42383," if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:42643,Availability,error,error,42643,"clusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:43476,Availability,error,errors,43476,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:43543,Availability,error,error,43543,"eme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:43711,Availability,error,error,43711,"s; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:44011,Availability,error,errors,44011," Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:44637,Availability,avail,available,44637,"loninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:45895,Availability,error,error,45895,"turned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47100,Availability,error,errors,47100,"ts and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47167,Availability,error,error,47167,"'kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47335,Availability,error,error,47335,"value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47523,Availability,error,error,47523,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47608,Availability,error,error,47608,"el chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modname function; funcname. Module search path can be prepended with pythonpath. load_qcdata_byproject(project, pythonpath=None)[source]¶; Loads qcdb.ReactionDatums from standard location for project; :mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:49605,Availability,error,error,49605,"ythonpath=None)[source]¶; Loads qcdb.ReactionDatums from standard location for project; :module dbse_project and function load_project. Module search path; can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaT",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:49688,Availability,error,error,49688,":module dbse_project and function load_project. Module search path; can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form Or",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:49765,Availability,error,error,49765,"ended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:50547,Availability,error,error,50547,"ce]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_elaborate(e=None, pe=None, pbe=None, pce=None, extrema=True)[source]¶. oxcom(lst)[source]¶; Returns gramatical comma separated string of lst. string_contrast(ss)[source]¶; From an array of strings, ss, returns maximum common prefix; string, maximum common suffix string, and array of middles. File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate entries. There is no guarantee of which; duplicate entry is dropped. useful()[source]¶. find_start(lines, start_str, reverse=True)[source]¶; Find the start of a block, iterate backwards by default,; Usually the last one is wanted; If not found, return -1. harvest(p4Mol, orca_out, **largs)[source]¶; Harvest variables, gradient, and the molecule from the",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:55330,Availability,down,down,55330,"urce]¶; If E is a dict instance, does: for k in E: od[k] = E[k]; If E has a .keys() method, does: for k in E.keys(): od[k] = E[k]; Or if E is an iterable of items, does: for k, v in E: od[k] = v; In either case, this is followed by: for k, v in F.items(): od[k] = v. values() → list of values in od[source]¶. viewitems() → a set-like object providing a view on od's items[source]¶. viewkeys() → a set-like object providing a view on od's keys[source]¶. viewvalues() → an object providing a view on od's values[source]¶. Parent classes for quantum chemistry program input and output file; formats. class InputFormat(mem, mtd, bas, mol, sys, cast)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. class InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:55808,Availability,down,down,55808,"providing a view on od's values[source]¶. Parent classes for quantum chemistry program input and output file; formats. class InputFormat(mem, mtd, bas, mol, sys, cast)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. class InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error me",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56406,Availability,error,error,56406,"s InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56676,Availability,error,error,56676,"alence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56809,Availability,error,error,56809,"t cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to Fals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:57009,Availability,error,error,57009,"e]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:58094,Availability,checkpoint,checkpoint,58094,"file(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*args)[source]¶; Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). LIBINT_MAX_AM = 6¶. add(b)[source]¶; Adds this plus another basis set and returns the result.; Equivalent to the ‘+’ operator. Appears defunct. ao_to_shell(i)[source]¶; Given a Cartesian function (AO) number what shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:58152,Availability,checkpoint,checkpoint,58152," portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*args)[source]¶; Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). LIBINT_MAX_AM = 6¶. add(b)[source]¶; Adds this plus another basis set and returns the result.; Equivalent to the ‘+’ operator. Appears defunct. ao_to_shell(i)[source]¶; Given a Cartesian function (AO) number what shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compute_phi(phi_ao, x, y, z)[source]¶; Returns the values of the basis functions at a point. concatenate(b)[source]¶; Concatenates tw",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:67469,Availability,error,error,67469,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:68071,Availability,error,error,68071,"tion; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:70324,Availability,error,errors,70324,"cified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; geometry. Presently catches some errors of orientation that; Cfour as Cmol should properly fulfill. These are unnecessary; restrictions and can be relaxed later. transform_coordinates(coord)[source]¶. transform_coordinates2(coord)[source]¶. transform_elementlist(elem)[source]¶; Applies to elem the transformation appropriate to bring a; list of atomic numbers in molChangeable orientation into; molPermanent orientation. In particular, applies a row exchange; to place it in the atom ordering. transform_gradient(arr)[source]¶; Applies to arr the transformation appropriate to bring a; gradient in molChangeable orientation into molPermanent; orientation. In particular, applies a rotation to place it; in the inertial frame, a column exchange and phasing to place; it in the axis system, a row exchange to place it in the atom; ordering, and a rotation to remove it from the inertial frame. transform_vector(vec)[source]¶; Applies to vec the transformation appropriate to bring a; vector in molChangeable orientation into molPermanent; orientation. In ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:75540,Availability,toler,tolerance,75540,"1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:81821,Availability,error,error,81821,"r; >>> print H2OH2O.fx(4); 2.55231135823. fxyz(atom)[source]¶; Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies); >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. fy(atom)[source]¶; y position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fy(4); 0.210645882307. fz(atom)[source]¶; z position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:89631,Availability,checkpoint,checkpoint,89631,"pgname)[source]¶; Override symmetry from outside the molecule string. rotate(R)[source]¶; Rotates the molecule using rotation matrix R.; >>> H2OH2O.rotate([[0,-1,0],[-1,0,0],[0,0,1]]). rotate_full(R)[source]¶; Rotates the full molecule using rotation matrix R.; >>> H2OH2O.rotate_full([[0,-1,0],[-1,0,0],[0,0,1]]). rotational_constants(tol=1e-08)[source]¶; Compute the rotational constants and return them in wavenumbers. rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. save_string_xyz(save_ghosts=True)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; _; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. save_to_checkpoint(chkpt, prefix='')[source]¶; NYI Save information to checkpoint file; (method name in libmints is save_to_chkpt). save_xyz(filename, save_ghosts=True)[source]¶; Save an XYZ file.; >>> H2OH2O.save_xyz('h2o.xyz'). schoenflies_symbol()[source]¶; Returns the Schoenflies symbol. set_active_fragment(fr)[source]¶; Tags fragment index fr as composed of real atoms. set_active_fragments(reals)[source]¶; Tags the fragments in array reals as composed of real atoms. set_basis_all_atoms(name, role='BASIS')[source]¶; Assigns basis name to all atoms. set_basis_by_label(label, name, role='BASIS')[source]¶; Assigns basis name to all atoms with label. set_basis_by_number(number, name, role='BASIS')[source]¶; Assigns basis name to atom number number (0-indexed, excludes dummies). set_basis_by_symbol(symbol, name, role='BASIS')[source]¶; Assigns basis name to all symbol atoms. set_com_fixed(_fix=True)[source]¶; NYI Fix the center of mass at its current frame.; Not used in libmints so not implemented. set_full_geometry(geom)[source]¶; Sets the full geom",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:95933,Availability,failure,failure,95933," rotate (need not be normalized); @param phi double : magnitude of rotation in rad; @param Sn bool : if true, then also reflect in plane through origin and perpendicular to rotation; @returns SharedMatrix with rotated points (rows). matrix_3d_rotation_Cn(coord, axis, reflect, tol=1e-08, max_Cn_to_check=-1)[source]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in inpu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96215,Availability,failure,failure,96215,"ce]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96513,Availability,failure,failure,96513,"k for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if availabl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96840,Availability,failure,failure,96840," when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96896,Availability,error,error,96896," when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:97297,Availability,avail,available,97297,"nput files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[sour",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:97423,Availability,avail,available,97423,"two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:97495,Availability,avail,available,97495," a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but in Python differences; minimal. nprimitive()[source]¶; The number of primitive Gaussians. INT_CART",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:97647,Availability,avail,available,97647,"n to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but in Python differences; minimal. nprimitive()[source]¶; The number of primitive Gaussians. INT_CARTINDEX(am, i, j)[source]¶; Computes offset index for cartesian function.; #define INT_CARTINDEX(am,i,j) (((i) == (am))? 0 : (((((am) - (i) + 1)*((am) - ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:108764,Availability,error,error,108764," v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:109116,Availability,error,error,109116,"nt out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename inform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:109191,Availability,error,errors,109191,"nt out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename inform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:109474,Availability,error,errors,109474,"ormat_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors in data. Also plots a gaussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename information from def_prefix + def_filename is; inserted. def_prefix is intended to be something like mplthread_; to identify the type of figure. flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:110502,Availability,error,errors,110502,"aussian distribution; with mean me and standard deviation stde. Plot has x-range; xmin to xmax, x-axis label xtitle and overall title title. expand_saveas(saveas, def_filename, def_path='/scratch/cdsgroup/conda-builds/work/build/doc/sphinxman', def_prefix='', relpath=False)[source]¶; Analyzes string saveas to see if it contains information on; path to save file, name to save file, both or neither (saveas; ends in ‘/’ to indicate directory only) (able to expand ‘.’). A full; absolute filename is returned, lacking only file extension. Based on; analysis of missing parts of saveas, path information from def_path; and/or filename information from def_prefix + def_filename is; inserted. def_prefix is intended to be something like mplthread_; to identify the type of figure. flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a slat diagram between model chemistries with errors in; single-item list data, which is supplied as part of the dictionary; for each participating reaction, along with dbse and rxn keys in; argument data. Limits of plot are xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from; sapt_colors module. Summary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:111184,Availability,error,errors,111184,"; and/or filename information from def_prefix + def_filename is; inserted. def_prefix is intended to be something like mplthread_; to identify the type of figure. flat(data, color=None, title='', xlimit=4.0, xlines=[0.0, 0.3, 1.0], mae=None, mape=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a slat diagram between model chemistries with errors in; single-item list data, which is supplied as part of the dictionary; for each participating reaction, along with dbse and rxn keys in; argument data. Limits of plot are xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from; sapt_colors module. Summary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:111532,Availability,avail,availibility,111532,"between model chemistries with errors in; single-item list data, which is supplied as part of the dictionary; for each participating reaction, along with dbse and rxn keys in; argument data. Limits of plot are xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from; sapt_colors module. Summary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, sl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:112171,Availability,error,errors,112171,"me pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:115252,Availability,down,down,115252,"the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=Fals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126092,Availability,error,error,126092,"lied. copy()[source]¶; Function to return a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126479,Availability,error,error,126479,"=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126696,Availability,error,error,126696,"ction returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126886,Availability,error,error,126886,"t of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:127044,Availability,error,error,127044,"rint stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). restore()[source]¶. class InPsight(molecule)[source]¶. atoms = []¶. azimuth = 0.0",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:131857,Availability,failure,failure,131857,"0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132269,Availability,failure,failure,132269,", light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132499,Availability,failure,failure,132499," = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.su",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132781,Availability,failure,failure,132781,"xpected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:133079,Availability,failure,failure,133079,"write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:133333,Availability,failure,failure,133333,"e_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:133613,Availability,failure,failure,133613,"matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:135510,Availability,avail,available,135510,"‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convention.; Arguments:; @arg filename full path to file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron propert",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:138807,Availability,avail,available,138807,"lled for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. form",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:138838,Availability,avail,available,138838,"s the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. format_kwargs_for_input(filename, lmode=1, **kwargs)[source]¶; Funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:141077,Availability,avail,available,141077,"mat_molecule_for_input(mol, name='', forcexyz=False)[source]¶; Function to return a string of the output of; inputparser.process_input() applied to the XYZ; format of molecule, passed as either fragmented; geometry string mol or molecule instance mol.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see molutil.geometry(). format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. get_psifile(fileno, pidspace='8619')[source]¶; Function to return the full path and filename for psi file; fileno (e.g., psi.32) in current namespace pidspace. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary; with all keys made lowercase. Should be called by every; function that could be called directly by the user.; Also turns boolean-like values into actual booleans.; Also turns values lowercase if sensible. mat2arr(mat)[source]¶; Function to convert psi4.Matrix mat to Python array of arrays.; Expects psi4.Matrix to be flat with respect to symmetry. prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not y",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:141149,Availability,avail,available,141149,"utput of; inputparser.process_input() applied to the XYZ; format of molecule, passed as either fragmented; geometry string mol or molecule instance mol.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see molutil.geometry(). format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. get_psifile(fileno, pidspace='8619')[source]¶; Function to return the full path and filename for psi file; fileno (e.g., psi.32) in current namespace pidspace. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary; with all keys made lowercase. Should be called by every; function that could be called directly by the user.; Also turns boolean-like values into actual booleans.; Also turns values lowercase if sensible. mat2arr(mat)[source]¶; Function to convert psi4.Matrix mat to Python array of arrays.; Expects psi4.Matrix to be flat with respect to symmetry. prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Need some option to get either all or changed; Need some ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:141301,Availability,avail,available,141301,"l.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see molutil.geometry(). format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. get_psifile(fileno, pidspace='8619')[source]¶; Function to return the full path and filename for psi file; fileno (e.g., psi.32) in current namespace pidspace. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary; with all keys made lowercase. Should be called by every; function that could be called directly by the user.; Also turns boolean-like values into actual booleans.; Also turns values lowercase if sensible. mat2arr(mat)[source]¶; Function to convert psi4.Matrix mat to Python array of arrays.; Expects psi4.Matrix to be flat with respect to symmetry. prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Need some option to get either all or changed; Need some option to either get dict or set string or psimod command list; command return doesn’t revoke has_changed setting for unchanged with changedOnly=False.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:146670,Availability,error,error,146670,"d builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:148057,Availability,error,error,148057,"atted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:148261,Availability,recover,recovery,148261," vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the parti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:149466,Availability,avail,available,149466," on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the particular displacement number item and the; associated zmat file contents and linkage, and common contents; inputSansMol, returns contents of input file to be sown. Module with a procedures dictionary specifying available quantum; chemical methods.; Module to provide lightweight definitions of functionals and; SuperFunctionals. build_b2plyp_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd2gr_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd2p4_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3bj_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3mbj_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3mzero_superfunctional(name, npoints, deriv)[source]¶. build_b2plypd3zero_superfunctional(name, npoints, deriv)[source]¶. build_b3_x_functional(name)[source]¶. build_b3lyp5_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d2gr_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d2p4_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d3bj_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d3mbj_superfunctional(name, npoints, deriv)[source]¶. build_b3lyp5d3mzero_superfunctional(name, npoints, deriv)[s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:479,Deployability,install,install,479,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8815,Deployability,integrat,integrate,8815,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:41547,Deployability,toggle,toggle,41547,"ed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; foo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:41622,Deployability,toggle,toggle,41622,"oin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:54276,Deployability,update,update,54276,"class OrderedDict(*args, **kwds)[source]¶; Dictionary that remembers insertion order. clear() → None. Remove all items from od.[source]¶. copy() → a shallow copy of od[source]¶. classmethod fromkeys(S[, v]) → New ordered dictionary with keys from S[source]¶; and values equal to v (which defaults to None). items() → list of (key, value) pairs in od[source]¶. iteritems()[source]¶; od.iteritems -> an iterator over the (key, value) items in od. iterkeys() → an iterator over the keys in od[source]¶. itervalues()[source]¶; od.itervalues -> an iterator over the values in od. keys() → list of keys in od[source]¶. pop(k[, d]) → v, remove specified key and return the corresponding value.[source]¶; If key is not found, d is returned if given, otherwise KeyError is raised. popitem() → (k, v), return and remove a (key, value) pair.[source]¶; Pairs are returned in LIFO order if last is true or FIFO order if false. setdefault(k[, d]) → od.get(k,d), also set od[k]=d if k not in od[source]¶. update(E, **F) → None. Update od from dict/iterable E and F.[source]¶; If E is a dict instance, does: for k in E: od[k] = E[k]; If E has a .keys() method, does: for k in E.keys(): od[k] = E[k]; Or if E is an iterable of items, does: for k, v in E: od[k] = v; In either case, this is followed by: for k, v in F.items(): od[k] = v. values() → list of values in od[source]¶. viewitems() → a set-like object providing a view on od's items[source]¶. viewkeys() → a set-like object providing a view on od's keys[source]¶. viewvalues() → an object providing a view on od's values[source]¶. Parent classes for quantum chemistry program input and output file; formats. class InputFormat(mem, mtd, bas, mol, sys, cast)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:66590,Deployability,update,updated,66590," i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, valu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:67594,Deployability,update,update,67594,"he classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:113717,Deployability,update,updated,113717,"g specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:113822,Deployability,update,updated,113822,"ve/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD pur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114003,Deployability,update,updates,114003,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:118495,Deployability,update,updated,118495,"omputes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:118600,Deployability,update,updated,118600," the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:118727,Deployability,update,updates,118727,"¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which the orbital basis orbital; (usually the coded form of ornate) and jfit, jkfit,; rifit, and dualfit auxiliary bases can be found. add_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:120831,Deployability,install,installed,120831,"add basis fit as associated helper basis; member dualfit to a BasisFamily object. add_jfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jfit to a BasisFamily object. add_jfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:121032,Deployability,install,installed,121032,"default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the default parameters for functional; func. When mode is ‘psi4’, returns a tuple of arguments suitable for building; a Dispersion object with dashlvl parameters for functional func.; There are four computational d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:121224,Deployability,install,installed,121224," associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the default parameters for functional; func. When mode is ‘psi4’, returns a tuple of arguments suitable for building; a Dispersion object with dashlvl parameters for functional func.; There are four computational dashlvl choices. ‘d2p4’ calls the -D2 correction; within psi4 (hence, faked for mode=’dftd3’). The other three, ‘d2gr’, ‘d3zero’,; and ‘d3bj’ call the three dftd3 modes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:144190,Deployability,install,installed,144190,"mily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method recei",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:144619,Deployability,install,installed,144619,"d or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the im",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:144811,Deployability,install,installed,144811,"nate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:161465,Deployability,configurat,configuration,161465,"[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:161637,Deployability,configurat,configuration,161637,"for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[sour",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:172301,Deployability,update,updated,172301,"ting to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from each displaced computation, and computes final result. Table Of Contents. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver; wrapper_autofrag; qmmm; qcdb; p4util; p4const; procedures. Previous topic; BasisSet; Next topic; psi4: Linking C++ and Python. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:243,Energy Efficiency,energy,energy,243,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8587,Energy Efficiency,energy,energy,8587,"quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8828,Energy Efficiency,charge,charges,8828,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8986,Energy Efficiency,charge,charges,8986,"ing available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:9087,Energy Efficiency,charge,charges,9087,"ty, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:9236,Energy Efficiency,charge,charge,9236,"; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note tha",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:9352,Energy Efficiency,charge,charge,9352,"turns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:9459,Energy Efficiency,charge,charge,9459," molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotations and 3 distinct reflections, each; with a separate character. Thus symop has 6 elements ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:9529,Energy Efficiency,charge,charge,9529,"odel chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotations and 3 distinct reflections, each; with a separate character. Thus symop has 6 elements rather than the 3; you’ll find in most published character tables. bits()[source]¶; Returns bitwise re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:9594,Energy Efficiency,charge,charges,9594,"odel chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*args)[source]¶; The CharacterTable class provides a workable character table for; all of the non-cubic point groups. While I have tried to match the; ordering in Cotton’s book, I don’t guarantee that it is always; followed. It shouldn’t matter anyway. Also note that I don’t lump; symmetry operations of the same class together. For example, in C3v; there are two distinct C3 rotations and 3 distinct reflections, each; with a separate character. Thus symop has 6 elements rather than the 3; you’ll find in most published character tables. bits()[source]¶; Returns bitwise re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:18441,Energy Efficiency,charge,charge,18441,"the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s fa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:18595,Energy Efficiency,charge,charge,18595,"ion. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:21999,Energy Efficiency,charge,charge,21999,"ixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:22627,Energy Efficiency,charge,charge,22627,"e]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:22959,Energy Efficiency,charge,charge,22959,"om second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:23590,Energy Efficiency,energy,energy,23590,"st column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:23655,Energy Efficiency,energy,energy,23655,"st column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:24874,Energy Efficiency,energy,energy,24874,".Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Pars",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:25153,Energy Efficiency,energy,energy,25153,"0712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:25264,Energy Efficiency,energy,energy,25264,"0712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:26226,Energy Efficiency,charge,charge,26226,"putation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coordinates that govern the reading of molecule; orientation by Cfour. Return qcdb.Molecule and gradient array. harvest_outfile_pass(outtext)[source]¶; Function to read CFOUR output file outtext and parse important; quantum chemical information from it in. harvest_output(outtext)[source]¶; Function to separate portions of a CFOUR output file outtest,; divided by xjoda. harvest_zmat(zmat)[source]¶; Parses the contents of the Cfour ZMAT file into array and; coordinate information. The coordinate info is converted into a; rather dinky Molecule (no fragment, but does read charge, mult,; unit). Return qcdb.Molecule. Written for findif zmat* where; geometry always Cartesian and Bohr. jajo2mol(jajodic)[source]¶; Returns a Molecule from entries in dictionary jajodic extracted; from JAINDX and JOBARC. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for cfour. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:26856,Energy Efficiency,charge,charge,26856,"ith p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses the contents grd of the Cfour GRD file into the gradient; array and coordinate information. The coordinate info is converted; into a rather dinky Molecule (no charge, multiplicity, or fragment),; but this is these coordinates that govern the reading of molecule; orientation by Cfour. Return qcdb.Molecule and gradient array. harvest_outfile_pass(outtext)[source]¶; Function to read CFOUR output file outtext and parse important; quantum chemical information from it in. harvest_output(outtext)[source]¶; Function to separate portions of a CFOUR output file outtest,; divided by xjoda. harvest_zmat(zmat)[source]¶; Parses the contents of the Cfour ZMAT file into array and; coordinate information. The coordinate info is converted into a; rather dinky Molecule (no fragment, but does read charge, mult,; unit). Return qcdb.Molecule. Written for findif zmat* where; geometry always Cartesian and Bohr. jajo2mol(jajodic)[source]¶; Returns a Molecule from entries in dictionary jajodic extracted; from JAINDX and JOBARC. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for cfour. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37733,Energy Efficiency,green,green-to-purple,37733,"r; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; lengt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:53276,Energy Efficiency,energy,energy,53276," of the last geometry. harvest_mp2(lines, psivar)[source]¶; Harvest the MP2 results. harvest_scf_from_outfile(lines, psivar)[source]¶; Harvest SCF results from the SCF section of the output file. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for orca. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for orca. While deliberately requested pieces,; generally orca__orca_deriv_level and orca__orca_calc_level,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, can be countermanded by keywords in input file; (‘clobber’ set to False). Occasionally, we want these pieces to actually; overcome keywords in input file (‘superclobber’ set to True). orca_gradient_list()[source]¶; Return an array of Orca methods with analytical gradients.; Appended to procedures[‘gradient’]. orca_list()[source]¶; Return an array of Orca methods with energies. Appended; to procedures[‘energy’]. class OrderedDict(*args, **kwds)[source]¶; Dictionary that remembers insertion order. clear() → None. Remove all items from od.[source]¶. copy() → a shallow copy of od[source]¶. classmethod fromkeys(S[, v]) → New ordered dictionary with keys from S[source]¶; and values equal to v (which defaults to None). items() → list of (key, value) pairs in od[source]¶. iteritems()[source]¶; od.iteritems -> an iterator over the (key, value) items in od. iterkeys() → an iterator over the keys in od[source]¶. itervalues()[source]¶; od.itervalues -> an iterator over the values in od. keys() → list of keys in od[source]¶. pop(k[, d]) → v, remove specified key and return the corresponding value.[source]¶; If key is not found, d is returned if given, otherwise KeyError is raised. popitem() → (k, v), return and remove a (key, value) pair.[source]¶; Pairs are returned in LIFO order if last is true or FIFO order if false. setdefault(k[, d]) → od.get(k,d), also set od[k]=d if k not in od[so",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:69243,Energy Efficiency,energy,energy,69243,"one, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:69308,Energy Efficiency,energy,energy,69308,"one, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:71617,Energy Efficiency,power,power,71617,"opriate to bring a; list of atomic numbers in molChangeable orientation into; molPermanent orientation. In particular, applies a row exchange; to place it in the atom ordering. transform_gradient(arr)[source]¶; Applies to arr the transformation appropriate to bring a; gradient in molChangeable orientation into molPermanent; orientation. In particular, applies a rotation to place it; in the inertial frame, a column exchange and phasing to place; it in the axis system, a row exchange to place it in the atom; ordering, and a rotation to remove it from the inertial frame. transform_vector(vec)[source]¶; Applies to vec the transformation appropriate to bring a; vector in molChangeable orientation into molPermanent; orientation. In particular, applies a rotation to place it; in the inertial frame, a column exchange and phasing to place; it in the axis system, and a rotation to remove it from the; inertial frame. conv_float2negexp(val)[source]¶; Returns the least restrictive negative exponent of the power 10; that would achieve the floating point convergence criterium val. format_option_for_cfour(opt, val)[source]¶; Function to reformat value val for option opt from python; into cfour-speak. Arrays are the primary target. prepare_options_for_cfour(options)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary options, find the options directable toward; Cfour (options[‘CFOUR’][‘CFOUR_**’]) that aren’t default, then write; a CFOUR deck with those options. prepare_options_for_orca(options)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary options, find the options directable toward; Orca (options[‘ORCA’][‘ORCA_**’]) that aren’t default, then write; an ORCA deck with those options. prepare_options_for_psi4(options)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary options, find the options directable toward; Cfour (options[‘CFOUR’][‘CFOUR_**’]) that aren",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:74038,Energy Efficiency,charge,charge,74038,"th those options. reconcile_options(full, partial)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary full and reconcile it with proposed options; value changes in partial. Overwrites full with partial if; option untouched, touches full if full and partial are in; agreement, balks if full and partial conflict. Returns full. reconcile_options2(full, partial)[source]¶; Function to take the full snapshot of the liboptions object; encoded in dictionary full and reconcile it with proposed options; value changes in partial. Overwrites full with partial if; option untouched, touches full if full and partial are in; agreement, balks if full and partial conflict. Returns full.; Note: this is surprisingly similar to reconcile_options except; that full is essentially empty and lacking in has_changed keys; so presence is enough to satisfy has_changed. consider merging; once mature. class LibmintsMolecule(psi4molstr=None)[source]¶; Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4’s libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major; differences from the C++ class are: no basisset handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:74959,Energy Efficiency,charge,charge,74959,"]¶; Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4’s libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major; differences from the C++ class are: no basisset handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:75138,Energy Efficiency,charge,charge,75138,"stin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major; differences from the C++ class are: no basisset handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:75350,Energy Efficiency,charge,charge,75350," handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:75357,Energy Efficiency,charge,charge,75357," handling, no symmetry,; no pubchem, no efp, no discarding dummies. This class translated so; that databases can function independently of psi4.; >>> H2OH2O = qcdb.Molecule(""""""; 0 1; O1 -1.551007 -0.114520 0.000000; H1 -1.934259 0.762503 0.000000; H2 -0.599677 0.040712 0.000000; --; 0 1; X 0.000000 0.000000 0.000000; O2 1.350625 0.111469 0.000000; H3 1.680398 -0.373741 -0.758561; H4 1.680398 -0.373741 0.758561; no_com; no_reorient; units angstrom; """"""). >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). FullPointGroupList = ['ATOM', 'C_inf_v', 'D_inf_h', 'C1', 'Cs', 'Ci', 'Cn', 'Cnv', 'Cnh', 'Sn', 'Dn', 'Dnd', 'Dnh', 'Td', 'Oh', 'Ih']¶. Z(atom)[source]¶; Nuclear charge of atom (0-indexed); >>> print H2OH2O.Z(4); 1. activate_all_fragments()[source]¶; Sets all fragments in the molecule to be active. add_atom(Z, x, y, z, label='', mass=0.0, charge=0.0, lineno=-1)[source]¶; Add an atom to the molecule; Z atomic number; x cartesian coordinate; y cartesian coordinate; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:76234,Energy Efficiency,charge,charge,76234,"e; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances be",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:76265,Energy Efficiency,charge,charge,76265,"e; z cartesian coordinate; symb atomic symbol to use; mass mass to use if non standard; charge charge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances be",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:76354,Energy Efficiency,charge,charge,76354,"rge to use if non standard; lineno line number when taken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Dista",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:76411,Energy Efficiency,charge,charge,76411,"aken from a string. atom_at_position(b, tol=0.05)[source]¶; Tests to see of an atom is at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Distances (Angstroms); [1] [2] [3] [4] [5] [6]; [1] 0.0000",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:77051,Energy Efficiency,charge,charges,77051,"enter_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Distances (Angstroms); [1] [2] [3] [4] [5] [6]; [1] 0.00000; [2] 0.95711 0.00000; [3] 0.96391 1.51726 0.00000; [4] 2.91042 3.34878 1.95159 0.00000; [5] 3.32935 3.86422 2.43843 0.95895 0.00000; [6] 3.32935 3.86422 2.43843 0.95895 1.51712 0.00000. equivalent(iuniq, j)[source]¶; Returns the j’th atom equivalent to iuniq. everything()[source]¶; Quick print of class data. extract_fragments(reals, ghosts=[])[source]¶; Makes a copy of the molecule, returning a new molecule with; only certain fragment atoms present as either ghost or real atoms; reals: The list or int of fragments (1-indexed) that should be present in the molecule as real atoms.; ghosts: The list or int of fragments (1-indexed) that s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:78756,Energy Efficiency,charge,charge,78756,"]¶; Makes a copy of the molecule, returning a new molecule with; only certain fragment atoms present as either ghost or real atoms; reals: The list or int of fragments (1-indexed) that should be present in the molecule as real atoms.; ghosts: The list or int of fragments (1-indexed) that should be present in the molecule as ghosts.; (method name in libmints is extract_subsets. This is different; in qcdb because the psi4 input parser tries to process lines with; that term, giving rise to Boost:Python type conlicts.) See usage; at extract_fragments(). extract_subsets(reals, ghosts=[])[source]¶; Wrapper for extract_fragments().; See note there. This function can be used as long as not; in psi4 input file. Use extract_fragments directly, then.; >>> H2OH2O.extract_subsets(2) # monomer B, unCP-corrected; >>> H2OH2O.extract_subsets(2,1) # monomer B, CP-corrected; >>> obj.extract_subsets(1,[2,3]) # monomer A, CP-corrected if obj is tri-molecular complex. fZ(atom)[source]¶; Nuclear charge of atom (includes dummies); >>> print H2OH2O.fZ(4); 8. fcharge(atom)[source]¶; Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version.; >>> print H2OH2O.fcharge(4); 8.0. find_highest_point_group(tol=1e-08)[source]¶; Find the highest D2h point group from Jet and Ed’s code: c1; ci c2 cs d2 c2v c2h d2h. Ignore the user-specified subgroup in; this case. find_point_group(tol=1e-08)[source]¶; Find computational molecular point group, user can override; this with the “symmetry” keyword. Result is highest D2h subgroup; attendant on molecule and allowed by the user. fix_orientation(_fix=True)[source]¶; Fix the orientation at its current frame; (method name in libmints is set_orientation_fixed). flabel(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in; the input file (C2, H4) (includes dummies); >>> print H2OH2O.flabel(4); O2. fmass(atom)[source]¶; Returns mass of atom (0-indexed, includes dummies); >>> print H2OH2O.fmass(4); 15.99",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:78850,Energy Efficiency,charge,charge,78850,"toms present as either ghost or real atoms; reals: The list or int of fragments (1-indexed) that should be present in the molecule as real atoms.; ghosts: The list or int of fragments (1-indexed) that should be present in the molecule as ghosts.; (method name in libmints is extract_subsets. This is different; in qcdb because the psi4 input parser tries to process lines with; that term, giving rise to Boost:Python type conlicts.) See usage; at extract_fragments(). extract_subsets(reals, ghosts=[])[source]¶; Wrapper for extract_fragments().; See note there. This function can be used as long as not; in psi4 input file. Use extract_fragments directly, then.; >>> H2OH2O.extract_subsets(2) # monomer B, unCP-corrected; >>> H2OH2O.extract_subsets(2,1) # monomer B, CP-corrected; >>> obj.extract_subsets(1,[2,3]) # monomer A, CP-corrected if obj is tri-molecular complex. fZ(atom)[source]¶; Nuclear charge of atom (includes dummies); >>> print H2OH2O.fZ(4); 8. fcharge(atom)[source]¶; Returns charge of atom (0-indexed, includes dummies).; Related to SAD guess in libmints version.; >>> print H2OH2O.fcharge(4); 8.0. find_highest_point_group(tol=1e-08)[source]¶; Find the highest D2h point group from Jet and Ed’s code: c1; ci c2 cs d2 c2v c2h d2h. Ignore the user-specified subgroup in; this case. find_point_group(tol=1e-08)[source]¶; Find computational molecular point group, user can override; this with the “symmetry” keyword. Result is highest D2h subgroup; attendant on molecule and allowed by the user. fix_orientation(_fix=True)[source]¶; Fix the orientation at its current frame; (method name in libmints is set_orientation_fixed). flabel(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in; the input file (C2, H4) (includes dummies); >>> print H2OH2O.flabel(4); O2. fmass(atom)[source]¶; Returns mass of atom (0-indexed, includes dummies); >>> print H2OH2O.fmass(4); 15.9949146196. form_symmetry_information(tol=1e-08)[source]¶; Initialize molecular specific s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:84312,Energy Efficiency,charge,charge,84312,"; Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). (0-indexed); >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶; Returns the maximum number of equivalent atoms. molecular_charge()[source]¶; Gets the molecular charge; >>> print H2OH2O.molecular_charge(); -2. move_to_com()[source]¶; Moves molecule to center of mass. multiplicity()[source]¶; Get the multiplicity (defined as 2Ms + 1); >>> print H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; The number of active fragments in the molecule.; >>> print H2OH2O.nactive_fragments(); 2. nallatom()[source]¶; Number of all atoms (includes dummies); >>> print H2OH2O.nallatom(); 7. name()[source]¶; Get molecule name; >>> print H2OH2O.name(); water_dimer. natom()[source]¶; Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:85374,Energy Efficiency,energy,energy,85374,"r_charge(); -2. move_to_com()[source]¶; Moves molecule to center of mass. multiplicity()[source]¶; Get the multiplicity (defined as 2Ms + 1); >>> print H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; The number of active fragments in the molecule.; >>> print H2OH2O.nactive_fragments(); 2. nallatom()[source]¶; Number of all atoms (includes dummies); >>> print H2OH2O.nallatom(); 7. name()[source]¶; Get molecule name; >>> print H2OH2O.name(); water_dimer. natom()[source]¶; Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_core(); 2. nuclear_repulsion_energy()[source]¶; Computes nuclear repulsion energy.; >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. nuclear_repulsion_energy_deriv1()[source]¶; Computes nuclear repulsion energy derivatives; >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. nuclear_repulsion_energy_deriv2()[source]¶; NYI Computes nuclear repulsion energy second derivatives. nunique()[source]¶; Return the number of unique atoms. orientation_fixed()[source]¶; Get whether or not orientation is fixed.; >>> H2OH2O.orientation_fixed(); True. point_group()[source]¶; Returns the point group (object) if set. print_bond_angles()[source]¶; Print the geometrical parameters (bond_angles) of the molecule.; >>> print H2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:85514,Energy Efficiency,energy,energy,85514," H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; The number of active fragments in the molecule.; >>> print H2OH2O.nactive_fragments(); 2. nallatom()[source]¶; Number of all atoms (includes dummies); >>> print H2OH2O.nallatom(); 7. name()[source]¶; Get molecule name; >>> print H2OH2O.name(); water_dimer. natom()[source]¶; Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_core(); 2. nuclear_repulsion_energy()[source]¶; Computes nuclear repulsion energy.; >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. nuclear_repulsion_energy_deriv1()[source]¶; Computes nuclear repulsion energy derivatives; >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. nuclear_repulsion_energy_deriv2()[source]¶; NYI Computes nuclear repulsion energy second derivatives. nunique()[source]¶; Return the number of unique atoms. orientation_fixed()[source]¶; Get whether or not orientation is fixed.; >>> H2OH2O.orientation_fixed(); True. point_group()[source]¶; Returns the point group (object) if set. print_bond_angles()[source]¶; Print the geometrical parameters (bond_angles) of the molecule.; >>> print H2OH2O.print_bond_angles(); Bond Angles (degrees); Angle 2-1-3: 104.337; Angle 2-1-4: 109.152; Angle 2-1-5: 117.387; ... print_dihedrals()[source]¶; Print",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:85981,Energy Efficiency,energy,energy,85981," Number of atoms; >>> print H2OH2O.natom(); 6. nequivalent(iuniq)[source]¶; Returns the number of atoms equivalent to iuniq. nfragments()[source]¶; The number of fragments in the molecule.; >>> print H2OH2O.nfragments(); 2. nfrozen_core(depth=False)[source]¶; Number of frozen core for molecule given freezing state.; >>> print H2OH2O.nfrozen_core(); 2. nuclear_repulsion_energy()[source]¶; Computes nuclear repulsion energy.; >>> print H2OH2O.nuclear_repulsion_energy(); 36.6628478528. nuclear_repulsion_energy_deriv1()[source]¶; Computes nuclear repulsion energy derivatives; >>> print H2OH2O.nuclear_repulsion_energy_deriv1(); [[3.9020946901323774, 2.76201566471991, 0.0], [1.3172905807089021, -2.3486366050337293, 0.0], [-1.8107598525022435, -0.32511212499256564, 0.0], [-1.217656141385739, -2.6120090867576717, 0.0], [-1.0954846384766488, 1.2618710760320282, 2.1130743287465603], [-1.0954846384766488, 1.2618710760320282, -2.1130743287465603]]. nuclear_repulsion_energy_deriv2()[source]¶; NYI Computes nuclear repulsion energy second derivatives. nunique()[source]¶; Return the number of unique atoms. orientation_fixed()[source]¶; Get whether or not orientation is fixed.; >>> H2OH2O.orientation_fixed(); True. point_group()[source]¶; Returns the point group (object) if set. print_bond_angles()[source]¶; Print the geometrical parameters (bond_angles) of the molecule.; >>> print H2OH2O.print_bond_angles(); Bond Angles (degrees); Angle 2-1-3: 104.337; Angle 2-1-4: 109.152; Angle 2-1-5: 117.387; ... print_dihedrals()[source]¶; Print the geometrical parameters (dihedrals) of the molecule.; >>> print H2OH2O.print_dihedrals(); Dihedral Angles (Degrees); Dihedral 1-2-3-4: 180.000; Dihedral 1-2-3-5: 133.511; Dihedral 1-2-3-6: 133.511; ... print_distances()[source]¶; Print the geometrical parameters (distances) of the molecule.; suspect libmints version actually prints Bohr.; >>> print H2OH2O.print_distances(); Interatomic Distances (Angstroms); Distance 1 to 2 0.957; Distance 1 to 3 0.96",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:87301,Energy Efficiency,charge,charge,87301," H2OH2O.print_bond_angles(); Bond Angles (degrees); Angle 2-1-3: 104.337; Angle 2-1-4: 109.152; Angle 2-1-5: 117.387; ... print_dihedrals()[source]¶; Print the geometrical parameters (dihedrals) of the molecule.; >>> print H2OH2O.print_dihedrals(); Dihedral Angles (Degrees); Dihedral 1-2-3-4: 180.000; Dihedral 1-2-3-5: 133.511; Dihedral 1-2-3-6: 133.511; ... print_distances()[source]¶; Print the geometrical parameters (distances) of the molecule.; suspect libmints version actually prints Bohr.; >>> print H2OH2O.print_distances(); Interatomic Distances (Angstroms); Distance 1 to 2 0.957; Distance 1 to 3 0.964; Distance 1 to 4 2.910; ... print_full()[source]¶; Print full atom list. Same as print_out() only displays dummy atoms. print_in_input_format()[source]¶; Print the molecule in the same format that the user provided. print_out()[source]¶; Print the molecule.; (method name in libmints is print); >>> H2OH2O.print_out(); Geometry (in Angstrom), charge = -2, multiplicity = 3:; Center X Y Z; ------------ ----------------- ----------------- -----------------; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. print_out_in_angstrom()[source]¶; Print the molecule in Angstroms. Same as print_out() only always in Angstroms.; (method name in libmints is print_in_angstrom). print_out_in_bohr()[source]¶; Print the molecule in Bohr. Same as print_out() only in Bohr.; (method name in libmints is print_in_bohr). print_out_of_planes()[source]¶; Print the geometrical parameters (out_of_planes) of the molecule.; >>> print H2OH2O.print_out_of_planes(); Out-Of-Plane Angles (Degrees); Out-of-plane 1-2-3-4: 0.000; Out-of-plane 1-2-3-5: -7.373; Out-of-plane 1-2-3-6: 7.373; ... reinterpret_coordentries()[source]¶; Reinterpret the fragments for real",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:91438,Energy Efficiency,charge,charge,91438,"fixed(_fix=True)[source]¶; NYI Fix the center of mass at its current frame.; Not used in libmints so not implemented. set_full_geometry(geom)[source]¶; Sets the full geometry (dummies included), given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_full geometry([[1,2,3],[4,5,6],[7,8,9],[0,0,0],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_full_point_group(tol=1e-08)[source]¶; Determine and set FULL point group. self.PYfull_pg_n is highest; order n in Cn. 0 for atoms or infinity. set_geometry(geom)[source]¶; Sets the geometry, given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:91475,Energy Efficiency,charge,charge,91475,"fixed(_fix=True)[source]¶; NYI Fix the center of mass at its current frame.; Not used in libmints so not implemented. set_full_geometry(geom)[source]¶; Sets the full geometry (dummies included), given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_full geometry([[1,2,3],[4,5,6],[7,8,9],[0,0,0],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_full_point_group(tol=1e-08)[source]¶; Determine and set FULL point group. self.PYfull_pg_n is highest; order n in Cn. 0 for atoms or infinity. set_geometry(geom)[source]¶; Sets the geometry, given a N X 3 array of coordinates geom in Bohr.; >>> H2OH2O.set_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:98366,Energy Efficiency,efficient,efficient,98366,"attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. search_file(filename, search_path)[source]¶; Given an os.pathsep divided search_path, find first occurance of; filename. Returns full path to file if found or None if unfound. Class to. class GaussianShell(am, nprimitive, oc, c, ec, e, pure, nc, center, start)[source]¶; Class with same information as ShellInfo. In C++,; class uses more efficient data structures, but in Python differences; minimal. nprimitive()[source]¶; The number of primitive Gaussians. INT_CARTINDEX(am, i, j)[source]¶; Computes offset index for cartesian function.; #define INT_CARTINDEX(am,i,j) (((i) == (am))? 0 : (((((am) - (i) + 1)*((am) - (i)))>>1) + (am) - (i) - (j))). INT_ICART(a, b, c)[source]¶; Given a, b, and c compute a cartesian offset.; #define INT_ICART(a, b, c) (((((((a)+(b)+(c)+1)<<1)-(a))*((a)+1))>>1)-(b)-1). INT_IPURE(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class Shel",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:99649,Energy Efficiency,efficient,efficient,99649,") - (i)))>>1) + (am) - (i) - (j))). INT_ICART(a, b, c)[source]¶; Given a, b, and c compute a cartesian offset.; #define INT_ICART(a, b, c) (((((((a)+(b)+(c)+1)<<1)-(a))*((a)+1))>>1)-(b)-1). INT_IPURE(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100106,Energy Efficiency,reduce,reduce,100106,"]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[so",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:113208,Energy Efficiency,charge,charge,113208,"g reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attribu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114181,Energy Efficiency,charge,charge,114181," y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114409,Energy Efficiency,charge,charge,114409,", independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114752,Energy Efficiency,charge,charge,114752,"at_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114783,Energy Efficiency,charge,charge,114783,"at_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:117973,Energy Efficiency,charge,charge,117973," Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:135889,Energy Efficiency,energy,energy,135889,"rg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). set_memory(b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:136154,Energy Efficiency,energy,energy,136154,"2345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). set_memory(bytes)[source]¶; Function to reset the total memory allocation. set_num_threads(nthread)[source]¶; Function to reset the number of threads to parallelize across. success(label)[source]¶",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:136787,Energy Efficiency,energy,energy,136787,"generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties. How to specify args, which are actually the most important. Parameters:title (string) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). set_memory(bytes)[source]¶; Function to reset the total memory allocation. set_num_threads(nthread)[source]¶; Function to reset the number of threads to parallelize across. success(label)[source]¶; Function to print a ‘label...PASSED’ line to screen.; Used by util.compare_values() family when functions pass. xml2dict(filename=None)[source]¶; Read XML filename into nested OrderedDict-s. filename defaults to; active CSX file. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:138962,Energy Efficiency,energy,energy,138962,"si4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. format_kwargs_for_input(filename, lmode=1, **kwargs)[source]¶; Function to pickle to file filename the options dictionary; kwargs. Mode lmode =2 pickles appropriate settings for; reap mode. Used to capture Python options information for; distributed (sow/reap) input files",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:139081,Energy Efficiency,energy,energy,139081,"si4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about index; sownum to be used for construction of quantity computations as; directed by master input file with linkage kwarg. When file sowout; is missing or incomplete files, function will either return zero; (allvital is False) or terminate (allvital is True) since; some sow/reap procedures can produce meaningful results (database); from an incomplete set of sown files, while others cannot (gradient,; hessian). format_currentstate_for_input(func, name, allButMol=False, **kwargs)[source]¶; Function to return an input file in preprocessed psithon.; Captures memory, molecule, options, function, method, and kwargs.; Used to write distributed (sow/reap) input files. format_kwargs_for_input(filename, lmode=1, **kwargs)[source]¶; Function to pickle to file filename the options dictionary; kwargs. Mode lmode =2 pickles appropriate settings for; reap mode. Used to capture Python options information for; distributed (sow/reap) input files",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:157825,Energy Efficiency,energy,energy,157825,"perfunctional(name, npoints, deriv)[source]¶. build_wpbesol0_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_x_functional(name)[source]¶. build_wpbesol_x_superfunctional(name, npoints, deriv)[source]¶. build_wpw92_c_superfunctional(name, npoints, deriv)[source]¶. build_ws_x_functional(name)[source]¶. build_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:158187,Energy Efficiency,energy,energy,158187,"d_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unne",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:159998,Energy Efficiency,energy,energy,159998,"ectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. write_zmat(name, dertype)[source]¶; Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. Module with functions that encode the sequence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:160300,Energy Efficiency,energy,energy,160300,"ough; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. write_zmat(name, dertype)[source]¶; Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. Module with functions that encode the sequence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:160931,Energy Efficiency,energy,energy,160931,"ence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI modu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:163970,Energy Efficiency,energy,energy,163970,"alculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_fisapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an F/ISAPT0 computation. run_fnocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation.; >>> energy('fno-ccsd(t)'). run_fnodfcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DF-CCSD(T) computation.; >>> set cc_type df; >>> energy('fno-ccsd(t)'). run_libfock(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:164134,Energy Efficiency,energy,energy,164134,"sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_fisapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an F/ISAPT0 computation. run_fnocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation.; >>> energy('fno-ccsd(t)'). run_fnodfcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DF-CCSD(T) computation.; >>> set cc_type df; >>> energy('fno-ccsd(t)'). run_libfock(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC comp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:165532,Energy Efficiency,charge,charge-transfer,165532,"ction that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166365,Energy Efficiency,energy,energy,166365,"on encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166532,Energy Efficiency,energy,energy,166532," for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166867,Energy Efficiency,energy,energy,166867,"ame, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167202,Energy Efficiency,energy,energy,167202,"revious SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradien",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167368,Energy Efficiency,energy,energy,167368,"CSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167540,Energy Efficiency,energy,energy,167540,") energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167699,Energy Efficiency,energy,energy,167699,"CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168026,Energy Efficiency,energy,energy,168026,"thm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168523,Energy Efficiency,energy,energy,168523,"ecting to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168852,Energy Efficiency,energy,energy,168852,"orithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169177,Energy Efficiency,energy,energy,169177,"gorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169339,Energy Efficiency,energy,energy,169339,"g the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169672,Energy Efficiency,energy,energy,169672,"he algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorith",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170178,Energy Efficiency,energy,energy,170178,"d or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170513,Energy Efficiency,energy,energy,170513," gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of runn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:775,Integrability,depend,dependency,775,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:3152,Integrability,wrap,wrappers,3152,"ster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. new_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. driver_util¶. parse_arbitrary_order(name)[source]¶; Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. parse_cotton_irreps(irrep, point_group)[source]¶; Function to return validated Cotton ordering index for molecular; point_group from string or integer irreducible representation irrep. aliases¶; Module with functions that call upon those in modules; proc, driver, and wrappers. Place in this file quickly defined procedures such as. aliases for complex methods; simple modifications to existing methods. fake_file11(wfn, filename='fake_file11.dat', **kwargs)[source]¶; Function to print a file filename of the old file11 format; from molecule and gradient information in wfn. New in version 0.6: wfn parameter passed explicitly. Returns:None. Parameters:; filename (string) – destination file name for file11 file; wfn (Wavefunction) – set of molecule, gradient from which to generate file11. Examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:7531,Integrability,wrap,wrapping,7531,"... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:7614,Integrability,wrap,wrap,7614,"e)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8815,Integrability,integrat,integrate,8815,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:23933,Integrability,interface,interface,23933,"es molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with ke",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:25046,Integrability,wrap,wrapper,25046,"ce]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56412,Integrability,message,message,56412,"s InputFormat2(mem, mol, mtd, der, opt)[source]¶. corresponding_aux_basis()[source]¶; For Dunning basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56626,Integrability,message,message,56626,"alence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56815,Integrability,message,message,56815,"t cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to Fals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:57015,Integrability,message,message,57015,"e]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:62595,Integrability,contract,contractions,62595,"ile name. max_am()[source]¶; Maximum angular momentum used in the basis set.; * @return Maximum angular momentum. max_function_per_shell()[source]¶; Compute the maximum number of basis functions contained in a shell.; * @return The max number of basis functions in a shell. max_nprimitive()[source]¶; Maximum number of primitives in a shell.; * Examines each shell and find the shell with the maximum number of primitives returns that; * number of primitives.; * @return Maximum number of primitives. molecule()[source]¶; Molecule this basis is for.; * @return Shared pointer to the molecule for this basis set. name()[source]¶; Returns the name of this basis set. nao()[source]¶; Number of atomic orbitals (Cartesian).; * @return The number of atomic orbitals (Cartesian orbitals, always). nbf()[source]¶; Number of basis functions (Spherical).; * @return The number of basis functions (Spherical, if has_puream() == true). nprimitive()[source]¶; Number of primitives.; * @return The total number of primitives in all contractions. nshell()[source]¶; Number of shells.; * @return Number of shells. nshell_on_center(i)[source]¶; Return the number of shells on a given center. print_by_level(out=None, level=2)[source]¶; Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing ; * 1: Brief summary ; * 2: Summary and contraction details ; * > 2: Full details. print_detail(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_detail_cfour(out=None)[source]¶; Returns a string in CFOUR-style of the basis (per-atom); * Format from http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.OldFormatOfAnEntryInTheGENBASFile. print_detail_gamess(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:63033,Integrability,contract,contraction,63033,"at; * number of primitives.; * @return Maximum number of primitives. molecule()[source]¶; Molecule this basis is for.; * @return Shared pointer to the molecule for this basis set. name()[source]¶; Returns the name of this basis set. nao()[source]¶; Number of atomic orbitals (Cartesian).; * @return The number of atomic orbitals (Cartesian orbitals, always). nbf()[source]¶; Number of basis functions (Spherical).; * @return The number of basis functions (Spherical, if has_puream() == true). nprimitive()[source]¶; Number of primitives.; * @return The total number of primitives in all contractions. nshell()[source]¶; Number of shells.; * @return Number of shells. nshell_on_center(i)[source]¶; Return the number of shells on a given center. print_by_level(out=None, level=2)[source]¶; Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing ; * 1: Brief summary ; * 2: Summary and contraction details ; * > 2: Full details. print_detail(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_detail_cfour(out=None)[source]¶; Returns a string in CFOUR-style of the basis (per-atom); * Format from http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.OldFormatOfAnEntryInTheGENBASFile. print_detail_gamess(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_summary(out=None)[source]¶; Prints a short string summarizing the basis set; * @param out The file stream to use for printing. Defaults to outfile. static pyconstruct(mol, key, target, fitrole='BASIS', other=None)[source]¶; Builds a BasisSet object for mol (either a qcdb.Molecule or; a string that can be instantiated into one) from basis set; sp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:66802,Integrability,contract,contraction,66802,"s first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:67053,Integrability,contract,contraction,67053," @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:68770,Integrability,interface,interface,68770,"ntial for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specialization of QCEssential for computational chemistry ; publications, presumably containing many quantum chemistry results. class QCEssential(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Class to link literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:69586,Integrability,interface,interface,69586,"literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; geometry. Presently catches some errors of orientation that; Cfour as Cmol should properly fulfill. These are unnecessary; restrictions and can be relaxed later. transform_coordinates(coord)[source]¶. transform_coordinates2(coord)[source]¶. transform_elementlist(elem)[source]¶; Applies to elem th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:81827,Integrability,message,message,81827,"r; >>> print H2OH2O.fx(4); 2.55231135823. fxyz(atom)[source]¶; Returns a Vector3 with x, y, z position of atom; (0-indexed) in Bohr (includes dummies); >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. fy(atom)[source]¶; y position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fy(4); 0.210645882307. fz(atom)[source]¶; z position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:93291,Integrability,rout,routine,93291,"> C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_group() to scan a given geometry; and determine if an atom is present at a given location. compute_atom_map(m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96902,Integrability,message,message,96902," when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:99839,Integrability,contract,contraction,99839,"E(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100398,Integrability,contract,contraction,100398,"). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if cont",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100473,Integrability,contract,contraction,100473,"is class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100564,Integrability,contract,contraction,100564,"sing; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. nce",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100773,Integrability,contract,contraction,100773," Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100845,Integrability,contract,contraction,100845,"m c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalizat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:100925,Integrability,contract,contraction,100925,"ll is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of prim",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:101367,Integrability,contract,contraction,101367,"l for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:101429,Integrability,contract,contraction,101429,"e). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=None)[source]¶; Print out the shell in Gamess format. set_funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:102093,Integrability,contract,contraction,102093,"malized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=None)[source]¶; Print out the shell in Gamess format. set_function_index(i)[source]¶; Set basis function index where this shell starts. df(n)[source]¶; Gives the double factorial of n. Module containing functions that, when passed a qcdb.WrappedDatabase instance; dbinstance, return an array of reaction names that are a subset of; dbinstance.hrxn.keys(). Since the full database is passed in, reactions; can be filtered by molecule characteristics, reaction names, existing; subsets, etc. The official name of the subset is specified by the function; docstring. Second line of docstring becomes tagl. genset_DDn5min(dbinstance)[source]¶; DD-5min; near-equilibrium systems also in dd. genset_HBn5m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:108492,Integrability,rout,routines,108492,"ate identity matrix. matadd(matrix1, matrix2, fac1=1.0, fac2=1.0)[source]¶; Matrix addition. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. naivemult(v, u)[source]¶; Compute by-element multiplication of vectors v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:111807,Integrability,depend,depending,111807,"mmary statistic mae is plotted on the; overbound side and relative statistic mape on the underbound side.; Saves a file with name title and plots to screen if view. iowa(mcdat, mclbl, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with (extensionless) name pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114077,Integrability,depend,depend,114077,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:117348,Integrability,depend,depends,117348,"ass to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:118802,Integrability,depend,depend,118802,"¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which the orbital basis orbital; (usually the coded form of ornate) and jfit, jkfit,; rifit, and dualfit auxiliary bases can be found. add_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126485,Integrability,message,message,126485,"=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126675,Integrability,depend,dependencies,126675,"ght for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[so",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126702,Integrability,message,message,126702,"ction returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126892,Integrability,message,message,126892,"t of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:127050,Integrability,message,message,127050,"rint stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function return.; >>> optstash = OptionsState(; ['SCF', 'DFT_FUNCTIONAL'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). restore()[source]¶. class InPsight(molecule)[source]¶. atoms = []¶. azimuth = 0.0",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:146019,Integrability,interface,interface,146019,"and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix +",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:146689,Integrability,message,messages,146689,"d builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:148318,Integrability,wrap,wrapper,148318," vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the parti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:157466,Integrability,interface,interface,157466,"superfunctional(name, npoints, deriv)[source]¶. build_wpbe_x_functional(name)[source]¶. build_wpbe_x_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3bj_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3mbj_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3mzero_superfunctional(name, npoints, deriv)[source]¶. build_wpbed3zero_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol0_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_superfunctional(name, npoints, deriv)[source]¶. build_wpbesol_x_functional(name)[source]¶. build_wpbesol_x_superfunctional(name, npoints, deriv)[source]¶. build_wpw92_c_superfunctional(name, npoints, deriv)[source]¶. build_ws_x_functional(name)[source]¶. build_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:171000,Integrability,rout,routine,171000,"e, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from each displaced computation, and computes final result. Table Of Contents. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:435,Modifiability,config,configured,435,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:573,Modifiability,config,configured,573,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:7711,Modifiability,variab,variables,7711,"e)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:18384,Modifiability,variab,variable,18384,"e]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molec",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:19224,Modifiability,variab,variables,19224,"uto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values to external and any; cartesian external values to internal. format_molecule_for_mol2()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. format_molecule_for_molpro()[source]¶. format_molecule_for_numpy(npobj=True)[source]¶; Returns a NumPy array of the non-dummy atoms of the geometry; in Cartesian coordinates in Angstroms with element encoded as; atomic number. If npobj is False, returns representation of; NumPy array. format_molecule_for_nwchem()[source]¶. format_molecule_for_orca()[source]¶; Format the molecule into an orca xyz format. format_molecule_for_psi4()[source]¶; Returns string of m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:19301,Modifiability,variab,variables,19301,"uto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain bonding topology of molecule. center_of_charge()[source]¶; Computes center of charge of molecule (does not translate molecule).; >>> H2OH2O.center_of_charge(); [-0.073339893272065401, 0.002959783555632145, 0.0]. format_basis_for_cfour(puream)[source]¶; Function to print the BASIS=SPECIAL block for Cfour according; to the active atoms in Molecule. Special short basis names; are used by Psi4 libmints GENBAS-writer in accordance with; Cfour constraints. format_molecule_for_cfour()[source]¶; Function to print Molecule in a form readable by Cfour. format_molecule_for_cfour_old()[source]¶; Function to print Molecule in a form readable by Cfour. This; version works as long as zmat is composed entirely of variables,; not internal values, while cartesian is all internal values,; no variables. Cutting off this line of development because,; with getting molecules after passing through libmints Molecule,; all zmats with dummies (Cfour’s favorite kind) have already been; converted into cartesian. Next step, if this line was pursued; would be to shift any zmat internal values to external and any; cartesian external values to internal. format_molecule_for_mol2()¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. format_molecule_for_molpro()[source]¶. format_molecule_for_numpy(npobj=True)[source]¶; Returns a NumPy array of the non-dummy atoms of the geometry; in Cartesian coordinates in Angstroms with element encoded as; atomic number. If npobj is False, returns representation of; NumPy array. format_molecule_for_nwchem()[source]¶. format_molecule_for_orca()[source]¶; Format the molecule into an orca xyz format. format_molecule_for_psi4()[source]¶; Returns string of m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:23884,Modifiability,extend,extended,23884,"es molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with ke",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:41896,Modifiability,variab,variables,41896,"s are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:51522,Modifiability,variab,variables,51522,"[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_elaborate(e=None, pe=None, pbe=None, pce=None, extrema=True)[source]¶. oxcom(lst)[source]¶; Returns gramatical comma separated string of lst. string_contrast(ss)[source]¶; From an array of strings, ss, returns maximum common prefix; string, maximum common suffix string, and array of middles. File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate entries. There is no guarantee of which; duplicate entry is dropped. useful()[source]¶. find_start(lines, start_str, reverse=True)[source]¶; Find the start of a block, iterate backwards by default,; Usually the last one is wanted; If not found, return -1. harvest(p4Mol, orca_out, **largs)[source]¶; Harvest variables, gradient, and the molecule from the output and other; files. harvest_coupled_cluster(lines, psivar)[source]¶; Harvest coupled cluster results; WARNING: Canonical and DLPNO print the coupled cluster results differently. harvest_dipole(lines, psivar)[source]¶; Harvest the dipole, and return as a tuple (x, y, z); Multiple different dipole moments can be output if post-HF calculations are; run and their dipoles are requested resulting in highly similar blocks.; It by default collects the last which appears to always be the one requested; TODO: collect all the different types of dipole moments. harvest_engrad(engrad)[source]¶; Parse the engrad file for the gradient. harvest_molecule_from_outfile(lines)[source]¶; Return a molecule of the last geometry. harvest_mp2(lines, psivar)[source]¶; Harvest the MP2 results. harvest_scf_from_outfile(lines, psivar)[source]¶; Harvest SCF results from the SCF section of the output file. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:56522,Modifiability,variab,variables,56522,"basis sets, returns strings from which auxiliary; basis sets and heavy-aug can be constructed. Note that; valence/core-valence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:59479,Modifiability,config,configured,59479,"t shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compute_phi(phi_ao, x, y, z)[source]¶; Returns the values of the basis functions at a point. concatenate(b)[source]¶; Concatenates two basis sets together into a new basis without; reordering anything. Unless you know what you’re doing, you should; use the ‘+’ operator instead of this method. Appears defunct. classmethod construct(parser, mol, role, deffit=None, basstrings=None)[source]¶; Returns a new BasisSet object configured from the mol; Molecule object for role (generally a Psi4 keyword: BASIS,; DF_BASIS_SCF, etc.). Fails utterly if a basis has not been set for; role for every atom in mol, unless deffit is set (JFIT,; JKFIT, or RIFIT), whereupon empty atoms are assigned to role; from the BasisFamily. This function is significantly; re-worked from its libmints analog. constructor_basisset_center(bs, center)[source]¶. Creates a new basis set object for an atom, from an existing basis set; bs: the basis set to copy data from; center: the atom in bs to copy over. constructor_role_mol_shellmap(role, mol, shell_map)[source]¶; The most commonly used constructor. Extracts basis set name for role; from each atom of mol, looks up basis and role entries in the; shell_map dictionary, retrieves the GaussianShell objects and returns; the BasisSet. constructor_zero_ao_basis()[source]¶; Constructs a zero AO basis set. exp_ao = [[], [], [], [], [], []]¶. export_for_libmints(role)[source]¶; From complete Ba",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:69537,Modifiability,extend,extended,69537,"literature and external representation of some; aspect of quantum chemistry (basis set, method, etc.) with a; shorthand and indexed representation of same. Module with functions that interface with Grimme’s DFTD3 code. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. class OrientMols(molPermanent, molChangeable)[source]¶; Class to encode a transformation between two molecular coordinate; systems. After initializing with two qcdb.Molecule objects at the; same geometry in possible different frames and orderings, class; can apply the appropriate transformations to coordinate, gradient,; Hessian, etc. arrays. create_orientation_from_molecules(Pmol, Cmol)[source]¶; Finds the shift, rotation, axis exchange, axis inversion,; and atom remapping necessary to bring the geometry of Cmol; into coincidence with the geometry of Pmol. Pmol and Cmol; must be qcdb.Molecule and represent the same; geometry. Presently catches some errors of orientation that; Cfour as Cmol should properly fulfill. These are unnecessary; restrictions and can be relaxed later. transform_coordinates(coord)[source]¶. transform_coordinates2(coord)[source]¶. transform_elementlist(elem)[source]¶; Applies to elem th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:82006,Modifiability,variab,variable,82006," dummies); >>> print H2OH2O.fxyz(4); [2.5523113582286716, 0.21064588230662976, 0.0]. fy(atom)[source]¶; y position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fy(4); 0.210645882307. fz(atom)[source]¶; z position of atom (0-indexed, includes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:82190,Modifiability,variab,variable,82190,"cludes dummies) in Bohr; >>> print H2OH2O.fz(4); 0.0. geometry()[source]¶; Returns the geometry in Bohr as a N X 3 array.; >>> print H2OH2O.geometry(); [[-2.930978460188563, -0.21641143673806384, 0.0], [-3.655219780069251, 1.4409218455037016, 0.0], [-1.1332252981904638, 0.0769345303220403, 0.0], [2.5523113582286716, 0.21064588230662976, 0.0], [3.175492014248769, -0.7062681346308132, -1.4334725450878665], [3.175492014248769, -0.7062681346308132, 1.4334725450878665]]. get_anchor_atom(vstr, line)[source]¶; Attempts to interpret a string vstr as an atom specifier in; a zmatrix. Takes the current line for error message printing.; Returns the atom number (adjusted to zero-based counting). get_coord_value(vstr)[source]¶; Attempts to interpret a string as a double, if not it assumes it’s a variable. get_full_point_group()[source]¶; Return point group name such as C3v or S8.; (method name in libmints is full_point_group). get_variable(vstr)[source]¶; Checks to see if the variable str is in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:83668,Modifiability,variab,variable,83668,"t H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). (0-indexed); >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[source]¶; Returns the maximum number of equivalent atoms. molecular_charge()[source]¶; Gets the molecular charge; >>> print H2OH2O.molecular_charge(); -2. move_to_com()[source]¶; Moves molecule to center of mass. multiplicity()[source]¶; Get the multiplicity (defined as 2Ms + 1); >>> print H2OH2O.multiplicity(). multiplicity_specified()[source]¶; Whether the multiplicity was given by the user; >>> print H2OH2O.multiplicity_specified(); True. nactive_fragments()[source]¶; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:92058,Modifiability,variab,variable,92058,"t_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:92108,Modifiability,variab,variables,92108,"t_geometry([[1,2,3],[4,5,6],[7,8,9],[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]). set_ghost_fragment(fr)[source]¶; Tags fragment index fr as composed of ghost atoms. set_ghost_fragments(ghosts)[source]¶; Tags the fragments in array ghosts as composed of ghost atoms. set_has_zmatrix(tf)[source]¶; Sets the presence of any zmatrix entry; >>> H2OH2O.set_has_zmatrix(True). set_molecular_charge(charge)[source]¶; Sets the molecular charge; >>> H2OH2O.set_molecular_charge(-2). set_multiplicity(mult)[source]¶; Sets the multiplicity (defined as 2Ms + 1); >>> H2OH2O.set_multiplicity(3). set_name(name)[source]¶; Set molecule name; >>> H2OH2O.set_name('water_dimer'). set_point_group(pg)[source]¶; Set the point group to object pg. set_shell_by_number(number, bshash, role='BASIS')[source]¶; Assigns BasisSet bshash to atom number number (0-indexed, excludes dummies). set_units(units)[source]¶; Sets the geometry units; >>> H2OH2O.set_units('Angstom'). set_variable(vstr, val)[source]¶; Assigns the value val to the variable labelled string in the; list of geometry variables. Also calls update_geometry(). sym_label()[source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:93227,Modifiability,variab,variables,93227,"source]¶; Returns the symmetry label. symbol(atom)[source]¶; Returns the cleaned up label of the atom (C2 => C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:114058,Modifiability,variab,variables,114058,"python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremental improvements by other; psi4 developers. class CartesianEntry(entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as three Cartesians. clone()[source]¶; Returns new, independent CartesianEntry object. compute()[source]¶; Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. class CoordEntry(entry_number, Z, charge, mass, symbol, label='', basis=None, shells=None)[source]¶; Class to store all the attributes associated with an atom, not the; larger Molecule. Specialized into CartesianEntry and ZMatrixEntry. Z()[source]¶; The nuclear charge of the current atom (0 if ghosted). static a(a1, a2, a3)[source]¶; Computes the angle (in rad.) between three sets of coordinates. basisset(role='BASIS')[source]¶; Returns the basis name for the provided type.; * @param type Keyword from input file.; * @returns the value from input. basissets()[source]¶; Returns basisset to atom map. charge()[source]¶; The “atomic charge” of the current atom (for SAD purposes). static d(a1, a2, a3, a4)[source]¶; Computes the dihedral (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:116405,Modifiability,variab,variables,116405,"e]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:117605,Modifiability,variab,variable,117605,"validate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; P",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:117701,Modifiability,variab,variable,117701,"ource]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:118783,Modifiability,variab,variables,118783,"¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of current atom’s entry. everything()[source]¶. invalidate()[source]¶; Flags the current coordinates as being outdated. print_in_input_format()[source]¶; Prints the updated geometry, in the format provided by the user. print_in_input_format_cfour()[source]¶; Prints the updated geometry, in the format provided by the user. set_coordinates(x, y, z)[source]¶; Given the current set of coordinates, updates the values of this; atom’s coordinates, and any variables that may depend on it. type()[source]¶; The type of CoordEntry specialization. bond_profile(self)[source]¶; Obtain bonding topology of molecule. missing_bonds(bonds, bond_tree, at_types)[source]¶; Determine number of bonds missing for each atom. missing_neighbors(bond_tree, n_missing)[source]¶; Determine number of neighboring atoms missing bonds for each atom. xyz2mol(self)[source]¶; Returns a string of Molecule formatted for mol2.; Written by Trent M. Parker 9 Jun 2014. Module to define a class BasisFamily that associates; fitting basis sets to an orbital basis and to provide functions to; query appropriate fitting bases for any orbital basis distributed; with Psi4. class BasisFamily(ornate, orbital=None)[source]¶; Class to associate with an orbital basis name ornate; the gbs file names in which the orbital basis orbital; (usually the coded form of ornate) and jfit, jkfit,; rifit, and dualfit auxiliary bases can be found. add_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:124845,Modifiability,flexible,flexible,124845,"n the desired order. val(kw)[source]¶. p4util¶. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class Table(rows=(), row_label_width=10, row_label_precision=4, cols=(), width=16, precision=10)[source]¶; Class defining a flexible Table object for storing data. absolute_to_relative(Factor=627.5095)[source]¶; Function to shift the data of each column of the Table object; such that the lowest value is zero. A scaling factor of Factor is applied. copy()[source]¶; Function to return a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:135472,Modifiability,variab,variables,135472,"‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convention.; Arguments:; @arg filename full path to file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. csx2endict()[source]¶; Grabs the CSX file as a dictionary, encodes translation of PSI variables; to XML blocks, gathers all available energies from CSX file into returned; dictionary. cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:None. Parameters:wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals ; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). getFromDict(dataDict, mapList)[source]¶. get_memory()[source]¶; Function to return the total memory allocation. get_num_threads()[source]¶; Function to return the number of threads to parallelize across. oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron propert",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:161465,Modifiability,config,configuration,161465,"[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:161637,Modifiability,config,configuration,161637,"for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. run_dcft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DCFT gradient calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[sour",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:258,Performance,optimiz,optimize,258,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8111,Performance,optimiz,optimizations,8111,"Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8953,Performance,perform,perform,8953,"ing available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other non-Dunning orbital basis sets. Some; plausible fitting basis sets are supplied as defaults. load_basfam_other()[source]¶. class CharacterTable(*ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:16469,Performance,perform,performs,16469,"t symmetry operation. d is; hardwired to 5x5 since the H irrep in Ih is 5 dimensional. E()[source]¶; Set equal to the identity. SymmetryOperation()[source]¶; Cast SymRep to SymmetryOperation. c2_x()[source]¶; Set equal to C2 about the x axis. c2_y()[source]¶; Set equal to C2 about the y axis. c2_z()[source]¶; Set equal to C2 about the z axis. constructor_order(i)[source]¶; Initialize order only. constructor_symmetryoperation(so)[source]¶; Initialize from 3x3 SymmetryOperation. i()[source]¶; Set equal to an inversion. operate(r)[source]¶; This operates on this with r (i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. set_dim(i)[source]¶; Set the dimension of d. sigma_h()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. class SymmetryOperation(*args)[source]¶; The SymmetryOperation class provides a 3 by 3 matrix; representation of a symmetry operation, such as a rotation or reflection. E()[source]¶; Set equal to E. analyze_d()[source]¶. bit()[source]¶; Get the bit value. c2_x()[source]¶; Set equal to C2 about the x axis. c2_y()[source]¶; Set equal to C2 about the y axis. c2_z()[source]¶; Set equal to C2 about the z axis. constructor_symmetryoperation(so)[source]¶. i()[source]¶; Set equal to an inversion. operate(r)[source]¶; This operates on this with r (i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. sigma_xy()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:17512,Performance,perform,performs,17512,"urce]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. class SymmetryOperation(*args)[source]¶; The SymmetryOperation class provides a 3 by 3 matrix; representation of a symmetry operation, such as a rotation or reflection. E()[source]¶; Set equal to E. analyze_d()[source]¶. bit()[source]¶; Get the bit value. c2_x()[source]¶; Set equal to C2 about the x axis. c2_y()[source]¶; Set equal to C2 about the y axis. c2_z()[source]¶; Set equal to C2 about the z axis. constructor_symmetryoperation(so)[source]¶. i()[source]¶; Set equal to an inversion. operate(r)[source]¶; This operates on this with r (i.e. return r * this). rotation(theta)[source]¶; Set equal to a clockwise rotation by 2pi/n or theta degrees. sigma_xy()[source]¶; Set equal to reflection in xy plane. sigma_xz()[source]¶; Set equal to reflection in xz plane. sigma_yz()[source]¶; Set equal to reflection in yz plane. trace()[source]¶; returns the trace of the transformation matrix. transform(r)[source]¶; This performs the transform r * this * r~. transpose()[source]¶; Transpose matrix operation. unit()[source]¶; Set equal to a unit matrix. zero()[source]¶; zero out the symop. similar(bits)[source]¶; From bits of a directionalized point group, returns array of; bits of all directions. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. bond_profile()¶; Obtain",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:27996,Performance,load,loadfrompickle,27996," a Molecule from entries in dictionary jajodic extracted; from JAINDX and JOBARC. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for cfour. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since explicitly set Cfour module keyword; values will always be used preferentially to these inferred from; psi4, the ‘clobber’ property is set to False. class DB4(pythonpath=None, loadfrompickle=False, path=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. make_dhdft_Figure_1()[source]¶; Plot all the graphics needed for the grey bars plot; in Fig. 1 of DHDFT. make_dhdft_Figure_2()[source]¶; Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT.; Note that benchmark set as reminder, not necessity, since default. make_dhdft_Table_I()[source]¶; Generate the in-manuscript summary slat table for DHDFT. make_dhdft_Table_II()[source]¶; Generate the in-manuscript CP slat table for DHDFT. make_dhdft_Table_III()[source]¶; Generate the in-manuscript unCP slat table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:29620,Performance,load,loadfrompickle,29620,"at table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. make_pt2_Figure_3()[source]¶; Plot all the graphics needed for the calendar grey bars plot; in Fig. 3 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. plot_dhdft_flats()[source]¶; Generate pieces for grey bars figure for DH-DFT paper. plot_dhdft_modelchems()[source]¶. plot_minn_modelchems()[source]¶. class Database(dbnamelist, dbse=None, pythonpath=None, loadfrompickle=False, path=None)[source]¶; Collection for handling single or multiple qcdb.WrappedDatabase objects.; Particularly, unifying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchem",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32966,Performance,load,loads,32966,"t_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); X",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:33214,Performance,load,loads,33214,"ing the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:33593,Performance,load,loads,33593,"tionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:33745,Performance,load,loads,33745,"ey needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:39818,Performance,load,loads,39818,"delchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. promote_Subset(name=None)[source]¶; Examine component databases and elevate subset name not necessarily; present for all component databases to a subset for the self. When name; is None, promotes all subsets found for component databases. Also promotes; entirety of each component database as a subset with name of component; database dbse in lowercase. sset = None¶; subset assembly pattern; >>> print asdf.sset.keys(); XXXX. table_merge_abbr(plotpath, subjoin)[source]¶; Specialization of table_generic into table with minimal statistics; (three S22 and three overall) plus embedded slat diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:46702,Performance,load,loaded,46702," define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:120950,Performance,load,load,120950,"default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the default parameters for functional; func. When mode is ‘psi4’, returns a tuple of arguments suitable for building; a Dispersion object with dashlvl parameters for functional func.; There are four computational d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:144537,Performance,load,load,144537,"d or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the im",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:158199,Performance,optimiz,optimize,158199,"d_ws_x_superfunctional(name, npoints, deriv)[source]¶. build_wsvwn_superfunctional(name, npoints, deriv)[source]¶. functional_list()[source]¶. superfunctional_list()[source]¶. test_ccl_functional(functional, ccl_functional)[source]¶. Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unne",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:160008,Performance,optimiz,optimize,160008,"ectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. write_zmat(name, dertype)[source]¶; Returns string with contents of Cfour ZMAT file as gathered from; active molecule, current keyword settings, and cfour {...} block. Module with functions that encode the sequence of PSI module; calls for each of the name values of the energy(), optimize(),; response(), and frequency() function. name can be assumed lowercase by here. run_adc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an algebraic diagrammatic construction calculation. Caution; Get rid of active molecule lines- should be handled in energy. run_bccd(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. run_cc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; all CC property calculations. run_ccenergy(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. run_ccenergy_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. run_cepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a cepa-like calculation.; >>> energy('cepa(1)'). run_dcft(name, **kwargs)[s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:162251,Performance,optimiz,optimized,162251,"t calculation. run_detcas(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; determinant-based multireference wavefuncations,; namely CASSCF and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:162412,Performance,optimiz,optimized,162412,"and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:162573,Performance,optimiz,optimized,162573,"n, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:165293,Performance,optimiz,optimized,165293,"calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166413,Performance,perform,performance,166413,"on encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166580,Performance,perform,performance,166580," for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166750,Performance,perform,performance,166750,"y (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:166915,Performance,perform,performance,166915,"ame, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167091,Performance,perform,performance,167091,"h oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167250,Performance,perform,performance,167250,"revious SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradien",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167416,Performance,perform,performance,167416,"CSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167588,Performance,perform,performance,167588,") energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167747,Performance,perform,performance,167747,"CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:167917,Performance,perform,performance,167917,"CSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168074,Performance,perform,performance,168074,"thm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168242,Performance,perform,performance,168242,"ithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168410,Performance,perform,performance,168410,"or a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168571,Performance,perform,performance,168571,"ecting to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168743,Performance,perform,performance,168743,"ecified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:168900,Performance,perform,performance,168900,"orithm for a LCCD gradient call; and directing to specified or best-performance default modules. select_mp2(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169068,Performance,perform,performance,169068,"thm for a MP2 energy call; and directing to specified or best-performance default modules. select_mp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169225,Performance,perform,performance,169225,"gorithm for a MP2 gradient call; and directing to specified or best-performance default modules. select_mp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169387,Performance,perform,performance,169387,"g the algorithm for a MP2 property call; and directing to specified or best-performance default modules. select_mp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169560,Performance,perform,performance,169560,"algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169720,Performance,perform,performance,169720,"he algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorith",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:169891,Performance,perform,performance,169891,"lgorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170062,Performance,perform,performance,170062,"thm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170226,Performance,perform,performance,170226,"d or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170401,Performance,perform,performance,170401,"rformance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170561,Performance,perform,performance,170561," gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of runn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:170732,Performance,perform,performance,170732,"ergy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:511,Safety,avoid,avoid,511,"﻿. Python Driver — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . Python Driver¶. wrapper_database¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. diatomic¶. pcm_placeholder¶; This is a placeholder for the real pcmsolver.py script.; The location of the real pcmsolver.py is configured by CMake; to point to the proper install prefix.; In this way we avoid to transform inputparser.py into a file; that has to be configured by CMake; With conda, this starts to get complicated. Bottom option; works for build-in-place and build-psi-w-prebuilt-pcmsolver.; Upper option necessary when psi4metapackage is conda build; dependency. At least I think that’s what’s going on. dependency_check¶; Attempts to catch Python based import errors and provides possible solutions. gaussian_n¶. run_gaussian_2(name, **kwargs)[source]¶. frac¶. frac_nuke(molecule, **kwargs)[source]¶. frac_traverse(molecule, **kwargs)[source]¶. ip_fitting(molecule, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:21834,Safety,detect,detected,21834,"Q-Chem.; For ghost atoms, prints Gh as elemental symbol, with expectation; that element identity will be established in mixed basis section.; For ghost atoms when mixedbas is False, prints @ plus element symbol.; prints whole dimer for unCP mono when called dir (as opposed to passing thru str; no frag markers. inertia_tensor(masswt=True, zero=1e-14)[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. inertia_tensor_partial(part, masswt=True, zero=1e-14)[source]¶; Compute inertia tensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set cont",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:22462,Safety,detect,detected,22462,"ensor based on atoms in part. inertial_system(masswt=True, zero=1e-14)[source]¶; Solve inertial system. inertial_system_partial(part, masswt=True, zero=1e-14)[source]¶; Solve inertial system based on atoms in part. classmethod init_with_mol2(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from a MOl2 file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; NOTE: chg/mult NYI; >>> H2O = qcdb.Molecule.init_with_mol2('h2o.mol2'). classmethod init_with_xyz(xyzfilename, no_com=False, no_reorient=False, contentsNotFilename=False)[source]¶; Pull information from an XYZ file. No fragment info detected.; Bohr/Angstrom pulled from first line if available. Charge,; multiplicity, tagline pulled from second line if available. Body; accepts atom symbol or atom charge in first column. Arguments; no_com and no_reorient can be used to turn off shift and; rotation. If xyzfilename is a string of the contents of an XYZ; file, rather than the name of a file, set contentsNotFilename; to True.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). move_to_coc()[source]¶; Moves molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to sup",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:25057,Safety,avoid,avoid,25057,"ce]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:83216,Safety,detect,detected,83216," in the list, sets it to; val and returns true if it is, and returns false if not. has_inversion(origin, tol=1e-08)[source]¶; Does the molecule have an inversion center at origin. has_symmetry_element(op, tol=1e-08)[source]¶; NYI Whether molecule satisfies the vector symmetry; operation op. Not used by libmints. has_zmatrix()[source]¶; Gets the presence of any zmatrix entry; >>> print H2OH2O.has_zmatrix(); False. inertia_tensor()[source]¶; Compute inertia tensor.; >>> print H2OH2O.inertia_tensor(); [[8.704574864178731, -8.828375721817082, 0.0], [-8.828375721817082, 280.82861714077666, 0.0], [0.0, 0.0, 281.249500988553]]. init_with_checkpoint(chkpt)[source]¶; NYI Pull information from the chkpt object passed; (method name in libmints is init_with_chkpt). init_with_io(psio)[source]¶; NYI Pull information from a chkpt object created from psio; (method name in libmints is init_with_psio). classmethod init_with_xyz(xyzfilename)[source]¶; Pull information from an XYZ file. No fragment or chg/mult info detected.; >>> H2O = qcdb.Molecule.init_with_xyz('h2o.xyz'). irrep_labels()[source]¶; Returns the irrep labels. is_axis(origin, axis, order, tol=1e-08)[source]¶; Is axis an axis of order order with respect to origin?. is_linear_planar(tol=1e-08)[source]¶; Is the molecule linear, or planar?; >>> print H2OH2O.is_linear_planar(); (False, False). is_plane(origin, uperp, tol=1e-08)[source]¶; Is a plane?. is_variable(vstr)[source]¶; Checks to see if the variable str is in the list, returns; true if it is, and returns false if not.; >>> H2OH2O.is_variable('R'); False. label(atom)[source]¶; Returns the original label of the atom (0-indexed) as given in the input file (C2, H4). (0-indexed); >>> print H2OH2O.label(4); H3. static like_world_axis(axis, worldxaxis, worldyaxis, worldzaxis)[source]¶; Returns which worldaxis axis most overlaps with.; Inverts axis when indicated. mass(atom)[source]¶; Returns mass of atom (0-indexed); >>> print H2OH2O.mass(4); 1.00782503207. max_nequivalent()[",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:148261,Safety,recover,recovery,148261," vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE; S/R P4grad; S/R C4grad; C P4grad; C C4grad; switch C –> S/R with recovery using shelf; pure C mode where only need P4 for wrapper. vpt2_instructions(stage, dir, zmats)[source]¶; Stores all the instructions to the user for running; vpt2() in sowreap mode. Depending on the; stage, Pieces together instruction strings for the appropriate; stage individualized by working directory dir and sown inputs; zmats information. vpt2_reaprun_files(item, linkage, isSowReap, isC4notP4, isC4fully, zmat, outdir, scrdir, c4scrdir, lowername, kwargs)[source]¶; Provided with the particular displacement number item and the; associated zmat file with geometry and linkage, returns the; FJOBARC contents. Depending on the mode settings of isC4notP4,; isSowReap, and isC4fully, either runs (using lowername and; kwargs) or reaps contents. outdir is where psi4 was invoked,; scrdir is the psi4 scratch directory, and c4scrdir is Cfour; scratch directory within. vpt2_sow_files(item, linkage, isC4notP4, isC4fully, zmat, inputSansMol, inputGenbas)[source]¶; Provided with the parti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:2953,Security,validat,validated,2953," size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. new_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. driver_util¶. parse_arbitrary_order(name)[source]¶; Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. parse_cotton_irreps(irrep, point_group)[source]¶; Function to return validated Cotton ordering index for molecular; point_group from string or integer irreducible representation irrep. aliases¶; Module with functions that call upon those in modules; proc, driver, and wrappers. Place in this file quickly defined procedures such as. aliases for complex methods; simple modifications to existing methods. fake_file11(wfn, filename='fake_file11.dat', **kwargs)[source]¶; Function to print a file filename of the old file11 format; from molecule and gradient information in wfn. New in version 0.6: wfn parameter passed explicitly. Returns:None. Parameters:; filename (string) – destination file name for file11 file; wfn (Wavefunction) – set of molecule, gradient from which to generate file11. Examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:4698,Security,access,access,4698,">> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. inputparser¶; Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. bad_option_syntax(line)[source]¶; Function to report bad syntax to screen and output file. basname(name)[source]¶; Imitates BasisSet.make_filename() without the gbs extension. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name? { ... }. process_cfour_command(matchobj)[source]¶; Function to process match of cfour name? { ... }. process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_from_file_command(matchobj)[source]¶; Function that pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:5864,Security,validat,validate,5864,")[source]¶; Imitates BasisSet.make_filename() without the gbs extension. check_parentheses_and_brackets(input_string, exit_on_error)[source]¶; Function to check that all parenthesis and brackets; in input_string are paired. On that condition, exit_on_error =1,; otherwise 0. parse_multiline_array(input_list)[source]¶; Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. process_basis_block(matchobj)[source]¶; Function to process match of basis name? { ... }. process_cfour_command(matchobj)[source]¶; Function to process match of cfour name? { ... }. process_external_command(matchobj)[source]¶; Function to process match of external name? { ... }. process_extract_command(matchobj)[source]¶; Function to process match of extract_subsets. process_from_file_command(matchobj)[source]¶; Function that process a match of from_file in molecule block. process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; raw_input is printed to the output file unless print_level =0. Does; a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. process_literal_blocks(matchobj)[source]¶; Function to process match of literals_psi4_yo-.... process_memory_command(matchobj)[source]¶; Function to process match of memory .... process_molecule_command(matchobj)[source]¶; Function to process match of molecule name? { ... }. process_multiline_arrays(inputfile)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32688,Security,access,access,32688,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32735,Security,access,access,32735,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:33379,Security,validat,validated,33379,"_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:35029,Security,access,accessible,35029,"source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:36022,Security,access,accessible,36022,"format; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:36991,Security,access,accessible,36991,"accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pd",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38063,Security,access,access,38063,"requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File exten",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38150,Security,access,accessible,38150,"an absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved fi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38213,Security,access,accessible,38213,"an absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved fi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:39042,Security,access,accessible,39042,"t of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. promote_Subset(name=None)[source]¶; Examine component databases and elevate subset name not necessarily; present for all component databases to a subset for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:44332,Security,access,accessible,44332,"efault', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and base",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:45802,Security,validat,validation,45802,"turned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:45851,Security,access,accessors,45851,"turned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Piece of quantum chemical information that describes a qcdb.Reaction object. classmethod library_modelchem(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, doi=None, comment=None)[source]¶; Constructor when method and basis are strings corresponding to; qcdb.Method and qcdb.BasisSet already defined in methods and bases. class Reagent(name, mol, tagl=None, comment=None)[source]¶; Chemical entity only slightly dresed up from qcdb.Molecule. class Subset(name, hrxn, tagl=None, axis=None)[source]¶; Affiliated qcdb.Reaction-s. class ThreeDatabases(pythonpath=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. class WrappedDatabase(dbname, pythonpath=None)[source]¶; Wrapper class for raw Psi4 database modules that does some validation; of contents, creates member data and accessors for database structures,; defines error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:48990,Security,validat,validated,48990,"(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modname function; funcname. Module search path can be prepended with pythonpath. load_qcdata_byproject(project, pythonpath=None)[source]¶; Loads qcdb.ReactionDatums from standard location for project; :module dbse_project and function load_project. Module search path; can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; Loads subsets from all functions in module modname. oss = None¶; object of defined reaction subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:58236,Security,access,accessed,58236," portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*args)[source]¶; Basis set container class; Reads the basis set from a checkpoint file object. Also reads the molecule; from the checkpoint file storing the information in an internal Molecule class; which can be accessed using molecule(). LIBINT_MAX_AM = 6¶. add(b)[source]¶; Adds this plus another basis set and returns the result.; Equivalent to the ‘+’ operator. Appears defunct. ao_to_shell(i)[source]¶; Given a Cartesian function (AO) number what shell does it correspond to. atomic_basis_set(center)[source]¶; Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. static build(molecule, shells)[source]¶; Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of atom-numbered GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. compute_phi(phi_ao, x, y, z)[source]¶; Returns the values of the basis functions at a point. concatenate(b)[source]¶; Concatenates tw",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:60564,Security,hash,hash,60564,"Psi4 keyword: BASIS,; DF_BASIS_SCF, etc.). Fails utterly if a basis has not been set for; role for every atom in mol, unless deffit is set (JFIT,; JKFIT, or RIFIT), whereupon empty atoms are assigned to role; from the BasisFamily. This function is significantly; re-worked from its libmints analog. constructor_basisset_center(bs, center)[source]¶. Creates a new basis set object for an atom, from an existing basis set; bs: the basis set to copy data from; center: the atom in bs to copy over. constructor_role_mol_shellmap(role, mol, shell_map)[source]¶; The most commonly used constructor. Extracts basis set name for role; from each atom of mol, looks up basis and role entries in the; shell_map dictionary, retrieves the GaussianShell objects and returns; the BasisSet. constructor_zero_ao_basis()[source]¶; Constructs a zero AO basis set. exp_ao = [[], [], [], [], [], []]¶. export_for_libmints(role)[source]¶; From complete BasisSet object, returns array where; triplets of elements are each unique atom label, the hash; of the string shells entry in gbs format and the; shells entry in gbs format for that label. This packaging is; intended for return to libmints BasisSet::pyconstruct for; instantiation of a libmints BasisSet clone of self. function_to_center(i)[source]¶; Given a function what is its atomic center; * @param i Function number; * @return The atomic center for the i’th function. function_to_shell(i)[source]¶; Given a function number what shell does it correspond to. get_ao_sorted_list()[source]¶; Returns the vector of sorted shell list. Defunct. get_ao_sorted_shell(i)[source]¶; Returns the value of the sorted shell list. Defunct. has_puream()[source]¶; Spherical harmonics?; * @return true if using spherical harmonics. initialize_singletons()[source]¶; Initialize singleton values that are shared by all basis set objects. initialized_shared = False¶. l = 5¶. static make_filename(name)[source]¶; Converts basis set name to a compatible filename.; * @param basisname ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:67319,Security,validat,validate,67319,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:106855,Security,access,accessory,106855,"urce]¶; Reads binary files JOBARC and JAINDX and returns contents; of each record in reclabelarray. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_cdsgroup_options()[source]¶. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. Elemental masses (most common isotope), symbols, and atomic numbers from psi4.; File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagonalize3x3symmat(M)[source]¶; Given an real symmetric 3x3 matrix M, compute the eigenvalues. distance(v, u)[source]¶; Compute the distance between points defined by vectors v and u. dot(v, u)[source]¶; Compute dot product of vectors v and u. identity(m)[source]¶; Create identity matrix. matadd(matrix1, matrix2, fac1=1.0, fac2=1.0)[source]¶; Matrix addition. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. naivemult(v, u)[source]¶; Compute by-element multiplication of vectors v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vect",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:115872,Security,hash,hash,115872,"l (in rad.) between four sets of coordinates. entry_number()[source]¶; The order in which this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent Numbe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:115969,Security,hash,hash,115969,"this appears in the full atom list. everything()[source]¶. is_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everythi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:116044,Security,hash,hash,116044,"s_computed()[source]¶; Whether the current atom’s coordinates are up-to-date. is_equivalent_to(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:116128,Security,hash,hash,116128,"(other)[source]¶; Whether this atom has the same mass and ghost status as atom other.; Also compares basis set assignment down to nbf(), has_puream() level; with code borrowed from Robert M. Parrish’s SAD guess in Psi4. is_ghosted()[source]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:120749,Security,validat,validate,120749,"add basis fit as associated helper basis; member dualfit to a BasisFamily object. add_jfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jfit to a BasisFamily object. add_jfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jdef to a BasisFamily object. add_jkfit(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkfit to a BasisFamily object. add_jkfit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member jkdef to a BasisFamily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. add_rifit_default(fit)[source]¶; Function to add basis fit as associated fitting basis; member ridef to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_basis(name, role='BASIS')[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. Module to hold and distribute the -D dispersion correction parameters. dash_server(func, dashlvl, mode='psi4')[source]¶; Function to serve up dispersion correction parameters in whatever form needed.; When mode is ‘dftd3’, returns a string suitable for writing to ./dftd3_parameters; to calculuate the correction at dashlvl with the de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132000,Security,validat,validate,132000,"0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when strin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:144108,Security,validat,validate,144108,"mily object. add_rifit(fit)[source]¶; Function to add basis fit as associated fitting basis; member rifit to a BasisFamily object. name()[source]¶; Function to return the ornate name of the orbital basis,; e.g., 6-311++G** for 6-311ppgss. corresponding_dualfit(name)[source]¶; Function to return an appropriate DUAL helper basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method recei",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:147208,Security,validat,validated,147208,"not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. Caution; Some features are not yet implemented. Buy a developer a coffee. Presently uses all gradients. Could mix in analytic 2nd-derivs.; Collect resutls.; Manage scratch / subdir better.; Untangle CCSD(T) vs CCSD[T] and FJOBARC issue; Allow CFOUR_BASIS; Consider forcing some tighter convcrit, c4 and p4; sow/reap; mixed ang/bohr signals; error by converting to ang in psi?; Expand CURRENT DIPOLE XYZ beyond SCF; Remember additional FJOBARC recor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:158466,Security,access,accessible,158466," Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. cfour_gradient_list()[source]¶; Form list of Cfour analytic gradient() arguments. cfour_list()[source]¶; Form list of Cfour energy() arguments. cfour_psivar_list()[source]¶; Form dictionary of PSI Variables set by Cfour methods. run_cfour(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:28341,Testability,benchmark,benchmark,28341,"_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since explicitly set Cfour module keyword; values will always be used preferentially to these inferred from; psi4, the ‘clobber’ property is set to False. class DB4(pythonpath=None, loadfrompickle=False, path=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. make_dhdft_Figure_1()[source]¶; Plot all the graphics needed for the grey bars plot; in Fig. 1 of DHDFT. make_dhdft_Figure_2()[source]¶; Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT.; Note that benchmark set as reminder, not necessity, since default. make_dhdft_Table_I()[source]¶; Generate the in-manuscript summary slat table for DHDFT. make_dhdft_Table_II()[source]¶; Generate the in-manuscript CP slat table for DHDFT. make_dhdft_Table_III()[source]¶; Generate the in-manuscript unCP slat table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. make_pt2_Figure_3()[source]¶; Plot all the graphics needed for the calendar grey bars plot; in Fig. 3 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:30651,Testability,benchmark,benchmark,30651,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:30855,Testability,benchmark,benchmark,30855,"ying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:30962,Testability,benchmark,benchmark,30962,"se keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:31177,Testability,benchmark,benchmark,31177,"se keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchems(modelchem, benchmark='default', failoninc=True, verbose=False)[source]¶; For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:31701,Testability,benchmark,benchmark,31701,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:31859,Testability,benchmark,benchmark,31859,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:31873,Testability,benchmark,benchmark,31873,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32326,Testability,benchmark,benchmark,32326,"l chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32393,Testability,benchmark,benchmark,32393,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32533,Testability,benchmark,benchmark,32533,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:32742,Testability,benchmark,benchmark,32742,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:34346,Testability,benchmark,benchmark,34346,"project(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo. load_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:34522,Testability,benchmark,benchmark,34522,"ad_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, save",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:34764,Testability,benchmark,benchmark,34764,"ad_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, save",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:35558,Testability,benchmark,benchmark,35558," bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:35805,Testability,benchmark,benchmark,35805," bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:36454,Testability,benchmark,benchmark,36454,"tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', ss",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:36740,Testability,benchmark,benchmark,36740,"csformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single model",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37466,Testability,benchmark,benchmark,37466,"e, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=Fal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37696,Testability,benchmark,benchmark,37696,"; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemist",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:37915,Testability,benchmark,benchmark,37915,"or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spect",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38252,Testability,benchmark,benchmark,38252,"lable (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram inst",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38673,Testability,benchmark,benchmark,38673,"tle='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:38783,Testability,benchmark,benchmark,38783,"t xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. plot_ternary(sset='default', labeled=True, pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:40966,Testability,benchmark,benchmark,40966,"subset with name of component; database dbse in lowercase. sset = None¶; subset assembly pattern; >>> print asdf.sset.keys(); XXXX. table_merge_abbr(plotpath, subjoin)[source]¶; Specialization of table_generic into table with minimal statistics; (three S22 and three overall) plus embedded slat diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], iali",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:41519,Testability,benchmark,benchmark,41519,"diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:42065,Testability,benchmark,benchmark,42065,"] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:42461,Testability,benchmark,benchmark,42461," if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:43334,Testability,benchmark,benchmark,43334,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:43505,Testability,benchmark,benchmark,43505,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:43729,Testability,benchmark,benchmark,43729,"es and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:44128,Testability,benchmark,benchmark,44128," Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or mouseimag is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. class ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:46853,Testability,benchmark,benchmark,46853,"error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:46928,Testability,benchmark,benchmark,46928,"error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:46965,Testability,benchmark,benchmark,46965,"ts and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47129,Testability,benchmark,benchmark,47129,"ts and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47378,Testability,benchmark,benchmark,47378,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:47570,Testability,benchmark,benchmark,47570,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:50168,Testability,benchmark,benchmark,50168,"subsets. sset = None¶; dict of defined reaction subsets.; Note that self.sset[‘default’] contains all the nonredundant information.; >>> print asdf.sset.keys(); ['meme', 'mxddpp', '5min', ... 'small']. tagl = None¶; description line; >>> print asdf.tagl; 'interaction energies of dissociation curves for non-bonded systems'. average_errors(*args)[source]¶; Each item in args should be an error dictionary. Performs; average-like operation over all items, which should be error; dictionaries, in args. Defined for ME, MAE, STDE, and their; relative-error variants. None returned for undefined statistics or; when an item is missing. balanced_error(refrxn, refeq, rrat, m=0.03, p=10.0)[source]¶. Parameters:; refrxn – ; refeq – ; rrat – ; m – minimum permitted weight for a point; p – multiples of abs(refeq) above refeq to which zero-line in head is displaced. Returns:. cure_weight(refrxn, refeq, rrat, xi=0.2)[source]¶. Parameters:; refeq – value of benchmark for equilibrium Reaction; rrat – ratio of intermonomer separation for Reaction to equilibrium Reaction; xi – parameter. Returns:weight for CURE. fancify_mc_tag(mc, latex=False)[source]¶; From the usual MTD-opt1_opt2-bas model chemistry identifier, return; string based on fullname, if latex is False or latex if latex is True. format_errors(err, mode=1)[source]¶; From error dictionary err, returns a LaTeX-formatted string,; after handling None entries. initialize_errors()[source]¶; Form OrderedDict of all possible statistical measures set to None. initialize_errors_elaborate(e=None, pe=None, pbe=None, pce=None, extrema=True)[source]¶. oxcom(lst)[source]¶; Returns gramatical comma separated string of lst. string_contrast(ss)[source]¶; From an array of strings, ss, returns maximum common prefix; string, maximum common suffix string, and array of middles. File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate ent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:66337,Testability,test,test,66337,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:66469,Testability,test,test,66469,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:66491,Testability,benchmark,benchmarking,66491,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:66520,Testability,benchmark,benchmark,66520,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:67376,Testability,test,testing,67376,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:95969,Testability,test,test,95969,"ram phi double : magnitude of rotation in rad; @param Sn bool : if true, then also reflect in plane through origin and perpendicular to rotation; @returns SharedMatrix with rotated points (rows). matrix_3d_rotation_Cn(coord, axis, reflect, tol=1e-08, max_Cn_to_check=-1)[source]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96311,Testability,test,test,96311,"er rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; availa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96549,Testability,test,test,96549,"olen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(modu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:96938,Testability,test,test,96938," on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; available, None if not. getattr_ignorecase(module, attr)[source]¶; Function to extract attribute attr from module if attr; is available in any possible lettercase permutation. Returns; attribute if available, None if not. import_ignorecase(module)[source]¶; Function to import module in any possible lettercase; permutation. Returns module object if available, None if not. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:126823,Testability,test,test,126823,"eq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function retur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:131952,Testability,test,test,131952,", 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132305,Testability,test,test,132305," color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. update_geometry()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132535,Testability,test,test,132535,"()[source]¶. width = 1200¶. zoom = 0.5¶. Module with utility functions for use in input files. compare_arrays(expected, computed, digits, label)[source]¶; Function to compare two numpy arrays. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:132877,Testability,test,test,132877,"match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:133115,Testability,test,test,133115,"cted, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:133369,Testability,test,test,133369,"[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:133708,Testability,test,test,133708,"match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; conventi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:146414,Testability,test,tests,146414," a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:3246,Usability,simpl,simple,3246,"ll possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a molecule object of name name; from the geometry in string geom. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. new_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. new_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. driver_util¶. parse_arbitrary_order(name)[source]¶; Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. parse_cotton_irreps(irrep, point_group)[source]¶; Function to return validated Cotton ordering index for molecular; point_group from string or integer irreducible representation irrep. aliases¶; Module with functions that call upon those in modules; proc, driver, and wrappers. Place in this file quickly defined procedures such as. aliases for complex methods; simple modifications to existing methods. fake_file11(wfn, filename='fake_file11.dat', **kwargs)[source]¶; Function to print a file filename of the old file11 format; from molecule and gradient information in wfn. New in version 0.6: wfn parameter passed explicitly. Returns:None. Parameters:; filename (string) – destination file name for file11 file; wfn (Wavefunction) – set of molecule, gradient from which to generate file11. Examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). interactive¶. run()[source]¶. pubchem¶. class PubChemObj(cid, mf, iupac)[source]¶. getCartesian()[source]¶; Function to return a string of the atom symbol and XYZ; coordinates of the PubChem object. getMoleculeString()[source]¶; Function to obtain a molecule string through; getCartesian() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferenti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:8533,Usability,simpl,simple,8533,"quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; mo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:14360,Usability,simpl,simple,14360,"]¶; Returns the order of the group. p(x1, x2, i=None)[source]¶; Returns the element (x1, x2) of the i’th representation matrix.; Or Returns the character for the x1’th contribution to the x2’th; representation matrix. symbol()[source]¶; Returns the Mulliken symbol for the irrep. symbol_ns()[source]¶; Returns the Mulliken symbol for the irrep without special; characters. class PointGroup(*args)[source]¶; The PointGroup class is really a place holder for a CharacterTable.; It contains a string representation of the Schoenflies symbol of a; point group, a frame of reference for the symmetry operation; transformation matrices, and a point of origin. The origin is not; respected by the symmetry operations, so if you want to use a point; group with a nonzero origin, first translate all your coordinates to; the origin and then set the origin to zero. bits()[source]¶; Returns the bitwise representation of the point group. static bits_to_basic_name(bits)[source]¶; From bit representation of point group, returns string of simple; (non-directional) Schoenflies symbol. static bits_to_full_name(bits)[source]¶. char_table()[source]¶; Returns the CharacterTable for this point group. constructor_bits(bits)[source]¶; Using the bitwise representation constructor the point group; object. constructor_bits_origin(bits, origin)[source]¶; Using the bitwise representation constructor the point group; object. constructor_schoenflies(s)[source]¶; This constructor takes a string containing the Schoenflies; symbol of the point group as its only argument. constructor_schoenflies_origin(s, origin)[source]¶; Like the above, but this constructor also takes a point of; origin as an argument. static full_name_to_bits(pg)[source]¶. origin()[source]¶; Returns the origin of the symmetry frame. set_symbol(sym)[source]¶; Sets (or resets) the Schoenflies symbol. symbol()[source]¶; Returns the Schoenflies symbol for this point group. class SymRep(*args)[source]¶; The SymRep class provides an n dimensional ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:53372,Usability,clear,clear,53372,"nes, psivar)[source]¶; Harvest SCF results from the SCF section of the output file. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options for orca. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for orca. While deliberately requested pieces,; generally orca__orca_deriv_level and orca__orca_calc_level,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, can be countermanded by keywords in input file; (‘clobber’ set to False). Occasionally, we want these pieces to actually; overcome keywords in input file (‘superclobber’ set to True). orca_gradient_list()[source]¶; Return an array of Orca methods with analytical gradients.; Appended to procedures[‘gradient’]. orca_list()[source]¶; Return an array of Orca methods with energies. Appended; to procedures[‘energy’]. class OrderedDict(*args, **kwds)[source]¶; Dictionary that remembers insertion order. clear() → None. Remove all items from od.[source]¶. copy() → a shallow copy of od[source]¶. classmethod fromkeys(S[, v]) → New ordered dictionary with keys from S[source]¶; and values equal to v (which defaults to None). items() → list of (key, value) pairs in od[source]¶. iteritems()[source]¶; od.iteritems -> an iterator over the (key, value) items in od. iterkeys() → an iterator over the keys in od[source]¶. itervalues()[source]¶; od.itervalues -> an iterator over the values in od. keys() → list of keys in od[source]¶. pop(k[, d]) → v, remove specified key and return the corresponding value.[source]¶; If key is not found, d is returned if given, otherwise KeyError is raised. popitem() → (k, v), return and remove a (key, value) pair.[source]¶; Pairs are returned in LIFO order if last is true or FIFO order if false. setdefault(k[, d]) → od.get(k,d), also set od[k]=d if k not in od[source]¶. update(E, **F) → None. Update od from dict/iterable E and F.[source]¶; If E is a dict instance, does: f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:76484,Usability,clear,clear,76484,"s at the passed position b in Bohr with a tolerance tol.; >>> print H2OH2O.atom_at_position([1.35*(1.0/psi_bohr2angstroms), 0.10*(1.0/psi_bohr2angstroms), 0.0*(1.0/psi_bohr2angstroms)]); 3. atom_entry(atom)[source]¶; Returns the CoordEntry for an atom. atom_to_unique(iatom)[source]¶; Converts an atom number to the number of its generating unique atom.; The return value is in [0, nunique). atom_to_unique_offset(iatom)[source]¶; Converts an atom number to the offset of this atom; in the list of generated atoms. The unique atom itself is allowed offset 0. center_of_mass()[source]¶; Computes center of mass of molecule (does not translate molecule).; >>> H2OH2O.center_of_mass(); [-0.12442647346606871, 0.00038657002584110707, 0.0]. charge(atom)[source]¶; Returns charge of atom (0-indexed).; Related to SAD guess in libmints version.; >>> print H2OH2O.charge(4); 1.0. charge_specified()[source]¶; Whether the charge was given by the user; >>> print H2OH2O.charge_specified(); True. clear()[source]¶; Zero it out. clear_basis_all_atoms()[source]¶; Remove all basis information from atoms. clone()[source]¶; Returns new, independent Molecule object.; >>> dimer = H2OH2O.clone(). create_molecule_from_string(text)[source]¶; Given a string text of psi4-style geometry specification; (including newlines to separate lines), builds a new molecule.; Called from constructor. create_psi4_string_from_molecule()[source]¶; Regenerates a input file molecule specification string from the; current state of the Molecule. Contains geometry info,; fragmentation, charges and multiplicities, and any frame; restriction. deactivate_all_fragments()[source]¶; Sets all fragments in the molecule to be inactive. distance_matrix()[source]¶; Computes a matrix depicting distances between atoms. Prints; formatted and returns array.; >>> H2OH2O.distance_matrix(); Interatomic Distances (Angstroms); [1] [2] [3] [4] [5] [6]; [1] 0.00000; [2] 0.95711 0.00000; [3] 0.96391 1.51726 0.00000; [4] 2.91042 3.34878 1.95159 0.00",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:93257,Usability,clear,cleared,93257,"> C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_group() to scan a given geometry; and determine if an atom is present at a given location. compute_atom_map(m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:112182,Usability,simpl,simply,112182,"me pltfile with an Iowa; representation of the modelchems errors in mcdat for BBI/SSI-style; labels. liliowa(mcdat, title='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with a heatmap representation of mcdat. segment_color(argcolor, saptcolor)[source]¶; Find appropriate color expression between overall color directive; argcolor and particular color availibility rxncolor. ternary(sapt, title='', labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Takes array of arrays sapt in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on labeled. Saves in formats graphicsformat. threads(data, labels, color=None, title='', xlimit=4.0, mae=None, mape=None, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, labeled=True, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generates a tiered slat diagram between model chemistries with; errors (or simply values) in list data, which is supplied as part of the; dictionary for each participating reaction, along with dbse and rxn keys; in argument data. The plot is labeled with title and each tier with; an element of labels and plotted at xlimit from the zero-line. If; color is None, slats are black, if ‘sapt’, colors are taken from color; key in data [0, 1]. Summary statistics mae are plotted on the; overbound side and relative statistics mape on the underbound side.; HTML code for mouseover if mousetext or mouselink or mouseimag specified; based on recipe of Andrew Dalke from; http://www.dalkescientific.com/writings/diary/archive/2005/04/24/interactive_html.html. valerr(data, color=None, title='', xtitle='', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. Module to largely replicate in python the psi4 libmints; CoordValue and CoordEntry classes, which were developed by; Justin M. Turney, with incremen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:116448,Usability,simpl,simplifying,116448,"e]¶; Whether the current atom is ghosted or not. label()[source]¶; The atom label. mass()[source]¶; The atomic mass of the current atom. static r(a1, a2)[source]¶; Computes the distance between two sets of coordinates. set_basisset(name, role='BASIS')[source]¶; Set the basis for this atom; * @param type Keyword from input file, basis, ri_basis, etc.; * @param name Value from input file. set_ghosted(gh)[source]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:116809,Usability,simpl,simply,116809,"]¶; Flag the atom as either ghost or real. set_shell(bshash, key='BASIS')[source]¶; Set the hash for this atom; * @param key Keyword from input file, basis, ri_basis, etc.; * @param bshash hash string of one-atom BasisSet. shell(key='BASIS')[source]¶; Returns the hash for the provided type.; * @param type Keyword from input file.; * @returns the hash string for basis. shells()[source]¶; Returns shells sets to atom map. symbol()[source]¶; The atomic symbol. class CoordValue(fixed=False, computed=False)[source]¶; An abstract class to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:138110,Usability,simpl,simply,138110,"D’ line to screen.; Used by util.compare_values() family when functions pass. xml2dict(filename=None)[source]¶; Read XML filename into nested OrderedDict-s. filename defaults to; active CSX file. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Module with utility functions used by several Python functions. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. expand_psivars(pvdefs)[source]¶; Dictionary pvdefs has keys with names of PsiVariables to be; created and values with dictionary of two keys: ‘args’, the; PsiVariables that contribute to the key and ‘func’, a function (or; lambda) to combine them. This function builds those PsiVariables if; all the contributors are available. Helpful printing is available when; PRINT > 2. extract_sowreap_from_output(sowout, quantity, sownum, linkage, allvital=False, label='electronic energy')[source]¶; Function to examine file sowout from a sow/reap distributed job; for formatted line with electronic energy information about inde",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:163001,Usability,simpl,simple,163001,"n encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of module calls for a pure EFP; computation (ignore any QM atoms). run_eom_cc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CC calculation, namely EOM-CC2, EOM-CCSD, and EOM-CC3. run_eom_cc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an EOM-CCSD gradient calculation. run_fisapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an F/ISAPT0 computation. run_fnocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a QCISD(T), CCSD(T), MP2.5, MP3, and MP4 computation.; >>> energy('fno-ccsd(t)'). run_fnodfcc(name, **kwargs)[source]¶; Fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_driver.html:165965,Usability,simpl,simple,165965,"ence from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Fun",MatchSource.WIKI,psi4manual/1.0.0/autodoc_driver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:16284,Availability,toler,tolerance,16284,"; GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:23902,Availability,avail,available,23902,"arse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orb",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:23993,Availability,avail,available,23993,"in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) B",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:25506,Availability,avail,available,25506,"-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with con",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27001,Availability,avail,available,27001,": integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27263,Availability,avail,available,27263,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:30911,Availability,error,error,30911,"urrently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:31365,Availability,avail,available,31365,"RREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:31540,Availability,avail,available,31540,"here are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of compu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:31780,Availability,avail,available,31780,"ution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:35630,Availability,avail,available,35630,"ntrols whether non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks. Type: boolean; Default: false. CFOUR_ESTATE_CONV (CFOUR); CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below with as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR); CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR); CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evalu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:38543,Availability,avail,available,38543,"0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the tre",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:41103,Availability,avail,available,41103,"tched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46038,Availability,avail,available,46038,"elation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_G",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49135,Availability,avail,available,49135,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:51664,Availability,avail,available,51664," CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing perform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:55928,Availability,avail,available,55928,"ore memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of O",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:57417,Availability,error,error,57417,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:60411,Availability,toler,tolerant,60411,"tals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD ap",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:79681,Availability,avail,available,79681,"e with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR); CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:80362,Availability,avail,available,80362,"OUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR); CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:81050,Availability,avail,available,81050,": integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR); CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: A",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:83949,Availability,toler,tolerance,83949,"orce-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:84748,Availability,toler,tolerance,84748,"fied as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF); SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI); DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:84876,Availability,toler,tolerance,84876,"Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF); SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI); DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:87331,Availability,toler,tolerance,87331,"ult. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be speci",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:94786,Availability,error,error,94786,"ompute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 densit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:94805,Availability,error,error,94805,"ompute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 densit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:96228,Availability,avail,available,96228,"DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_GUESS (SCF); SCF — When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the cc-pVDZ-RI basis set (when available for all elements). Type: string; Possible Values: basis string; Default: FALSE. DF_BASIS_MCSCF (DETCI); DETCI — Auxiliary basis set for MCSCF density fitted ERI computations. This only effects the “Q” matrix in Helgaker’s language. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_MP2 (DFMP2); DFMP2 — Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAD (SCF); SCF (Expert) — Fitting SAD basis. Type: string; Possible Values: basis string; Default: SAD-FIT. DF_BASIS_SAPT (SAPT); SAPT — Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (CPHF); CPHF — Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (SCF); SCF — Auxiliary basis set fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:98203,Availability,down,down,98203,"CF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BUMP_R0 (SCF); SCF — Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1 (SCF); SCF — Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS (SCF); SCF — FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition. Type: double; Default: 1.0e-12. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum err",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:99029,Availability,error,error,99029,"r of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF); SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF); SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME (SCF); SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Va",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:99174,Availability,error,error,99174,"y be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF); SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF); SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME (SCF); SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_BS_RADIUS_ALPHA (SCF); SCF — Factor for effective BS radius in radial grid. Type: double; Default: 1.0. DFT_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:102566,Availability,robust,robust,102566,"efault: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires CI vectors on disk, where is the maximum number of iterations and is the number of roots. Type: string; Possible Values: RSP, OLSEN, MITRUSHENKOV, DAVIDSON, SEM, SEMTEST; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104049,Availability,error,error,104049,"BALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104170,Availability,error,error,104170," use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104381,Availability,error,error,104381,"; CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104506,Availability,error,error,104506," use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104623,Availability,error,error,104623,"trapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104752,Availability,error,error,104752,"SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104873,Availability,error,error,104873,"n to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:104990,Availability,error,error,104990," 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:105386,Availability,error,error,105386,"ximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:105832,Availability,avail,available,105832,"S_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMR",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:106925,Availability,checkpoint,checkpoint,106925,"oolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WR",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:107977,Availability,checkpoint,checkpoints,107977,"onvenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG —",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:109194,Availability,toler,tolerances,109194," the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:117806,Availability,avail,available,117806,"nded Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:127742,Availability,checkpoint,checkpoint,127742,"st overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keyword",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:128252,Availability,redundant,redundant,128252," two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:134255,Availability,avail,available,134255,"refix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:159626,Availability,avail,available,159626,"F Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-4. MCSCF_SO (DETCI); DETCI (Expert) — Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation considerably. Type: boolean; Default: false. MCSCF_SO_START_E (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-3. MCSCF_SO_START_GRAD (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-3. MEMORY (ADC); ADC — The amount of memory available (in Mb). Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT); SAPT — Minimumnumber of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT); FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI); DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI); DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors use",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:165962,Availability,avail,available,165962,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:166032,Availability,avail,available,166032,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:168395,Availability,avail,available,168395," be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Build natural orbitals? The orbtials will be reordered by occuption number. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: bool",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:173494,Availability,avail,available,173494,"e: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA (CCSORT); CCSORT — Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. OMP_N_THREAD (CPHF); CPHF — The maximum num",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176362,Availability,redundant,redundant,176362," in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_AVG (DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:178890,Availability,avail,available,178890,"onjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORTH_TYPE (DFOCC); DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OVERLAP_CHECK (CCEOM); CCEOM — Report overlaps with old excited-state wave functions, if * available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (DFOCC); DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_CONVERGENCE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:189752,Availability,error,error,189752,"IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:189908,Availability,error,error,189908," discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:200199,Availability,redundant,redundant,200199,"is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:215611,Availability,avail,available,215611,"on will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. TPDM_PRINT (DETCI); DETCI — Do print the two-particle density matrix? (Warning: large tensor). Type: boolean; Default: false. TRANSLATE_PSI4 (CFOUR); CFOUR — Do translate set Psi4 options to their cfour counterparts. Type: boolean; Default: true. TRIPLES_ALGORITHM (PSIMRCC); PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:2036,Deployability,update,updates,2036," (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10993,Deployability,release,release,10993,"s in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:15514,Deployability,update,update,15514,"ouble; Default: 1.27. CC_RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:16803,Deployability,configurat,configurations,16803,"ional energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:21797,Deployability,release,release,21797,"orce fields. VIBROT (=3) requests calculation of only those cubic constants of the form , where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form , which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:26504,Deployability,continuous,continuous,26504," and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:50058,Deployability,integrat,integration,50058,"n where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:65644,Deployability,release,release,65644,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:65744,Deployability,release,release,65744,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:70114,Deployability,configurat,configurational,70114,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82098,Deployability,update,update,82098," Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82228,Deployability,update,updates,82228," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92492,Deployability,update,update,92492,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92534,Deployability,update,update,92534,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92572,Deployability,update,update,92572,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92890,Deployability,update,updates,92890,"ined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 g",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92923,Deployability,update,update,92923,"efault convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92961,Deployability,update,update,92961,"efault convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:93285,Deployability,update,updates,93285," damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:93318,Deployability,update,update,93318," into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-ele",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:93356,Deployability,update,update,93356," into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-ele",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:108683,Deployability,update,update,108683,"ace localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:136299,Deployability,update,update,136299," is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:137930,Deployability,update,update,137930,"EININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is deter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:138118,Deployability,update,update,138118," in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:138262,Deployability,update,update,138262," Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep bloc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:138513,Deployability,update,update,138513,"IMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
