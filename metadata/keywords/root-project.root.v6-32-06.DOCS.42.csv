id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:3101,Deployability,install,installed,3101,"ecker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; determine where to find its accompanying files.; Other Platforms (Building the Analyzer from Source); For other platforms, you must build Clang and LLVM manually. To do; so, please follow the instructions for building Clang from; source code.; Once the Clang is built, you need to add the following to your path:. The location of the clang binary. For example, if you built a Debug+Asserts build of LLVM/Clang (the; default), the resultant clang binary will be in $(OBJDIR)/Debug+Asserts/bin; (where $(OBJDIR) is often the same as the root source directory). You; can also do make install to install the LLVM/Clang libraries and; binaries to the installation directory of your choice (specified when you run; configure).; The locations of the scan-build and scan-view; programs. These are installed via make install into the bin directory; when clang is built. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:3120,Deployability,install,install,3120,"ecker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; determine where to find its accompanying files.; Other Platforms (Building the Analyzer from Source); For other platforms, you must build Clang and LLVM manually. To do; so, please follow the instructions for building Clang from; source code.; Once the Clang is built, you need to add the following to your path:. The location of the clang binary. For example, if you built a Debug+Asserts build of LLVM/Clang (the; default), the resultant clang binary will be in $(OBJDIR)/Debug+Asserts/bin; (where $(OBJDIR) is often the same as the root source directory). You; can also do make install to install the LLVM/Clang libraries and; binaries to the installation directory of your choice (specified when you run; configure).; The locations of the scan-build and scan-view; programs. These are installed via make install into the bin directory; when clang is built. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:3021,Modifiability,config,configure,3021,"ecker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; determine where to find its accompanying files.; Other Platforms (Building the Analyzer from Source); For other platforms, you must build Clang and LLVM manually. To do; so, please follow the instructions for building Clang from; source code.; Once the Clang is built, you need to add the following to your path:. The location of the clang binary. For example, if you built a Debug+Asserts build of LLVM/Clang (the; default), the resultant clang binary will be in $(OBJDIR)/Debug+Asserts/bin; (where $(OBJDIR) is often the same as the root source directory). You; can also do make install to install the LLVM/Clang libraries and; binaries to the installation directory of your choice (specified when you run; configure).; The locations of the scan-build and scan-view; programs. These are installed via make install into the bin directory; when clang is built. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:2694,Testability,Assert,Asserts,2694,"ecker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; determine where to find its accompanying files.; Other Platforms (Building the Analyzer from Source); For other platforms, you must build Clang and LLVM manually. To do; so, please follow the instructions for building Clang from; source code.; Once the Clang is built, you need to add the following to your path:. The location of the clang binary. For example, if you built a Debug+Asserts build of LLVM/Clang (the; default), the resultant clang binary will be in $(OBJDIR)/Debug+Asserts/bin; (where $(OBJDIR) is often the same as the root source directory). You; can also do make install to install the LLVM/Clang libraries and; binaries to the installation directory of your choice (specified when you run; configure).; The locations of the scan-build and scan-view; programs. These are installed via make install into the bin directory; when clang is built. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:2792,Testability,Assert,Asserts,2792,"ecker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; determine where to find its accompanying files.; Other Platforms (Building the Analyzer from Source); For other platforms, you must build Clang and LLVM manually. To do; so, please follow the instructions for building Clang from; source code.; Once the Clang is built, you need to add the following to your path:. The location of the clang binary. For example, if you built a Debug+Asserts build of LLVM/Clang (the; default), the resultant clang binary will be in $(OBJDIR)/Debug+Asserts/bin; (where $(OBJDIR) is often the same as the root source directory). You; can also do make install to install the LLVM/Clang libraries and; binaries to the installation directory of your choice (specified when you run; configure).; The locations of the scan-build and scan-view; programs. These are installed via make install into the bin directory; when clang is built. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:1037,Usability,simpl,simply,1037,"alyzer. Obtaining the Static Analyzer; This page describes how to download and install the analyzer. Once; the analyzer is installed, follow the instructions on using scan-build to; get started analyzing your code.; Packaged Builds (Mac OS X); Semi-regular pre-built binaries of the analyzer are available on Mac; OS X. These are built to run on OS X 10.7 and later.; Builds are released frequently. Often the differences between build; numbers being a few bug fixes or minor feature improvements. When using; the analyzer, we recommend that you check back here occasionally for new; builds, especially if the build you are using is more than a couple; weeks old.; The latest build is:; . Packaged builds for other platforms may eventually be provided, but; we need volunteers who are willing to help provide such regular builds.; If you wish to help contribute regular builds of the analyzer on other; platforms, please email the Clang; Developers' mailing list.; Using Packaged Builds; To use a package build, simply unpack it anywhere. If the build; archive has the name checker-XXX.tar.bz2 then the; archive will expand to a directory called checker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentat",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:1314,Usability,simpl,simple,1314,"r are available on Mac; OS X. These are built to run on OS X 10.7 and later.; Builds are released frequently. Often the differences between build; numbers being a few bug fixes or minor feature improvements. When using; the analyzer, we recommend that you check back here occasionally for new; builds, especially if the build you are using is more than a couple; weeks old.; The latest build is:; . Packaged builds for other platforms may eventually be provided, but; we need volunteers who are willing to help provide such regular builds.; If you wish to help contribute regular builds of the analyzer on other; platforms, please email the Clang; Developers' mailing list.; Using Packaged Builds; To use a package build, simply unpack it anywhere. If the build; archive has the name checker-XXX.tar.bz2 then the; archive will expand to a directory called checker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; det",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html:1454,Usability,simpl,simply,1454,"ased frequently. Often the differences between build; numbers being a few bug fixes or minor feature improvements. When using; the analyzer, we recommend that you check back here occasionally for new; builds, especially if the build you are using is more than a couple; weeks old.; The latest build is:; . Packaged builds for other platforms may eventually be provided, but; we need volunteers who are willing to help provide such regular builds.; If you wish to help contribute regular builds of the analyzer on other; platforms, please email the Clang; Developers' mailing list.; Using Packaged Builds; To use a package build, simply unpack it anywhere. If the build; archive has the name checker-XXX.tar.bz2 then the; archive will expand to a directory called checker-XXX.; You do not need to place this directory or the contents of this; directory in any special place. Uninstalling the analyzer is as simple; as deleting this directory.; Most of the files in the checker-XXX directory will; be supporting files for the analyzer that you can simply ignore. Most; users will only care about two files, which are located at the top of; the checker-XXX directory:. scan-build: scan-build is the high-level command line utility for running the analyzer; scan-view: scan-view a companion command line; utility to scan-build, scan-view is used to view; analysis results generated by scan-build. There is an option; that one can pass to scan-build to cause scan-view to; run as soon as it the analysis of a build completes. Running scan-build; For specific details on using scan-build, please see; scan-build's documentation.; To run scan-build, either add the; checker-XXX directory to your path or specify a complete; path for scan-build when running it. It is also possible to use; a symbolic link to scan-build, such one located in a directory; in your path. When scan-build runs it will automatically; determine where to find its accompanying files.; Other Platforms (Building the Analyzer from Sour",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/installation.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/installation.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:378,Deployability,Release,Release,378,". Open Projects. Open Projects; This page lists several projects that would boost analyzer's usability and; power. Most of the projects listed here are infrastructure-related so this list; is an addition to the potential checkers; list. If you are interested in tackling one of these, please send an email; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:108,Energy Efficiency,power,power,108,". Open Projects. Open Projects; This page lists several projects that would boost analyzer's usability and; power. Most of the projects listed here are infrastructure-related so this list; is an addition to the potential checkers; list. If you are interested in tackling one of these, please send an email; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:2615,Energy Efficiency,allocate,allocated,2615,"lit where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (that is, ; CXXConstructExpr does not occur in the AST),; but potentially calling; constructors for their fields and base classes; These; constructors of sub-objects need to know what object they are constructing.; Moreover, if the aggregate contains; references, lifetime extension needs to be properly modeled. One can start untangling this problem by trying to replace the; current ad-hoc ; ParentMap lookup in ; CXXConstructionKind::NonVirtualBase branch of; ExprEngine::VisitCXXConstructExpr(); with proper support for the feature.; (Difficulty: Medium) . Handle array constructors.; When an array of objects is allocated (say, using the; operator new[] or defining a stack array),; constructors for all elements of the array are called.; We should model (potentially some of) such evaluations,; and the same applies for destructors called from; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on t",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:3699,Energy Efficiency,allocate,allocate,3699,"uctors for all elements of the array are called.; We should model (potentially some of) such evaluations,; and the same applies for destructors called from; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initi",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:8416,Energy Efficiency,charge,charge,8416,"ake incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) require; reasoning over all possible in a program.; Such reasoning requires a; dataflow analysis framework.; Clang already implements; a few dataflow analyses (most notably, liveness),; but they implemented in an ad-hoc fashion.; A proper framework would enable us writing many more useful checkers.; (Difficulty: Hard) . Track type information through casts more precisely.; The DynamicTypePropagation; checker is in charge of inferring a region's; dynamic type based on what operations the code is performing.; Casts are a rich source of type information that the analyzer currently ignores.; (Difficulty: Medium). Fixing miscellaneous bugs; Apart from the open projects listed above,; contributors are welcome to fix any of the outstanding; bugs; in the Bugzilla.; (Difficulty: Anything). ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:3649,Integrability,depend,depending,3649,"uctors for all elements of the array are called.; We should model (potentially some of) such evaluations,; and the same applies for destructors called from; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initi",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:4002,Modifiability,variab,variables,4002," construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; s",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:4177,Modifiability,variab,variables,4177," a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to prog",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:4292,Modifiability,Variab,Variables,4292," constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temp",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:4563,Modifiability,variab,variables,4563,"ult constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temporaries.cpp (struct DefaultParam and so on). I recommend adding a; new LocationContext kind specifically to deal with this problem. It'll; also help you figure out the construction ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:5651,Modifiability,Enhance,Enhance,5651,"g because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temporaries.cpp (struct DefaultParam and so on). I recommend adding a; new LocationContext kind specifically to deal with this problem. It'll; also help you figure out the construction context when you evaluate the; construct-expression (though you might still need to do some additional; CFG work to get construction contexts right).; . Enhance the modeling of the standard library.; The analyzer needs a better understanding of STL in order to be more; useful on C++ codebases.; While full library modeling is not an easy task,; large gains can be achieved by supporting only a few cases:; e.g. calling .length() on an empty; std::string always yields zero.; (Difficulty: Medium). Enhance CFG to model exception-handling.; Currently exceptions are treated as ""black holes"", and exception-handling; control structures are poorly modeled in order to be conservative.; This could be improved for both C++ and Objective-C exceptions.; (Difficulty: Hard). Core Analyzer Infrastructure; ; Handle unions.; Currently in the analyzer the value of a union is always regarded as; an unknown.; This problem was; previously discussed; on the mailing list, but no solution was implemented.; (Difficulty: Medium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:5996,Modifiability,Enhance,Enhance,5996,"aluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temporaries.cpp (struct DefaultParam and so on). I recommend adding a; new LocationContext kind specifically to deal with this problem. It'll; also help you figure out the construction context when you evaluate the; construct-expression (though you might still need to do some additional; CFG work to get construction contexts right).; . Enhance the modeling of the standard library.; The analyzer needs a better understanding of STL in order to be more; useful on C++ codebases.; While full library modeling is not an easy task,; large gains can be achieved by supporting only a few cases:; e.g. calling .length() on an empty; std::string always yields zero.; (Difficulty: Medium). Enhance CFG to model exception-handling.; Currently exceptions are treated as ""black holes"", and exception-handling; control structures are poorly modeled in order to be conservative.; This could be improved for both C++ and Objective-C exceptions.; (Difficulty: Hard). Core Analyzer Infrastructure; ; Handle unions.; Currently in the analyzer the value of a union is always regarded as; an unknown.; This problem was; previously discussed; on the mailing list, but no solution was implemented.; (Difficulty: Medium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant floats, generalizing the constraint manager to handle floats,; and auditing existing code to make sure it doesn't; make incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:7220,Modifiability,parameteriz,parameterizable,7220,"+ and Objective-C exceptions.; (Difficulty: Hard). Core Analyzer Infrastructure; ; Handle unions.; Currently in the analyzer the value of a union is always regarded as; an unknown.; This problem was; previously discussed; on the mailing list, but no solution was implemented.; (Difficulty: Medium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant floats, generalizing the constraint manager to handle floats,; and auditing existing code to make sure it doesn't; make incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) require; reasoning over all possible in a program.; Such reasoning requires a; dataflow analysis framework.; Clang already implements; a few dataflow analyses (most notably, liveness),; but they implemented in an ad-h",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:1157,Performance,perform,perform,1157,"cture-related so this list; is an addition to the potential checkers; list. If you are interested in tackling one of these, please send an email; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (that is, ; CXXConstructExpr does not occur in the AST),; but potentially calling; constructors for their fields and base classes; These; constructors of sub-objec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:3851,Performance,perform,perform,3851,"om; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the defa",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:3975,Performance,Optimiz,Optimization,3975," construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; s",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:7355,Performance,perform,performs,7355," This problem was; previously discussed; on the mailing list, but no solution was implemented.; (Difficulty: Medium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant floats, generalizing the constraint manager to handle floats,; and auditing existing code to make sure it doesn't; make incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) require; reasoning over all possible in a program.; Such reasoning requires a; dataflow analysis framework.; Clang already implements; a few dataflow analyses (most notably, liveness),; but they implemented in an ad-hoc fashion.; A proper framework would enable us writing many more useful checkers.; (Difficulty: Hard) . Track type information through casts more precisely.; The DynamicTypePropagat",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:7834,Performance,perform,performs,7834,"ake incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) require; reasoning over all possible in a program.; Such reasoning requires a; dataflow analysis framework.; Clang already implements; a few dataflow analyses (most notably, liveness),; but they implemented in an ad-hoc fashion.; A proper framework would enable us writing many more useful checkers.; (Difficulty: Hard) . Track type information through casts more precisely.; The DynamicTypePropagation; checker is in charge of inferring a region's; dynamic type based on what operations the code is performing.; Casts are a rich source of type information that the analyzer currently ignores.; (Difficulty: Medium). Fixing miscellaneous bugs; Apart from the open projects listed above,; contributors are welcome to fix any of the outstanding; bugs; in the Bugzilla.; (Difficulty: Anything). ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:8498,Performance,perform,performing,8498,"ake incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) require; reasoning over all possible in a program.; Such reasoning requires a; dataflow analysis framework.; Clang already implements; a few dataflow analyses (most notably, liveness),; but they implemented in an ad-hoc fashion.; A proper framework would enable us writing many more useful checkers.; (Difficulty: Hard) . Track type information through casts more precisely.; The DynamicTypePropagation; checker is in charge of inferring a region's; dynamic type based on what operations the code is performing.; Casts are a rich source of type information that the analyzer currently ignores.; (Difficulty: Medium). Fixing miscellaneous bugs; Apart from the open projects listed above,; contributors are welcome to fix any of the outstanding; bugs; in the Bugzilla.; (Difficulty: Anything). ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:3149,Safety,avoid,avoid,3149,"s need to know what object they are constructing.; Moreover, if the aggregate contains; references, lifetime extension needs to be properly modeled. One can start untangling this problem by trying to replace the; current ad-hoc ; ParentMap lookup in ; CXXConstructionKind::NonVirtualBase branch of; ExprEngine::VisitCXXConstructExpr(); with proper support for the feature.; (Difficulty: Medium) . Handle array constructors.; When an array of objects is allocated (say, using the; operator new[] or defining a stack array),; constructors for all elements of the array are called.; We should model (potentially some of) such evaluations,; and the same applies for destructors called from; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move construct",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:900,Security,secur,security,900,". Open Projects. Open Projects; This page lists several projects that would boost analyzer's usability and; power. Most of the projects listed here are infrastructure-related so this list; is an addition to the potential checkers; list. If you are interested in tackling one of these, please send an email; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:931,Security,secur,security,931,". Open Projects. Open Projects; This page lists several projects that would boost analyzer's usability and; power. Most of the projects listed here are infrastructure-related so this list; is an addition to the potential checkers; list. If you are interested in tackling one of these, please send an email; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:6741,Security,audit,auditing,6741,"order to be more; useful on C++ codebases.; While full library modeling is not an easy task,; large gains can be achieved by supporting only a few cases:; e.g. calling .length() on an empty; std::string always yields zero.; (Difficulty: Medium). Enhance CFG to model exception-handling.; Currently exceptions are treated as ""black holes"", and exception-handling; control structures are poorly modeled in order to be conservative.; This could be improved for both C++ and Objective-C exceptions.; (Difficulty: Hard). Core Analyzer Infrastructure; ; Handle unions.; Currently in the analyzer the value of a union is always regarded as; an unknown.; This problem was; previously discussed; on the mailing list, but no solution was implemented.; (Difficulty: Medium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant floats, generalizing the constraint manager to handle floats,; and auditing existing code to make sure it doesn't; make incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dat",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:2873,Testability,test,tests,2873," initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (that is, ; CXXConstructExpr does not occur in the AST),; but potentially calling; constructors for their fields and base classes; These; constructors of sub-objects need to know what object they are constructing.; Moreover, if the aggregate contains; references, lifetime extension needs to be properly modeled. One can start untangling this problem by trying to replace the; current ad-hoc ; ParentMap lookup in ; CXXConstructionKind::NonVirtualBase branch of; ExprEngine::VisitCXXConstructExpr(); with proper support for the feature.; (Difficulty: Medium) . Handle array constructors.; When an array of objects is allocated (say, using the; operator new[] or defining a stack array),; constructors for all elements of the array are called.; We should model (potentially some of) such evaluations,; and the same applies for destructors called from; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:4579,Testability,test,tests,4579," if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temporaries.cpp (struct DefaultParam and so on). I recommend adding a; new LocationContext kind specifically to deal with this problem. It'll; also help you figure out the construction context when you evaluate the; construct-expression (though you might still need to do some additional; CFG",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:5290,Testability,test,test,5290,"ables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temporaries.cpp (struct DefaultParam and so on). I recommend adding a; new LocationContext kind specifically to deal with this problem. It'll; also help you figure out the construction context when you evaluate the; construct-expression (though you might still need to do some additional; CFG work to get construction contexts right).; . Enhance the modeling of the standard library.; The analyzer needs a better understanding of STL in order to be more; useful on C++ codebases.; While full library modeling is not an easy task,; large gains can be achieved by supporting only a few cases:; e.g. calling .length() on an empty; std::string always yields zero.; (Difficulty: Medium). Enhance CFG to model exception-handling.; Currently exceptions are treated as ""black holes"", and exception-handling; control structures are poorly modeled in order to be conservative.; This could be improved for both C++ and Objective-C exceptions.; (Difficulty: Hard). Core Analyzer Infrastructure; ;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:93,Usability,usab,usability,93,". Open Projects. Open Projects; This page lists several projects that would boost analyzer's usability and; power. Most of the projects listed here are infrastructure-related so this list; is an addition to the potential checkers; list. If you are interested in tackling one of these, please send an email; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:1263,Usability,Simpl,SimpleStreamChecker,1263,"l; to the cfe-dev; mailing list to notify other members of the community. Release checkers from ""alpha""; New checkers which were contributed to the analyzer,; but have not passed a rigorous evaluation process,; are committed as ""alpha checkers"" (from ""alpha version""),; and are not enabled by default.; Ideally, only the checkers which are actively being worked on should be in; ""alpha"",; but over the years the development of many of those has stalled.; Such checkers should either be improved; up to a point where they can be enabled by default,; or removed from the analyzer entirely. ; alpha.security.ArrayBound and; alpha.security.ArrayBoundV2; Array bounds checking is a desired feature,; but having an acceptable rate of false positives might not be possible; without a proper; loop widening support.; Additionally, it might be more promising to perform index checking based on; tainted index values.; (Difficulty: Medium). alpha.unix.StreamChecker; A SimpleStreamChecker has been presented in the Building a Checker in 24; Hours talk; (slides; video).; This alpha checker is an attempt to write a production grade stream checker.; However, it was found to have an unacceptably high false positive rate.; One of the found problems was that eagerly splitting the state; based on whether the system call may fail leads to too many reports.; A delayed split where the implication is stored in the state; (similarly to nullability implications in TrustNonnullChecker); may produce much better results.; (Difficulty: Medium). Improve C++ support; ; Handle construction as part of aggregate initialization.; Aggregates; are objects that can be brace-initialized without calling a; constructor (that is, ; CXXConstructExpr does not occur in the AST),; but potentially calling; constructors for their fields and base classes; These; constructors of sub-objects need to know what object they are constructing.; Moreover, if the aggregate contains; references, lifetime extension needs to be properly mod",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:3878,Usability,simpl,simple,3878,"om; operator delete[].; See tests cases in handle_constructors_with_new_array.cpp.; . Constructing an array requires invoking multiple (potentially unknown); amount of constructors with the same construct-expression.; Apart from the technical difficulties of juggling program points around; correctly to avoid accidentally merging paths together, we'll have to; be a judge on when to exit the loop and how to widen it.; Given that the constructor is going to be a default constructor,; a nice 95% solution might be to execute exactly one constructor and; then default-bind the resulting LazyCompoundVal to the whole array;; it'll work whenever the default constructor doesn't touch global state; but only initializes the object to various default values.; But if, say, we're making an array of strings,; depending on the implementation you might have to allocate a new buffer; for each string, and in this case default-binding won't cut it.; We might want to come up with an auxiliary analysis in order to perform; widening of these simple loops more precisely.; . Handle constructors that can be elided due to Named Return Value Optimization (NRVO); Local variables which are returned by values on all return statements; may be stored directly at the address for the return value,; eliding the copy or move constructor call.; Such variables can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the defa",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:5108,Usability,simpl,simply,5108,"es can be identified using the AST call VarDecl::isNRVOVariable.; . Handle constructors of lambda captures; Variables which are captured by value into a lambda require a call to; a copy constructor.; This call is not currently modeled.; . Handle constructors for default arguments; Default arguments in C++ are recomputed at every call,; and are therefore local, and not static, variables.; See tests cases in handle_constructors_for_default_arguments.cpp.; . Default arguments are annoying because the initializer expression is; evaluated at the call site but doesn't syntactically belong to the; caller's AST; instead it belongs to the ParmVarDecl for the default; parameter. This can lead to situations when the same expression has to; carry different values simultaneously -; when multiple instances of the same function are evaluated as part of the; same full-expression without specifying the default arguments.; Even simply calling the function twice (not necessarily within the; same full-expression) may lead to program points agglutinating because; it's the same expression. There are some nasty test cases already; in temporaries.cpp (struct DefaultParam and so on). I recommend adding a; new LocationContext kind specifically to deal with this problem. It'll; also help you figure out the construction context when you evaluate the; construct-expression (though you might still need to do some additional; CFG work to get construction contexts right).; . Enhance the modeling of the standard library.; The analyzer needs a better understanding of STL in order to be more; useful on C++ codebases.; While full library modeling is not an easy task,; large gains can be achieved by supporting only a few cases:; e.g. calling .length() on an empty; std::string always yields zero.; (Difficulty: Medium). Enhance CFG to model exception-handling.; Currently exceptions are treated as ""black holes"", and exception-handling; control structures are poorly modeled in order to be conservative.; This",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:6964,Usability,simpl,simply,6964,"hance CFG to model exception-handling.; Currently exceptions are treated as ""black holes"", and exception-handling; control structures are poorly modeled in order to be conservative.; This could be improved for both C++ and Objective-C exceptions.; (Difficulty: Hard). Core Analyzer Infrastructure; ; Handle unions.; Currently in the analyzer the value of a union is always regarded as; an unknown.; This problem was; previously discussed; on the mailing list, but no solution was implemented.; (Difficulty: Medium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant floats, generalizing the constraint manager to handle floats,; and auditing existing code to make sure it doesn't; make incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html:7506,Usability,simpl,simple,7506,"dium) . Floating-point support.; Currently, the analyzer treats all floating-point values as unknown.; This project would involve adding a new SVal kind; for constant floats, generalizing the constraint manager to handle floats,; and auditing existing code to make sure it doesn't; make incorrect assumptions (most notably, that X == X; is always true, since it does not hold for NaN).; (Difficulty: Medium). Improved loop execution modeling.; The analyzer simply unrolls each loop N times before; dropping the path, for a fixed constant N.; However, that results in lost coverage in cases where the loop always; executes more than N times.; A Google Summer Of Code; project; was completed to make the loop bound parameterizable,; but the widening; problem still remains open. (Difficulty: Hard). Basic function summarization support; The analyzer performs inter-procedural analysis using; either inlining or ""conservative evaluation"" (invalidating all data; passed to the function).; Often, a very simple summary; (e.g. ""this function is pure"") would be; enough to be a large improvement over conservative evaluation.; Such summaries could be obtained either syntactically,; or using a dataflow framework.; (Difficulty: Hard). Implement a dataflow flamework.; The analyzer core; implements a symbolic execution; engine, which performs checks; (use-after-free, uninitialized value read, etc.); over a single program path.; However, many useful properties; (dead code, check-after-use, etc.) require; reasoning over all possible in a program.; Such reasoning requires a; dataflow analysis framework.; Clang already implements; a few dataflow analyses (most notably, liveness),; but they implemented in an ad-hoc fashion.; A proper framework would enable us writing many more useful checkers.; (Difficulty: Hard) . Track type information through casts more precisely.; The DynamicTypePropagation; checker is in charge of inferring a region's; dynamic type based on what operations the code is performing",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/open_projects.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/open_projects.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:2670,Availability,error,error,2670,"ement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3552,Energy Efficiency,allocate,allocated,3552,";. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3670,Energy Efficiency,allocate,allocated,3670," it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3726,Energy Efficiency,allocate,allocated,3726,". void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: ri",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25540,Energy Efficiency,allocate,allocated,25540,"teger overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent Load",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28245,Energy Efficiency,efficient,efficient,28245,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28505,Energy Efficiency,efficient,efficient,28505,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1657,Modifiability,enhance,enhancement,1657,"' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost ce",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1865,Modifiability,enhance,enhancement,1865," throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExample",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4224,Modifiability,variab,variable,4224,"ype of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:6235,Modifiability,enhance,enhancement,6235,"; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavior.LocalStaticDestroyed; (C++); Undefined behavior: function containing a definition of static local object is; called during the destruction of an object with static storage duration so that; flow of control passes through the definition of the previously destroyed; static local object.; Source: C++11 3.6.3p2. void f();. class A {; public:; ~A() {; f(); // warn; }; };. class B {};. A a;. void f() {; static B b;; }. undefbehavior.ZeroAllocDereference; (C, C++); The effect of dereferencing a pointer returned as a request for zero size is; undefined.; Note: possibly an enhancement to ; unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = (int *)malloc(0);; *p = 1; // warn; free(p);; }. void f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the o",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13676,Modifiability,enhance,enhancement,13676,"c :; C(); try {; f();; }; catch (...) {; i=2; // warn; }; };. void f() { throw 1; }. class Base {; public:; int i;; };. class C: public Base {; public :; ~C() try {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), comp",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:19729,Modifiability,variab,variable,19729,":basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:19959,Modifiability,enhance,enhancement,19959,"y_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20323,Modifiability,enhance,enhancement,20323,"fined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-e",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21280,Modifiability,variab,variable,21280,"t.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5);",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22911,Modifiability,variab,variable,22911,"() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24162,Modifiability,enhance,enhancement,24162,"n <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24394,Modifiability,enhance,enhancement,24394," warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // wa",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28066,Modifiability,variab,variable,28066,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1909,Performance,perform,perform,1909,"int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Functi",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:19923,Performance,perform,performed,19923,"> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // war",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20287,Performance,perform,performed,20287,"s a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26451,Performance,Load,LoadLibrary,26451,"(C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Opti",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26549,Performance,Load,LoadLibrary,26549,"(C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Opti",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26586,Performance,Load,LoadLibrary,26586,"ctor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26754,Performance,Load,LoadLibrary,26754,":; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27216,Performance,optimiz,optimization,27216," function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Op",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27264,Performance,optimiz,optimization,27264,">. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27308,Performance,Optimiz,Optimization,27308,", TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #includ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27470,Performance,optimiz,optimization,27470,"rchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C+",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27506,Performance,Optimiz,Optimization,27506,"a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers emp",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27878,Performance,optimiz,optimization,27878,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27917,Performance,Optimiz,Optimization,27917,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28178,Performance,optimiz,optimization,28178,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28220,Performance,Optimiz,Optimization,28220,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28438,Performance,optimiz,optimization,28438,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28480,Performance,Optimiz,Optimization,28480,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23212,Safety,Avoid,Avoiding,23212,"o subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26097,Safety,risk,risk,26097,"unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27387,Safety,avoid,avoid,27387,", TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #includ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1194,Security,secur,security,1194,"er's development, this is a good resource to help you get started. The specific names of the checkers are subject to review, and are provided here as suggestions. memory. Name, DescriptionExampleProgress. memory.LeakEvalOrder; (C, C++); Potential memory leaks caused by an undefined argument evaluation order.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destruct",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1680,Security,secur,security,1680,"n 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; c",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:6897,Security,access,access,6897,"inition of the previously destroyed; static local object.; Source: C++11 3.6.3p2. void f();. class A {; public:; ~A() {; f(); // warn; }; };. class B {};. A a;. void f() {; static B b;; }. undefbehavior.ZeroAllocDereference; (C, C++); The effect of dereferencing a pointer returned as a request for zero size is; undefined.; Note: possibly an enhancement to ; unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = (int *)malloc(0);; *p = 1; // warn; free(p);; }. void f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13636,Security,access,access,13636,"Source: C++11 15.3p10. void f() { throw 1; }. class C {; int i;; public :; C(); try {; f();; }; catch (...) {; i=2; // warn; }; };. void f() { throw 1; }. class Base {; public:; int i;; };. class C: public Base {; public :; ~C() try {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a,",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13699,Security,secur,security,13699,"catch (...) {; i=2; // warn; }; };. void f() { throw 1; }. class Base {; public:; int i;; };. class C: public Base {; public :; ~C() try {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20510,Security,access,accessor,20510," <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20770,Security,Access,AccessorsForPublic,20770,".NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value me",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20797,Security,Access,Accessors,20797,".NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value me",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24135,Security,access,access,24135,"eIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsi",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24185,Security,secur,security,24185,"Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Nu",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26233,Security,Secur,Security,26233,"ace.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optim",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26608,Security,Secur,Security,26608,"ctor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:615,Testability,test,test,615,". List of potential checkers. List of potential checkers; This page contains a list of potential checkers to implement in the static analyzer. If you are interested in contributing to the analyzer's development, this is a good resource to help you get started. The specific names of the checkers are subject to review, and are provided here as suggestions. memory. Name, DescriptionExampleProgress. memory.LeakEvalOrder; (C, C++); Potential memory leaks caused by an undefined argument evaluation order.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:888,Testability,test,test,888,". List of potential checkers. List of potential checkers; This page contains a list of potential checkers to implement in the static analyzer. If you are interested in contributing to the analyzer's development, this is a good resource to help you get started. The specific names of the checkers are subject to review, and are provided here as suggestions. memory. Name, DescriptionExampleProgress. memory.LeakEvalOrder; (C, C++); Potential memory leaks caused by an undefined argument evaluation order.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1372,Testability,test,test,1372,"valOrder; (C, C++); Potential memory leaks caused by an undefined argument evaluation order.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1462,Testability,test,test,1462,"er.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // wa",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1739,Testability,test,test,1739,"g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:2054,Testability,test,test,2054," be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThr",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:2111,Testability,test,test,2111,"tion buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:2759,Testability,test,test,2759,"arn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3017,Testability,test,test,3017,"include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3161,Testability,test,test,3161,"structors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgr",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3349,Testability,test,test,3349,"cott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3925,Testability,test,test,3925,"but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Er",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4066,Testability,test,test,4066,"ion is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4352,Testability,test,test,4352,"s. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4563,Testability,test,test,4563,"lete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. c",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4635,Testability,test,test,4635," memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavio",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4701,Testability,test,test,4701," by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavior.LocalStaticDestroyed; (C++); Undefined behavior: function containing a ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4781,Testability,test,test,4781," C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavior.LocalStaticDestroyed; (C++); Undefined behavior: function containing a definition of static local object is; called during the destruction of an object with stati",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:6334,Testability,test,test,6334,"iptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavior.LocalStaticDestroyed; (C++); Undefined behavior: function containing a definition of static local object is; called during the destruction of an object with static storage duration so that; flow of control passes through the definition of the previously destroyed; static local object.; Source: C++11 3.6.3p2. void f();. class A {; public:; ~A() {; f(); // warn; }; };. class B {};. A a;. void f() {; static B b;; }. undefbehavior.ZeroAllocDereference; (C, C++); The effect of dereferencing a pointer returned as a request for zero size is; undefined.; Note: possibly an enhancement to ; unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = (int *)malloc(0);; *p = 1; // warn; free(p);; }. void f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : publ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:6421,Testability,test,test,6421,"() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavior.LocalStaticDestroyed; (C++); Undefined behavior: function containing a definition of static local object is; called during the destruction of an object with static storage duration so that; flow of control passes through the definition of the previously destroyed; static local object.; Source: C++11 3.6.3p2. void f();. class A {; public:; ~A() {; f(); // warn; }; };. class B {};. A a;. void f() {; static B b;; }. undefbehavior.ZeroAllocDereference; (C, C++); The effect of dereferencing a pointer returned as a request for zero size is; undefined.; Note: possibly an enhancement to ; unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = (int *)malloc(0);; *p = 1; // warn; free(p);; }. void f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <ne",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7380,Testability,test,test,7380,"d f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7503,Testability,test,test,7503,"++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Unde",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7654,Testability,test,test,7654," or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently han",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7795,Testability,test,test,7795,"POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7957,Testability,test,test,7957,"r is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:8310,Testability,test,test,8310,"A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; de",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:8415,Testability,test,test,8415,"clude <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:8768,Testability,test,tests,8768,"#include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavio",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:8800,Testability,test,test,8800," C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C+",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9020,Testability,test,test,9020,"cChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9050,Testability,test,test,9050,"cChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9229,Testability,test,test,9229,"B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member or base class of non-POD class type; is referred before constructor begins execution.; C++11 Undefined behavior: non-static member or base class of a class with a; non-trivial constructor is referred before constructor begins ex",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9383,Testability,test,test,9383,"ublic:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member or base class of non-POD class type; is referred before constructor begins execution.; C++11 Undefined behavior: non-static member or base class of a class with a; non-trivial constructor is referred before constructor begins execution.; Source: C++03 12.7p1; C++11 12.7p1. struct non_POD {; int i;; non_POD();; };. extern non_POD non_pod",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9661,Testability,test,test,9661,"rrently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member or base class of non-POD class type; is referred before constructor begins execution.; C++11 Undefined behavior: non-static member or base class of a class with a; non-trivial constructor is referred before constructor begins execution.; Source: C++03 12.7p1; C++11 12.7p1. struct non_POD {; int i;; non_POD();; };. extern non_POD non_pod;. int *p = &non_pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {; POD pod;; };. extern non_POD non_pod;. int *p = &non_pod.pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {};. extern non_POD non_pod;. POD *p = &non_pod; // warn. s",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:11153,Testability,test,test,11153,"ember or base class of a class with a; non-trivial constructor is referred before constructor begins execution.; Source: C++03 12.7p1; C++11 12.7p1. struct non_POD {; int i;; non_POD();; };. extern non_POD non_pod;. int *p = &non_pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {; POD pod;; };. extern non_POD non_pod;. int *p = &non_pod.pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {};. extern non_POD non_pod;. POD *p = &non_pod; // warn. struct non_POD {; int i;; non_POD();; };. struct S {; int *k;; non_POD non_pod;; S() : k(&non_pod.i) {} // warn; };. undefbehavior.MemberRefAfterDtor; (C++); C++03: Undefined behavior: non-static member of non-POD class type is referred; after destructor ends execution.; C++11: Undefined behavior: non-static member of a class with a non-trivial; destructor is referred after destructor ends execution.; Source: C++03 12.7p1; C++11 12.7p1. class C {; public:; C();; void f();; };. void test() {; C *c = new C();; c->~C();; c->f(); // warn; }. undefbehavior.CtorForeignCall; (C++); Undefined behavior: call to virtual function of an object under construction; whose type is neither the constructors own class or one of its bases.; Source: C++11 12.7p4. class A {; public:; virtual void f() {};; };. class B {; public:; B(A* a) { a->f(); } // warn; };. class C : public A, B {; public:; C() : B((A*)this) {}; };. undefbehavior.CtorForeignTypeid; (C++); Undefined behavior: the operand of typeid is an object under; construction whose type is neither the constructors own class or one of its; bases.; Source: C++11 12.7p5. #include <typeinfo>. class A {};. class B {; public:; B(A* a) {; (void)typeid(*a); // warn; }; };. class C : public A, B {; public:; C() : B((A*)this) {}; };. undefbehavior.CtorForeignCast; (C++); Undefined behavior: the operand of dynamic_cast is an object under; construction whose type is neither the constructors own class or one of its; bases.; Source: C++11 12.7p6. #include <typeinfo>",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13127,Testability,test,test,13127,".7p6. #include <typeinfo>. class A {; public:; virtual void f() {};; };. class B {; public:; B(A* a) {; (void)dynamic_cast<B*>(a); //warn; }; };. class C : public A, B {; public:; C() : B((A*)this) {}; };. undefbehavior.MemberOrBaseRefInCatch; (C++); Undefined behavior: referring to any non-static member or base class of an; object in the handler for a function-try-block of a constructor or destructor; for that object results in undefined behavior.; Source: C++11 15.3p10. void f() { throw 1; }. class C {; int i;; public :; C(); try {; f();; }; catch (...) {; i=2; // warn; }; };. void f() { throw 1; }. class Base {; public:; int i;; };. class C: public Base {; public :; ~C() try {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13443,Testability,test,test,13443,the handler for a function-try-block of a constructor or destructor; for that object results in undefined behavior.; Source: C++11 15.3p10. void f() { throw 1; }. class C {; int i;; public :; C(); try {; f();; }; catch (...) {; i=2; // warn; }; };. void f() { throw 1; }. class Base {; public:; int i;; };. class C: public Base {; public :; ~C() try {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include ,MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13810,Testability,test,test,13810," {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. t",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13900,Testability,test,test,13900,"Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:14145,Testability,test,test,14145,"tch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: cop",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:14630,Testability,test,test,14630,"ote: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: copy constructor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argu",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:14979,Testability,test,test,14979,"tor*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: copy constructor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:15793,Testability,test,test,15793,"ial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: copy constructor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5,",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16140,Testability,test,test,16140,"ctor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specifie",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16282,Testability,test,test,16282," C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; /",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16397,Testability,test,test,16397,"= c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::v",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16515,Testability,test,test,16515,"ed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] *= b; //warn; }. undefbehavior.IosBaseDestroyedBefo",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16864,Testability,test,test,16864,"ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] *= b; //warn; }. undefbehavior.IosBaseDestroyedBeforeInit; (C++); Undefined behavior: ios_base object is destroyed before; initialization have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++03 27.4.2.7p1, 27.4.4.1p2; C++11 27.5.3.7p1,; 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::c",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:17144,Testability,test,test,17144," ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] *= b; //warn; }. undefbehavior.IosBaseDestroyedBeforeInit; (C++); Undefined behavior: ios_base object is destroyed before; initialization have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++03 27.4.2.7p1, 27.4.4.1p2; C++11 27.5.3.7p1,; 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<ch",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:17351,Testability,test,test,17351," b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] *= b; //warn; }. undefbehavior.IosBaseDestroyedBeforeInit; (C++); Undefined behavior: ios_base object is destroyed before; initialization have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++03 27.4.2.7p1, 27.4.4.1p2; C++11 27.5.3.7p1,; 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; delete p1; // warn; delete p2; // ok; }. undefbehavior.IosBaseUsedBeforeInit; (C++11); Undefined behavior: ios_base object is use",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:18208,Testability,test,test,18208,"> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] *= b; //warn; }. undefbehavior.IosBaseDestroyedBeforeInit; (C++); Undefined behavior: ios_base object is destroyed before; initialization have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++03 27.4.2.7p1, 27.4.4.1p2; C++11 27.5.3.7p1,; 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; delete p1; // warn; delete p2; // ok; }. undefbehavior.IosBaseUsedBeforeInit; (C++11); Undefined behavior: ios_base object is used before initialization; have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++11 27.5.3.7p1, 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:18987,Testability,test,test,18987,"s> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; delete p1; // warn; delete p2; // ok; }. undefbehavior.IosBaseUsedBeforeInit; (C++11); Undefined behavior: ios_base object is used before initialization; have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++11 27.5.3.7p1, 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:19517,Testability,test,test,19517,"+11 27.5.3.7p1, 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {;",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:19743,Testability,test,test,19743,"aits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. differ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20043,Testability,test,test,20043,"tream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20403,Testability,test,test,20403,"ic std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j =",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21183,Testability,test,test,21183,"referencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCon",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21401,Testability,test,test,21401,"f (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no i",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21480,Testability,test,test,21480,"ssor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // w",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21666,Testability,test,test,21666,"ic:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21902,Testability,test,test,21902," return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of oth",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22058,Testability,test,test,22058,"ry/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecede",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22276,Testability,test,test,22276," loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22365,Testability,Log,LogicalOpUselessArg,22365," i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22469,Testability,test,test,22469,"t i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22611,Testability,test,test,22611,"recise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception(",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22666,Testability,test,test,22666,"n(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }.",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22724,Testability,test,test,22724," }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static a",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23002,Testability,test,test,23002,"atement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23298,Testability,test,test,23298," // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23358,Testability,test,test,23358,"essArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; No",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23608,Testability,test,test,23608,"{}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' w",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23818,Testability,test,test,23818,"s higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24008,Testability,test,test,24008,"int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24046,Testability,test,test,24046," if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsig",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24213,Testability,test,test,24213,"d Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsign",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24448,Testability,test,test,24448,"d. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. differ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24662,Testability,test,tests,24662,"std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operat",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24731,Testability,test,test,24731,"array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; pub",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24794,Testability,test,test,24794,"() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, Descripti",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24969,Testability,test,test,24969,"ment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25077,Testability,test,test,25077,"rayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25125,Testability,test,test,25125,"ay access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable c",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25259,Testability,test,test,25259," }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STA",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25360,Testability,test,test,25360,"te: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25419,Testability,test,test,25419," void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }.",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26278,Testability,test,test,26278,"id test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constan",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26658,Testability,test,test,26658,"xceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfi",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27098,Testability,test,test,27098,"f the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27751,Testability,test,test,27751,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28102,Testability,test,test,28102,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28368,Testability,test,test,28368,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:28603,Testability,test,test,28603,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:117,Availability,down,download,117,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1033,Availability,down,download,1033,"ker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning a",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1740,Availability,down,download,1740,"n-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContextChecker. New checks for _Nonnull type qualifiers. These can be enabled with:.   -enable-checker nullability.NullPassedToNonnull,nullability.NullReturnedFromNonnull; New checks for misuse of Objective-C generics. These can be enabled with -enable-checker alpha.osx.cocoa.ObjCGenerics. Support for cf_returns_retained and cf_returns_not_retained attributes in out-pa",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:2939,Availability,down,download,2939,"s.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContextChecker. New checks for _Nonnull type qualifiers. These can be enabled with:.   -enable-checker nullability.NullPassedToNonnull,nullability.NullReturnedFromNonnull; New checks for misuse of Objective-C generics. These can be enabled with -enable-checker alpha.osx.cocoa.ObjCGenerics. Support for cf_returns_retained and cf_returns_not_retained attributes in out-parameters.; The analyzer now creates one state for a range switch case instead of multiple, resulting in performance improvements.; Now requires OS X 10.7 or later.; 	; checker-276; built: February 19, 2014; download: checker-276.tar.bz2; highlights:. Includes about 9 months of change to Clang itself (improved C++11/14 support, etc.); More precise modeling of Objective-C properties, which enables the analyzer to find more bugs.; Includes a new ""missing call to super"" warning, which looks for common pattern in iOS/OSX APIs that require chaining a call to a super class's implementation of a method.; Accepts -arch arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:3548,Availability,down,download,3548,"ks for misuse of Objective-C generics. These can be enabled with -enable-checker alpha.osx.cocoa.ObjCGenerics. Support for cf_returns_retained and cf_returns_not_retained attributes in out-parameters.; The analyzer now creates one state for a range switch case instead of multiple, resulting in performance improvements.; Now requires OS X 10.7 or later.; 	; checker-276; built: February 19, 2014; download: checker-276.tar.bz2; highlights:. Includes about 9 months of change to Clang itself (improved C++11/14 support, etc.); More precise modeling of Objective-C properties, which enables the analyzer to find more bugs.; Includes a new ""missing call to super"" warning, which looks for common pattern in iOS/OSX APIs that require chaining a call to a super class's implementation of a method.; Accepts -arch arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:4335,Availability,down,download,4335," arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move cons",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:4443,Availability,down,download,4443,"h cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:4640,Availability,down,download,4640,"thm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebu",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:2,Deployability,Release,Release,2,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:40,Deployability,Release,Release,40,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:283,Deployability,release,release,283,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:7423,Deployability,release,release,7423,"bjective-C.; Numerous bug fixes and heuristics to reduce false positives reported; 			over checker-268. checker-268; built: September 11, 2012; highlights:. Adds initial interprocedural analysis support for C++ and Objective-C. This will greatly improve analysis coverage and find deeper bugs in Objective-C and C++ code.; Contains a static analyzer newer than Xcode 4.4. NOTE: this checker build includes a huge number of changes. It has the potential to find many more bugs, but may report new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precision and reduce the false positive rate of the analyzer. It also enables a new unix.MallocSizeof check, which reports; inconsistencies between the casted type of the return value of a 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSD",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:7879,Deployability,release,release,7879,"is checker build includes a huge number of changes. It has the potential to find many more bugs, but may report new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precision and reduce the false positive rate of the analyzer. It also enables a new unix.MallocSizeof check, which reports; inconsistencies between the casted type of the return value of a 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:8187,Deployability,release,releases,8187,"012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precision and reduce the false positive rate of the analyzer. It also enables a new unix.MallocSizeof check, which reports; inconsistencies between the casted type of the return value of a 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and la",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:12064,Deployability,configurat,configuration,12064,"class extensions.; Misc. bug fixes to improve analyzer precision.; . checker-256; built: April 13, 2011; highlights:. Lots of bug fixes and improvements to analyzer precision (fewer false positives, possibly more bugs found).; Introductory analysis support for C++ and Objective-C++. This build contains basic support for C++ and Objective-C++ that is ready to be tried out; by general users. It is still in its infancy, but establishes a baseline for things to come. The main hope is that it can find some; issues and have a reasonable false positive rate.; Please file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introd",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:12400,Deployability,install,installation,12400,"asic support for C++ and Objective-C++ that is ready to be tried out; by general users. It is still in its infancy, but establishes a baseline for things to come. The main hope is that it can find some; issues and have a reasonable false positive rate.; Please file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""in",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:13187,Deployability,release,release,13187,"ease file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""init-like"" methods that do not follow the standard Cocoa naming conventions.; Introduces new attributes ns_consumed and cf_consumed to educate the Objective-C retain/release checker about methods/functions that decrement the reference count of a parameter. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:13350,Deployability,release,release,13350,"ease file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""init-like"" methods that do not follow the standard Cocoa naming conventions.; Introduces new attributes ns_consumed and cf_consumed to educate the Objective-C retain/release checker about methods/functions that decrement the reference count of a parameter. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:13546,Deployability,release,release,13546,"ease file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""init-like"" methods that do not follow the standard Cocoa naming conventions.; Introduces new attributes ns_consumed and cf_consumed to educate the Objective-C retain/release checker about methods/functions that decrement the reference count of a parameter. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:499,Energy Efficiency,allocate,allocated,499,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1181,Energy Efficiency,reduce,reduced,1181,"analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:4323,Energy Efficiency,reduce,reduces,4323," arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move cons",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:5304,Energy Efficiency,Efficient,Efficient,5304,"(LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better support for iOS project analysis without having to specifying weird SDK settings to scan-build. Better diagnostics for implicitly-defined member functions in C++.; New warning for malloc/free checker when passing malloc'ed pointer with non-zero offset to free().; Fixes for misc. parser crashes.; Newer than the static analyzer version in Xcode 4.6. checker-270; built: January 4",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:6532,Energy Efficiency,reduce,reduce,6532,"ves. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better support for iOS project analysis without having to specifying weird SDK settings to scan-build. Better diagnostics for implicitly-defined member functions in C++.; New warning for malloc/free checker when passing malloc'ed pointer with non-zero offset to free().; Fixes for misc. parser crashes.; Newer than the static analyzer version in Xcode 4.6. checker-270; built: January 4, 2013; highlights:. Major performance enhancements to speed up interprocedural analysis.; Misc. bug fixes. checker-269; built: September 25, 2012; highlights:. Significantly improves interprocedural analysis for Objective-C.; Numerous bug fixes and heuristics to reduce false positives reported; 			over checker-268. checker-268; built: September 11, 2012; highlights:. Adds initial interprocedural analysis support for C++ and Objective-C. This will greatly improve analysis coverage and find deeper bugs in Objective-C and C++ code.; Contains a static analyzer newer than Xcode 4.4. NOTE: this checker build includes a huge number of changes. It has the potential to find many more bugs, but may report new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precis",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:7547,Energy Efficiency,reduce,reduce,7547,"bjective-C.; Numerous bug fixes and heuristics to reduce false positives reported; 			over checker-268. checker-268; built: September 11, 2012; highlights:. Adds initial interprocedural analysis support for C++ and Objective-C. This will greatly improve analysis coverage and find deeper bugs in Objective-C and C++ code.; Contains a static analyzer newer than Xcode 4.4. NOTE: this checker build includes a huge number of changes. It has the potential to find many more bugs, but may report new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precision and reduce the false positive rate of the analyzer. It also enables a new unix.MallocSizeof check, which reports; inconsistencies between the casted type of the return value of a 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSD",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:10038,Energy Efficiency,reduce,reduce,10038,"size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where you see regressions or issues. checker-257; built: May 25, 2011; highlights:. The analyzer is now far more aggressive with checking conformance with Core Foundation conventions. Any function that returns a CF type must now obey the Core Foundation naming conventions, or use the cf_returns_retained or cf_returns_not_retained annotations.; Fixed a serious regression where the analyzer ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:12899,Energy Efficiency,Reduce,Reduces,12899,"ease file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""init-like"" methods that do not follow the standard Cocoa naming conventions.; Introduces new attributes ns_consumed and cf_consumed to educate the Objective-C retain/release checker about methods/functions that decrement the reference count of a parameter. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:12955,Energy Efficiency,reduce,reduce,12955,"ease file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""init-like"" methods that do not follow the standard Cocoa naming conventions.; Introduces new attributes ns_consumed and cf_consumed to educate the Objective-C retain/release checker about methods/functions that decrement the reference count of a parameter. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:12382,Integrability,depend,depending,12382,"asic support for C++ and Objective-C++ that is ready to be tried out; by general users. It is still in its infancy, but establishes a baseline for things to come. The main hope is that it can find some; issues and have a reasonable false positive rate.; Please file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""in",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:474,Modifiability,variab,variables,474,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1223,Modifiability,variab,variables,1223,"analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:5117,Modifiability,enhance,enhancements,5117,"de as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better support for iOS project analysis without having to specifying weird SDK settings to scan-build. Better diagnostics for implicitly-defined member functions in C++.; New warning for malloc/free checker when passing malloc'e",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:6307,Modifiability,enhance,enhancements,6307," trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better support for iOS project analysis without having to specifying weird SDK settings to scan-build. Better diagnostics for implicitly-defined member functions in C++.; New warning for malloc/free checker when passing malloc'ed pointer with non-zero offset to free().; Fixes for misc. parser crashes.; Newer than the static analyzer version in Xcode 4.6. checker-270; built: January 4, 2013; highlights:. Major performance enhancements to speed up interprocedural analysis.; Misc. bug fixes. checker-269; built: September 25, 2012; highlights:. Significantly improves interprocedural analysis for Objective-C.; Numerous bug fixes and heuristics to reduce false positives reported; 			over checker-268. checker-268; built: September 11, 2012; highlights:. Adds initial interprocedural analysis support for C++ and Objective-C. This will greatly improve analysis coverage and find deeper bugs in Objective-C and C++ code.; Contains a static analyzer newer than Xcode 4.4. NOTE: this checker build includes a huge number of changes. It has the potential to find many more bugs, but may report new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over che",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:7928,Modifiability,enhance,enhancements,7928,"new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precision and reduce the false positive rate of the analyzer. It also enables a new unix.MallocSizeof check, which reports; inconsistencies between the casted type of the return value of a 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C strin",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:12064,Modifiability,config,configuration,12064,"class extensions.; Misc. bug fixes to improve analyzer precision.; . checker-256; built: April 13, 2011; highlights:. Lots of bug fixes and improvements to analyzer precision (fewer false positives, possibly more bugs found).; Introductory analysis support for C++ and Objective-C++. This build contains basic support for C++ and Objective-C++ that is ready to be tried out; by general users. It is still in its infancy, but establishes a baseline for things to come. The main hope is that it can find some; issues and have a reasonable false positive rate.; Please file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introd",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1497,Performance,perform,performance,1497,"cated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContextChecker. New checks for _Nonnull type qualifiers. These can be enabled with:.   -enable-checker nullability.NullPassedToNonnull,nullabi",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:2836,Performance,perform,performance,2836," months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContextChecker. New checks for _Nonnull type qualifiers. These can be enabled with:.   -enable-checker nullability.NullPassedToNonnull,nullability.NullReturnedFromNonnull; New checks for misuse of Objective-C generics. These can be enabled with -enable-checker alpha.osx.cocoa.ObjCGenerics. Support for cf_returns_retained and cf_returns_not_retained attributes in out-parameters.; The analyzer now creates one state for a range switch case instead of multiple, resulting in performance improvements.; Now requires OS X 10.7 or later.; 	; checker-276; built: February 19, 2014; download: checker-276.tar.bz2; highlights:. Includes about 9 months of change to Clang itself (improved C++11/14 support, etc.); More precise modeling of Objective-C properties, which enables the analyzer to find more bugs.; Includes a new ""missing call to super"" warning, which looks for common pattern in iOS/OSX APIs that require chaining a call to a super class's implementation of a method.; Accepts -arch arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: B",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:4255,Performance,Optimiz,Optimization,4255,"at require chaining a call to a super class's implementation of a method.; Accepts -arch arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constr",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:5105,Performance,perform,performance,5105,"de as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better support for iOS project analysis without having to specifying weird SDK settings to scan-build. Better diagnostics for implicitly-defined member functions in C++.; New warning for malloc/free checker when passing malloc'e",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:6295,Performance,perform,performance,6295," trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better support for iOS project analysis without having to specifying weird SDK settings to scan-build. Better diagnostics for implicitly-defined member functions in C++.; New warning for malloc/free checker when passing malloc'ed pointer with non-zero offset to free().; Fixes for misc. parser crashes.; Newer than the static analyzer version in Xcode 4.6. checker-270; built: January 4, 2013; highlights:. Major performance enhancements to speed up interprocedural analysis.; Misc. bug fixes. checker-269; built: September 25, 2012; highlights:. Significantly improves interprocedural analysis for Objective-C.; Numerous bug fixes and heuristics to reduce false positives reported; 			over checker-268. checker-268; built: September 11, 2012; highlights:. Adds initial interprocedural analysis support for C++ and Objective-C. This will greatly improve analysis coverage and find deeper bugs in Objective-C and C++ code.; Contains a static analyzer newer than Xcode 4.4. NOTE: this checker build includes a huge number of changes. It has the potential to find many more bugs, but may report new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over che",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:7916,Performance,perform,performance,7916,"new kinds of false positives. We'd like to know about; these, and any other problems you encounter. When you encounter an issue, please file a bug report.; checker-267; built: June 1, 2012; highlights:; Adds basic interprocedural analysis support for blocks.; checker-266; built: May 23, 2012; highlights:; Contains numerous stability fixes over checker-266, especially when analyzing C++11 code.; checker-265; built: May 8, 2012; highlights:; This release contains a fix for a major crasher introduced in checker-264, and various refinements to; improve the precision and reduce the false positive rate of the analyzer. It also enables a new unix.MallocSizeof check, which reports; inconsistencies between the casted type of the return value of a 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C strin",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:8721,Performance,perform,performance,8721," 'malloc/calloc/realloc' call and the operand; of sizeof expressions contained within its argument(s).; checker-264; built: April 26, 2012; highlights:; This release contains misc. bug fixes and performance enhancements over checker-263, including; a reduction of some kinds of false positives related to the malloc() checker.; checker-263; built: March 22, 2012; highlights:. Fixes several serious bugs with inter-procedural analysis, including a case where retain/releases would be ""double-counted"". checker-262; built: March 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, whic",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9245,Performance,perform,performance,9245,"ch 15, 2012; highlights:. Enables experimental interprocedural analysis (within a file), which greatly amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 20",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:10009,Performance,perform,performance,10009,"size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where you see regressions or issues. checker-257; built: May 25, 2011; highlights:. The analyzer is now far more aggressive with checking conformance with Core Foundation conventions. Any function that returns a CF type must now obey the Core Foundation naming conventions, or use the cf_returns_retained or cf_returns_not_retained annotations.; Fixed a serious regression where the analyzer ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:10021,Performance,optimiz,optimizations,10021,"size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where you see regressions or issues. checker-257; built: May 25, 2011; highlights:. The analyzer is now far more aggressive with checking conformance with Core Foundation conventions. Any function that returns a CF type must now obey the Core Foundation naming conventions, or use the cf_returns_retained or cf_returns_not_retained annotations.; Fixed a serious regression where the analyzer ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:400,Safety,Unsafe,Unsafe,400,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1362,Safety,detect,detect,1362,"pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContext",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1533,Safety,detect,detect,1533,"signment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContextChecker. New checks for _Nonnull type qualifiers. These can be enabled with:.   -enable-checker nullability.NullPassedToNonnull,nullability.NullReturnedFromNonnull; New checks for ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:1602,Safety,detect,detect,1602,"nabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability checks:; ; Checker warning about uses of non-localized NSStrings passed to UI methods expecting localized strings.; Checker warning when the comment argument is missing from NSLocalizedString macros.; These can be enabled by passing the following command to scan-build:.   -enable-checker alpha.osx.cocoa.NonLocalizedStringChecker,alpha.osx.cocoa.EmptyLocalizationContextChecker. New checks for _Nonnull type qualifiers. These can be enabled with:.   -enable-checker nullability.NullPassedToNonnull,nullability.NullReturnedFromNonnull; New checks for misuse of Objective-C generics. These can be enabled with -enable-checker alpha",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9447,Safety,unsafe,unsafe,9447,"complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where yo",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9526,Safety,unsafe,unsafe,9526,"complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where yo",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9605,Safety,unsafe,unsafe,9605,"complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where yo",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9696,Safety,unsafe,unsafe,9696,"complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where yo",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9852,Security,secur,security,9852,"complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where yo",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:10351,Security,secur,security,10351,"wing experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a new security checker for looking at correct uses of the Mac OS KeyChain API.; Supports ARC (please file bugs where you see issues); Major under-the-cover changes. This should result in more precise results in some cases, but this is laying the groundwork for major improvements. Please file bugs where you see regressions or issues. checker-257; built: May 25, 2011; highlights:. The analyzer is now far more aggressive with checking conformance with Core Foundation conventions. Any function that returns a CF type must now obey the Core Foundation naming conventions, or use the cf_returns_retained or cf_returns_not_retained annotations.; Fixed a serious regression where the analyzer would not analyze Objective-C methods in class extensions.; Misc. bug fixes to improve analyzer precision.; . checker-256; built: April 13, 2011; highlights:. Lots of bug fixes and improvements to analyzer precision (fewer false positives, possibly more bugs found).; Introductory analysis support for C++ and Objective-C++. This build contains b",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:13239,Security,access,accessor,13239,"ease file bugs when you see issues of any kind so we can assess; where development on C++ analysis support needs to be focused.; To try out C++ analysis support, it should work out of the box using scan-build. If you are using this checker build; as a replacement to the analyzer bundled with Xcode, first use the set-xcode-analyzer script to change Xcode to use; your version of the analyzer. You will then need to modify one configuration file in Xcode to enable C++ analysis support. This can; be done with the following steps:. Find the clang .xcspec file:; $ cd /Developer/Library; $ find . | grep xcspec | grep Clang; ./Xcode/<SNIP>/Clang LLVM 1.0.xcplugin/Contents/Resources/Clang LLVM 1.0.xcspec. The exact location of the file may vary depending on your installation of Xcode. Edit that file, and look for the string ""--analyze"":. SourceFileOption = ""--analyze"";; FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; );; ... Change the ""FileTypes"" entry to:. FileTypes = (; ""sourcecode.c.c"",; ""sourcecode.c.objc"",; ""sourcecode.cpp.cpp"",; ""sourcecode.cpp.objcpp"",; );. Restart Xcode. checker-255; built: February 11, 2011; highlights:. Mac OS X builds are now Intel i386 and x86_64 only (no ppc support); Turns on new -init method checker by default; Reduces memory usage of analyzer by 10%; Misc. fixes to reduce false positives on dead stores and idempotent operations. checker-254; built: January 27, 2011; highlights:. Introduces new -init method checker to check if a super class's init method is properly called.; Objective-C retain/release checker now reasons about calls to property accessor methods (setter/getter).; Introduces new attribute ns_consumes_self to educate the Objective-C retain/release checker about custom ""init-like"" methods that do not follow the standard Cocoa naming conventions.; Introduces new attributes ns_consumed and cf_consumed to educate the Objective-C retain/release checker about methods/functions that decrement the reference count of a parameter. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:858,Testability,assert,assertions,858,". Release notes for checker-XXX builds. Release notes for checker-XXX builds; checker-279; built: November 14, 2016; download: checker-279.tar.bz2; highlights:. The analyzer includes new checks for:; ; Improper instance cleanup up in Objective-C -dealloc methods under manual retain/release.; Inadvertent comparisons of NSNumber, CFNumberRef, and other number object pointers against scalar values.; Unsafe usage of dispatch_once_t predicates stored in Objective-C instance variables and other heap-allocated memory.; Issues resulting from self-assignment in C++.; Incorrect usage of MPI APIs in C and C++. This check can be enabled by passing the following command to scan-build: ;   -enable-checker optin.mpi.MPI-Checker. The scan-build tool now supports a --force-analyze-debug-code flag that forces projects to analyze in debug mode. This flag leaves in assertions and so typically results in fewer false positives.; Additional miscellaneous improvements.; Now requires macOS 10.8 or later. checker-278; built: February 5, 2016; download: checker-278.tar.bz2; highlights:. Greatly improves analysis of C++ lambdas, including interprocedural analysis of lambda applications and reduced 'dead store'; false positives for variables captured by reference.; The analyzer now checks for misuse of 'vfork()'. This check is enabled by default.; The analyzer can now detect excessively-padded structs. This check can be enabled by passing the following; command to scan-build:;   -enable-checker optin.performance.Padding ; The checks to detect misuse of _Nonnull are now enabled by default.; The checks to detect misuse of Objective-C generics are now enabled by default.; Many miscellaneous improvements. checker-277; built: October 28, 2015; download: checker-277.tar.bz2; highlights:. Includes about 20 months of change to Clang itself.; New checker for C++ leaks is turned on by default.; Added various small checks and bug fixes.; Added experimental checkers for Objective-C:. New localizability chec",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:3770,Usability,Feedback,Feedback,3770,"r a range switch case instead of multiple, resulting in performance improvements.; Now requires OS X 10.7 or later.; 	; checker-276; built: February 19, 2014; download: checker-276.tar.bz2; highlights:. Includes about 9 months of change to Clang itself (improved C++11/14 support, etc.); More precise modeling of Objective-C properties, which enables the analyzer to find more bugs.; Includes a new ""missing call to super"" warning, which looks for common pattern in iOS/OSX APIs that require chaining a call to a super class's implementation of a method.; Accepts -arch arm64 (which may be passed by Xcode 5.0), but for the time being analyzes code in such cases as -arch armv7s.; Many sundry fixes, improvements to C++ support, etc. checker-275; built: May 23, 2013; download: checker-275.tar.bz2; highlights:. Xcode: Includes a new arrow layout algorithm for issue presentation within Xcode. The goal is for interprocedural bug reports to look cleaner and less busy (and easier to read). Feedback appreciated.; Xcode: Bugs that occur within header code (e.g., C++) are now reported within the callers in the main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to c",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:4870,Usability,simpl,simple,4870,"main source file. For example, if you misuse a C++ function declared in a header the primary diagnostic will be in the caller (in the main source file). The full expanded path, however, will show the bug in the header code as well. These kind of cross-file issues are currently only support by Xcode, not the HTML output.; This build is built with LLVM's Link-Time Optimization (LTO), which should make it slightly faster.; LTO also reduces the download size (about 19% smaller than checker-274).; Many sundry fixes. checker-274; built: April 23, 2013; download: checker-274.tar.bz2; highlights:. Improved use-after-free and mismatched deallocator checking.; Diagnostic polish.; Fixes crashes found in checker-273. checker-273; built: April 8, 2013; download: checker-273.tar.bz2; highlights:. Additional checks for misuse of Foundation collection APIs.; New C++ checker for attempting to create a reference to null.; New use-after-free checker for C++ 'delete'.; New checker for simple cases of mismatched allocators and deallocators, e.g. ""delete malloc(4);""; Support for basic interprocedural analysis of C++ destructors.; Additional heuristics for suppressing null pointer false positives.; Misc. bug fixes and performance enhancements. checker-272; built: March 1, 2013; highlights:. Better modeling of C++ constructors:; ; Interprocedural analysis support for constructors of types with trivial destructors; Efficient model of trivial copy and move constructors. Better diagnostics for loops that execute 0 times; Fixes a linking issue that prevented the checker from running on OS X v10.6 and earlier; Fixes for misc. crashes and false positives. checker-271; built: February 8, 2013; highlights:. Faster analysis for scan-build xcodebuild when using Xcode 4.6 and higher:; ; scan-build now uses Xcode's built-in interposition mechanism for the static analyzer to provide faster builds while doing static analysis (PCH files are now built).; This change also allows scan-build to have better s",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html:9423,Usability,feedback,feedback,9423," amplifies the analyzer's ability to find issues.; Many bug fixes to the malloc/free checker.; Support for new Objective-C NSArray/NSDictionary/NSNumber literals syntax, and Objective-C container subscripting. NOTE: This build contains new interprocedural analysis that allows the analyzer to find more complicated bugs that span function boundaries. It may have problems, performance issues, etc. We'd like to hear about them. checker-261; built: February 22, 2012; highlights:. Contains a new experimental malloc/free checker.; Better support for projects using ARC.; Warns about null pointers passed as arguments to C string functions.; Warns about common anti-patterns in 'strncat' size argument, which can lead to buffer overflows.; set-xcode-analyzer now supports self-contained Xcode.app (Xcode 4.3 and later).; Contains a newer version of the analyzer than Xcode 4.3.; Misc. bug fixes and performance work. checker-260; built: January 25, 2012; highlights:; This is essentially the same as checker-259, but enables the following experimental checkers (please provide feedback):. Warns about unsafe uses of CFArrayCreate, CFSetCreate, and CFDictionaryCreate; Warns about unsafe uses of getpw, gets, which are sources of buffer overflows; Warns about unsafe uses of mktemp and mktemps, which can lead to insecure temporary files; Warns about unsafe uses of vfork, which is insecure to use; Warns about not checking the return values of setuid, setgid, seteuid, setegid, setreuid, setregid (another security issue). checker-259; built: January 25, 2012; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Significant performance optimizations to reduce memory usage of the analyzer.; Tweaks to scan-build to have it work more easily with Xcode projects using Clang.; Numerous bug fixes to better support code using ARC. checker-258; built: October 13, 2011; highlights:. Contains a newer version of the analyzer than the one shipped in Xcode 4.2.; Adds a n",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/release_notes.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/release_notes.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:1045,Availability,down,down,1045,": running the analyzer from the command line. scan-build: running the analyzer from the command line. What is it?; scan-build is a command line utility that enables a user to run the; static analyzer over their codebase as part of performing a regular build (from; the command line).; How does it work?; During a project build, as source files are compiled they are also analyzed; in tandem by the static analyzer.; Upon completion of the build, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:3457,Availability,error,error,3457,"e, one can pass -j4 to; make get a parallel build over 4 cores:. $ scan-build make -j4. In almost all cases, scan-build makes no effort to interpret the; options after the build command; it simply passes them through. In general,; scan-build should support parallel builds, but not distributed; builds.; It is also possible to use scan-build to analyze specific; files:. $ scan-build gcc -c t1.c t2.c. This example causes the files t1.c and t2.c to be analyzed. For Windows Users; Windows users must have Perl installed to use scan-build.; scan-build.bat script allows you to launch scan-build in the same; way as it described in the Basic Usage section above. To invoke scan-build from; an arbitrary location, add the path to the folder containing scan-build.bat to; your PATH environment variable.; If you have unexpected compilation/make problems when running scan-build; with MinGW/MSYS the following information may be helpful:. If getting unexpected ""fatal error: no input files"" while; building with MSYS make from the Windows cmd, try one of these solutions:. Use MinGW mingw32-make instead of MSYS make and; exclude the path to MSYS from PATH to prevent mingw32-make from using; MSYS utils. MSYS utils are dependent on the MSYS runtime and they are not; intended for being run from the Windows cmd. Specifically, makefile commands; with backslashed quotes may be heavily corrupted when passed for execution.; Run make from the sh shell:. $ scan-build [scan-build options] sh -c ""make [make options]"". If getting ""Error : *** target pattern contains no `%'"" while; using GNU Make 3.81, try to use another version of make. Other Options; As mentioned above, extra options can be passed to scan-build. These; options prefix the build command. For example:. $ scan-build -k -V make; $ scan-build -k -V xcodebuild. Here is a subset of useful options:. OptionDescription; -oTarget directory for HTML report files. Subdirectories; will be created as needed to represent separate ""runs"" of the analy",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:4016,Availability,Error,Error,4016,"d.bat script allows you to launch scan-build in the same; way as it described in the Basic Usage section above. To invoke scan-build from; an arbitrary location, add the path to the folder containing scan-build.bat to; your PATH environment variable.; If you have unexpected compilation/make problems when running scan-build; with MinGW/MSYS the following information may be helpful:. If getting unexpected ""fatal error: no input files"" while; building with MSYS make from the Windows cmd, try one of these solutions:. Use MinGW mingw32-make instead of MSYS make and; exclude the path to MSYS from PATH to prevent mingw32-make from using; MSYS utils. MSYS utils are dependent on the MSYS runtime and they are not; intended for being run from the Windows cmd. Specifically, makefile commands; with backslashed quotes may be heavily corrupted when passed for execution.; Run make from the sh shell:. $ scan-build [scan-build options] sh -c ""make [make options]"". If getting ""Error : *** target pattern contains no `%'"" while; using GNU Make 3.81, try to use another version of make. Other Options; As mentioned above, extra options can be passed to scan-build. These; options prefix the build command. For example:. $ scan-build -k -V make; $ scan-build -k -V xcodebuild. Here is a subset of useful options:. OptionDescription; -oTarget directory for HTML report files. Subdirectories; will be created as needed to represent separate ""runs"" of the analyzer. If this; option is not specified, a directory is created in /tmp to store the; reports.; -h(or no arguments)Display all; scan-build options.; -k--keep-goingAdd a ""keep on; going"" option to the specified build command. This option currently supports; make and xcodebuild. This is a convenience option; one; can specify this behavior directly using build options.; -vVerbose output from scan-build and the analyzer. A; second and third ""-v"" increases verbosity, and is useful for filing bug; reports against the analyzer.; -VView analysis results ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6400,Availability,error,error,6400,"he PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; sc",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6807,Availability,error,error,6807,"reated to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8588,Availability,avail,available,8588,"r to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:10460,Availability,error,errors,10460,"he device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-c++; options to hardwire which compiler scan-build should use for building your code.; Note that although you are chiefly interested in analyzing your project, keep in; mind that running the analyzer is intimately tied to the build, and not being; able to compile your code means it won't get fully analyzed (if at all).; If you aren't certain which compiler Xcode uses to build your project, try; just running xcodebuild (without scan-build). You should see the; full path to the compiler that Xcode is using, and use that as an argument to; --use-cc. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:1439,Deployability,Configurat,Configuration,1439,"uild, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; s",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:3004,Deployability,install,installed,3004,"imple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; subsequent options passed to it. For example, one can pass -j4 to; make get a parallel build over 4 cores:. $ scan-build make -j4. In almost all cases, scan-build makes no effort to interpret the; options after the build command; it simply passes them through. In general,; scan-build should support parallel builds, but not distributed; builds.; It is also possible to use scan-build to analyze specific; files:. $ scan-build gcc -c t1.c t2.c. This example causes the files t1.c and t2.c to be analyzed. For Windows Users; Windows users must have Perl installed to use scan-build.; scan-build.bat script allows you to launch scan-build in the same; way as it described in the Basic Usage section above. To invoke scan-build from; an arbitrary location, add the path to the folder containing scan-build.bat to; your PATH environment variable.; If you have unexpected compilation/make problems when running scan-build; with MinGW/MSYS the following information may be helpful:. If getting unexpected ""fatal error: no input files"" while; building with MSYS make from the Windows cmd, try one of these solutions:. Use MinGW mingw32-make instead of MSYS make and; exclude the path to MSYS from PATH to prevent mingw32-make from using; MSYS utils. MSYS utils are dependent on the MSYS runtime and they are not; intended for being run from the Windows cmd. Specifically, makefile commands; with backslashed quotes may be heavily corrupted when passed for execution.; Run make from the sh shell:. $ scan-build [scan-build options] sh -c ""make [make o",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6162,Deployability,configurat,configuration,6162,"cutable relative to itself for static analysis. One can override this; behavior with this option by using the 'clang' packaged with Xcode (on OS X) or; from the PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8869,Deployability,configurat,configuration,8869,"Phone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8916,Deployability,configurat,configuration,8916,"Phone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8956,Deployability,configurat,configuration,8956,"Phone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:9544,Deployability,configurat,configuration,9544," described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:9672,Deployability,configurat,configuration,9672," for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-c++; options to hardwire which compiler scan-build should use for building your code.; Note that although you are chiefly intere",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:10215,Deployability,install,installed,10215,"he device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-c++; options to hardwire which compiler scan-build should use for building your code.; Note that although you are chiefly interested in analyzing your project, keep in; mind that running the analyzer is intimately tied to the build, and not being; able to compile your code means it won't get fully analyzed (if at all).; If you aren't certain which compiler Xcode uses to build your project, try; just running xcodebuild (without scan-build). You should see the; full path to the compiler that Xcode is using, and use that as an argument to; --use-cc. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6356,Energy Efficiency,reduce,reduce,6356,"he PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; sc",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:857,Integrability,depend,depending,857,". scan-build: running the analyzer from the command line. scan-build: running the analyzer from the command line. What is it?; scan-build is a command line utility that enables a user to run the; static analyzer over their codebase as part of performing a regular build (from; the command line).; How does it work?; During a project build, as source files are compiled they are also analyzed; in tandem by the static analyzer.; Upon completion of the build, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: j",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:3709,Integrability,depend,dependent,3709,"ort parallel builds, but not distributed; builds.; It is also possible to use scan-build to analyze specific; files:. $ scan-build gcc -c t1.c t2.c. This example causes the files t1.c and t2.c to be analyzed. For Windows Users; Windows users must have Perl installed to use scan-build.; scan-build.bat script allows you to launch scan-build in the same; way as it described in the Basic Usage section above. To invoke scan-build from; an arbitrary location, add the path to the folder containing scan-build.bat to; your PATH environment variable.; If you have unexpected compilation/make problems when running scan-build; with MinGW/MSYS the following information may be helpful:. If getting unexpected ""fatal error: no input files"" while; building with MSYS make from the Windows cmd, try one of these solutions:. Use MinGW mingw32-make instead of MSYS make and; exclude the path to MSYS from PATH to prevent mingw32-make from using; MSYS utils. MSYS utils are dependent on the MSYS runtime and they are not; intended for being run from the Windows cmd. Specifically, makefile commands; with backslashed quotes may be heavily corrupted when passed for execution.; Run make from the sh shell:. $ scan-build [scan-build options] sh -c ""make [make options]"". If getting ""Error : *** target pattern contains no `%'"" while; using GNU Make 3.81, try to use another version of make. Other Options; As mentioned above, extra options can be passed to scan-build. These; options prefix the build command. For example:. $ scan-build -k -V make; $ scan-build -k -V xcodebuild. Here is a subset of useful options:. OptionDescription; -oTarget directory for HTML report files. Subdirectories; will be created as needed to represent separate ""runs"" of the analyzer. If this; option is not specified, a directory is created in /tmp to store the; reports.; -h(or no arguments)Display all; scan-build options.; -k--keep-goingAdd a ""keep on; going"" option to the specified build command. This option currently supports",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:5886,Integrability,message,message,5886,"tions.; -vVerbose output from scan-build and the analyzer. A; second and third ""-v"" increases verbosity, and is useful for filing bug; reports against the analyzer.; -VView analysis results in a web browser when the build; command completes.; --use-analyzer Xcodeor; --use-analyzer [path to clang]scan-build uses the; 'clang' executable relative to itself for static analysis. One can override this; behavior with this option by using the 'clang' packaged with Xcode (on OS X) or; from the PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:678,Modifiability,variab,variables,678,". scan-build: running the analyzer from the command line. scan-build: running the analyzer from the command line. What is it?; scan-build is a command line utility that enables a user to run the; static analyzer over their codebase as part of performing a regular build (from; the command line).; How does it work?; During a project build, as source files are compiled they are also analyzed; in tandem by the static analyzer.; Upon completion of the build, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: j",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:1439,Modifiability,Config,Configuration,1439,"uild, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; s",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:1507,Modifiability,config,configure,1507,"Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; subsequent options passed to it. For example, one can pass -j4 to; make",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:3284,Modifiability,variab,variable,3284,"s the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; subsequent options passed to it. For example, one can pass -j4 to; make get a parallel build over 4 cores:. $ scan-build make -j4. In almost all cases, scan-build makes no effort to interpret the; options after the build command; it simply passes them through. In general,; scan-build should support parallel builds, but not distributed; builds.; It is also possible to use scan-build to analyze specific; files:. $ scan-build gcc -c t1.c t2.c. This example causes the files t1.c and t2.c to be analyzed. For Windows Users; Windows users must have Perl installed to use scan-build.; scan-build.bat script allows you to launch scan-build in the same; way as it described in the Basic Usage section above. To invoke scan-build from; an arbitrary location, add the path to the folder containing scan-build.bat to; your PATH environment variable.; If you have unexpected compilation/make problems when running scan-build; with MinGW/MSYS the following information may be helpful:. If getting unexpected ""fatal error: no input files"" while; building with MSYS make from the Windows cmd, try one of these solutions:. Use MinGW mingw32-make instead of MSYS make and; exclude the path to MSYS from PATH to prevent mingw32-make from using; MSYS utils. MSYS utils are dependent on the MSYS runtime and they are not; intended for being run from the Windows cmd. Specifically, makefile commands; with backslashed quotes may be heavily corrupted when passed for execution.; Run make from the sh shell:. $ scan-build [scan-build options] sh -c ""make [make options]"". If getting ""Error : *** target pattern contains no `%'"" while; using GNU Make 3.81, try to use another version of make. Other Options; As mentioned above, extra options can be passed to scan-build. These; options prefix the build command. For example:. $ scan-build -k -",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6162,Modifiability,config,configuration,6162,"cutable relative to itself for static analysis. One can override this; behavior with this option by using the 'clang' packaged with Xcode (on OS X) or; from the PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7023,Modifiability,config,configure,7023,"ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter prob",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7104,Modifiability,config,configure,7104,"ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter prob",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7153,Modifiability,config,configure,7153,"ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter prob",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7248,Modifiability,config,configure,7248,"ed up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., se",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7299,Modifiability,config,configure,7299,"educe the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to an",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7517,Modifiability,variab,variable,7517,"de flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can a",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7738,Modifiability,config,configure,7738,"is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; follow",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7837,Modifiability,config,configure,7837,"is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; follow",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8869,Modifiability,config,configuration,8869,"Phone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8916,Modifiability,config,configuration,8916,"Phone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:8956,Modifiability,config,configuration,8956,"Phone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:9544,Modifiability,config,configuration,9544," described later.; Instructions are available on this; website on how to use open source builds of the analyzer as a replacement for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:9672,Modifiability,config,configuration,9672," for; the one bundled with Xcode.; Using scan-build directly; If you wish to use scan-build with your iPhone project, keep the; following things in mind:. Analyze your project in the Debug configuration, either by setting; this as your configuration with Xcode or by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-c++; options to hardwire which compiler scan-build should use for building your code.; Note that although you are chiefly intere",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:243,Performance,perform,performing,243,". scan-build: running the analyzer from the command line. scan-build: running the analyzer from the command line. What is it?; scan-build is a command line utility that enables a user to run the; static analyzer over their codebase as part of performing a regular build (from; the command line).; How does it work?; During a project build, as source files are compiled they are also analyzed; in tandem by the static analyzer.; Upon completion of the build, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: j",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6989,Performance,perform,perform,6989,"d; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7662,Performance,perform,perform,7662,"o emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open sou",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:7704,Performance,perform,perform,7704,"o emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are nearly the same as; their cousins for desktop applications. scan-build can analyze these; projects as well, but users often encounter problems with just building their; iPhone projects from the command line because there are a few extra preparative; steps they need to take (e.g., setup code signing).; Recommendation: use ""Build and Analyze""; The absolute easiest way to analyze iPhone projects is to use the; Analyze; feature in Xcode (which is based on the Clang Static Analyzer). There a; user can analyze their project right from a menu without most of the setup; described later.; Instructions are available on this; website on how to use open sou",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6235,Testability,assert,assertions,6235,"cutable relative to itself for static analysis. One can override this; behavior with this option by using the 'clang' packaged with Xcode (on OS X) or; from the PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6248,Testability,Assert,Assertions,6248,"he PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; sc",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6534,Testability,assert,assertions,6534,"HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setti",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6977,Testability,log,logs,6977,"d; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:1387,Usability,Guid,Guidelines,1387,"analyzed; in tandem by the static analyzer.; Upon completion of the build, results are then presented to the user within a; web browser.; Will it work with any build system?; scan-build has little or no knowledge about how you build your code.; It works by overriding the CC and CXX environment variables to; (hopefully) change your build to use a ""fake"" compiler instead of the; one that would normally build your project. This fake compiler executes either; clang or gcc (depending on the platform) to compile your; code and then executes the static analyzer to analyze your code.; This ""poor man's interposition"" works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:1992,Usability,simpl,simple,1992,"works amazingly well in many cases; and falls down in others. Please consult the information on this page on making; the best use of scan-build, which includes getting it to work when the; aforementioned hack fails to work. Viewing static analyzer results in a web browser. Contents. Getting Started. Basic Usage; For Windows Users; Other Options; Output of scan-build. Recommended Usage Guidelines. Always Analyze a Project in its ""Debug"" Configuration; Use Verbose Output when Debugging scan-build; Run './configure' through scan-build. Analyzing iPhone Projects. Getting Started; The scan-build command can be used to analyze an entire project by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; subsequent options passed to it. For example, one can pass -j4 to; make get a parallel build over 4 cores:. $ scan-build make -j4. In almost all cases, scan-build makes no effort to interpret the; options after the build command; it simply passes them through. In general,; scan-build should support parallel builds, but not distributed; builds.; It is also possible to use scan-build to analyze specific; files:. $ scan-build gcc -c t1.c t2.c. This example causes the files t1.c and t2.c to be analyzed. For Windows Users; Windows users must have P",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:2684,Usability,simpl,simply,2684,"by; essentially interposing on a project's build process. This means that to run the; analyzer using scan-build, you will use scan-build to analyze; the source files compiled by gcc/clang during a project build.; This means that any files that are not compiled will also not be analyzed.; Basic Usage; Basic usage of scan-build is designed to be simple: just place the; word ""scan-build"" in front of your build command:. $ scan-build make; $ scan-build xcodebuild. In the first case scan-build analyzes the code of a project built; with make and in the second case scan-build analyzes a project; built using xcodebuild.; Here is the general format for invoking scan-build:. $ scan-build [scan-build options] <command> [command options]. Operationally, scan-build literally runs <command> with all of the; subsequent options passed to it. For example, one can pass -j4 to; make get a parallel build over 4 cores:. $ scan-build make -j4. In almost all cases, scan-build makes no effort to interpret the; options after the build command; it simply passes them through. In general,; scan-build should support parallel builds, but not distributed; builds.; It is also possible to use scan-build to analyze specific; files:. $ scan-build gcc -c t1.c t2.c. This example causes the files t1.c and t2.c to be analyzed. For Windows Users; Windows users must have Perl installed to use scan-build.; scan-build.bat script allows you to launch scan-build in the same; way as it described in the Basic Usage section above. To invoke scan-build from; an arbitrary location, add the path to the folder containing scan-build.bat to; your PATH environment variable.; If you have unexpected compilation/make problems when running scan-build; with MinGW/MSYS the following information may be helpful:. If getting unexpected ""fatal error: no input files"" while; building with MSYS make from the Windows cmd, try one of these solutions:. Use MinGW mingw32-make instead of MSYS make and; exclude the path to MSYS from PATH ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6037,Usability,Guid,Guidelines,6037," build; command completes.; --use-analyzer Xcodeor; --use-analyzer [path to clang]scan-build uses the; 'clang' executable relative to itself for static analysis. One can override this; behavior with this option by using the 'clang' packaged with Xcode (on OS X) or; from the PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:9892,Usability,simpl,simple,9892,"by passing -configuration; Debug to xcodebuild.; Analyze your project using the Simulator as your base SDK. It is; possible to analyze your code when targeting the device, but this is much; easier to do when using Xcode's Build and Analyze feature.; Check that your code signing SDK is set to the simulator SDK as well, and make sure this option is set to Don't Code Sign. Note that you can most of this without actually modifying your project. For; example, if your application targets iPhoneOS 2.2, you could run; scan-build in the following manner from the command line:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator2.2. Alternatively, if your application targets iPhoneOS 3.0:. $ scan-build xcodebuild -configuration Debug -sdk iphonesimulator3.0. Gotcha: using the right compiler; Recall that scan-build analyzes your project by using a compiler to; compile the project and clang to analyze your project. The script uses; simple heuristics to determine which compiler should be used (it defaults to; clang on Darwin and gcc on other platforms). When analyzing; iPhone projects, scan-build may pick the wrong compiler than the one; Xcode would use to build your project. For example, this could be because; multiple versions of a compiler may be installed on your system, especially if; you are developing for the iPhone.; When compiling your application to run on the simulator, it is important that scan-build; finds the correct version of gcc/clang. Otherwise, you may see strange build; errors that only happen when you run scan-build. scan-build provides the --use-cc and --use-c++; options to hardwire which compiler scan-build should use for building your code.; Note that although you are chiefly interested in analyzing your project, keep in; mind that running the analyzer is intimately tied to the build, and not being; able to compile your code means it won't get fully analyzed (if at all).; If you aren't certain which compiler Xcode uses to build your project,",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/scan-build.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:826,Availability,avail,available,826,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:846,Availability,down,download,846,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:908,Availability,avail,available,908,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:185,Deployability,integrat,integrates,185,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:447,Deployability,Integrat,Integrated,447,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:480,Deployability,integrat,integrated,480,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:2265,Deployability,configurat,configuration,2265,"; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode to using the clang provided by the specified analyzer build. Things to keep in mind. You should quit Xcode prior to running set-xcode-analyzer. You will need to run set-xcode-analyzer under; sudo in order to have write privileges to modify the Xcode; configuration files. Examples; Example 1: Telling Xcode to use checker-235:. $ pwd; /tmp; $ tar xjf checker-235.tar.bz2; $ sudo checker-235/set-xcode-analyzer --use-checker-build=/tmp/checker-235. Note that you typically won't install an analyzer build in /tmp, but; the point of this example is that set-xcode-analyzer just wants a full; path to an untarred analyzer build.; Example 2: Telling Xcode to use a very specific version of clang:. $ sudo set-xcode-analyzer --use-checker-bu",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:2803,Deployability,configurat,configuration,2803,"ed with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode to using the clang provided by the specified analyzer build. Things to keep in mind. You should quit Xcode prior to running set-xcode-analyzer. You will need to run set-xcode-analyzer under; sudo in order to have write privileges to modify the Xcode; configuration files. Examples; Example 1: Telling Xcode to use checker-235:. $ pwd; /tmp; $ tar xjf checker-235.tar.bz2; $ sudo checker-235/set-xcode-analyzer --use-checker-build=/tmp/checker-235. Note that you typically won't install an analyzer build in /tmp, but; the point of this example is that set-xcode-analyzer just wants a full; path to an untarred analyzer build.; Example 2: Telling Xcode to use a very specific version of clang:. $ sudo set-xcode-analyzer --use-checker-build=~/mycrazyclangbuild/bin/clang. Example 3: Resetting Xcode to its default behavior:. $ sudo set-xcode-analyzer --use-xcode-clang. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:3030,Deployability,install,install,3030,"ed with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode to using the clang provided by the specified analyzer build. Things to keep in mind. You should quit Xcode prior to running set-xcode-analyzer. You will need to run set-xcode-analyzer under; sudo in order to have write privileges to modify the Xcode; configuration files. Examples; Example 1: Telling Xcode to use checker-235:. $ pwd; /tmp; $ tar xjf checker-235.tar.bz2; $ sudo checker-235/set-xcode-analyzer --use-checker-build=/tmp/checker-235. Note that you typically won't install an analyzer build in /tmp, but; the point of this example is that set-xcode-analyzer just wants a full; path to an untarred analyzer build.; Example 2: Telling Xcode to use a very specific version of clang:. $ sudo set-xcode-analyzer --use-checker-build=~/mycrazyclangbuild/bin/clang. Example 3: Resetting Xcode to its default behavior:. $ sudo set-xcode-analyzer --use-xcode-clang. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:185,Integrability,integrat,integrates,185,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:447,Integrability,Integrat,Integrated,447,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:480,Integrability,integrat,integrated,480,". Running the analyzer within Xcode. Running the analyzer within Xcode. What is it?; Since Xcode 3.2, users have been able to run the Clang Static Analyzer; directly; within Xcode.; It integrates directly with the Xcode build system and; presents analysis results directly within Xcode's editor.; Can I use the open source analyzer builds with Xcode?; Yes. Instructions are included below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:2040,Integrability,message,message,2040,"your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode to using the clang provided by the specified analyzer build. Things to keep in mind. You should quit Xcode prior to running set-xcode-analyzer. You will need to run set-xcode-analyzer under; sudo in order to have write privileges to modify the Xcode; configuration files. Examples; Example 1: Telling Xcode to use checker-235:. $ pwd; /tmp; $ tar xjf checker-235.tar.bz2; $ sudo checker-235/set-xcode-analyzer --use-checker-build=/tmp/checker-235. Note that you typically won't install an analyzer build in /tmp, but; th",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:1576,Modifiability,variab,variable,1576,"ool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:2265,Modifiability,config,configuration,2265,"; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode to using the clang provided by the specified analyzer build. Things to keep in mind. You should quit Xcode prior to running set-xcode-analyzer. You will need to run set-xcode-analyzer under; sudo in order to have write privileges to modify the Xcode; configuration files. Examples; Example 1: Telling Xcode to use checker-235:. $ pwd; /tmp; $ tar xjf checker-235.tar.bz2; $ sudo checker-235/set-xcode-analyzer --use-checker-build=/tmp/checker-235. Note that you typically won't install an analyzer build in /tmp, but; the point of this example is that set-xcode-analyzer just wants a full; path to an untarred analyzer build.; Example 2: Telling Xcode to use a very specific version of clang:. $ sudo set-xcode-analyzer --use-checker-bu",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:2803,Modifiability,config,configuration,2803,"ed with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it provides you two basic modes:. --use-xcode-clang: Switch Xcode (back) to using the clang that came bundled with it for static analysis.; --use-checker-build: Switch Xcode to using the clang provided by the specified analyzer build. Things to keep in mind. You should quit Xcode prior to running set-xcode-analyzer. You will need to run set-xcode-analyzer under; sudo in order to have write privileges to modify the Xcode; configuration files. Examples; Example 1: Telling Xcode to use checker-235:. $ pwd; /tmp; $ tar xjf checker-235.tar.bz2; $ sudo checker-235/set-xcode-analyzer --use-checker-build=/tmp/checker-235. Note that you typically won't install an analyzer build in /tmp, but; the point of this example is that set-xcode-analyzer just wants a full; path to an untarred analyzer build.; Example 2: Telling Xcode to use a very specific version of clang:. $ sudo set-xcode-analyzer --use-checker-build=~/mycrazyclangbuild/bin/clang. Example 3: Resetting Xcode to its default behavior:. $ sudo set-xcode-analyzer --use-xcode-clang. ",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html:1484,Usability,simpl,simply,1484," below. Viewing static analyzer results in Xcode. Key features:. Integrated workflow: Results are integrated within Xcode. There is; no experience of using a separate tool, and activating the analyzer requires a; single keystroke or mouse click.; Transparency: Works effortlessly with Xcode projects (including iPhone projects).; Cons: Doesn't work well with non-Xcode projects. For those,; consider using scan-build. Getting Started; Xcode is available as a free download from Apple on the Mac; App Store, with instructions; available for using the analyzer.; Using open source analyzer builds with Xcode; By default, Xcode uses the version of clang that came bundled with; it to analyze your code. It is possible to change Xcode's behavior to use an; alternate version of clang for this purpose while continuing to use; the clang that came with Xcode for compiling projects.; Why try open source builds?; The advantage of using open source analyzer builds (provided on this website); is that they are often newer than the analyzer provided with Xcode, and thus can; contain bug fixes, new checks, or simply better analysis.; On the other hand, new checks can be experimental, with results of variable; quality. Users are encouraged to file bug reports; (for any version of the analyzer) where they encounter false positives or other; issues.; set-xcode-analyzer; Starting with analyzer build checker-234, analyzer builds contain a command; line utility called set-xcode-analyzer that allows users to change what; copy of clang that Xcode uses for analysis:. $ set-xcode-analyzer -h; Usage: set-xcode-analyzer [options]. Options:; -h, --help show this help message and exit; --use-checker-build=PATH; Use the Clang located at the provided absolute path,; e.g. /Users/foo/checker-1; --use-xcode-clang Use the Clang bundled with Xcode. Operationally, set-xcode-analyzer edits Xcode's configuration files; to point it to use the version of clang you specify for static; analysis. Within this model it pr",MatchSource.DOCS,interpreter/llvm-project/clang/www/analyzer/xcode.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/xcode.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/_templates/indexsidebar.html:155,Usability,Guid,Guides,155,{# This template defines sidebar which can be used to provide common links on; all documentation pages. #}. Documentation. Getting Started/Tutorials; User Guides; Reference. Getting Involved. Contributing to LLVM; Submitting Bug Reports; Mailing Lists; IRC; Meetups and Social Events. Additional Links. FAQ; Glossary; Publications; Github Repository; ,MatchSource.DOCS,interpreter/llvm-project/llvm/docs/_templates/indexsidebar.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/_templates/indexsidebar.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/_templates/layout.html:3,Modifiability,extend,extends,3,"{% extends ""!layout.html"" %}. {% block extrahead %}. {% endblock %}. {% block rootrellink %}; LLVM Home | ; Documentation»; {% endblock %}; ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/_templates/layout.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/_templates/layout.html
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/_themes/llvm-theme/layout.html:212,Modifiability,extend,extends,212,"{#; sphinxdoc/layout.html; ~~~~~~~~~~~~~~~~~~~~~. Sphinx layout template for the sphinxdoc theme. :copyright: Copyright 2007-2010 by the Sphinx team, see AUTHORS.; :license: BSD, see LICENSE for details.; #}; {% extends ""basic/layout.html"" %}. {% block relbar1 %}. {{ super() }}; {% endblock %}. {# put the sidebar before the body #}; {% block sidebar1 %}{{ sidebar() }}{% endblock %}; {% block sidebar2 %}{% endblock %}; ",MatchSource.DOCS,interpreter/llvm-project/llvm/docs/_themes/llvm-theme/layout.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/_themes/llvm-theme/layout.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:130,Availability,Repair,Repaired,130,". I/O. Unset the kIsReferenced bit before cloning an object in order to avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This remo",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1322,Deployability,update,update,1322," to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://r",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1912,Deployability,patch,patch,1912,"the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by sett",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:605,Integrability,message,message,605,". I/O. Unset the kIsReferenced bit before cloning an object in order to avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This remo",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:2023,Integrability,message,message,2023,"rical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by setting TH1::AddDirectory. Additionally one can disable the directory auto add for; a specific class by doing:. TClass::GetClass(""myclass"")->SetDirectoryAutoAdd(0)",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:175,Modifiability,Extend,Extend,175,". I/O. Unset the kIsReferenced bit before cloning an object in order to avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This remo",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:901,Modifiability,inherit,inheritance,901,". I/O. Unset the kIsReferenced bit before cloning an object in order to avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This remo",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1039,Modifiability,extend,extending,1039,"o avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were ",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1918,Modifiability,extend,extends,1918,"the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by sett",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:2226,Modifiability,Extend,Extend,2226,"class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by setting TH1::AddDirectory. Additionally one can disable the directory auto add for; a specific class by doing:. TClass::GetClass(""myclass"")->SetDirectoryAutoAdd(0). However you might want to also be able to restore the; behavior in which case you ought to do:. TClass *cl = TClass::GetClass(""myclass"");; ROOT::DirAutoAdd_t func = cl->GetDirectoryAutoAdd()",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:2036,Performance,load,loading,2036,"rical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by setting TH1::AddDirectory. Additionally one can disable the directory auto add for; a specific class by doing:. TClass::GetClass(""myclass"")->SetDirectoryAutoAdd(0)",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:72,Safety,avoid,avoid,72,". I/O. Unset the kIsReferenced bit before cloning an object in order to avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This remo",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1752,Security,checksum,checksum,1752,"all the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the def",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1833,Security,checksum,checksum,1833,"all the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the def",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1859,Security,checksum,checksum,1859,"all the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the def",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:2117,Security,CheckSum,CheckSum,2117,"rical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by setting TH1::AddDirectory. Additionally one can disable the directory auto add for; a specific class by doing:. TClass::GetClass(""myclass"")->SetDirectoryAutoAdd(0)",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:253,Testability,test,test,253,". I/O. Unset the kIsReferenced bit before cloning an object in order to avoid the (incorrect/unwanted) registration of the clone. Repaired writing Foreign class in XML files. Extend TDirectoryFile so it can now be derived from. In MakeProject; properly test whether a StreamerElement describe a base class (stl container were not handled correctly).; Remove requirement to have '.' in the PATH to execute the build. Add a new optional parameter to TDirectory::Append: replace.; If replace is true (the default is false), the Append will; first remove from the directory any existing object and; print the message:. Replacing existing OldClass: thename (Potential memory leak). Add a new option parameter to TDirectory::CloneObject: 'autoadd'; If autoadd is true (the default), CloneObject will call the; object 'DirectoryAutoAdd' function (if any). In TDirectory::CloneObject add support for multiple inheritance; from TObject where TObject is not the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This remo",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1931,Testability,test,test,1931,"the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by sett",MatchSource.DOCS,io/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:158,Availability,recover,recover,158,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:265,Availability,Recover,Recover,265,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:562,Deployability,configurat,configuration,562,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:306,Modifiability,inherit,inheritance,306,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:562,Modifiability,config,configuration,562,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:158,Safety,recover,recover,158,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:265,Safety,Recover,Recover,265,". I/O. Fix the order of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = o",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:1024,Security,access,access,1024,"rder of creation of the TStreamerInfo during the opening of a ROOT file to insure that the CollectionProxy are properly setup.; Fix problem: ""recover warning when opening an empty file; created with TXNetFile"" which was due to a bad check in TFile::Recover; (line TFile.cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = onfile.x*1000 + ",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html:1407,Security,access,access,1407,".cxx:1561) where the inheritance from TFile should be checked; instead of requiring the name to be TFile.; In TBranch::File, in the case of importing the data directly from; an external TBuffer, remove 80 char limit on reading the class name; Re-enable support for the; rootrc configuration Root.ZipMode. Data Model Evolution. First step in the implemantation of the infrastructure for the new Data Model Evolution Scheme.; This Data Model Evolution is brought to your courtesy of BNL/STAR/ATLAS/Fermi/Cern; Current Capabilities. Assign values to transient data members; Rename classes; Rename data members; Change the shape of the data structures or convert one class; structure to another; Change the meaning of data members; Ability to access the TBuffer directly when needed; Ensure that the objects in collections are handled in the same; way as the ones stored separately; Supported in object-wise, member-wise and split modes. Coming soon. Make things operational also in bare ROOT mode; Ability to transform data before writing; Support for changing the class type of nested object in a split; branch; Support for access to onfile version of nested objects from; within the parent rule. LinkDef rule syntax; Setting a transient member:; #pragma read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"" \; code=""{ zcalc = false; }"". Setting a new member from 2 removed members:. #pragma read sourceClass=""ACache"" targetClass=""ACache""; source=""int x; int y; char c"" version=""[8]"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*10; }"". Renaming a class:. #pragma read sourceClass=""ACache"" version=""[8]""; targetClass=""Axis"" \; source=""int x; int y;"" target=""z"" \; code=""{ z = onfile.x*1000 + onfile.y*; #pragma read sourceClass=""ACache"" version=""[9]""; targetClass=""Axis"";. See the long form documentation; Selection XML syntax <read sourceClass=""ACache"" targetClass=""ACache"" source=""""; version=""[1-]"" target=""zcalc"">; <![CDATA[; { zcalc = false; }; ]]></read>. ",MatchSource.DOCS,io/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:462,Availability,failure,failures,462,". I/O. Implement proxy support in TWebFile. The proxy URL can be sprcified either; via TWebFile::SetProxy() or via the shell variable http_proxy, as is being; used by wget, e.g.:; export http_proxy=http://pcsalo.cern.ch:3128; To bypass the proxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per def",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:1469,Availability,error,error,1469,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:1210,Deployability,Upgrade,Upgrade,1210,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:1707,Deployability,Upgrade,Upgrade,1707,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:1763,Deployability,Update,Update,1763,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:1797,Integrability,interface,interface,1797,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:125,Modifiability,variab,variable,125,". I/O. Implement proxy support in TWebFile. The proxy URL can be sprcified either; via TWebFile::SetProxy() or via the shell variable http_proxy, as is being; used by wget, e.g.:; export http_proxy=http://pcsalo.cern.ch:3128; To bypass the proxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per def",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:375,Modifiability,Extend,Extend,375,". I/O. Implement proxy support in TWebFile. The proxy URL can be sprcified either; via TWebFile::SetProxy() or via the shell variable http_proxy, as is being; used by wget, e.g.:; export http_proxy=http://pcsalo.cern.ch:3128; To bypass the proxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per def",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:2063,Modifiability,config,configured,2063,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:2006,Performance,perform,performed,2006,"roxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per default performed with ""%e"" (exponential) format.; Format can be configured with SetFloatFormat methods that one can specify precision, width arguments of printf call.; sscanf works as before - ""%f"" accpet both exponential and decimal format. ",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:446,Safety,avoid,avoid,446,". I/O. Implement proxy support in TWebFile. The proxy URL can be sprcified either; via TWebFile::SetProxy() or via the shell variable http_proxy, as is being; used by wget, e.g.:; export http_proxy=http://pcsalo.cern.ch:3128; To bypass the proxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per def",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html:424,Security,checksum,checksum,424,". I/O. Implement proxy support in TWebFile. The proxy URL can be sprcified either; via TWebFile::SetProxy() or via the shell variable http_proxy, as is being; used by wget, e.g.:; export http_proxy=http://pcsalo.cern.ch:3128; To bypass the proxy, the TWebFile ctor (or via TFile::Open()) supports the; option ""NOPROXY"".; Add support for streaming std::bitset STL containers; Extend the checks done in case of a StreamerInfo checksum mismatch to; avoid spurrious failures (for example because of the various possible; type names for STL containers) and to report details on the nature of; the mismatch: explicit list missing base classese, missing data members; or the actual differences in type or comments.; For example:. Warning in : The following data member of the on-file layout version 2 of class 'Tdata' differs from the in-memory layout version 2:; double mydouble; //; vs; double mydouble_two; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int more; //; Warning in : The following data member of the in-memory layout version 2 of class 'Tdata' is missing from the on-file layout version 2:; int three; //. Upgrade MakeProject to be able to handle ROOT files created by for ATLAS.; Allow user to provide a custom reallocator when the TBuffer is being passed; memory. If the TBuffer does not own the memory __and__ no custom memory; reallocator has been set, a Fatal error will be issued:; Fatal in : Failed to expand the data buffer because TBuffer does not own it and no custom memory reallocator was provided.; Re-allow reading empty vector< long double >, however long double is still not supported.; Upgrade TSQLFile to properly work with MySQL on MacOS.; Update to the CollectionProxyInfo interface to insure the proper creation of iterator over std containers on all platforms.; In XML and SQL output, use %e format to write float and double:; ; Conversion from float/double to string per def",MatchSource.DOCS,io/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:443,Availability,error,error,443,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:569,Deployability,update,updated,569,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:1730,Deployability,update,updates,1730,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:1155,Integrability,protocol,protocol,1155,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:125,Modifiability,portab,portable,125,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:256,Modifiability,portab,portability,256,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:645,Modifiability,Extend,Extend,645,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:1108,Modifiability,plugin,plugin,1108,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:1390,Performance,perform,performance,1390,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:423,Safety,Avoid,Avoid,423,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:585,Safety,avoid,avoid,585,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:732,Safety,abort,abort,732,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:977,Safety,Avoid,Avoid,977,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:39,Security,hash,hash,39,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html:635,Security,checksum,checksum,635,". I/O; Schema Evolution. Change TExMap hash, key and values from (U)Long_t to (U)Long64_t. This makes TExMap streamable in a portable way. On 64-bit platforms there is; no difference, but on 32-bit platforms all values will now be 64-bit. This fixes a big portability issue with THnSparse which uses TExMap internally; where the versions created on a 32-bit platform could not be read on a 64-bit platform and vice versa.; Avoid reporting I/O error for members of a class that is used only for a transient member; Concrete implementation of TClassGenerator needs to be updated to also avoid the warnings.; Fix the rule lookup based on checksum; Extend support of the schema evolution rules to fixed length array.; Prevent a process abort (due to a call to Fatal) when we are missing the dictionary for (one of) the; content of an STL collection when this collection is 'only' use has a transient member.; Fix the case where the source and target of a rule have the same name.; Avoid using the 'current' StreamerInfo to read an older streamerInfo that is missing (in case of corrupted files). Misc. New TFile plugin for the Hadoop Distributed File System (protocol hdfs:); Unregister stack objects from their TDirectory when the TList tries to delete them.; When streaming a base class without StreamerNVirtual() use an external streamer if it was set.; Many improvement to the I/O run-time performance.; DCache:; Increase readahead size from 8k to 128k and make it settable via DCACHE_RA_BUFFER env var.; dCap client does not ignore ?filetpye=raw and other options, so remove it. The function TFile::GetRelOffset is now public instead of protected.; Corrected the reading of the TFile record of large files.; MakeProject: several updates to improve support for CMS and Atlas data files (add support for auto_ptr, bitset, class name longer than 255 characters, etc.). ",MatchSource.DOCS,io/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:2549,Deployability,patch,patches,2549,"root N 17.5 Gb 10.55s +/- 0.15 (2200 entries) ; cms1.root Y 16.8 Gb 9.12s +/- 0.08 (2200 entries) ; cms4.root N 1.47 Gb 10.18s +/- 0.19 (2500 entries) ; cms4.root Y 1.43 Gb 9.24s +/- 0.06 (2500 entries) . Non Split files. FilenameMemberwiseSizeCpu Time To read. cms2.root N 1.65 Gb 10.95s +/- 0.05 (1000 entries) ; cms2.root Y 1.53 Gb 8.20s +/- 0.05 (1000 entries) ; cms3.root N 0.780 Gb 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (700 entries) ; cms5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequenc",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:2591,Deployability,patch,patch,2591,") ; cms4.root N 1.47 Gb 10.18s +/- 0.19 (2500 entries) ; cms4.root Y 1.43 Gb 9.24s +/- 0.06 (2500 entries) . Non Split files. FilenameMemberwiseSizeCpu Time To read. cms2.root N 1.65 Gb 10.95s +/- 0.05 (1000 entries) ; cms2.root Y 1.53 Gb 8.20s +/- 0.05 (1000 entries) ; cms3.root N 0.780 Gb 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (700 entries) ; cms5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_colle",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:2647,Deployability,patch,patch,2647,"ms4.root Y 1.43 Gb 9.24s +/- 0.06 (2500 entries) . Non Split files. FilenameMemberwiseSizeCpu Time To read. cms2.root N 1.65 Gb 10.95s +/- 0.05 (1000 entries) ; cms2.root Y 1.53 Gb 8.20s +/- 0.05 (1000 entries) ; cms3.root N 0.780 Gb 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (700 entries) ; cms5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoAct",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4296,Deployability,configurat,configuration,4296,"oop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4374,Deployability,configurat,configuration,4374,"bject);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise re",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4540,Deployability,update,updated,4540,"bject);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise re",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4568,Deployability,configurat,configuration,4568,"_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise reading, one for the member wise reading for TClonesArray and vector of pointers,; one for the member wise reading for a vector of object and one for al",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4738,Deployability,configurat,configuration,4738,"optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise reading, one for the member wise reading for TClonesArray and vector of pointers,; one for the member wise reading for a vector of object and one for all other collections. Each collection (proxy) needs to provide 5 new free standing functions:. // Set of functions to iterate easily throught the collection; static const Int_t fgIteratorArenaSi",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:6306,Energy Efficiency,allocate,allocated,6306,"f the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise reading, one for the member wise reading for TClonesArray and vector of pointers,; one for the member wise reading for a vector of object and one for all other collections. Each collection (proxy) needs to provide 5 new free standing functions:. // Set of functions to iterate easily throught the collection; static const Int_t fgIteratorArenaSize = 16; // greater than sizeof(void*) + sizeof(UInt_t). typedef void (*CreateIterators_t)(void *collection, void **begin_arena, void **end_arena);; virtual CreateIterators_t GetFunctionCreateIterators(Bool_t read = kTRUE) = 0;; // begin_arena and end_arena should contain the location of a memory arena of size fgIteratorSize.; // If the collection iterator are of that size or less, the iterators will be constructed in place in those location; // (new with placement.) Otherwise the iterators will be allocated via a regular new and their address returned by; // modifying the value of begin_arena and end_arena. typedef void* (*CopyIterator_t)(void *dest, const void *source);; virtual CopyIterator_t GetFunctionCopyIterator(Bool_t read = kTRUE) = 0;; // Copy the iterator source, into dest. dest should contain the location of a memory arena of size fgIteratorSize.; // If the collection iterator is of that size or less, the iterator will be constructed in place in this location; // (new with placement.) Otherwise the iterator will be allocated via a regular new and its address returned by; // modifying the value of dest. typedef void* (*Next_t)(void *iter, const void *end);; virtual Next_t GetFunctionNext(Bool_t read = kTRUE) = 0;; // iter and end should be pointers to respectively an iterator to be incremented and the result of collection.end(); // If the iterator has not reached the end of the collection, 'Next' increment the iterator 'iter' and return 0 if; // the iterator reached the end.; // If the end was not reached, ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:6845,Energy Efficiency,allocate,allocated,6845,"(*CreateIterators_t)(void *collection, void **begin_arena, void **end_arena);; virtual CreateIterators_t GetFunctionCreateIterators(Bool_t read = kTRUE) = 0;; // begin_arena and end_arena should contain the location of a memory arena of size fgIteratorSize.; // If the collection iterator are of that size or less, the iterators will be constructed in place in those location; // (new with placement.) Otherwise the iterators will be allocated via a regular new and their address returned by; // modifying the value of begin_arena and end_arena. typedef void* (*CopyIterator_t)(void *dest, const void *source);; virtual CopyIterator_t GetFunctionCopyIterator(Bool_t read = kTRUE) = 0;; // Copy the iterator source, into dest. dest should contain the location of a memory arena of size fgIteratorSize.; // If the collection iterator is of that size or less, the iterator will be constructed in place in this location; // (new with placement.) Otherwise the iterator will be allocated via a regular new and its address returned by; // modifying the value of dest. typedef void* (*Next_t)(void *iter, const void *end);; virtual Next_t GetFunctionNext(Bool_t read = kTRUE) = 0;; // iter and end should be pointers to respectively an iterator to be incremented and the result of collection.end(); // If the iterator has not reached the end of the collection, 'Next' increment the iterator 'iter' and return 0 if; // the iterator reached the end.; // If the end was not reached, 'Next' returns the address of the content pointed to by the iterator before the; // incrementation ; if the collection contains pointers, 'Next' will return the value of the pointer. typedef void (*DeleteIterator_t)(void *iter);; typedef void (*DeleteTwoIterators_t)(void *begin, void *end);. virtual DeleteIterator_t GetFunctionDeleteIterator(Bool_t read = kTRUE) = 0;; virtual DeleteTwoIterators_t GetFunctionDeleteTwoIterators(Bool_t read = kTRUE) = 0;; // If the size of the iterator is greater than fgIteratorArenaSize, cal",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:12504,Energy Efficiency,reduce,reduce,12504,"e (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset and TKey::WriteFileKeepBuffer to allow derived classes (TBasket) to be re-use as key rather than always recreated.; TH1::Streamer and TGraph2D::Streamer no longer reset the kCanDelete bit directly so that the user can give; ownership of the object to the canvas they are stored with. However, if they are saved on their own, the mechanism; that associates them to the current directory (DirectoryAutoAdd) will now reset the bit to avoid any possible; ownsership confusion.; Added TFile::SetOffset and TFile::ReadBuffer(char *buf, Long64_t pos, Int_t len); to drastically reduce; the number of fseek done on the physical file when using the TTreeCache.; To support future changes in the API of the CollectionProxy, we added the new #define:; ROOT_COLLECTIONPROXY_VERSION and REFLEX_COLLECTIONPROXY_VERSION. Reduce possible confusions and conflicts by always using in TClass and TStreamerInfo the version of template instance names with ULong64_t and Long64_t rather than [unsigned] long long.; new Hadoop TFile plugin. ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:12739,Energy Efficiency,Reduce,Reduce,12739,"e (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset and TKey::WriteFileKeepBuffer to allow derived classes (TBasket) to be re-use as key rather than always recreated.; TH1::Streamer and TGraph2D::Streamer no longer reset the kCanDelete bit directly so that the user can give; ownership of the object to the canvas they are stored with. However, if they are saved on their own, the mechanism; that associates them to the current directory (DirectoryAutoAdd) will now reset the bit to avoid any possible; ownsership confusion.; Added TFile::SetOffset and TFile::ReadBuffer(char *buf, Long64_t pos, Int_t len); to drastically reduce; the number of fseek done on the physical file when using the TTreeCache.; To support future changes in the API of the CollectionProxy, we added the new #define:; ROOT_COLLECTIONPROXY_VERSION and REFLEX_COLLECTIONPROXY_VERSION. Reduce possible confusions and conflicts by always using in TClass and TStreamerInfo the version of template instance names with ULong64_t and Long64_t rather than [unsigned] long long.; new Hadoop TFile plugin. ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9243,Integrability,protocol,protocol,9243,"o use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:10718,Integrability,interface,interface,10718,"t; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long long on a 32 bits platform (previously the higher; bits were lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamerInfo; so that TMessage can customize the behavior. TMessage now relies on this new interface; instead of TBuffer::IncrementLevel.; New option to hadd, -O requesting the (re)optimization of the basket size (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contain",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:10831,Integrability,interface,interface,10831,"ed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long long on a 32 bits platform (previously the higher; bits were lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamerInfo; so that TMessage can customize the behavior. TMessage now relies on this new interface; instead of TBuffer::IncrementLevel.; New option to hadd, -O requesting the (re)optimization of the basket size (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:3083,Modifiability,config,configured,3083,"s5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4197,Modifiability,config,configured,4197," reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4219,Modifiability,config,configured,4219,"oop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4296,Modifiability,config,configuration,4296,"oop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4374,Modifiability,config,configuration,4374,"bject);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise re",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4568,Modifiability,config,configuration,4568,"_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise reading, one for the member wise reading for TClonesArray and vector of pointers,; one for the member wise reading for a vector of object and one for al",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:4738,Modifiability,config,configuration,4738,"optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for example the size of the element of; a vector or the pointers to the iterators functions (see below). Each TStreamerInfo has 2 reading sequences, one for object-wise reading (GetReadObjectWiseActions); and one for member-wise reading (GetReadMemberWiseActions) which is used when streaming a TClonesArray; of a vector of pointer to the type of objects described by the TClass. Each collection proxy has at least one reading sequences, one for the reading each version of the; contained class layout. Each case of the TStreamerInfo::ReadBuffer switch statement is replaced by 4 new action functions,; one for the object wise reading, one for the member wise reading for TClonesArray and vector of pointers,; one for the member wise reading for a vector of object and one for all other collections. Each collection (proxy) needs to provide 5 new free standing functions:. // Set of functions to iterate easily throught the collection; static const Int_t fgIteratorArenaSi",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:7971,Modifiability,Extend,Extend,7971,"erator to be incremented and the result of collection.end(); // If the iterator has not reached the end of the collection, 'Next' increment the iterator 'iter' and return 0 if; // the iterator reached the end.; // If the end was not reached, 'Next' returns the address of the content pointed to by the iterator before the; // incrementation ; if the collection contains pointers, 'Next' will return the value of the pointer. typedef void (*DeleteIterator_t)(void *iter);; typedef void (*DeleteTwoIterators_t)(void *begin, void *end);. virtual DeleteIterator_t GetFunctionDeleteIterator(Bool_t read = kTRUE) = 0;; virtual DeleteTwoIterators_t GetFunctionDeleteTwoIterators(Bool_t read = kTRUE) = 0;; // If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses,; // Otherwise just call the iterator's destructor. TFile::MakeProject. Extend TFile::MakeProject to support genreflex, cases of user's data model where; the 2 distincts pointers point to a single object and more cases where we are; missing the StreamerInfo and need to guess whether the symbol represent an enum,; a class or a namespace. To use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the d",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9196,Modifiability,variab,variable,9196,"o use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9259,Modifiability,variab,variable,9259,"o use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9487,Modifiability,polymorphi,polymorphism,9487,"elete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9542,Modifiability,polymorphi,polymorphism,9542,"elete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9574,Modifiability,inherit,inheriting,9574,"elete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9809,Modifiability,variab,variable,9809,"tructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long long on a 32 bits platform (previously the higher; bits were lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamer",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:12943,Modifiability,plugin,plugin,12943,"e (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset and TKey::WriteFileKeepBuffer to allow derived classes (TBasket) to be re-use as key rather than always recreated.; TH1::Streamer and TGraph2D::Streamer no longer reset the kCanDelete bit directly so that the user can give; ownership of the object to the canvas they are stored with. However, if they are saved on their own, the mechanism; that associates them to the current directory (DirectoryAutoAdd) will now reset the bit to avoid any possible; ownsership confusion.; Added TFile::SetOffset and TFile::ReadBuffer(char *buf, Long64_t pos, Int_t len); to drastically reduce; the number of fseek done on the physical file when using the TTreeCache.; To support future changes in the API of the CollectionProxy, we added the new #define:; ROOT_COLLECTIONPROXY_VERSION and REFLEX_COLLECTIONPROXY_VERSION. Reduce possible confusions and conflicts by always using in TClass and TStreamerInfo the version of template instance names with ULong64_t and Long64_t rather than [unsigned] long long.; new Hadoop TFile plugin. ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:814,Performance,load,loading,814,. I/O; File Format; The default for streaming the content of STL containers was changed from object-wise; to member-wise. We evaluated the impact of moving to MemberWise streaming using 5 different CMS data files:. cms1.root an older split using level 99 Reco file; cms2.root a more recent non split raw data file; cms3.root a more recent non split Reco file; cms4.root is an example of the lepton plus jet analysis format known as a user PAT-tuple (split); cms5.root is an example AOD (analysis object dataset) format file. It is not split because the objects here are a strict subset of the RECO objects. We rewrote all the files using the v5.26/00 new basket clustering algorithm using both memberwise streaming and objectwise streaming. In the table below the read time is the CPU time to completion including loading the libraries.; When reading the file where always in the os cache (since we are focusing evaluating cpu time). The number of event actually read varies from file set to file set but was calibrated to result; in about 10s of cpu time. The files are read using a library generated with TFile::MakeProject. The object-wise files are between 2% and 10% larger compared to their member-wise counterpart. The CPU time for reading object-wise files is 12% higher for split files; and 30% higher for non-split files. So the improvement is significant enough to warrant switch the default from objectwise to memberwise. Split files. FilenameMemberwiseSizeCpu Time To read. cms1.root N 17.5 Gb 10.55s +/- 0.15 (2200 entries) ; cms1.root Y 16.8 Gb 9.12s +/- 0.08 (2200 entries) ; cms4.root N 1.47 Gb 10.18s +/- 0.19 (2500 entries) ; cms4.root Y 1.43 Gb 9.24s +/- 0.06 (2500 entries) . Non Split files. FilenameMemberwiseSizeCpu Time To read. cms2.root N 1.65 Gb 10.95s +/- 0.05 (1000 entries) ; cms2.root Y 1.53 Gb 8.20s +/- 0.05 (1000 entries) ; cms3.root N 0.780 Gb 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (,MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:883,Performance,cache,cache,883,. I/O; File Format; The default for streaming the content of STL containers was changed from object-wise; to member-wise. We evaluated the impact of moving to MemberWise streaming using 5 different CMS data files:. cms1.root an older split using level 99 Reco file; cms2.root a more recent non split raw data file; cms3.root a more recent non split Reco file; cms4.root is an example of the lepton plus jet analysis format known as a user PAT-tuple (split); cms5.root is an example AOD (analysis object dataset) format file. It is not split because the objects here are a strict subset of the RECO objects. We rewrote all the files using the v5.26/00 new basket clustering algorithm using both memberwise streaming and objectwise streaming. In the table below the read time is the CPU time to completion including loading the libraries.; When reading the file where always in the os cache (since we are focusing evaluating cpu time). The number of event actually read varies from file set to file set but was calibrated to result; in about 10s of cpu time. The files are read using a library generated with TFile::MakeProject. The object-wise files are between 2% and 10% larger compared to their member-wise counterpart. The CPU time for reading object-wise files is 12% higher for split files; and 30% higher for non-split files. So the improvement is significant enough to warrant switch the default from objectwise to memberwise. Split files. FilenameMemberwiseSizeCpu Time To read. cms1.root N 17.5 Gb 10.55s +/- 0.15 (2200 entries) ; cms1.root Y 16.8 Gb 9.12s +/- 0.08 (2200 entries) ; cms4.root N 1.47 Gb 10.18s +/- 0.19 (2500 entries) ; cms4.root Y 1.43 Gb 9.24s +/- 0.06 (2500 entries) . Non Split files. FilenameMemberwiseSizeCpu Time To read. cms2.root N 1.65 Gb 10.95s +/- 0.05 (1000 entries) ; cms2.root Y 1.53 Gb 8.20s +/- 0.05 (1000 entries) ; cms3.root N 0.780 Gb 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (,MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:2825,Performance,perform,performance,2825," 8.20s +/- 0.05 (1000 entries) ; cms3.root N 0.780 Gb 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (700 entries) ; cms5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the co",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:2855,Performance,optimiz,optimized,2855," 10.59s +/- 0.05 (700 entries) ; cms3.root Y 0.717 Gb 8.29s +/- 0.08 (700 entries) ; cms5.root N 1.55 Gb 10.20s +/- 0.17 (700 entries) ; cms5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to obj",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:3139,Performance,perform,performance,3139,"s stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered seq",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:3748,Performance,optimiz,optimized,3748," a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration obj",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:3802,Performance,optimiz,optimized,3802,"nce. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the buffer keep track of which streamer element is being streamed (this functionality is not used by TBufferFile.). A TStreamerInfoActions::TActionSequence is an ordered sequence of configured actions. A configured action has both an action which is a free standing function and a configuration object deriving; from TStreamerInfoActions::TConfiguration. The configuration contains information that is specific to the action; but varies from use to use, including the offset from the beginning of the object that needs to be updated.; Other examples of configuration include the number of bits requested for storing a Double32_t or its factor and minimum. When the sequence is intended for a collection, the sequence has a configuration object deriving; from TStreamerInfoActions::TLoopConfiguration which contains for",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:9161,Performance,load,loaded,9161,"where we are; missing the StreamerInfo and need to guess whether the symbol represent an enum,; a class or a namespace. To use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:10921,Performance,optimiz,optimization,10921,"= ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long long on a 32 bits platform (previously the higher; bits were lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamerInfo; so that TMessage can customize the behavior. TMessage now relies on this new interface; instead of TBuffer::IncrementLevel.; New option to hadd, -O requesting the (re)optimization of the basket size (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:8870,Safety,avoid,avoid,8870,"iterator's destructor. TFile::MakeProject. Extend TFile::MakeProject to support genreflex, cases of user's data model where; the 2 distincts pointers point to a single object and more cases where we are; missing the StreamerInfo and need to guess whether the symbol represent an enum,; a class or a namespace. To use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" vers",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:8950,Safety,avoid,avoid,8950,"iterator's destructor. TFile::MakeProject. Extend TFile::MakeProject to support genreflex, cases of user's data model where; the 2 distincts pointers point to a single object and more cases where we are; missing the StreamerInfo and need to guess whether the symbol represent an enum,; a class or a namespace. To use genreflex, call MakeProject with the ""genreflex"" option, for example:. file->MakeProject(libdir,""*"",""NEW+genreflex"");. To make sure the library created by MakeProject does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. MakeProject now implements a move constructor for each classes. For the implementation, we 'use' the 'copy constructor' until the C++ compilers properly support the official move constructor notation. Implementing a move constructor avoid having to delete and reconstruct resource during a std::vector resize and avoid the double delete induced by using the default copy constructor. MakeProject now adds dictionaries for auto_ptr. MakeProject no longer request the dictionary for std::pair instances that already have been loaded. Misc. TFile::Open now does variable expansion so that you can include the protocol in the variable (for example: export H1=""http://root.cern/files/h1""; ...; TFile::Open(""$H1/dstarmb.root"");; Added warning if the file does contain any StreamerInfo objects and was written with a different version of ROOT.; Implemented polymorphism for Emulated object (still not supporting polymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" vers",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:10434,Safety,Avoid,Avoid,10434,"olymorphism of Emulated Object inheriting from compiled class). See the Core/Meta section for details.; Add support for streaming auto_ptr when generating their dictionary via rootcint; Enable the use of the I/O customization rules on data members that are either a variable size array or a fixed size array. For example:. #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long long on a 32 bits platform (previously the higher; bits were lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamerInfo; so that TMessage can customize the behavior. TMessage now relies on this new interface; instead of TBuffer::IncrementLevel.; New option to hadd, -O requesting the (re)optimization of the basket size (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:10957,Safety,avoid,avoid,10957,"= ""[8]"" \; source = ""Int_t *fArray; Int_t fN;"" \; target = ""fArray"" \; code = ""{ fArray = new Char_t[onfile.fN]; Char_t* gtc=fArray; Int_t* gti=onfile.fArray; \; for(Int_t i=0; i<onfile.fN; i++) *(gtc+i) = *(gti+i)+10; }""; #pragma read sourceClass = ""ACache"" targetClass = ""ACache"" version = ""[8]"" \; source = ""float fValues[3]"" \; target = ""fValues"" \; code = ""{ for(Int_t i=0; i<3; i++) fValues[i] = 1+onfile.fValues[i]; }"". Allow the seamless schema evolution from map<a,b> to vector<pair<a,b> >.; Avoid dropping information when reading a long written on a 64 bits platforms; and being read into a long long on a 32 bits platform (previously the higher; bits were lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamerInfo; so that TMessage can customize the behavior. TMessage now relies on this new interface; instead of TBuffer::IncrementLevel.; New option to hadd, -O requesting the (re)optimization of the basket size (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:11544,Safety,avoid,avoid,11544,"ere lost due to passing through a 32 bits temporary long).; Migrate the functionality of TStreamerInfo::TagFile to a new interface TBuffer::TagStreamerInfo; so that TMessage can customize the behavior. TMessage now relies on this new interface; instead of TBuffer::IncrementLevel.; New option to hadd, -O requesting the (re)optimization of the basket size (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset and TKey::WriteFileKeepBuffer to allow derived classes (TBasket) to be re-use as key rather than always recreated.; TH1::Streamer and TGraph2D::Streamer no longer reset the kCanDelete bit directly so that the user can give; ownership of the object to the canvas they are stored with. However, if they are saved on their own, the mechanism; that associates them to the current directory (DirectoryAutoAdd) will now reset the bit to avoid any possible; ownsership confusion.; Added TFile::SetOffset and TFile::ReadBuffer(char *buf, Long64_t pos, Int_t len); to drastically reduce; the number of fseek done on the physical file when using the TTreeCache.; To support ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:12364,Safety,avoid,avoid,12364,"e (by avoid the fast merge technique). The equivalent in TFileMerger is to call; merger->SetFastMethod(kFALSE); To make sure that the class emulation layer of ROOT does not double delete an object,; tell the StreamerElement representing one of the pointers pointing to the object; to never delete the object. For example:. TClass::AddRule(""HepMC::GenVertex m_event attributes=NotOwner"");. The handling of memory by the collection proxy has been improved in the case of a; collection of pointers which can now become owner of its content. The default, for backward compatibility reasons and to avoid double delete (at the expense; of memory leaks), the container of pointers are still not owning their content; unless they are a free standing container (i.e. itself not contained in another; object).; To make a container of pointers become owner of its content do something like:. TClass::AddRule(""ObjectVector<LHCb::MCRichDigitSummary> m_vector options=Owner"");. Added TKey::Reset and TKey::WriteFileKeepBuffer to allow derived classes (TBasket) to be re-use as key rather than always recreated.; TH1::Streamer and TGraph2D::Streamer no longer reset the kCanDelete bit directly so that the user can give; ownership of the object to the canvas they are stored with. However, if they are saved on their own, the mechanism; that associates them to the current directory (DirectoryAutoAdd) will now reset the bit to avoid any possible; ownsership confusion.; Added TFile::SetOffset and TFile::ReadBuffer(char *buf, Long64_t pos, Int_t len); to drastically reduce; the number of fseek done on the physical file when using the TTreeCache.; To support future changes in the API of the CollectionProxy, we added the new #define:; ROOT_COLLECTIONPROXY_VERSION and REFLEX_COLLECTIONPROXY_VERSION. Reduce possible confusions and conflicts by always using in TClass and TStreamerInfo the version of template instance names with ULong64_t and Long64_t rather than [unsigned] long long.; new Hadoop TFile plugin. ",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html:3052,Usability,simpl,simple,3052,"s5.root Y 1.40 Gb 8.09s +/- 0.08 (700 entries) . In the case of a data member which is a pointer to a STL container, eg:; std::container<Data> *fDataObjects;; and which is stored member-wise, add support for the schema evolution of the class 'Data'. This requires a change in the on file format used to store this type; of data members (i.e. by adding inline the version number of the class; 'Data'). To read file containing this construct and written with this revision; using an older version of ROOT you will need the following patches:; For v5.22/00, you will need the patch r33174; or v5.22/00k; For v5.26/00, you will need patch r33176; or v5.26/00c. Additionally, we no longer allow the member wise streaming of a class which; has a custom streamer nor of any data members marked with //||. Run time performance. We introduced an optimized infrastructure for reading objects using a StreamerInfo. Rather than driving the streaming using a switch statement inside TStreamerInfo::ReadBuffer,; the streaming is now driven using a simple loop over a sequence of configured StreamerInfo actions. This improves run-time performance by allowing a dramatic reduction in function calls and code; branches at the expense of some code duplication. There are 3 versions of this loop implemented in TBufferFile and overloaded in TBufferXML and TBufferSQL:. virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence, void *object);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);; virtual Int_t ReadSequence(const TStreamerInfoActions::TActionSequence &sequence,; void *start_collection, void *end_collection);. The 1st version is optimized to read a single object. The 2nd version is optimized to read the content of TClonesArrays and vectors of pointers to objects. The 3rd version is used to streamed any collections. TBufferXML and TBufferSQL overload the loops to introduce extra code to help the",MatchSource.DOCS,io/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:361,Availability,error,error,361,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:487,Availability,error,error,487,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:493,Availability,recover,recovery,493,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:1370,Availability,error,error,1370,"; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and update hadd to rely on; TFileMerger for everything but the command line argument parsing.; Fix support for schema evolution from:; TParameter<Int_t>* MyInt; //-> version 1to; TParameter<Int_t> MyInt; // version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:4310,Availability,down,down,4310," signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the first call to Merge for this series of object.; TString fOptions; // Additional text based option being passed down to customize the merge.; TObject *fUserData; // Place holder to pass extra information. This object will be deleted at the end of each series of objects. The default in TFileMerger is to call Merge for every object; in the series (i.e the collection has exactly one element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; cachin",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5077,Availability,avail,available,5077," it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the first call to Merge for this series of object.; TString fOptions; // Additional text based option being passed down to customize the merge.; TObject *fUserData; // Place holder to pass extra information. This object will be deleted at the end of each series of objects. The default in TFileMerger is to call Merge for every object; in the series (i.e the collection has exactly one element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Di",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:89,Deployability,install,installed,89,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:2001,Deployability,update,update,2001,"t the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and update hadd to rely on; TFileMerger for everything but the command line argument parsing.; Fix support for schema evolution from:; TParameter<Int_t>* MyInt; //-> version 1to; TParameter<Int_t> MyInt; // version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the code/dictonary only for pair type that do not already have a dictionary. Object Merging; We introduced a new explicit interface for providing merging; capability. If a class has a method with the name and; signature:. Long64_t Merge(TCollection *input, TFileMergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method wit",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:3221,Deployability,install,installed,3221,"// version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the code/dictonary only for pair type that do not already have a dictionary. Object Merging; We introduced a new explicit interface for providing merging; capability. If a class has a method with the name and; signature:. Long64_t Merge(TCollection *input, TFileMergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the fir",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:378,Integrability,rout,routines,378,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:2605,Integrability,interface,interface,2605,"o be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and update hadd to rely on; TFileMerger for everything but the command line argument parsing.; Fix support for schema evolution from:; TParameter<Int_t>* MyInt; //-> version 1to; TParameter<Int_t> MyInt; // version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the code/dictonary only for pair type that do not already have a dictionary. Object Merging; We introduced a new explicit interface for providing merging; capability. If a class has a method with the name and; signature:. Long64_t Merge(TCollection *input, TFileMergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a colle",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:3155,Integrability,wrap,wrapper,3155,"// version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the code/dictonary only for pair type that do not already have a dictionary. Object Merging; We introduced a new explicit interface for providing merging; capability. If a class has a method with the name and; signature:. Long64_t Merge(TCollection *input, TFileMergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the fir",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:3258,Integrability,wrap,wrapper,3258,"archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the code/dictonary only for pair type that do not already have a dictionary. Object Merging; We introduced a new explicit interface for providing merging; capability. If a class has a method with the name and; signature:. Long64_t Merge(TCollection *input, TFileMergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the first call to Merge for this series of object.; TString fOptions; // Additional text based ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:3734,Integrability,depend,dependencies,3734,"ergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the first call to Merge for this series of object.; TString fOptions; // Additional text based option being passed down to customize the merge.; TObject *fUserData; // Place holder to pass extra information. This object will be deleted at the end of each series of objects. The default in TFileMerger is to call Merge for every object; in the series (i.e the collection has exactly one element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects a",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:3787,Integrability,depend,dependencies,3787,"s into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the first call to Merge for this series of object.; TString fOptions; // Additional text based option being passed down to customize the merge.; TObject *fUserData; // Place holder to pass extra information. This object will be deleted at the end of each series of objects. The default in TFileMerger is to call Merge for every object; in the series (i.e the collection has exactly one element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchron",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:48,Modifiability,config,configure,48,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:179,Modifiability,variab,variables,179,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5499,Modifiability,variab,variable,5499,". The default in TFileMerger is to call Merge for every object; in the series (i.e the collection has exactly one element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a blo",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:910,Performance,optimiz,optimized,910,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:1037,Performance,optimiz,optimized,1037,"the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and update hadd to rely on",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:1116,Performance,optimiz,optimized,1116,"the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and update hadd to rely on",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:4723,Performance,load,load,4723,"Merger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target directory where the merged object will be written.; Bool_t fIsFirst; // True if this is the first call to Merge for this series of object.; TString fOptions; // Additional text based option being passed down to customize the merge.; TObject *fUserData; // Place holder to pass extra information. This object will be deleted at the end of each series of objects. The default in TFileMerger is to call Merge for every object; in the series (i.e the collection has exactly one element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5654,Performance,cache,cache,5654,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5807,Performance,cache,cache,5807,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5833,Performance,cache,cache,5833,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5902,Performance,cache,cachedir,5902,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:5977,Performance,cache,cachedir,5977,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:6044,Performance,Cache,Cache,6044,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:6062,Performance,cache,cachedir,6062,"e element) in; order to save memory (by not having all the object in memory; at the same time). However for histograms, the default is to first load all the; objects and then merge them in one go ; this is customizable; when creating the TFileMerger object. Asynchronous Prefetching; The prefetching mechanism uses two new classes (TFilePrefetch; and TFPBlock) to prefetch in advance a block of tree entries. There; is a thread which takes care of actually transferring the blocks and; making them available to the main requesting thread. Therefore, the time; spent by the main thread waiting for the data before processing considerably; decreases. Besides the prefetching mechanisms there is also a local; caching option which can be enabled by the user. Both capabilities are; disabled by default and must be explicitly enabled by the user. In order to enable the prefetching the user must set the rootrc environment; variable TFile.AsyncPrefetching as follows:; gEnv->SetValue(""TFile.AsyncPrefetching"", 1). Only when the; prefetching is enabled can the user set the local cache directory in; which the file transferred will be saved. For subsequent reads of the; same file the system will use the local copy of the file from cache.; To set up a local cache directory, the client can use the following commands:. TString cachedir=""file:/tmp/xcache/"";; // or using xrootd on port 2000; // TString cachedir=""root://localhost:2000//tmp/xrdcache1/"";; gEnv->SetValue(""Cache.Directory"", cachedir.Data());. The TFilePrefetch class is responsible for actually reading; and storing the requests received from the main thread. It also creates; the working thread which will transfer all the information. Apart from; managing the block requests, it also deals with caching the blocks on; the local machine and retrieving them when necessary. The TFPBlock class represents the encapsulation of a block; request. It contains the chunks to be prefetched and also serves as a; container for the information read. ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:493,Safety,recover,recovery,493,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:1484,Safety,abort,aborting,1484,"error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and update hadd to rely on; TFileMerger for everything but the command line argument parsing.; Fix support for schema evolution from:; TParameter<Int_t>* MyInt; //-> version 1to; TParameter<Int_t> MyInt; // version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the c",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:535,Security,checksum,checksum,535,". I/O. Add support for the Chirp filesystem. To configure and build, chirp 3.2.2 must be installed.; When a TFile object is deleted, make sure that CINT also 'removes' any global variables that might point to it.; Fix support for the automatic addition to the current directory (for TTree and TH1 for example) in TKey::Read(TObject*).; In TKey, properly handle error in the I/O routines.; Explicitly check the validity of the zipped buffer before calling R__unzip, this allow for better error recovery.; When double checking whether a checksum difference is sustantial, ignore the std namespace. Use CompareContent also in the case of where; the class is versioned but the 'current' streamerInfo has not yet been built.; Prevent the I/O engine from mistakenly applying schema evolution to the TObject::fBits.; Make sure that when a streamer info of a base class is used to stream memberwise that is always not-optimized. If the StreamerInfo on file; has the same version as the StreamerInfo in memory but the one on file need to be 'not optimized' while the one in memory is not yet built, make; sure it will not be optimized.; Fix the reading of empty collection of object when reading without the library.; If the sequence of actions for streaming member-wise is not created correctly (i.e. where fReadMemberWise was null previously),; we now explicitly issue a Fatal error:. Fatal in <ReadSequence>: The sequence of actions to read AliESDVertex:7 member-wise was not initialized.; aborting. Add new optional parameter maxbuf to TXMLEngine::ParseFile() allowing the specification of the XML file size to be parsed. This fixes issue #78864.; Add function TBuffer::AutoExpand to centralize the automatic buffer extension policy. This enable the ability to tweak it later (for example instead of always doubling the size, increasing by only at most 2Mb or take hints from the number of entries already; in a TBasket).; Migrate the class TFileMerger from the proofplayer library to ROOT I/O library and ",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html:3095,Security,access,access,3095,"schema evolution from:; TParameter<Int_t>* MyInt; //-> version 1to; TParameter<Int_t> MyInt; // version 2. The TZIPFile compressed archive reader now supports the Zip64 format for; archives and file members greater than 2 and 4 GB, respectively. MakeProject. Add support for the case when the requested project/files in path that in not under the current directory; Generate the code/dictonary only for pair type that do not already have a dictionary. Object Merging; We introduced a new explicit interface for providing merging; capability. If a class has a method with the name and; signature:. Long64_t Merge(TCollection *input, TFileMergeInfo*);. it will be used by a TFileMerger (and thus by PROOF) to merge one or more; other objects into the current object. Merge should; return a negative value if the merging failed. If this method does not exist, the TFileMerger will use; a method with the name and signature:. Long64_t Merge(TCollection *input);. TClass now provides a quick access to these merging; function via TClass::GetMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetMerge. The wrapper function should have; the signature/type ROOT::MergeFunc_t:. Long64_t (*)(void *thisobj, TCollection *input, TFileMergeInfo*);. We added the new Merge function to TTree and THStack.; We also added the new Merge function to TQCommand as the; existing TQCommand::Merge does not have the right; semantic (in part because TQCommand is a collection). In TFileMerger, we added a PrintLevel to allow hadd to request; more output than regular TFileMerger. We removed all hard dependencies of TFileMerger on TH1 and TTree.; (Soft dependencies still exist to be able to disable the; merging of TTrees and to be able to disable the AutoAdd; behavior of TH1). The object TFileMergeInfo can be used inside the Merge; function to pass information between runs of the Merge; (see below). In particular it contains:. TDirectory *fOutputDirectory; // Target d",MatchSource.DOCS,io/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:382,Availability,Down,Download,382,". I/O Libraries; LZMA Compression and compression Level setting. ROOT I/O now support the LZMA compression algorithm to compress data in; addition to the ZLIB compression algorithm.; LZMA compression typically results in smaller files, but takes more; CPU time to compress data. To use the new feature, the external XZ; package must be installed when ROOT is configured and built:. Download 5.0.3 from here tukaani.org; and make sure to configure with fPIC:; ./configure CFLAGS='-fPIC'. Then the client C++ code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:5695,Availability,error,error,5695,"t the objects in the TDirectory list of objects; so that they are ready for more data accumulations (i.e.; returns the data to 0 but keep the customizations). TFile::MakeProject. New option 'par' in to pack in a PAR file the generated; code. The first argument defines the directory and the name of the package.; For example, the following generates a PAR package equivalent to; tutorials/proof/event.par:. root [] TFile *f = TFile::Open(""http://root.cern/files/data/event_1.root""); root [] f->MakeProject(""packages/myevent.par"", ""*"", ""par"");. Note that, because a PAR file is a tarball, for the time being, on Windows; only the package directory and the files are generated and a warning message; is printed. Properly handle the case of class which version is zero and to properly initialization array of objects (streamerElement type kStreamLoop). Fix support for call to MakeProject like:. gFile->MakeProject(""./classCode/"",""*"",""RECREATE++""). Better error handling if the source file failed to be created; or if the project directory can not be created. TParallelMergingFile. Introduce the class TParallelMergingFile part of the net package. This class connect ot a parallel merge server; and upload its content every time Write is called on the file object. After the upload the object of classes; with a ResetAfterMerge function are reset. A TParallelMergingFile is created whether a ?pmerge option is passed to TFile::Open as part of the file name.; For example:. TFile::Open(""mergedClient.root?pmerge"",""RECREATE""); // For now contact localhost:1095; TFile::Open(""mergedClient.root?pmerge=localhost:1095"",""RECREATE"");; TFile::Open(""rootd://root.cern/files/output.root?pmerger=pcanal:password@locahost:1095"",""NEW""). tutorials/net/treeClient.C and fastMergeServer.C: update to follow the change in interfaces; Introduce the tutorials parallelMergerClient.C and the temporary tutorials parallelMergerServer.C; to demonstrate the parallel merging (with parallelMergerServer.C being the prototype of ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:336,Deployability,install,installed,336,". I/O Libraries; LZMA Compression and compression Level setting. ROOT I/O now support the LZMA compression algorithm to compress data in; addition to the ZLIB compression algorithm.; LZMA compression typically results in smaller files, but takes more; CPU time to compress data. To use the new feature, the external XZ; package must be installed when ROOT is configured and built:. Download 5.0.3 from here tukaani.org; and make sure to configure with fPIC:; ./configure CFLAGS='-fPIC'. Then the client C++ code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:3974,Deployability,update,update,3974,"y and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMemFile *file = new TMemFile(""hsimple.memroot"",""RECREATE"");. Will create an empty in-memory of (currently fixed) size 32MB. file->ResetAfterMerge(0);. Will reset the objects in the TDirectory list of objects; so that they are ready for more data accumulations (i.e.; returns the data to 0 but keep the customizations). TFile::MakeProject. New option 'par' in to pack in a PAR file the generated; code",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:4203,Deployability,integrat,integrated,4203,"ad local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMemFile *file = new TMemFile(""hsimple.memroot"",""RECREATE"");. Will create an empty in-memory of (currently fixed) size 32MB. file->ResetAfterMerge(0);. Will reset the objects in the TDirectory list of objects; so that they are ready for more data accumulations (i.e.; returns the data to 0 but keep the customizations). TFile::MakeProject. New option 'par' in to pack in a PAR file the generated; code. The first argument defines the directory and the name of the package.; For example, the following generates a PAR package equivalent to; tutorials/proof/event.par:. root [] TFile *f = TFile::Open(""http://root.cern/files/d",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:6513,Deployability,update,update,6513," (streamerElement type kStreamLoop). Fix support for call to MakeProject like:. gFile->MakeProject(""./classCode/"",""*"",""RECREATE++""). Better error handling if the source file failed to be created; or if the project directory can not be created. TParallelMergingFile. Introduce the class TParallelMergingFile part of the net package. This class connect ot a parallel merge server; and upload its content every time Write is called on the file object. After the upload the object of classes; with a ResetAfterMerge function are reset. A TParallelMergingFile is created whether a ?pmerge option is passed to TFile::Open as part of the file name.; For example:. TFile::Open(""mergedClient.root?pmerge"",""RECREATE""); // For now contact localhost:1095; TFile::Open(""mergedClient.root?pmerge=localhost:1095"",""RECREATE"");; TFile::Open(""rootd://root.cern/files/output.root?pmerger=pcanal:password@locahost:1095"",""NEW""). tutorials/net/treeClient.C and fastMergeServer.C: update to follow the change in interfaces; Introduce the tutorials parallelMergerClient.C and the temporary tutorials parallelMergerServer.C; to demonstrate the parallel merging (with parallelMergerServer.C being the prototype of the upcoming; parallel merger server executable). Other. Introduce the new function TFileMerger::PartialMerge(Int_t) which; will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:7785,Deployability,Update,Update,7785," will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and hadd) from trying to open too many files.; Add a new member function TFileMerger::SetMaxOpenedFiles and; new command line option to hadd ( -n requested_max ) to allow; the user to reduce the number of files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:8916,Deployability,install,installed,8916," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:7737,Energy Efficiency,reduce,reduce,7737,"(with parallelMergerServer.C being the prototype of the upcoming; parallel merger server executable). Other. Introduce the new function TFileMerger::PartialMerge(Int_t) which; will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and hadd) from trying to open too many files.; Add a new member function TFileMerger::SetMaxOpenedFiles and; new command line option to hadd ( -n requested_max ) to allow; the user to reduce the number of files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a me",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:522,Integrability,rout,routines,522,". I/O Libraries; LZMA Compression and compression Level setting. ROOT I/O now support the LZMA compression algorithm to compress data in; addition to the ZLIB compression algorithm.; LZMA compression typically results in smaller files, but takes more; CPU time to compress data. To use the new feature, the external XZ; package must be installed when ROOT is configured and built:. Download 5.0.3 from here tukaani.org; and make sure to configure with fPIC:; ./configure CFLAGS='-fPIC'. Then the client C++ code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:2503,Integrability,interface,interface,2503,"m and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used for; compression and possibly more memory. The ZLIB algorithm takes less; CPU time during compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support shari",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:4203,Integrability,integrat,integrated,4203,"ad local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMemFile *file = new TMemFile(""hsimple.memroot"",""RECREATE"");. Will create an empty in-memory of (currently fixed) size 32MB. file->ResetAfterMerge(0);. Will reset the objects in the TDirectory list of objects; so that they are ready for more data accumulations (i.e.; returns the data to 0 but keep the customizations). TFile::MakeProject. New option 'par' in to pack in a PAR file the generated; code. The first argument defines the directory and the name of the package.; For example, the following generates a PAR package equivalent to; tutorials/proof/event.par:. root [] TFile *f = TFile::Open(""http://root.cern/files/d",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:4284,Integrability,interface,interface,4284," the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMemFile *file = new TMemFile(""hsimple.memroot"",""RECREATE"");. Will create an empty in-memory of (currently fixed) size 32MB. file->ResetAfterMerge(0);. Will reset the objects in the TDirectory list of objects; so that they are ready for more data accumulations (i.e.; returns the data to 0 but keep the customizations). TFile::MakeProject. New option 'par' in to pack in a PAR file the generated; code. The first argument defines the directory and the name of the package.; For example, the following generates a PAR package equivalent to; tutorials/proof/event.par:. root [] TFile *f = TFile::Open(""http://root.cern/files/data/event_1.root""); root [] f->MakeProject(""packages/myevent.par"", ""*"", ""par"");. Not",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:5431,Integrability,message,message,5431,". TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMemFile *file = new TMemFile(""hsimple.memroot"",""RECREATE"");. Will create an empty in-memory of (currently fixed) size 32MB. file->ResetAfterMerge(0);. Will reset the objects in the TDirectory list of objects; so that they are ready for more data accumulations (i.e.; returns the data to 0 but keep the customizations). TFile::MakeProject. New option 'par' in to pack in a PAR file the generated; code. The first argument defines the directory and the name of the package.; For example, the following generates a PAR package equivalent to; tutorials/proof/event.par:. root [] TFile *f = TFile::Open(""http://root.cern/files/data/event_1.root""); root [] f->MakeProject(""packages/myevent.par"", ""*"", ""par"");. Note that, because a PAR file is a tarball, for the time being, on Windows; only the package directory and the files are generated and a warning message; is printed. Properly handle the case of class which version is zero and to properly initialization array of objects (streamerElement type kStreamLoop). Fix support for call to MakeProject like:. gFile->MakeProject(""./classCode/"",""*"",""RECREATE++""). Better error handling if the source file failed to be created; or if the project directory can not be created. TParallelMergingFile. Introduce the class TParallelMergingFile part of the net package. This class connect ot a parallel merge server; and upload its content every time Write is called on the file object. After the upload the object of classes; with a ResetAfterMerge function are reset. A TParallelMergingFile is created whether a ?pmerge option is passed to TFile::Open as part of the file name.; For example:. TFile::Open(""mergedClient.root?pmerge"",""RECREATE""); // For now contact localhost:1095; TFile::Open(""mergedClient.root?pmerge=localhost:1095"",""RECREATE"");; T",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:6544,Integrability,interface,interfaces,6544," (streamerElement type kStreamLoop). Fix support for call to MakeProject like:. gFile->MakeProject(""./classCode/"",""*"",""RECREATE++""). Better error handling if the source file failed to be created; or if the project directory can not be created. TParallelMergingFile. Introduce the class TParallelMergingFile part of the net package. This class connect ot a parallel merge server; and upload its content every time Write is called on the file object. After the upload the object of classes; with a ResetAfterMerge function are reset. A TParallelMergingFile is created whether a ?pmerge option is passed to TFile::Open as part of the file name.; For example:. TFile::Open(""mergedClient.root?pmerge"",""RECREATE""); // For now contact localhost:1095; TFile::Open(""mergedClient.root?pmerge=localhost:1095"",""RECREATE"");; TFile::Open(""rootd://root.cern/files/output.root?pmerger=pcanal:password@locahost:1095"",""NEW""). tutorials/net/treeClient.C and fastMergeServer.C: update to follow the change in interfaces; Introduce the tutorials parallelMergerClient.C and the temporary tutorials parallelMergerServer.C; to demonstrate the parallel merging (with parallelMergerServer.C being the prototype of the upcoming; parallel merger server executable). Other. Introduce the new function TFileMerger::PartialMerge(Int_t) which; will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:7521,Integrability,interface,interface,7521,"Server.C: update to follow the change in interfaces; Introduce the tutorials parallelMergerClient.C and the temporary tutorials parallelMergerServer.C; to demonstrate the parallel merging (with parallelMergerServer.C being the prototype of the upcoming; parallel merger server executable). Other. Introduce the new function TFileMerger::PartialMerge(Int_t) which; will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and hadd) from trying to open too many files.; Add a new member function TFileMerger::SetMaxOpenedFiles and; new command line option to hadd ( -n requested_max ) to allow; the user to reduce the number of files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:.",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:7855,Integrability,message,message,7855," will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and hadd) from trying to open too many files.; Add a new member function TFileMerger::SetMaxOpenedFiles and; new command line option to hadd ( -n requested_max ) to allow; the user to reduce the number of files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:7917,Integrability,message,message,7917," will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and hadd) from trying to open too many files.; Add a new member function TFileMerger::SetMaxOpenedFiles and; new command line option to hadd ( -n requested_max ) to allow; the user to reduce the number of files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:8389,Integrability,interface,interface,8389,": merge only the objects without a MergeAfterReset member function. . Removed TFileMerger::RecursiveMerge from the interface. Prevent TFileMerger (and hadd) from trying to open too many files.; Add a new member function TFileMerger::SetMaxOpenedFiles and; new command line option to hadd ( -n requested_max ) to allow; the user to reduce the number of files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:8850,Integrability,wrap,wrapper,8850," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:8963,Integrability,wrap,wrapper,8963," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:359,Modifiability,config,configured,359,". I/O Libraries; LZMA Compression and compression Level setting. ROOT I/O now support the LZMA compression algorithm to compress data in; addition to the ZLIB compression algorithm.; LZMA compression typically results in smaller files, but takes more; CPU time to compress data. To use the new feature, the external XZ; package must be installed when ROOT is configured and built:. Download 5.0.3 from here tukaani.org; and make sure to configure with fPIC:; ./configure CFLAGS='-fPIC'. Then the client C++ code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:437,Modifiability,config,configure,437,". I/O Libraries; LZMA Compression and compression Level setting. ROOT I/O now support the LZMA compression algorithm to compress data in; addition to the ZLIB compression algorithm.; LZMA compression typically results in smaller files, but takes more; CPU time to compress data. To use the new feature, the external XZ; package must be installed when ROOT is configured and built:. Download 5.0.3 from here tukaani.org; and make sure to configure with fPIC:; ./configure CFLAGS='-fPIC'. Then the client C++ code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:461,Modifiability,config,configure,461,". I/O Libraries; LZMA Compression and compression Level setting. ROOT I/O now support the LZMA compression algorithm to compress data in; addition to the ZLIB compression algorithm.; LZMA compression typically results in smaller files, but takes more; CPU time to compress data. To use the new feature, the external XZ; package must be installed when ROOT is configured and built:. Download 5.0.3 from here tukaani.org; and make sure to configure with fPIC:; ./configure CFLAGS='-fPIC'. Then the client C++ code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:2672,Modifiability,variab,variable,2672," const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used for; compression and possibly more memory. The ZLIB algorithm takes less; CPU time during compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:2774,Modifiability,variab,variable,2774,"ted algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used for; compression and possibly more memory. The ZLIB algorithm takes less; CPU time during compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for t",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:2893,Modifiability,variab,variable,2893,"r the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used for; compression and possibly more memory. The ZLIB algorithm takes less; CPU time during compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile del",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:9408,Performance,optimiz,optimize,9408," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:9451,Performance,optimiz,optimized,9451," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:3402,Safety,safe,safe,3402,"B (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->R",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:3763,Safety,risk,risk,3763,"t to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMemFile *file = new TMemFile(""hsimple.memroot"",""RECREATE"");. Will create an empty in-memory of (currently fixed) size 32MB. file->ResetAfterMerge(0);. Wil",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:9261,Safety,Avoid,Avoid,9261," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:1509,Security,access,access,1509,"code must call routines to explicitly request LZMA; compression. ZLIB compression is still the default. Setting the Compression Level and Algorithm. There are three equivalent ways to set the compression level and; algorithm. For example, to set the compression to the LZMA algorithm; and compression level 5. TFile f(filename, option, title);; f.SetCompressionSettings(ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title, ROOT::CompressionSettings(ROOT::kLZMA, 5));. TFile f(filename, option, title);; f.SetCompressionAlgorithm(ROOT::kLZMA);; f.SetCompressionLevel(5);. These methods work for TFile, TBranch, TMessage, TSocket, and TBufferXML.; The compression algorithm and level settings only affect compression of; data after they have been set. TFile passes its settings to a TTree's branches; only at the time the branches are created. This can be overidden by; explicitly setting the level and algorithm for the branch. These classes; also have the following methods to access the algorithm and level for; compression. Int_t GetCompressionAlgorithm() const;; Int_t GetCompressionLevel() const;; Int_t GetCompressionSettings() const;. If the compression level is set to 0, then no compression will be; done. All of the currently supported algorithms allow the level to be; set to any value from 1 to 9. The higher the level, the larger the; compression factors will be (smaller compressed data size). The; tradeoff is that for higher levels more CPU time is used for; compression and possibly more memory. The ZLIB algorithm takes less; CPU time during compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older inter",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:3005,Security,access,accessed,3005,"ression and possibly more memory. The ZLIB algorithm takes less; CPU time during compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support increm",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:3067,Security,access,access,3067,"ring compression than the LZMA algorithm, but the LZMA; algorithm usually delivers higher compression factors. The header file core/zip/inc/Compression.h declares the function; ""CompressionSettings"" and the enumeration for the algorithms.; Currently the following selections can be made for the algorithm:; kZLIB (1), kLZMA (2), kOldCompressionAlgo (3), and kUseGlobalSetting; (0). The last option refers to an older interface used to control the; algorithm that is maintained for backward compatibility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:3576,Security,access,accessed,3576,"ility. The following; function is defined in core/zip/inc/Bits.h and it set the global; variable. R__SetZipMode(int algorithm);. If the algorithm is set to kUseGlobalSetting (0), the global variable; controls the algorithm for compression operations. This is the; default and the default value for the global variable is kZLIB. gDirectory; gDirectory is now a thread local!. The value of gDirectory and gFile are now all accessed via a static function of their respective class. The access is made transparent via a CPP macro. Note: Whenever a thread has an associated TThread object, the value of gDirectory is now thread local, i.e. all modifications direct or indirect of gDirectory will not be seen by the other thread. In particular this means that several I/O operations (including TDirectory::Write) are thread safe (as long as all the required TClass and TStreamerInfo has been previously setup).; Note: This model does not support sharing TFile amongst threads (i.e. a TFile must be accessed from exactly one thread). This means that whenever a TFile's control is passed from a thread to another, the code must explicitly reset gDirectory to another value or there is a risk for this gDirectory to point to a stale pointer if the other thread deletes the TFile object. A TFile deletion will only affect the value of the local gDirectory and gFile. TMemFile; Introduce TMemFile and update TFileMerger to support incremental merges. Add new tutorials (net/treeClient.C + net/fastMergeServer.C); demonstrating how a TMemFile can be used to do parallel merge; from many clients. (TMemFile still needs to be better integrated; with TMessage and TSocket). The new TMemFile class support the TFile interface but only store; the information in memory. This version is limited to 32MB. TMessage mess;; ...; mess->ReadFastArray(scratch,length);; transient = new TMemFile(""hsimple.memroot"",scratch,length);. will copy the content of 'scratch' into the in-memory buffer; created by/for the TMemFile. TMem",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:6431,Security,password,password,6431,"ge; is printed. Properly handle the case of class which version is zero and to properly initialization array of objects (streamerElement type kStreamLoop). Fix support for call to MakeProject like:. gFile->MakeProject(""./classCode/"",""*"",""RECREATE++""). Better error handling if the source file failed to be created; or if the project directory can not be created. TParallelMergingFile. Introduce the class TParallelMergingFile part of the net package. This class connect ot a parallel merge server; and upload its content every time Write is called on the file object. After the upload the object of classes; with a ResetAfterMerge function are reset. A TParallelMergingFile is created whether a ?pmerge option is passed to TFile::Open as part of the file name.; For example:. TFile::Open(""mergedClient.root?pmerge"",""RECREATE""); // For now contact localhost:1095; TFile::Open(""mergedClient.root?pmerge=localhost:1095"",""RECREATE"");; TFile::Open(""rootd://root.cern/files/output.root?pmerger=pcanal:password@locahost:1095"",""NEW""). tutorials/net/treeClient.C and fastMergeServer.C: update to follow the change in interfaces; Introduce the tutorials parallelMergerClient.C and the temporary tutorials parallelMergerServer.C; to demonstrate the parallel merging (with parallelMergerServer.C being the prototype of the upcoming; parallel merger server executable). Other. Introduce the new function TFileMerger::PartialMerge(Int_t) which; will Merge the list of file _with_ the content of the output; file (if any). This allows make several successive Merge; into the same TFile object.; Yhe argument defines the type of merge as define by the bit values in EPartialMergeType:; ; kRegular : normal merge, overwritting the output file.; kIncremental : merge the input file with the content of the output file (if already exising) (default).; kAll : merge all type of objects (default).; kResetable : merge only the objects with a MergeAfterReset member function. ; kNonResetable : merge only the objects withou",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html:8780,Security,access,access,8780," files opened even further. Update hadd and TFileMerger so that they prefix all their information message; with their names (when running hadd, the TFileMerger message are prefixed by hadd):. $ hadd -v 0 -f output.root input1.root input2.root; $ hadd -v 1 -f output.root input1.root input2.root; hadd merged 2 input files in output.root.; $ hadd -v 2 -f output.root input1.root input2.root; hadd target file: output.root; hadd Source file 1: input1.root; hadd Source file 2: input2.root; hadd Target path: output.root:/. Introduce non-static version of TFile::Cp allows the copy of; an existing TFile object. Introduce new explicit interface for providing reseting; capability after a merge. If a class has a method with; the name and signature:. void ResetAfterMerge(TFileMergeInfo*);. it will be used by a TMemFile to reset its objects after; a merge operation has been done. If this method does not exist, the TClass will use; a method with the name and signature:. void Reset(Optiont_t *);. TClass now provides a quick access to these merging; function via TClass::GetResetAfterMerge. The wrapper function; is automatically created by rootcint and can be installed; via TClass::SetResetAfterMerge. The wrapper function should have; the signature/type ROOT::ResetAfterMergeFunc_t:. void (*)(void *thisobj, TFileMergeInfo*);. ResetAfterMerge functions were added to the following classes:; TDirectoryFile, TMemFile, TTree, TChain, TBranch, TBranchElement,; TBranchClones, TBranchObject and TBranchRef. Avoid leaking the inner object in a container like vector<vector<MyClass*> > ; and vector<vector<MyClass*> *> . Put in place the infrastructure to optimize the I/O writes in the same way we optimized the I/O reads. Add the function TBuffer::AutoExpand to centralize the automatic; buffer extension policy. This enable the ability to tweak it later; (for example instead of always doubling the size, increasing by; only at most 2Mb or take hints from the number of entries already; in a TBasket). ",MatchSource.DOCS,io/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:844,Deployability,update,updated,844,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:900,Deployability,update,updated,900,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:262,Performance,cache,cache,262,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:346,Performance,cache,cache,346,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:629,Performance,cache,cache,629,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:890,Performance,cache,cache,890,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:995,Performance,cache,cache,995,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:1021,Performance,cache,cache,1021,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:1093,Performance,cache,cache,1093,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:1284,Performance,load,load,1284,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:1816,Safety,avoid,avoids,1816,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html:1159,Usability,learn,learning,1159,". I/O Libraries; TFileCacheRead. Support for multiple TFileCacheRead per TFile.; Multiple TFileCacheRead per TFile are supported by augmenting the existing TFile::SetCacheRead() function with an optional TObject* argument specifying the owner (i.e. tree) of the cache. This function will assign a TFileCacheRead to a TFile for the given TTree. A cache can be removed by setting the pointer TFileCacheRead to 0.; Similarly, in TFile::GetCacheRead() an optional TObject* argument was added to obtain the TFileCacheRead from a TFile.; In addition to the unassigned TFileCacheRead pointer, TFile will maintain a map of tree specific cache pointers.; Backward compatibility in both functions is handled by making the TObject* argument optional. If it is not specified in the TFile::SetCacheRead() call, only the unassigned TFileCacheRead pointer is updated, otherwise the map and the unassigned cache are updated. In TFile::GetCacheRead(), if an owner is not specified or doesn't exist in the file's cache map, the unassigned cache is returned, unless it is 0 and there is exactly one entry in the cache map.; Distinguish counter for bytes read and read calls for learning phase. TFileMerger. Improve efficiency of TFileMerger when merging a single file by doing a TFile::Cp rather than a load/write of the objects.; In TFileMerger and hadd when objects can not be merged do not overwrite the last object in the set with the first!; Renable warning about not being able to merge objects in TFileMerger and hadd.; Fix hadd problem where the incremental merging fails if the TTree are stored in sub-directories.; Improve the code used for forward compatibility (record the type as TDirectory even-though the class is now TDirectoryFile) by delaying the switching of the class name until it is written (to the buffer). This avoids problem where a TKey is created (by TFile::mkdir) and then immediately used for reading (this happens in the incremental file merger). ",MatchSource.DOCS,io/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:1106,Availability,error,error,1106,"lex and the TRandom classes. Furthermore, some of the algorithms implemented in the TF1 class have been moved to MathCore. This implies that all other ROOT library using one of these classes, such as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintai",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:3455,Availability,error,error,3455,"or<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical error present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordi",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:4519,Availability,error,errors,4519,"ror present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used automatically using the ROOT plug-in manager mechanism, including the linear fitter for a fast and direct solution, in case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for fillin",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:6703,Deployability,integrat,integration,6703,"T::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7117,Deployability,integrat,integration,7117,". These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the po",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7244,Deployability,Integrat,IntegratorOneDim,7244," class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::Ge",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7300,Deployability,integrat,integration,7300," class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::Ge",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7373,Deployability,Integrat,Integration,7373,"es are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integratio",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7414,Deployability,integrat,integrate,7414,"es are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integratio",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8377,Deployability,integrat,integration,8377,"erical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This cha",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8599,Deployability,integrat,integration,8599,"rivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8871,Deployability,release,release,8871,"thods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IG",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10241,Deployability,release,release,10241,")(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release t",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10299,Deployability,release,release,10299,"makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the cl",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10880,Deployability,integrat,integration,10880,"from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have bee",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10953,Deployability,release,release,10953,"ne only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a re",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:11226,Deployability,release,release,11226,"is new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed descr",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:12038,Deployability,release,release,12038," have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:12322,Deployability,release,release,12322,"sform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the in",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:14512,Deployability,release,release,14512,"fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (similar to MnMinos) in order to be called after the minimization (Migrad). The API with a MnUserParameterState should not be used after minimization, because in that case the latest state information resulting from the minimum (gradient values and step sizes) is lost. Add support in MnMigrad and MnMinimize for user provided analytical gradient of the FCN function. One needs to pass an instance of a function implementing the ROOT::Minuit2::FcnGradientBase interface. Use now std::string for storing parameter names. This removes the un-necessary limitation on the length of parameter name (10 characters) existing before. The method Name() of MinuitParameter (and of MnUserParameterState and MnUserParameters) still returns a const char * (for backward compatibility). A new method, GetName() has been added to return a std::string. The Minuit2Minimizer class has been improved by having an option to always run Hesse if it was not done before during the minimization. Method to retrieve the correlation coefficients have been also added. More detailed description of the current Minuit2 release can be found at this location. Unuran. A new version, 1.2.4, has been added to fix mainly some problems found in gcc 4.3. For the detailed changes of this new UNU.RAN version see the file $ROOTSYS/math/unuran/src/unuran-1.2.4-root/NEWS. Last modified: Tue Jun 24 17:22:42 CEST 2008 . ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:1341,Energy Efficiency,efficient,efficient,1341,"as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The i",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7108,Energy Efficiency,adapt,adaptive,7108,". These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the po",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:342,Integrability,depend,dependency,342,". Math Libraries. MathCore; MathCore includes now classes which were previously contained in libCore, like TMath, TComplex and the TRandom classes. Furthermore, some of the algorithms implemented in the TF1 class have been moved to MathCore. This implies that all other ROOT library using one of these classes, such as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms l",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:1006,Integrability,interface,interface,1006,". Math Libraries. MathCore; MathCore includes now classes which were previously contained in libCore, like TMath, TComplex and the TRandom classes. Furthermore, some of the algorithms implemented in the TF1 class have been moved to MathCore. This implies that all other ROOT library using one of these classes, such as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms l",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:2150,Integrability,interface,interface,2150," is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The iterator interface for sort is called; TMath::SortItr to avoid a compilation ambiguity. For example,; for finding the mean of a std::vector<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMa",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:2190,Integrability,interface,interface,2190," is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The iterator interface for sort is called; TMath::SortItr to avoid a compilation ambiguity. For example,; for finding the mean of a std::vector<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMa",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:2325,Integrability,interface,interface,2325,"m of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The iterator interface for sort is called; TMath::SortItr to avoid a compilation ambiguity. For example,; for finding the mean of a std::vector<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a c",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:4770,Integrability,interface,interface,4770,"OT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used automatically using the ROOT plug-in manager mechanism, including the linear fitter for a fast and direct solution, in case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinDat",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:4955,Integrability,interface,interface,4955,"son with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used automatically using the ROOT plug-in manager mechanism, including the linear fitter for a fast and direct solution, in case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); .",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:5170,Integrability,interface,interface,5170,"h as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used automatically using the ROOT plug-in manager mechanism, including the linear fitter for a fast and direct solution, in case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a c",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:6301,Integrability,interface,interfaces,6301,"n case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integratio",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:6379,Integrability,interface,interfaces,6379,"e library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate aut",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:6703,Integrability,integrat,integration,6703,"T::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7091,Integrability,interface,interface,7091,". These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the po",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7117,Integrability,integrat,integration,7117,". These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the po",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7244,Integrability,Integrat,IntegratorOneDim,7244," class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::Ge",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7275,Integrability,interface,interfaces,7275," class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::Ge",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7300,Integrability,integrat,integration,7300," class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::Ge",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7373,Integrability,Integrat,Integration,7373,"es are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integratio",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7414,Integrability,integrat,integrate,7414,"es are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integratio",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7821,Integrability,interface,interface,7821,"ion of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8377,Integrability,integrat,integration,8377,"erical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This cha",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8599,Integrability,integrat,integration,8599,"rivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8720,Integrability,interface,interfaces,8720,"hm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8758,Integrability,interface,interfaces,8758,"hm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:8976,Integrability,interface,interfaces,8976,"e BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:9348,Integrability,interface,interface,9348,"orithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and ren",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:9473,Integrability,interface,interfaces,9473,"l enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:9863,Integrability,interface,interface,9863,"hods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, lik",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10176,Integrability,interface,interfaces,10176,"rived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10427,Integrability,interface,interface,10427,"ion, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10880,Integrability,integrat,integration,10880,"from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have bee",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:12467,Integrability,interface,interface,12467,"emplate constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (simi",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:12610,Integrability,interface,interface,12610,"thon):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (similar to MnMinos) in order to be called after the minimization (Migrad). The API with a MnUserParameterState should not be used after minimization, because in that case the",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:13316,Integrability,interface,interface,13316,"dded:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (similar to MnMinos) in order to be called after the minimization (Migrad). The API with a MnUserParameterState should not be used after minimization, because in that case the latest state information resulting from the minimum (gradient values and step sizes) is lost. Add support in MnMigrad and MnMinimize for user provided analytical gradient of the FCN function. One needs to pass an instance of a function implementing the ROOT::Minuit2::FcnGradientBase interface. Use now std::string for storing parameter names. This removes the un-necessary limitation on the length of parameter name (10 characters) existing before. The method Name() of MinuitParameter (and of MnUserParameterState and MnUserParameters) still returns a const char * (for backward compatibility). A new method, GetName() has been added to return a std::string. The Minuit2Minimizer class has been improved by having an option to always run Hesse if it was not done before during the minimization. Meth",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:13880,Integrability,interface,interface,13880,"fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (similar to MnMinos) in order to be called after the minimization (Migrad). The API with a MnUserParameterState should not be used after minimization, because in that case the latest state information resulting from the minimum (gradient values and step sizes) is lost. Add support in MnMigrad and MnMinimize for user provided analytical gradient of the FCN function. One needs to pass an instance of a function implementing the ROOT::Minuit2::FcnGradientBase interface. Use now std::string for storing parameter names. This removes the un-necessary limitation on the length of parameter name (10 characters) existing before. The method Name() of MinuitParameter (and of MnUserParameterState and MnUserParameters) still returns a const char * (for backward compatibility). A new method, GetName() has been added to return a std::string. The Minuit2Minimizer class has been improved by having an option to always run Hesse if it was not done before during the minimization. Method to retrieve the correlation coefficients have been also added. More detailed description of the current Minuit2 release can be found at this location. Unuran. A new version, 1.2.4, has been added to fix mainly some problems found in gcc 4.3. For the detailed changes of this new UNU.RAN version see the file $ROOTSYS/math/unuran/src/unuran-1.2.4-root/NEWS. Last modified: Tue Jun 24 17:22:42 CEST 2008 . ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:534,Modifiability,config,config,534,". Math Libraries. MathCore; MathCore includes now classes which were previously contained in libCore, like TMath, TComplex and the TRandom classes. Furthermore, some of the algorithms implemented in the TF1 class have been moved to MathCore. This implies that all other ROOT library using one of these classes, such as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms l",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:607,Modifiability,config,config,607,". Math Libraries. MathCore; MathCore includes now classes which were previously contained in libCore, like TMath, TComplex and the TRandom classes. Furthermore, some of the algorithms implemented in the TF1 class have been moved to MathCore. This implies that all other ROOT library using one of these classes, such as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms l",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:4123,Modifiability,extend,extend,4123,"ng Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical error present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used a",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:5054,Modifiability,config,configured,5054,"l functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used automatically using the ROOT plug-in manager mechanism, including the linear fitter for a fast and direct solution, in case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:5221,Modifiability,plug-in,plug-in,5221,"h as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit parameter can be configured individually using the ROOT::Fit::FitParameterSettings class.; ; Various implementation of the minimizer interface can be used automatically using the ROOT plug-in manager mechanism, including the linear fitter for a fast and direct solution, in case of a linear least square model, or by using Minuit, Minuit2 or GSL minimization methods provided by the MathMore library. Functions for filling the new ROOT::Fit::BinData classes with all the histogram and graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a c",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:6539,Modifiability,plug-in,plug-in,6539,"nd graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical d",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7108,Modifiability,adapt,adaptive,7108,". These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the po",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:7797,Modifiability,inherit,inherits,7797,"ion of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical derivation using the Richardson's extrapolation formula (use 2 derivative estimates to compute a third, more accurate estimation). This is used by the TD1::Derivative method. ; BrentRootFinder for finding the root of one-dimensional function using the Brent algorithm. The class inherits from a virtual interface, which is also implemented by the MathMore root finder methods. The user can instantiate, via the common ROOT::Math::RootFinder class, all the various root finder algorithms. The BrentRootFinder class is used by TF1::GetX . ; A similar class, BrentMinimizer1D, provides the possibility to find the minimum of one-dimensional functions using the Brent algorithm. This class is used by TF1::GetMinimum or TF1::GetMaximum; Use ROOT convention for all enumeration names defining the type of numerical algorithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:9820,Modifiability,inherit,inherit,9820,"hods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, lik",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10152,Modifiability,inherit,inherits,10152,"rived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:10532,Modifiability,plug-in,plug-in,10532,"ion, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and rename the class ROOT::Math::RootFinder to ROOT::Math::GSLRootFinder to distinguish from the main interface class which has been put in the Mathcore library and it can create the GSLRootFinder using the plug-in manager. Furthermore, the class ROOT::Math::GSLRootFinder is not anymore a template class on the algorithm. They type of root-finder algorithm can now be selected via an enumeration; Fixed a bug in the ROOT::Math::GSLNLSMultiFi class.; Changes also in the class for the new enumeration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:11839,Modifiability,extend,extended,11839,"eration names (all names start with k, like kADAPTIVE for the integration types).; . More detailed description of the current MathMore release can be found at this location. GenVector; The new physics vector classes have been moved out from the MathCore library in a new library, libGenVector. The library contains as well the CINT dictionary including main instantiations for the template classes. For this release the instantiation of some extra methods, in particular of the class ROOT::Math::TRansform3D have been added in the dictionary library.; Due to a CINT limitation, the dictionary for explicit template constructors of the Rotation classes, taking as input any other type; of rotation are missing. Therefore code like the following one will now work in CINT (or Python):. ROOT::Math::Rotation3D r;; ROOT::Math::EulerAngles eulerRot(r);. A possible solution is to use the operator=:. ROOT::Math::EulerAngles eulerRot; eulerRot = r;. In addition the setter methods for the 2D,3D and 4D vector classes have been extended following a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:958,Performance,perform,performances,958,". Math Libraries. MathCore; MathCore includes now classes which were previously contained in libCore, like TMath, TComplex and the TRandom classes. Furthermore, some of the algorithms implemented in the TF1 class have been moved to MathCore. This implies that all other ROOT library using one of these classes, such as libHist, have a direct dependency on the Mathcore library.; Linking with libMathCore is therefore required for running any major ROOT application. It has been added to the list of libraries obtained when doing root-config --libs. N.B.: users building ROOT applications and not using root-config MUST add libMathCore to their list of linking libraries. Together with the libraries merge, many changes have been applied to both TMath and the other mathcore classes.; TMath; A major clean-up and re-structuring has been done for the functions present in TMath. Some functions have been implemented using the STL algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms l",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:1938,Performance,perform,perform,1938,"L algorithms, which have better performances in term of CPU time and a template interface has been also added.; Some of the basic special mathematical functions of TMath, like the error function or the gamma and beta functions use now the Cephes implementation from Stephen L. Moshier, which is used as well by the ROOT::Math functions. This implementation has been found to be more accurate and in some cases more efficient in term of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The iterator interface for sort is called; TMath::SortItr to avoid a compilation ambiguity. For example,; for finding the mean of a std::vector<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algo",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:4027,Performance,perform,performing,4027,"ath::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical error present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such as least square, bin and un-bin likelihood are supported. The fit solution is then found by using the ROOT::Math::Minimizer interface class and the results are stored in the ROOT::Fit::FitResult class. Fit p",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:6503,Performance,load,loaded,6503,"nd graph types have been added in the histogram library (libHist) and graph library:; ; ROOT::Fit::FillData( BinData & , const TH1 *, TF1 * ) for histograms (in libHist); ROOT::Fit::FillData( BinData & , const TGraph2D *, TF1 * ) for 2D graphs (in libHist); ROOT::Fit::FillData( BinData & , const TGraph *, TF1 * ) for all 1D graphs (in libGraf); ROOT::Fit::FillData( BinData & , const TMultiGraph *, TF1 * ) for multi-graphs (in libGraf); . MathCore Numerical Algorithms. Classes implementing numerical methods which can be used by all the other ROOT library have been added in MathCore. These originate mainly from methods present previously in the implementation of the TF1 class. Now they can be used also outside this class. In addition, in order to have a common entry point, interfaces classes for these numerical algorithms have been; included.; These interfaces are as well implemented by classes using the GSL library and located in the MathMore library. The library can be loaded automatically using the ROOT plug-in manager.; In detail, the new classes containing implementations present previously in TF1 are:. ; GaussIntegrator and GaussLegendreIntegrator for numerical integration of one-dimensional functions. The first class uses Gaussian 8 and 16 point quadrature approximation, it provides the translation of the CERNLIB algorithm; DGAUSS by Sigfried Kolbig, and it is used by the TF1::Integral method. The second one uses the Gauss Legendre quadrature formula. It is used by the TF1::IntegralFast method.; These classes implement both the same virtual interface as the adaptive integration methods provided by the MathMore library. They can all be created and used easily via the common class ROOT::Math::IntegratorOneDim providing the interfaces for numerical integration.; New template methods have been also included in the common Integration class in order to be able to integrate automatically any C++ callable object. ROOT::Math::RichardsonDerivator implementing numerical d",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:2373,Safety,avoid,avoid,2373,"m of CPU time. More detailed information on the new mathematical functions can be found in this presentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The iterator interface for sort is called; TMath::SortItr to avoid a compilation ambiguity. For example,; for finding the mean of a std::vector<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a c",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:9373,Safety,safe,safe,9373,"orithms (start with k, like kADAPTIVE for the integration type). This affects both MathCore and MathMore.; . In addition we use now the ROOT convention for all enumeration names defining the type of numerical algorithms. The names start with k, like kADAPTIVE for the integration type. This change affects both MathCore and MathMore and it breaks backward compatibility. MathCore Function interfaces; Mathcore provides as well interfaces for the evaluation of mathematical and parametric functions to be used in the numerical methods. This release contains the following changes:. The ROOT::Math::IParamFunction, ROOT::Math::IParamMultiFunction interfaces (used mainly for fitting) require now a pointer to the parameters (type const double *), when evaluating the function. The derived classes must implement now the const; method DoEvalPar (and not DoEval as before). In addition the method; operator()(const double * x, const double * p) is now const. This change makes the caching of parameter not hidden and the interface is now; thread-safe. ; A similar change in the ROOT::Math::IParamGradFunction, ROOT::Math::IParamMultiGradFunction interfaces, where the parameter values are now required for calculating the partial derivatives with respect to the parameters.; This changes the signature of the pure abstract method, DoParameterDerivative(const double *x, const double * p, , which takes also a pointer (type const double *) to the parameters.; In addition, these classes do not inherit anymore from the function gradient interface (ROOT::Math::IGradFunction and ROOT::Math::IMultiGradFunction). They define only the parameter gradient which is needed for fitting and not the coordinate gradient. A derived class, like ROOT::Math::Polynomial, implementing both functionality (coordinate and parameter gradient) inherits then from both interfaces.; . More detailed description of the current MathCore release can be found at this location. MathMore; This new release contains:. Modify and ren",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:3643,Testability,log,log,3643,"mplementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical error present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:3806,Testability,Log,LogNormal,3806,"TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical error present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The fitter class, ROOT::Fit::Fitter, provides the functionality for fitting those data with any model function implementing the parametric function interface, ROOT::Math::IParamMultiFunction. Fit methods such",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:12873,Testability,test,test,12873,"llowing a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (similar to MnMinos) in order to be called after the minimization (Migrad). The API with a MnUserParameterState should not be used after minimization, because in that case the latest state information resulting from the minimum (gradient values and step sizes) is lost. Add support in MnMigrad and MnMinimize for user provided analytical gradient of the FCN function. One needs to pass an instance of a function implementing the R",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:2471,Usability,simpl,simply,2471,"resentation from M. Slawinska at a ROOT team meeting. define the functions as template functions instead of having the same re-definition for all the various basic types. This is done for TMath::Mean,TMath::GeomMean, TMath::Median, TMath::KOrdStat; Use STL to implement the following algorithms:; ; TMath::Sort is re-implemented using std::sort.; TMath::BinarySearch is re-implemented using the STL algorithm std::lower_bound. The STL algorithms have been found for these cases to be perform better in term of CPU time. For some other algorithms like TMath::LocMin, TMath::LocMax or TMath::Permute the original implementation is faster than STL and has been maintained.; ; Add a generic iterator interface, similar to the STL algorithm interface, to the following TMath functions:; MinElement, MaxElement, LocMin, LocMax, Mean, GeomMean, RMS,; BinarySearch. The iterator interface for sort is called; TMath::SortItr to avoid a compilation ambiguity. For example,; for finding the mean of a std::vector<double> v, one simply needs to call TMath::Mean(v.begin(), v.end() ) .; ; Various changes have been applied to the mathematical functions to remove duplications in the implementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical ",MatchSource.DOCS,math/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2095,Availability,alive,alive,2095,"tter from base to mathcore. Setting the minimizer parameters is done via the new class ROOT::Math::MinimizerOptions. Fixed also a bug in the TVirtualFitter destructor, which was preventing the deletion of the static instance and causing in same cases memory leaks.; ROOT::Math::MinimizerOptions: new class keeping the minimizer control parameters, minimizer name and algorithms. Static values of the parameter exist and can be set and retrieved via corresponding static methods.; Fitting Classes: improve in general all classes in view of using them in the histogram and graph fitting routines. Few bugs have been as well fixed (see the cvs log for details). The fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support fo",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2870,Availability,alive,alive,2870,"ter to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In M",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:3068,Availability,robust,robust,3068,"and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (cl",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:4393,Availability,error,error,4393,"s (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix:",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:4946,Availability,error,error,4946,"r methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix::Invert and SMatrix::InverseFast are added for using the Cramer rule for up to matrix of sizes 5x5. This method has exactly the same implementation as the Invert and Inverse of the previous ROOT version.; ; Physics. TLorentzVector:Change in the implementation of the function SetPtEtaPhi and SetPtEtaPhiM the algorithm to calculate z from pt and eta. Use now, as in the GenVector package, the expression z = pt * sinh(eta) instead of using the tangent and the arc-tangent. This is is more efficient and avoids a problem found",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2660,Deployability,integrat,integration,2660," fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from in",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:5910,Energy Efficiency,efficient,efficient,5910,"enVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix::Invert and SMatrix::InverseFast are added for using the Cramer rule for up to matrix of sizes 5x5. This method has exactly the same implementation as the Invert and Inverse of the previous ROOT version.; ; Physics. TLorentzVector:Change in the implementation of the function SetPtEtaPhi and SetPtEtaPhiM the algorithm to calculate z from pt and eta. Use now, as in the GenVector package, the expression z = pt * sinh(eta) instead of using the tangent and the arc-tangent. This is is more efficient and avoids a problem found on 64 bit machines when eta=0. by Dariusz Miskowiec. Unuran. New version (1.3) from Josef Leydold fixing some warnings on Windows Visual Studio 9. ",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:1589,Integrability,rout,routines,1589,"nt for the array. Now this is not possible anymore and one must pass the same type. This is now consistent with other similar TMath functions. Now in the CINT dictionary contains also the instantiations for both cases of Long64_t and Int_t for the size (and index array) types.; . Fixed a bug in the ROOT::Math::landau_pdf function. Now it evaluates to the correct normalized distribution when the scale factor is different than 1.; TVirtualFitter: move TVirtualFitter from base to mathcore. Setting the minimizer parameters is done via the new class ROOT::Math::MinimizerOptions. Fixed also a bug in the TVirtualFitter destructor, which was preventing the deletion of the static instance and causing in same cases memory leaks.; ROOT::Math::MinimizerOptions: new class keeping the minimizer control parameters, minimizer name and algorithms. Static values of the parameter exist and can be set and retrieved via corresponding static methods.; Fitting Classes: improve in general all classes in view of using them in the histogram and graph fitting routines. Few bugs have been as well fixed (see the cvs log for details). The fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in sp",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:1932,Integrability,depend,depends,1932,"tter from base to mathcore. Setting the minimizer parameters is done via the new class ROOT::Math::MinimizerOptions. Fixed also a bug in the TVirtualFitter destructor, which was preventing the deletion of the static instance and causing in same cases memory leaks.; ROOT::Math::MinimizerOptions: new class keeping the minimizer control parameters, minimizer name and algorithms. Static values of the parameter exist and can be set and retrieved via corresponding static methods.; Fitting Classes: improve in general all classes in view of using them in the histogram and graph fitting routines. Few bugs have been as well fixed (see the cvs log for details). The fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support fo",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2660,Integrability,integrat,integration,2660," fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from in",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2750,Integrability,interface,interface,2750," of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUser",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:3324,Modifiability,variab,variables,3324,"ction (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from ",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2447,Performance,perform,performed,2447," corresponding static methods.; Fitting Classes: improve in general all classes in view of using them in the histogram and graph fitting routines. Few bugs have been as well fixed (see the cvs log for details). The fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for o",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:3110,Performance,perform,perform,3110,"of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the th",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:3722,Performance,cache,cached,3722,"or class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when conve",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:5070,Performance,optimiz,optimized,5070,"enVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix::Invert and SMatrix::InverseFast are added for using the Cramer rule for up to matrix of sizes 5x5. This method has exactly the same implementation as the Invert and Inverse of the previous ROOT version.; ; Physics. TLorentzVector:Change in the implementation of the function SetPtEtaPhi and SetPtEtaPhiM the algorithm to calculate z from pt and eta. Use now, as in the GenVector package, the expression z = pt * sinh(eta) instead of using the tangent and the arc-tangent. This is is more efficient and avoids a problem found on 64 bit machines when eta=0. by Dariusz Miskowiec. Unuran. New version (1.3) from Josef Leydold fixing some warnings on Windows Visual Studio 9. ",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:3622,Safety,safe,safe,3622,"n-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:3817,Safety,avoid,avoid,3817,"r: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the no",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:4183,Safety,avoid,avoids,4183,"ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary squar",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:4541,Safety,avoid,avoid,4541,"or gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix::Invert and SMatrix::InverseFast are added for using the Cramer rule for up to matrix of sizes 5x5. This method",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:4670,Safety,Avoid,Avoid,4670,"ot cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In Minuit2Minimizer fill the status information according to the minimizer result; Add Scan and Contour methods in the Minuit2Minimizer class; ; GenVector. Change the way the exception are thrown in the package (class GenVector_exception). Now, the GenVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix::Invert and SMatrix::InverseFast are added for using the Cramer rule for up to matrix of sizes 5x5. This method has exactly the same implementation as the Invert and Inverse of the previous ROOT version.; ; Physics. TLorentzVector:Change in the implementation of the function SetPtEtaPhi and SetPtEt",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:5924,Safety,avoid,avoids,5924,"enVector_exception class is created only when the throwing of exception is enabled. This avoids the allocation of an un-needed std::string. This problem was observed in CMS when converting from 4D-vectors based on mass to standard (x,y,z,t) vectors, when the mass is zero. In this case, a numerical error creates artificially small negative masses returned by the (x,y,z,t) vector. Eventually a protection could be added when calculating M2(), to avoid negative values due to numerical rounding.; ; Fix a problem in the assignment operator of the ROOT::Math::PxPyPzM4D class. Avoid having nan when converting for example from PxPyPzME4D to PxPyPzM4D when the mass is negative. ; Throw always exception in the non-supported setters (i.e. SetPt on a PxPyPzEVector) methods, which are generated only for the CINT dictionary. These methods flag a compiled-error when running in C++ mode. SMatrix. Change implementation of the SMatrix::Invert and SMatrix::Inverse methods. Now the optimized method based on the Cramer rule is used only for matrix up to sizes 2x2. The standard methods based on LU (for ordinary square matrix) or Bunch-Kaufman factorization (for square matrix) are used. The factorization method, although slower for small size matrices, they suffer much less from numerical precision problems.; New methods SMatrix::Invert and SMatrix::InverseFast are added for using the Cramer rule for up to matrix of sizes 5x5. This method has exactly the same implementation as the Invert and Inverse of the previous ROOT version.; ; Physics. TLorentzVector:Change in the implementation of the function SetPtEtaPhi and SetPtEtaPhiM the algorithm to calculate z from pt and eta. Use now, as in the GenVector package, the expression z = pt * sinh(eta) instead of using the tangent and the arc-tangent. This is is more efficient and avoids a problem found on 64 bit machines when eta=0. by Dariusz Miskowiec. Unuran. New version (1.3) from Josef Leydold fixing some warnings on Windows Visual Studio 9. ",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:2881,Security,access,accessible,2881,"ter to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fixed a bug in setting the VEGAS integration mode in the GSLMCIntegrator class.; . Fumili. Add implementation of Minimizer interface using TFumili.; ; Minuit. In TMinuitMinimizer: do not delete the contained TMinuit reference, but maintain it alive, and accessible outside as gMinuit. It can then be used after fitting, for example for drawing contour plots. Add also support for Scan and Contour plots.; ; TLinearMinimizer: add support for robust fitting; . Minuit2. Add support to perform parallel minimization using a thread for each gradient calculation with openMP. In the ROOT environment the Minuit2 library can be built using openMP ( -fopenmp compilation flag for gcc) if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set.; In the Minuit2 standalone built libraries (using autoconf) support for openMP is automatically enabled, whenever the compiler supports it (for example for gcc version >= 4.2). Some small changes have been applied in Minuit2 to make it thread safe. For example, when transforming from internal to external values, the parameter values are not cached anymore in MnUserTransformation class.; DavidonErrorUpdator: add an additional check to avoid a division by zero.; In M",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:1645,Testability,log,log,1645,"s now consistent with other similar TMath functions. Now in the CINT dictionary contains also the instantiations for both cases of Long64_t and Int_t for the size (and index array) types.; . Fixed a bug in the ROOT::Math::landau_pdf function. Now it evaluates to the correct normalized distribution when the scale factor is different than 1.; TVirtualFitter: move TVirtualFitter from base to mathcore. Setting the minimizer parameters is done via the new class ROOT::Math::MinimizerOptions. Fixed also a bug in the TVirtualFitter destructor, which was preventing the deletion of the static instance and causing in same cases memory leaks.; ROOT::Math::MinimizerOptions: new class keeping the minimizer control parameters, minimizer name and algorithms. Static values of the parameter exist and can be set and retrieved via corresponding static methods.; Fitting Classes: improve in general all classes in view of using them in the histogram and graph fitting routines. Few bugs have been as well fixed (see the cvs log for details). The fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fix",MatchSource.DOCS,math/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:123,Availability,error,error,123,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:767,Availability,error,error,767,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:844,Availability,error,error,844,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:937,Availability,error,errors,937,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1090,Availability,error,errors,1090,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1207,Availability,error,error,1207,"f overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the sta",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1435,Availability,error,error,1435,"e outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (m",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1488,Availability,error,error,1488,"the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1613,Availability,error,error,1613,"the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:2735,Availability,error,errors,2735,"variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patched cubic function has been then added in MathMore.; ; A wrong statement (coming from the original CERNLIB code but not applicable in this case) has been removed.; . Add support for limited and fixed variables for all the GSL minimizers (""GSLMultiMin""), including the simulated annealing (""GSLSimAn"") and the non-linear least square fit methods (""GSLMultiFit"").; . SMatrix. Remove an unneeded check on the element value in the factorization routines used for inverting the matrices (both for the LU and for the Bunch-Kaufmann factorization). The check was preventing to inverting matrices when some of the matrix elements (like the diagonal) were smaller than an epsilon value set to ~ 10-15. This is not needed since it is enough to check that the values are not zero (i.e. when the matrix is singular). This bug was causing several failures in the CMS code when inverting m",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:3704,Availability,failure,failures,3704,"ded against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patched cubic function has been then added in MathMore.; ; A wrong statement (coming from the original CERNLIB code but not applicable in this case) has been removed.; . Add support for limited and fixed variables for all the GSL minimizers (""GSLMultiMin""), including the simulated annealing (""GSLSimAn"") and the non-linear least square fit methods (""GSLMultiFit"").; . SMatrix. Remove an unneeded check on the element value in the factorization routines used for inverting the matrices (both for the LU and for the Bunch-Kaufmann factorization). The check was preventing to inverting matrices when some of the matrix elements (like the diagonal) were smaller than an epsilon value set to ~ 10-15. This is not needed since it is enough to check that the values are not zero (i.e. when the matrix is singular). This bug was causing several failures in the CMS code when inverting matrices.; ; Add the Cholesky decomposition method for symmetric positive defined matrices (thanks to Manuel Schiller). A class has been introduced,; ROOT::Math::CholeskyDecomp which provaids methods for decomposing or inverting a matrix and also for solving a linear system.; . New methods have also been added in SMatrix: bool SMatrix::InvertChol() and SMatrix & SMatrix::InverseChol(ifail) for the inversion of a symmetric positive defined matrix. New specialized implementation exists up to matrices with sizes 6x6. The speed is comparable to the Cramer method (SMatrix::InvertFast), but with much better accuracy. The new InvertChol method is in any case faster than the general inverter method for all symmetric matrices (SMatrix::Invert), which uses the Bunch-Kaufman decomposition.; Add also a new free function, ROOT::Math::SolveChol for solving a symmetric linear system. For users who need the solution, using this functions avoid for them performing the inve",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:5170,Availability,Toler,Tolerance,5170,"th sizes 6x6. The speed is comparable to the Cramer method (SMatrix::InvertFast), but with much better accuracy. The new InvertChol method is in any case faster than the general inverter method for all symmetric matrices (SMatrix::Invert), which uses the Bunch-Kaufman decomposition.; Add also a new free function, ROOT::Math::SolveChol for solving a symmetric linear system. For users who need the solution, using this functions avoid for them performing the inversion and then a matrix multiplication. Add support in the SMatrix class for operator m[i][j]; Add in the dictionary the typedefs for some square and symmetrix matrices based on double and floats (up to size 7) defined in the file Math/SMatrixDfwd and Math/SMatrixFfwd; . Minuit. Apply various improvements in the TMInuitMInimizer class thanks to the feedback of Alfio Lazzaro:; ; implement Hess() and CovMatrixStatus();; add new method based on SEEK. The Tolerance() value can be used to specify the volume (in unit of sigma) for searching for the global minimum; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with boun",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:6273,Availability,toler,tolerance,6273,"um; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The para",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:6757,Availability,error,error,6757,"more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 l",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:400,Deployability,integrat,integration,400,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:996,Deployability,configurat,configuration,996,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:2866,Deployability,patch,patched,2866,"qrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patched cubic function has been then added in MathMore.; ; A wrong statement (coming from the original CERNLIB code but not applicable in this case) has been removed.; . Add support for limited and fixed variables for all the GSL minimizers (""GSLMultiMin""), including the simulated annealing (""GSLSimAn"") and the non-linear least square fit methods (""GSLMultiFit"").; . SMatrix. Remove an unneeded check on the element value in the factorization routines used for inverting the matrices (both for the LU and for the Bunch-Kaufmann factorization). The check was preventing to inverting matrices when some of the matrix elements (like the diagonal) were smaller than an epsilon value set to ~ 10-15. This is not needed since it is enough to check that the values are not zero (i.e. when the matrix is singular). This bug was causing several failures in the CMS code when inverting matrices.; ; Add the Cholesky decomposition method for symmetric positive defined matrices (thanks to Manuel Schiller). A class has been introdu",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:400,Integrability,integrat,integration,400,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:3311,Integrability,rout,routines,3311,"alculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patched cubic function has been then added in MathMore.; ; A wrong statement (coming from the original CERNLIB code but not applicable in this case) has been removed.; . Add support for limited and fixed variables for all the GSL minimizers (""GSLMultiMin""), including the simulated annealing (""GSLSimAn"") and the non-linear least square fit methods (""GSLMultiFit"").; . SMatrix. Remove an unneeded check on the element value in the factorization routines used for inverting the matrices (both for the LU and for the Bunch-Kaufmann factorization). The check was preventing to inverting matrices when some of the matrix elements (like the diagonal) were smaller than an epsilon value set to ~ 10-15. This is not needed since it is enough to check that the values are not zero (i.e. when the matrix is singular). This bug was causing several failures in the CMS code when inverting matrices.; ; Add the Cholesky decomposition method for symmetric positive defined matrices (thanks to Manuel Schiller). A class has been introduced,; ROOT::Math::CholeskyDecomp which provaids methods for decomposing or inverting a matrix and also for solving a linear system.; . New methods have also been added in SMatrix: bool SMatrix::InvertChol() and SMatrix & SMatrix::InverseChol(ifail) for the inversion of a symmetric positive defined matrix. New specialized implementation exists up to matrices with sizes 6x6. The speed is comparable to the Cramer method (SMatrix::InvertFa",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:6485,Integrability,message,messages,6485,"rCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for ru",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:7078,Integrability,message,message,7078,"und parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLo",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:7960,Integrability,interface,interfaces,7960," Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,Int_t y,Int_t z,Double_t tau,Int_t m);; SetPoissonBkgGaussianEff(Int_t x,Int_t y,Double_t em, Double_t tau,Double_t sde);; SetGa",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:8279,Integrability,interface,interface,8279,"t if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,Int_t y,Int_t z,Double_t tau,Int_t m);; SetPoissonBkgGaussianEff(Int_t x,Int_t y,Double_t em, Double_t tau,Double_t sde);; SetGaussianBkgGaussianEff(Int_t x,Double_t bm,Double_t em, Double_t sde,Double_t sdb);; SetPoissondBkgknownEff(Int_t x,Int_t y,Double_t tau,Double_t e);; SetGaussianBkgknownEff(Int_t x,Double_t bm,Double_t sdb,Double_t e);; SetKnownBkgBinomialEff(Int_t x, Int_t z,Int_t m,Double_t b);; SetknownBkgGaussianEff(Int_t x,Double_t em,Double_t sde,Double_t b);. New methods for getting sensit",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:8333,Integrability,interface,interface,8333,"piling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,Int_t y,Int_t z,Double_t tau,Int_t m);; SetPoissonBkgGaussianEff(Int_t x,Int_t y,Double_t em, Double_t tau,Double_t sde);; SetGaussianBkgGaussianEff(Int_t x,Double_t bm,Double_t em, Double_t sde,Double_t sdb);; SetPoissondBkgknownEff(Int_t x,Int_t y,Double_t tau,Double_t e);; SetGaussianBkgknownEff(Int_t x,Double_t bm,Double_t sdb,Double_t e);; SetKnownBkgBinomialEff(Int_t x, Int_t z,Int_t m,Double_t b);; SetknownBkgGaussianEff(Int_t x,Double_t em,Double_t sde,Double_t b);. New methods for getting sensitivity (average limits) and related quantities and for critical number related to reje",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:8453,Integrability,interface,interface,8453,"ulti-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,Int_t y,Int_t z,Double_t tau,Int_t m);; SetPoissonBkgGaussianEff(Int_t x,Int_t y,Double_t em, Double_t tau,Double_t sde);; SetGaussianBkgGaussianEff(Int_t x,Double_t bm,Double_t em, Double_t sde,Double_t sdb);; SetPoissondBkgknownEff(Int_t x,Int_t y,Double_t tau,Double_t e);; SetGaussianBkgknownEff(Int_t x,Double_t bm,Double_t sdb,Double_t e);; SetKnownBkgBinomialEff(Int_t x, Int_t z,Int_t m,Double_t b);; SetknownBkgGaussianEff(Int_t x,Double_t em,Double_t sde,Double_t b);. New methods for getting sensitivity (average limits) and related quantities and for critical number related to rejection of the null-hypothesis (no signal).; Some small Bug fixes. Some variables were used uninitialized. (Eg, input arguments which were not supposed to",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:8640,Integrability,interface,interface,8640," class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,Int_t y,Int_t z,Double_t tau,Int_t m);; SetPoissonBkgGaussianEff(Int_t x,Int_t y,Double_t em, Double_t tau,Double_t sde);; SetGaussianBkgGaussianEff(Int_t x,Double_t bm,Double_t em, Double_t sde,Double_t sdb);; SetPoissondBkgknownEff(Int_t x,Int_t y,Double_t tau,Double_t e);; SetGaussianBkgknownEff(Int_t x,Double_t bm,Double_t sdb,Double_t e);; SetKnownBkgBinomialEff(Int_t x, Int_t z,Int_t m,Double_t b);; SetknownBkgGaussianEff(Int_t x,Double_t em,Double_t sde,Double_t b);. New methods for getting sensitivity (average limits) and related quantities and for critical number related to rejection of the null-hypothesis (no signal).; Some small Bug fixes. Some variables were used uninitialized. (Eg, input arguments which were not supposed to be used were used anyway.). ; ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:522,Modifiability,plug-in,plug-in,522,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:996,Modifiability,config,configuration,996,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1744,Modifiability,variab,variables,1744,"the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1871,Modifiability,variab,variables,1871,"ation, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patc",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1924,Modifiability,variab,variable,1924,"ation, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patc",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:3070,Modifiability,variab,variables,3070,":Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patched cubic function has been then added in MathMore.; ; A wrong statement (coming from the original CERNLIB code but not applicable in this case) has been removed.; . Add support for limited and fixed variables for all the GSL minimizers (""GSLMultiMin""), including the simulated annealing (""GSLSimAn"") and the non-linear least square fit methods (""GSLMultiFit"").; . SMatrix. Remove an unneeded check on the element value in the factorization routines used for inverting the matrices (both for the LU and for the Bunch-Kaufmann factorization). The check was preventing to inverting matrices when some of the matrix elements (like the diagonal) were smaller than an epsilon value set to ~ 10-15. This is not needed since it is enough to check that the values are not zero (i.e. when the matrix is singular). This bug was causing several failures in the CMS code when inverting matrices.; ; Add the Cholesky decomposition method for symmetric positive defined matrices (thanks to Manuel Schiller). A class has been introduced,; ROOT::Math::CholeskyDecomp which provaids methods for decomposing or inverting a matrix and also for solving a linear system.; . New methods have also been added in SMatrix: bool SMatrix::InvertChol() and SMatrix & SMatrix::InverseChol(ifa",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:5413,Modifiability,variab,variables,5413," in any case faster than the general inverter method for all symmetric matrices (SMatrix::Invert), which uses the Bunch-Kaufman decomposition.; Add also a new free function, ROOT::Math::SolveChol for solving a symmetric linear system. For users who need the solution, using this functions avoid for them performing the inversion and then a matrix multiplication. Add support in the SMatrix class for operator m[i][j]; Add in the dictionary the typedefs for some square and symmetrix matrices based on double and floats (up to size 7) defined in the file Math/SMatrixDfwd and Math/SMatrixFfwd; . Minuit. Apply various improvements in the TMInuitMInimizer class thanks to the feedback of Alfio Lazzaro:; ; implement Hess() and CovMatrixStatus();; add new method based on SEEK. The Tolerance() value can be used to specify the volume (in unit of sigma) for searching for the global minimum; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to ge",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:7130,Modifiability,variab,variables,7130,"und parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLo",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:7317,Modifiability,variab,variables,7317,"s. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:7817,Modifiability,variab,variables,7817,"nd not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for running Minuit2 using multi-process by using MPI. A new class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,In",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:9452,Modifiability,variab,variables,9452," class MPIProcess deals with starting and terminating the MPI process. Each process calculates independently the derivatives for a given set of parameters.; A Minuit2 library with MPI support can be built by defining before compilation the environment variables USE_PARALLEL_MINUIT2 and USE_MPI. Unuran; Add constructor of Tunuran distributions using function objects defined using the mathcore interfaces:. TUnuranContDist (const ROOT::Math::IGenFunction & pdf, const ROOT::Math::IGenFunction * dpdf, bool isLogPdf);; TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction & pdf, bool isLogPdf );; TUnuranDiscrDist (const ROOT::Math::IGenFunction & func );. TRolke; New version of TRolke from J. Lundberg. The interface of the class has been changed. The old user interface was very hard to use, and the documentation in the source was also not on par with the correct usage. The old interface was a single get-function with 12 arguments, and the user was supposed to figure out which ~ 5 arguments were relevant for a specific model (1 out of 7 models).; ; The new user interface is is easy to use correctly and hard to use incorrectly (TM). It's a single set-method for each method:. SetPoissonBkgBinomialEff(Int_t x,Int_t y,Int_t z,Double_t tau,Int_t m);; SetPoissonBkgGaussianEff(Int_t x,Int_t y,Double_t em, Double_t tau,Double_t sde);; SetGaussianBkgGaussianEff(Int_t x,Double_t bm,Double_t em, Double_t sde,Double_t sdb);; SetPoissondBkgknownEff(Int_t x,Int_t y,Double_t tau,Double_t e);; SetGaussianBkgknownEff(Int_t x,Double_t bm,Double_t sdb,Double_t e);; SetKnownBkgBinomialEff(Int_t x, Int_t z,Int_t m,Double_t b);; SetknownBkgGaussianEff(Int_t x,Double_t em,Double_t sde,Double_t b);. New methods for getting sensitivity (average limits) and related quantities and for critical number related to rejection of the null-hypothesis (no signal).; Some small Bug fixes. Some variables were used uninitialized. (Eg, input arguments which were not supposed to be used were used anyway.). ; ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:547,Performance,load,load,547,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:1665,Performance,perform,perform,1665,"the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:2420,Performance,perform,perform,2420,"nd copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes can be used by minimizer which do not support internally the bounds (like the GSL minimizers).; . Add two new method in ROOT::Math::Minimizer class:; ; int Minimizer::CovMatrixStatus() : returning the status of the covariance matrix. Implemented by Minuit and Minuit2 and follows original Minuit code meaning: code = 0 (not calculated), 1 (approximated), 2 (matrix was made pos def) , 3 (accurate); ; bool Hesse(): to perform a full calculation of the Hessian matrix; . TMath. Fix a numerical problem in TMath::ErfcInverse for small input values. Now the normal quantile function is used for implementing it.; . MathMore. Fix 2 bugs in the quartic equation solver (see issue #49031).; ; A protection has been added against numerical errors which could cause NaN due to wrong inputs to an acos function. This problem appears also in the GSL cubic solver. A new GSL patched cubic function has been then added in MathMore.; ; A wrong statement (coming from the original CERNLIB code but not applicable in this case) has been removed.; . Add support for limited and fixed variables for all the GSL minimizers (""GSLMultiMin""), including the simulated annealing (""GSLSimAn"") and the non-linear least square fit methods (""GSLMultiFit"").; . SMatrix. Remove an unneeded check on the element value in the factorization routines used for inverting the matrices (",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:4695,Performance,perform,performing,4695,"ausing several failures in the CMS code when inverting matrices.; ; Add the Cholesky decomposition method for symmetric positive defined matrices (thanks to Manuel Schiller). A class has been introduced,; ROOT::Math::CholeskyDecomp which provaids methods for decomposing or inverting a matrix and also for solving a linear system.; . New methods have also been added in SMatrix: bool SMatrix::InvertChol() and SMatrix & SMatrix::InverseChol(ifail) for the inversion of a symmetric positive defined matrix. New specialized implementation exists up to matrices with sizes 6x6. The speed is comparable to the Cramer method (SMatrix::InvertFast), but with much better accuracy. The new InvertChol method is in any case faster than the general inverter method for all symmetric matrices (SMatrix::Invert), which uses the Bunch-Kaufman decomposition.; Add also a new free function, ROOT::Math::SolveChol for solving a symmetric linear system. For users who need the solution, using this functions avoid for them performing the inversion and then a matrix multiplication. Add support in the SMatrix class for operator m[i][j]; Add in the dictionary the typedefs for some square and symmetrix matrices based on double and floats (up to size 7) defined in the file Math/SMatrixDfwd and Math/SMatrixFfwd; . Minuit. Apply various improvements in the TMInuitMInimizer class thanks to the feedback of Alfio Lazzaro:; ; implement Hess() and CovMatrixStatus();; add new method based on SEEK. The Tolerance() value can be used to specify the volume (in unit of sigma) for searching for the global minimum; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting th",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:238,Safety,avoid,avoiding,238,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:4680,Safety,avoid,avoid,4680,"ausing several failures in the CMS code when inverting matrices.; ; Add the Cholesky decomposition method for symmetric positive defined matrices (thanks to Manuel Schiller). A class has been introduced,; ROOT::Math::CholeskyDecomp which provaids methods for decomposing or inverting a matrix and also for solving a linear system.; . New methods have also been added in SMatrix: bool SMatrix::InvertChol() and SMatrix & SMatrix::InverseChol(ifail) for the inversion of a symmetric positive defined matrix. New specialized implementation exists up to matrices with sizes 6x6. The speed is comparable to the Cramer method (SMatrix::InvertFast), but with much better accuracy. The new InvertChol method is in any case faster than the general inverter method for all symmetric matrices (SMatrix::Invert), which uses the Bunch-Kaufman decomposition.; Add also a new free function, ROOT::Math::SolveChol for solving a symmetric linear system. For users who need the solution, using this functions avoid for them performing the inversion and then a matrix multiplication. Add support in the SMatrix class for operator m[i][j]; Add in the dictionary the typedefs for some square and symmetrix matrices based on double and floats (up to size 7) defined in the file Math/SMatrixDfwd and Math/SMatrixFfwd; . Minuit. Apply various improvements in the TMInuitMInimizer class thanks to the feedback of Alfio Lazzaro:; ; implement Hess() and CovMatrixStatus();; add new method based on SEEK. The Tolerance() value can be used to specify the volume (in unit of sigma) for searching for the global minimum; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting th",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:591,Testability,log,log,591,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:626,Testability,log,log,626,". Math Libraries. MathCore. Various fixes have been applied in the fitting classes:. Fix issue #46006 for normalization of error resulting from fitting a TGraph; Fix a problem in Chi2 calculation in case of overflow; Fix issue #46601 for avoiding crashes when a linear fit fails.; Fix in the FitData classes the bug #45909 occurring when setting a function range outside histogram range; Fix default integration method to be Gauss algorithm of MathCore instead of the GSL method, when libMathmore is not built or when the plug-in manager fails to load it.; Add a protection against negative log when fitting using the Poisson log likelihood function; Improve calculation of derivative in x for fitted function. This fixes some problem observed when fitting using the error on the coordinates.; Fitter class: add new methods for calculating the error matrix after minimization, Fitter::CalculateHessErrors() and for calculating the Minos errors Fitter::CalculateMinosErrors; FitConfig: add in the configuration the possibility to select a sub-set of the parameters for calculating the Minos errors by using the method FitConfig::SetMinosErrors( listOfParameters ). If no list is passed, by default the Minos error will be computed on all parameters.; UnBinData class: add new constructor for creating a unbin data set passing a range to select the data and copy in the internal array; FitResult: the class now stores a map of the Minos error using as key the parameter index. If the Minos error has not been calculated for the parameter, FitResult::LowerError(i) and FitResult::UpperError(i) returns the parabolic error; ; Add a new class, MinimTransformFunction to perform a transformation of the function object to deal with limited and fixed variables.; This class uses the same transformation which are also used inside Minuit, a sin transformation for double bounded variables and a sqrt transformation for single bound variable defined in the class MinimizerVariableTransformation.; These classes",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:5592,Testability,test,test,5592,"ymmetric linear system. For users who need the solution, using this functions avoid for them performing the inversion and then a matrix multiplication. Add support in the SMatrix class for operator m[i][j]; Add in the dictionary the typedefs for some square and symmetrix matrices based on double and floats (up to size 7) defined in the file Math/SMatrixDfwd and Math/SMatrixFfwd; . Minuit. Apply various improvements in the TMInuitMInimizer class thanks to the feedback of Alfio Lazzaro:; ; implement Hess() and CovMatrixStatus();; add new method based on SEEK. The Tolerance() value can be used to specify the volume (in unit of sigma) for searching for the global minimum; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to retur",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:6520,Testability,assert,assert,6520,"rCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for ru",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:5065,Usability,feedback,feedback,5065,"x::InvertChol() and SMatrix & SMatrix::InverseChol(ifail) for the inversion of a symmetric positive defined matrix. New specialized implementation exists up to matrices with sizes 6x6. The speed is comparable to the Cramer method (SMatrix::InvertFast), but with much better accuracy. The new InvertChol method is in any case faster than the general inverter method for all symmetric matrices (SMatrix::Invert), which uses the Bunch-Kaufman decomposition.; Add also a new free function, ROOT::Math::SolveChol for solving a symmetric linear system. For users who need the solution, using this functions avoid for them performing the inversion and then a matrix multiplication. Add support in the SMatrix class for operator m[i][j]; Add in the dictionary the typedefs for some square and symmetrix matrices based on double and floats (up to size 7) defined in the file Math/SMatrixDfwd and Math/SMatrixFfwd; . Minuit. Apply various improvements in the TMInuitMInimizer class thanks to the feedback of Alfio Lazzaro:; ; implement Hess() and CovMatrixStatus();; add new method based on SEEK. The Tolerance() value can be used to specify the volume (in unit of sigma) for searching for the global minimum; fix some of the methods, like NCalls() and GlobalCC(); . Minuit2. Apply some fixes in MnHesse and MnPosDef classes to check correctly variables to not be zero.; (use same checks as in F77Minuit); ; Fix a bug introduced in DavidonErrorCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound ",MatchSource.DOCS,math/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2008,Integrability,interface,interface,2008," in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This impro",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:1550,Modifiability,variab,variable,1550,"ded vector functionality as proposed by Peter D Barnes from LNL; (http://root.cern.ch/phpBB2/viewtopic.php?t=8351).; ; double s = v1 * M * v2; // Mult Function : e.g., physics matrix element; TMatrixD M = v1' * v2 // outer product of v1 and v2; . SMatrix. Use specialized structures for building automatically static; tables for mapping the indices conversion from standard row-wise one to the; compact one used internally for storing the memory of a symmetrix matrix. This change gives an; improvements of around 10-20% in the Kalman filter test (testKalman.cxx) and in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2120,Modifiability,Variab,VariableName,2120," in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This impro",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2164,Modifiability,variab,variable,2164," in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This impro",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2205,Modifiability,Variab,VariableIndex,2205," in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This impro",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2250,Modifiability,variab,variable,2250," in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This impro",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3200,Modifiability,variab,variable,3200,"ex, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made tempo",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3666,Modifiability,Variab,VariableName,3666,"nHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made temporary and cannot be stored. Change also the Print() method to print now the results also when the fit is invalid (when it did not converge correctly). Unuran. Add a new version 1.5.0. The new version implements a new method PINV,; that is a quite fast numerical inversion method that only requires only the density function of the distribution.; . ",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3734,Modifiability,variab,variable,3734,"nHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made temporary and cannot be stored. Change also the Print() method to print now the results also when the fit is invalid (when it did not converge correctly). Unuran. Add a new version 1.5.0. The new version implements a new method PINV,; that is a quite fast numerical inversion method that only requires only the density function of the distribution.; . ",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3825,Modifiability,variab,variable,3825,"nHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made temporary and cannot be stored. Change also the Print() method to print now the results also when the fit is invalid (when it did not converge correctly). Unuran. Add a new version 1.5.0. The new version implements a new method PINV,; that is a quite fast numerical inversion method that only requires only the density function of the distribution.; . ",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3918,Modifiability,Variab,VariableIndex,3918,"nHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made temporary and cannot be stored. Change also the Print() method to print now the results also when the fit is invalid (when it did not converge correctly). Unuran. Add a new version 1.5.0. The new version implements a new method PINV,; that is a quite fast numerical inversion method that only requires only the density function of the distribution.; . ",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3983,Modifiability,variab,variable,3983,"nHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made temporary and cannot be stored. Change also the Print() method to print now the results also when the fit is invalid (when it did not converge correctly). Unuran. Add a new version 1.5.0. The new version implements a new method PINV,; that is a quite fast numerical inversion method that only requires only the density function of the distribution.; . ",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:4023,Modifiability,variab,variable,4023,"nHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult: fix a problem in the I/O, the function pointer is now made temporary and cannot be stored. Change also the Print() method to print now the results also when the fit is invalid (when it did not converge correctly). Unuran. Add a new version 1.5.0. The new version implements a new method PINV,; that is a quite fast numerical inversion method that only requires only the density function of the distribution.; . ",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2823,Performance,perform,perform,2823,".; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Ret",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:3111,Performance,perform,performances,3111,"e(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Return an empty string if the variable is not found or of the minimizer does not re-implement this method.; int Minimizer::VariableIndex(const std::string & name) to return the index of a variable given a name. Return -1 if the variable is not found or if the specific minimizer does not re-implement this function. ROOT::Fit::FitResult",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:2814,Safety,avoid,avoid,2814,".; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecision), VariableName(index) to return the name of a variable (parameter) given an index, and VariableIndex(name) to return the index of a variable given a name.; Set a status code in Minuit2Minimizer according to the following convention:; status = minimizeStatus + 10 * minosStatus + 100 * hesseStatus.; See the Minuit2Minimizer reference documentation for the possible values of minimizeStatus , minosStatus and hesseStatus.; In MnHesse. when the inversion of the hessian matrix failed, return MnInvertFailed instead of MnHesseFailed. Mathcore Fitting classes. Fix the fitting with the integral option in multi-dimensions.; Force the gradient calculation when requested in the minimizer; classes and avoid to perform the check when using TMinuit. This was; already the case in Minuit2.; Add new class ROOT::Fit::SparseData for dealing with binned sparse data. This class automatically merges the empty region, so they can be considered, whenever possible as a larger single bin. This improves the performances when doing likelihood fits on the sparse data.; Fix the likelihood fits for variable bin histograms. Now a correct normalization is applied according to the bin volume.; Add new methods in Minimizer class :. Minimizer::SetPrecision(double eps) to change in the minimizer the precision on which the objective functions are evaluated. By default the numerical double precision is used inside the minimizers. This method should be used only if the precision in the function evaluation is worse than the double precision.; std::string Minimizer::VariableName (unsigned int index) to return a name of the minimizer variable (i.e. a fitting parameter) given the integer index. Ret",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:1078,Testability,test,test,1078,"ompare floating points:. Bool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon) {; //return kTRUE if absolute difference between af and bf is less than epsilon; Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec) {; //return kTRUE if relative difference between af and bf is less than relPrec. TMatrix. Various changes to the Sparse Matrix classes:; ; Fixed Savannah bugs 45807,45502 and 45415; added a Streamer function to TMatrixTSparse to remove a memory; leak.; Added vector functionality as proposed by Peter D Barnes from LNL; (http://root.cern.ch/phpBB2/viewtopic.php?t=8351).; ; double s = v1 * M * v2; // Mult Function : e.g., physics matrix element; TMatrixD M = v1' * v2 // outer product of v1 and v2; . SMatrix. Use specialized structures for building automatically static; tables for mapping the indices conversion from standard row-wise one to the; compact one used internally for storing the memory of a symmetrix matrix. This change gives an; improvements of around 10-20% in the Kalman filter test (testKalman.cxx) and in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to ch",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:1084,Testability,test,testKalman,1084,"ompare floating points:. Bool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon) {; //return kTRUE if absolute difference between af and bf is less than epsilon; Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec) {; //return kTRUE if relative difference between af and bf is less than relPrec. TMatrix. Various changes to the Sparse Matrix classes:; ; Fixed Savannah bugs 45807,45502 and 45415; added a Streamer function to TMatrixTSparse to remove a memory; leak.; Added vector functionality as proposed by Peter D Barnes from LNL; (http://root.cern.ch/phpBB2/viewtopic.php?t=8351).; ; double s = v1 * M * v2; // Mult Function : e.g., physics matrix element; TMatrixD M = v1' * v2 // outer product of v1 and v2; . SMatrix. Use specialized structures for building automatically static; tables for mapping the indices conversion from standard row-wise one to the; compact one used internally for storing the memory of a symmetrix matrix. This change gives an; improvements of around 10-20% in the Kalman filter test (testKalman.cxx) and in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to ch",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:1129,Testability,test,test,1129," bf, Double_t epsilon) {; //return kTRUE if absolute difference between af and bf is less than epsilon; Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec) {; //return kTRUE if relative difference between af and bf is less than relPrec. TMatrix. Various changes to the Sparse Matrix classes:; ; Fixed Savannah bugs 45807,45502 and 45415; added a Streamer function to TMatrixTSparse to remove a memory; leak.; Added vector functionality as proposed by Peter D Barnes from LNL; (http://root.cern.ch/phpBB2/viewtopic.php?t=8351).; ; double s = v1 * M * v2; // Mult Function : e.g., physics matrix element; TMatrixD M = v1' * v2 // outer product of v1 and v2; . SMatrix. Use specialized structures for building automatically static; tables for mapping the indices conversion from standard row-wise one to the; compact one used internally for storing the memory of a symmetrix matrix. This change gives an; improvements of around 10-20% in the Kalman filter test (testKalman.cxx) and in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to change the precision value used internally in Minuit2 (in MnPrecisi",MatchSource.DOCS,math/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:6322,Availability,toler,tolerance,6322,"onOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; tolerance for all the root finder algorithms.; ; The class ROOT::Math::Data::Range returns in the method; GetRange the values -inf and +inf when no range; is set; ; Use in TRandom::SetSeed(int seed) a value of; seed=0 as default argument. This is the same now in all the; derived classes.; Add new methods in ROOT::Fit::FitResult to have a more; consistent and expressive API:FitResult::Parameter(index),; FitResult::ParError(index) and; FitResult::ParName(index).; The method FitResult::ParError should be used instead of; FitResult::Error in the derived TFitResult; class to avoid a conflict with TObject::Error; (see bug 67671).; ; Fix a bug in Tmath::AreEqualRel to take into account; the case when the two arguments may be null.; Improve imple",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:6654,Availability,toler,tolerance,6654,"in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; tolerance for all the root finder algorithms.; ; The class ROOT::Math::Data::Range returns in the method; GetRange the values -inf and +inf when no range; is set; ; Use in TRandom::SetSeed(int seed) a value of; seed=0 as default argument. This is the same now in all the; derived classes.; Add new methods in ROOT::Fit::FitResult to have a more; consistent and expressive API:FitResult::Parameter(index),; FitResult::ParError(index) and; FitResult::ParName(index).; The method FitResult::ParError should be used instead of; FitResult::Error in the derived TFitResult; class to avoid a conflict with TObject::Error; (see bug 67671).; ; Fix a bug in Tmath::AreEqualRel to take into account; the case when the two arguments may be null.; Improve implementation of the F distribution for large N and; M. Use now the same implementation in ROOT::Math and TMath; Fix the returned value of the incomplete gamma functions for; a=0 or a is a negative integer number. Mathmore. Fix a bug in ROOT::Math::Random::Mult",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:7189,Availability,Error,Error,7189,"otFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; tolerance for all the root finder algorithms.; ; The class ROOT::Math::Data::Range returns in the method; GetRange the values -inf and +inf when no range; is set; ; Use in TRandom::SetSeed(int seed) a value of; seed=0 as default argument. This is the same now in all the; derived classes.; Add new methods in ROOT::Fit::FitResult to have a more; consistent and expressive API:FitResult::Parameter(index),; FitResult::ParError(index) and; FitResult::ParName(index).; The method FitResult::ParError should be used instead of; FitResult::Error in the derived TFitResult; class to avoid a conflict with TObject::Error; (see bug 67671).; ; Fix a bug in Tmath::AreEqualRel to take into account; the case when the two arguments may be null.; Improve implementation of the F distribution for large N and; M. Use now the same implementation in ROOT::Math and TMath; Fix the returned value of the incomplete gamma functions for; a=0 or a is a negative integer number. Mathmore. Fix a bug in ROOT::Math::Random::Multinomial. ; Fix some bugs in GSLInterpolator; New mathematical special functions in the ROOT::Math namespace; implemented using GSL:; ; Airy functions:; ; double airy_Ai(double x);; double airy_Bi(double x);; double airy_Ai_deriv(double x);; double airy_Bi_deriv(double x);; double airy_zero_Ai(unsigned int s);; double airy_zero_Bi(unsigned int s);; double airy_zero_Ai_deriv(unsigned int s);; double airy_zero_Bi_deriv(unsigned int s);; ; Wigner coefficient functions:; ; double wigner_3j(int ja, int jb, int jc, int ma, int mb, int mc);; dou",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:7262,Availability,Error,Error,7262,"otFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; tolerance for all the root finder algorithms.; ; The class ROOT::Math::Data::Range returns in the method; GetRange the values -inf and +inf when no range; is set; ; Use in TRandom::SetSeed(int seed) a value of; seed=0 as default argument. This is the same now in all the; derived classes.; Add new methods in ROOT::Fit::FitResult to have a more; consistent and expressive API:FitResult::Parameter(index),; FitResult::ParError(index) and; FitResult::ParName(index).; The method FitResult::ParError should be used instead of; FitResult::Error in the derived TFitResult; class to avoid a conflict with TObject::Error; (see bug 67671).; ; Fix a bug in Tmath::AreEqualRel to take into account; the case when the two arguments may be null.; Improve implementation of the F distribution for large N and; M. Use now the same implementation in ROOT::Math and TMath; Fix the returned value of the incomplete gamma functions for; a=0 or a is a negative integer number. Mathmore. Fix a bug in ROOT::Math::Random::Multinomial. ; Fix some bugs in GSLInterpolator; New mathematical special functions in the ROOT::Math namespace; implemented using GSL:; ; Airy functions:; ; double airy_Ai(double x);; double airy_Bi(double x);; double airy_Ai_deriv(double x);; double airy_Bi_deriv(double x);; double airy_zero_Ai(unsigned int s);; double airy_zero_Bi(unsigned int s);; double airy_zero_Ai_deriv(unsigned int s);; double airy_zero_Bi_deriv(unsigned int s);; ; Wigner coefficient functions:; ; double wigner_3j(int ja, int jb, int jc, int ma, int mb, int mc);; dou",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:9815,Availability,error,error,9815,"t jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name ""Genetic""). See example programs in; math/genetic/test.; . ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:2183,Deployability,integrat,integration,2183," sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the data which is used as the bins.; The bins are retrieved as two double*, one for the minimum bin edges,; the other as the maximum bin edges. For one dimension one of these is enough; to correctly define the bins. The bin edges of d-dimensional data is a d-tet; of the bin's thresholds. For example if d",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5163,Deployability,integrat,integration,5163,"rm queries on bin b information; ; Double_t density = GetBinDensity(b);; Double_t volume = GetBinVolume(b);; Double_t* center = GetBinCenter(b);; . The tutorial math/kdTreeBinning.C is an example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Im",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5199,Deployability,Integrat,Integration,5199," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5298,Deployability,Integrat,IntegrationOneDim,5298," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5365,Deployability,integrat,integration,5365," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5393,Deployability,Integrat,IntegrationOneDim,5393," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5661,Deployability,Integrat,IntegratorOneDim,5661,"ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; toleran",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5718,Deployability,Integrat,IntegratorOptions,5718,"ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; toleran",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5764,Deployability,integrat,integrator,5764,"ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; toleran",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:9114,Deployability,continuous,continuous,9114," ; Wigner coefficient functions:; ; double wigner_3j(int ja, int jb, int jc, int ma, int mb, int mc);; double wigner_6j(int ja, int jb, int jc, int jd, int je, int jf);; double wigner_9j(int ja, int jb, int jc, int jd, int je, int jf, int jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:10011,Deployability,release,release,10011,"t jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name ""Genetic""). See example programs in; math/genetic/test.; . ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:32,Integrability,interface,interface,32,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:457,Integrability,interface,interface,457,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:503,Integrability,interface,interface,503,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:2183,Integrability,integrat,integration,2183," sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the data which is used as the bins.; The bins are retrieved as two double*, one for the minimum bin edges,; the other as the maximum bin edges. For one dimension one of these is enough; to correctly define the bins. The bin edges of d-dimensional data is a d-tet; of the bin's thresholds. For example if d",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:4986,Integrability,interface,interface,4986,"nes are necessary for the bins to be well defined; ; std::pair binEdges = fBins->GetBinEdges(b);; . Example 4: perform queries on bin b information; ; Double_t density = GetBinDensity(b);; Double_t volume = GetBinVolume(b);; Double_t* center = GetBinCenter(b);; . The tutorial math/kdTreeBinning.C is an example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the im",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5163,Integrability,integrat,integration,5163,"rm queries on bin b information; ; Double_t density = GetBinDensity(b);; Double_t volume = GetBinVolume(b);; Double_t* center = GetBinCenter(b);; . The tutorial math/kdTreeBinning.C is an example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Im",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5199,Integrability,Integrat,Integration,5199," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5298,Integrability,Integrat,IntegrationOneDim,5298," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5365,Integrability,integrat,integration,5365," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5393,Integrability,Integrat,IntegrationOneDim,5393," example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5661,Integrability,Integrat,IntegratorOneDim,5661,"ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; toleran",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5718,Integrability,Integrat,IntegratorOptions,5718,"ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; toleran",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:5764,Integrability,integrat,integrator,5764,"ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integration classes:; ; Fix a bug in the templated method setting the integrand; function; Use now IntegrationOneDim::kADAPTIVESINGULAR as default method for the 1D; integration; Add the method IntegrationOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; toleran",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:6379,Integrability,interface,interface,6379,"onOneDim::kLEGENDRE based on; the GaussLegendreIntegrator class. ; Implement also for the GaussIntegrator and; GaussLegendreIntegrator the undefined and semi-undefined integral; using a function transformation as it is done in the GSLIntegrator; Fix a bug in IntegratorOneDim::SetAbsTolerance; New class ROOT::Math::IntegratorOptions which can be passed to; all integrator allowing the user to give options to the class and in; particular default value. Via the support for extra options (with; the class ROOT::Math::IOptions generic (string,value); options can be used in the base class to define specific options for; the implementations. For example for the MCIntegrator class,; specific options can now be passed to VEGAS or MISER.; . Improve the root finder and 1D minimization classes (BrentRootFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; tolerance for all the root finder algorithms.; ; The class ROOT::Math::Data::Range returns in the method; GetRange the values -inf and +inf when no range; is set; ; Use in TRandom::SetSeed(int seed) a value of; seed=0 as default argument. This is the same now in all the; derived classes.; Add new methods in ROOT::Fit::FitResult to have a more; consistent and expressive API:FitResult::Parameter(index),; FitResult::ParError(index) and; FitResult::ParName(index).; The method FitResult::ParError should be used instead of; FitResult::Error in the derived TFitResult; class to avoid a conflict with TObject::Error; (see bug 67671).; ; Fix a bug in Tmath::AreEqualRel to take into account; the case when the two arguments may be null.; Improve imple",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:8935,Integrability,interface,interface,8935," x);; double airy_Bi_deriv(double x);; double airy_zero_Ai(unsigned int s);; double airy_zero_Bi(unsigned int s);; double airy_zero_Ai_deriv(unsigned int s);; double airy_zero_Bi_deriv(unsigned int s);; ; Wigner coefficient functions:; ; double wigner_3j(int ja, int jb, int jc, int ma, int mb, int mc);; double wigner_6j(int ja, int jb, int jc, int jd, int je, int jf);; double wigner_9j(int ja, int jb, int jc, int jd, int je, int jf, int jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set ex",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:9083,Integrability,interface,interface,9083," ; Wigner coefficient functions:; ; double wigner_3j(int ja, int jb, int jc, int ma, int mb, int mc);; double wigner_6j(int ja, int jb, int jc, int jd, int je, int jf);; double wigner_9j(int ja, int jb, int jc, int jd, int je, int jf, int jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:9260,Integrability,interface,interface,9260,"gner_9j(int ja, int jb, int jc, int jd, int je, int jf, int jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name """,MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:605,Modifiability,plugin,plugin,605,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:9965,Modifiability,variab,variable,9965,"t jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name ""Genetic""). See example programs in; math/genetic/test.; . ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:10262,Modifiability,plugin,plugin,10262,"t jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name ""Genetic""). See example programs in; math/genetic/test.; . ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1151,Performance,perform,perform,1151,"; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to gi",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1518,Performance,perform,perform,1518,"ibraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sampl",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1799,Performance,perform,perform,1799,"s (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the da",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:2075,Performance,perform,perform,2075,"ssing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the data which is used as the bins.; The bins are retrieved as two double*, one for the minimum bin edges,; the other as the maximum bin edges. For one dimension one of these is enough; to correctly ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:4138,Performance,perform,perform,4138,"if d=3 the minimum bin edges of bin b is; of the form of the following array: {xbmin, ybmin, zbmin}.; Example 1: constructing a TKDTreeBinning object with; sample[dataSize] containing the data and dataDim and nBins,; multidimensional and bin number parameters.; ; TKDTreeBinning* fBins = new TKDTreeBinning(dataSize, dataDim, sample, nBins);; . Example 2: retrieving the bin edges. For the multidimensional case both minimum; and maximum ones are necessary for the bins to be well defined; ; Double_t* binsMinEdges = fBins->GetBinsMinEdges();; Double_t* binsMaxEdges = fBins->GetBinsMaxEdges();; ; If you wish to retrieve them sorted by their density issue before the earlier getters; fBins->SortBinsByDensity();; ; Example 3: retrieving the bin edges of bin b. For the multidimensional; case both minimum and maximum ones are necessary for the bins to be well defined; ; std::pair binEdges = fBins->GetBinEdges(b);; . Example 4: perform queries on bin b information; ; Double_t density = GetBinDensity(b);; Double_t volume = GetBinVolume(b);; Double_t* center = GetBinCenter(b);; . The tutorial math/kdTreeBinning.C is an example on; how to use this class. New statistical functions ROOT::Math::landau_quantile (inverse of landau cumulative distribution); translated from RANLAN and; ROOT::Math::landau_quantile_c.; ; New statistical functions; ROOT::Math::negative_binomial_pdf and the cumulative distributions; ROOT::Math::negative_binomial_cdf and ROOT::Math::negative_binomial_cdf_c.; ; New special functions: sine and cosine integral, translated by; B. List from CERNLIB:; ROOT::Math::sinint and ROOT::Math::cosint. New classes ROOT::Math::IOptions and; ROOT::Math::GenAlgoOptions for dealing in general with the; options for the numerical algorithm. The first one is the interface; for the second and defines the setting and retrieval of generic pair; of (name,value) options.; They are used for defining possible extra; options for the minimizer, integration and sampler options.; ; Integrati",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:2176,Safety,avoid,avoid,2176," sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the data which is used as the bins.; The bins are retrieved as two double*, one for the minimum bin edges,; the other as the maximum bin edges. For one dimension one of these is enough; to correctly define the bins. The bin edges of d-dimensional data is a d-tet; of the bin's thresholds. For example if d",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:7231,Safety,avoid,avoid,7231,"otFinder; and BrentMinimizer1D) by fixing a bug in the Brent method (see rev. 32544); and adding possibility to pass the tolerance and max number of; iterations; Change also the interface classes,; ROOT::Math::RootFinder and; ROOT::Math::IMinimizer1D to have methods consistent with; the other numerical algorithm classes (e.g. return bool and not; int from RootFinder::Solve and add a; RootFinder::Status() function. In addition, use the same default; tolerance for all the root finder algorithms.; ; The class ROOT::Math::Data::Range returns in the method; GetRange the values -inf and +inf when no range; is set; ; Use in TRandom::SetSeed(int seed) a value of; seed=0 as default argument. This is the same now in all the; derived classes.; Add new methods in ROOT::Fit::FitResult to have a more; consistent and expressive API:FitResult::Parameter(index),; FitResult::ParError(index) and; FitResult::ParName(index).; The method FitResult::ParError should be used instead of; FitResult::Error in the derived TFitResult; class to avoid a conflict with TObject::Error; (see bug 67671).; ; Fix a bug in Tmath::AreEqualRel to take into account; the case when the two arguments may be null.; Improve implementation of the F distribution for large N and; M. Use now the same implementation in ROOT::Math and TMath; Fix the returned value of the incomplete gamma functions for; a=0 or a is a negative integer number. Mathmore. Fix a bug in ROOT::Math::Random::Multinomial. ; Fix some bugs in GSLInterpolator; New mathematical special functions in the ROOT::Math namespace; implemented using GSL:; ; Airy functions:; ; double airy_Ai(double x);; double airy_Bi(double x);; double airy_Ai_deriv(double x);; double airy_Bi_deriv(double x);; double airy_zero_Ai(unsigned int s);; double airy_zero_Bi(unsigned int s);; double airy_zero_Ai_deriv(unsigned int s);; double airy_zero_Bi_deriv(unsigned int s);; ; Wigner coefficient functions:; ; double wigner_3j(int ja, int jb, int jc, int ma, int mb, int mc);; dou",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:800,Testability,test,tests,800,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:892,Testability,test,tests,892,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:999,Testability,test,test,999,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1071,Testability,Log,LogNormal,1071,". Math Libraries; Mathcore. New interface class ROOT::Math::DistSampler for; generating random number according to a given distribution.; ; The class defines the methods to generate a single number; DistSampler::Sample()or a data sets; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTes",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1174,Testability,test,test,1174,"; DistSampler::Generate(n, data). The data set; generation can be unbinned or binned in the; given range (only equidistant bins are currently supported); Sampling of 1D or multi-dim distributions is supported via; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to gi",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1465,Testability,test,test,1465,"; the same interface; Derived classes; implementing this interface are not provided by MathCore but by; other libraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMa",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1537,Testability,test,test,1537,"ibraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sampl",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1818,Testability,test,test,1818,"s (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the da",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:2094,Testability,test,test,2094,"ssing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the data which is used as the bins.; The bins are retrieved as two double*, one for the minimum bin edges,; the other as the maximum bin edges. For one dimension one of these is enough; to correctly ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:10324,Testability,test,test,10324,"t jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name ""Genetic""). See example programs in; math/genetic/test.; . ",MatchSource.DOCS,math/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1369,Availability,error,errors,1369,"also (based on numeric_limits) templated functions on T (where T can be double, float or int) for computing; the limits for a given type:; ; T TMath::Limits< T >::Max() returning the maximum number which can be represented for the type T ( T TMath::Limits< double >::Max()=1.79769e+308); T TMath::Limits< T >::Min() returning the minimum number which can be represented for the type T ( T TMath::Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1633,Availability,error,errors,1633,"Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; tot",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1731,Availability,error,errors,1731,"Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; tot",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:2835,Availability,toler,tolerance,2835,"hod FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; total number of parameters. The elements for the fixed parameters will be filled with zeros.; These methods are currently implemented by only Minuit and Minuit2. Change default tolerance in ROOT::Math::MinimizerOptions to be 0.01 from 0.0001. MathMore. New class ROOT::Math::GSLMultiRootFinder for finding the root of system of functions.; The class is based on the GSL multi-root algorithm; (see the GSL online; manual) and it is used to solve a non-linear system of equations:; ; f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions implementing the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:3221,Availability,avail,available,3221,"issonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; total number of parameters. The elements for the fixed parameters will be filled with zeros.; These methods are currently implemented by only Minuit and Minuit2. Change default tolerance in ROOT::Math::MinimizerOptions to be 0.01 from 0.0001. MathMore. New class ROOT::Math::GSLMultiRootFinder for finding the root of system of functions.; The class is based on the GSL multi-root algorithm; (see the GSL online; manual) and it is used to solve a non-linear system of equations:; ; f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions implementing the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""Hy",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:3626,Availability,avail,available,3626,"s to be 0.01 from 0.0001. MathMore. New class ROOT::Math::GSLMultiRootFinder for finding the root of system of functions.; The class is based on the GSL multi-root algorithm; (see the GSL online; manual) and it is used to solve a non-linear system of equations:; ; f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions implementing the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:4690,Availability,Error,Error,4690,"the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last func",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:5350,Availability,toler,tolerance,5350,"ame as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside the Minuit2 classes.; Fix a bug in MnUserTransformation when using unnamed parameters (bug 82552).; ; Add the possibility when using Minos to pass the tolerance for the Migrad calls. (use a default of 0.1",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:5441,Availability,toler,tolerance,5441,"ithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside the Minuit2 classes.; Fix a bug in MnUserTransformation when using unnamed parameters (bug 82552).; ; Add the possibility when using Minos to pass the tolerance for the Migrad calls. (use a default of 0.1 * Up, which is; the same value used in F77). . Minuit. Implement the methods TMinuitMinimizer::GetHessianMatrix(double * mat) and; TMinuitMinimizer::GetCovMatrix(double * mat). ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:5696,Availability,toler,tolerance,5696,"ithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside the Minuit2 classes.; Fix a bug in MnUserTransformation when using unnamed parameters (bug 82552).; ; Add the possibility when using Minos to pass the tolerance for the Migrad calls. (use a default of 0.1 * Up, which is; the same value used in F77). . Minuit. Implement the methods TMinuitMinimizer::GetHessianMatrix(double * mat) and; TMinuitMinimizer::GetCovMatrix(double * mat). ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:6236,Availability,toler,tolerance,6236,"ithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside the Minuit2 classes.; Fix a bug in MnUserTransformation when using unnamed parameters (bug 82552).; ; Add the possibility when using Minos to pass the tolerance for the Migrad calls. (use a default of 0.1 * Up, which is; the same value used in F77). . Minuit. Implement the methods TMinuitMinimizer::GetHessianMatrix(double * mat) and; TMinuitMinimizer::GetCovMatrix(double * mat). ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1390,Deployability,configurat,configuration,1390,"also (based on numeric_limits) templated functions on T (where T can be double, float or int) for computing; the limits for a given type:; ; T TMath::Limits< T >::Max() returning the maximum number which can be represented for the type T ( T TMath::Limits< double >::Max()=1.79769e+308); T TMath::Limits< T >::Min() returning the minimum number which can be represented for the type T ( T TMath::Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1586,Deployability,Update,Update,1586,"Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; tot",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1597,Deployability,configurat,configuration,1597,"Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; tot",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1744,Deployability,update,update,1744,"finition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; total number of parameters. The elements for the fixed parameters will be filled with zeros.; These methods are currently ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:5135,Deployability,update,update,5135,"also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside the Minuit2 classes.; Fix a bug in MnUserTransformation when using unnamed parameters ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:3451,Integrability,interface,interface,3451,"ble * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; total number of parameters. The elements for the fixed parameters will be filled with zeros.; These methods are currently implemented by only Minuit and Minuit2. Change default tolerance in ROOT::Math::MinimizerOptions to be 0.01 from 0.0001. MathMore. New class ROOT::Math::GSLMultiRootFinder for finding the root of system of functions.; The class is based on the GSL multi-root algorithm; (see the GSL online; manual) and it is used to solve a non-linear system of equations:; ; f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions implementing the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Ma",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:3610,Integrability,interface,interface,3610,"ble * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; total number of parameters. The elements for the fixed parameters will be filled with zeros.; These methods are currently implemented by only Minuit and Minuit2. Change default tolerance in ROOT::Math::MinimizerOptions to be 0.01 from 0.0001. MathMore. New class ROOT::Math::GSLMultiRootFinder for finding the root of system of functions.; The class is based on the GSL multi-root algorithm; (see the GSL online; manual) and it is used to solve a non-linear system of equations:; ; f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions implementing the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Ma",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:4696,Integrability,message,messages,4696,"the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last func",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:4866,Integrability,message,messages,4866,"MultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatr",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:4933,Integrability,message,messages,4933,"n of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method ha",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:5063,Integrability,message,messages,5063," with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1390,Modifiability,config,configuration,1390,"also (based on numeric_limits) templated functions on T (where T can be double, float or int) for computing; the limits for a given type:; ; T TMath::Limits< T >::Max() returning the maximum number which can be represented for the type T ( T TMath::Limits< double >::Max()=1.79769e+308); T TMath::Limits< T >::Min() returning the minimum number which can be represented for the type T ( T TMath::Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:1597,Modifiability,config,configuration,1597,"Limits< double >::Max()=2.22507e-308); T TMath::Limits< T >::Epsilon() returning the epsilon (see Wikipedia for its definition) for the type T ( T; TMath::Limits< double >::Epsilon()=2.22045e-16). TRandom1 and TRandom3. Add an implementation of UInt_t GetSeed() to return the first element of the seed table. Before always a fixed; value was returned, independently of the random generator state; . ROOT::Fit::Fitter and related classes. Add new version of the Fitter class with various improvements:; ; add the possibility to just evaluate the objective function (FCN) one time (Fitter::EvalFCN) and fill the; result (class ROOT::Fit::FitResult using the obtained value of FCN plus the parameter values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; tot",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:4882,Modifiability,Variab,VariableMetricBuilder,4882,"MultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method ; ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL; documentation ); are the followings:; ; ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using; finate difference approximation for the derivatives; ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the; previous algorithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatr",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:2361,Performance,perform,performing,2361,"r values and errors from; the Fit configuration class (ROOT::Fit::FitConfig).; This required adding a nw constructor of FitResult from FitConfig.; This originated from the Savannah request. ; Add also new methods Fitter::SetFCN.; Update the configuration (parameter values and errors) after a fit with the FitResult values; So next fit will use improved parameter values and errors. This update can be switched on/off; by using FitConfig::SetUpdateAfterFit(on/off). By default is on.; Add new method FitConfig::SetFromFitResult.; Add possibility to run Hesse (Fitter:::CalculateHessErrors) without having done the minimization. Add support for weighted likelihood fits. Add a new method Fitter::ApplyWeightCorrection(fcn2); which corrects covariance matrix for the weights using the likelihood function built using the weight square; Add the support for weights for the binned Poisson likelihood fits (in the; ROOT::Fit::PoissonLikelihoodFCN class). A new option (WL) has been added also in TH1::Fit; for performing weighted fits of histograms (see ).; . ROOT::Math::Minimizer; Add new methods Minimizer::GetHessianMatrix(double * mat) and Minimizer::GetCovMatrix(double * mat) to return the full; matrices by filling the passed C arrays, which must have a dimension of at least n x n, where n is the; total number of parameters. The elements for the fixed parameters will be filled with zeros.; These methods are currently implemented by only Minuit and Minuit2. Change default tolerance in ROOT::Math::MinimizerOptions to be 0.01 from 0.0001. MathMore. New class ROOT::Math::GSLMultiRootFinder for finding the root of system of functions.; The class is based on the GSL multi-root algorithm; (see the GSL online; manual) and it is used to solve a non-linear system of equations:; ; f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html:5532,Safety,Avoid,Avoid,5532,"ithm; ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm ; ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Minuit2. Improve Printing of information and Error messages. Use the class ROOT::Minuit2::MnPrint to store a; static print level, which can be set by using the static function MnPrint::SetLevel(int ). Add new information messages in the VariableMetricBuilder (i.e. Migrad), to print some messages; during the minimization.The new printing level is now also controlled by the Minuit2Minimizer class. ; Print now in the messages the parameter names instead of the parameter indices.; fix the update of the number of function calls in Minuit2 after calling Hess after Migrad. The number is now not; reset in MnHesse; Fix a problem, when, after calling Hesse ,the edm was correct to values below the required tolerance.; Now do not flag these cases as failed minimizations but as good ones.; Correct tolerance by 2E-3 instead 2E-4 to ve conistent with what is done in F77 Minuit or TMinuit; Avoid when using the CombinedMinimumBuilder (i.e. the Minimize algorithm) to call two times; ModularFunctionMinimize::Minimum. Since this last function correct the tolerance by the Up value, a; double correction was applied in this case. ; Implement the methods Minuit2Minimizer::GetHessianMatrix(double * mat) and; Minuit2Minimizer::GetCovMatrix(double * mat).; For retrieving the Hessian, a new method has been added, MnUserParameterState::Hessian, which returns; the Hessian by inverting the covariance matrix, since the Hessian is not stored inside the Minuit2 classes.; Fix a bug in MnUserTransformation when using unnamed parameters (bug 82552).; ; Add the possibility when using Minos to pass the tolerance for the Migrad calls. (use a default of 0.1 * Up, which is; the same value used in F77). . Minuit. Implement the methods TMinuitMinimizer::GetHessianMatrix(double * mat) and; TMinuitMinimizer::GetCovMatrix(double * mat). ",MatchSource.DOCS,math/doc/v530/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v530/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html:61,Energy Efficiency,Power,Power,61,". Math Libraries; MathCore; TMath. Add a new function TMath::Power(double, int) impelmented using std::pow(double,int) which is 100% faster than the; double version. KDTree. New KDTree class from C. Gumpert. which has different splitting rules using the data population. The splitting can; is based on the basket population, but any function of the data can be used. For example, in case of weighted data one can split according to; the basket total weight or the effective entries in the basket. In this way the class can support weighted data; sets. The splitting of the TKDTree class is instead fixed and based on the basket number of entries.; The tree can also be frozen to fix the splitting and behaving like a multi-dim histograms with bins with variables; hyper-volumes.; Auxiliary classes are provided like the node classes or the data point class, which can exists also with a compile timed fixed dimension; for better performances. . Fitter classes. Provide support for weighted likelihood unbinned fits; Provide support for extended likelihood unbinned fits; Provide support for not-extended binned likelihood fits (i.e. multinomial distribution instead of Poisson for bin; contents); In case of binned likelihood fit build a Poisson or (Multinomial) likelihood ratio with the saturated model. So a; constant term is subtracted to the likelihood. The formulae described in the Baker and Cousins; paper (N.I.M. 221 (1984) 437) are now used. The obtained negative likelihood ratio value from the fit and multiplied; by a factor 2 is now asymptotically distributed as a chi square. ",MatchSource.DOCS,math/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html:753,Modifiability,variab,variables,753,". Math Libraries; MathCore; TMath. Add a new function TMath::Power(double, int) impelmented using std::pow(double,int) which is 100% faster than the; double version. KDTree. New KDTree class from C. Gumpert. which has different splitting rules using the data population. The splitting can; is based on the basket population, but any function of the data can be used. For example, in case of weighted data one can split according to; the basket total weight or the effective entries in the basket. In this way the class can support weighted data; sets. The splitting of the TKDTree class is instead fixed and based on the basket number of entries.; The tree can also be frozen to fix the splitting and behaving like a multi-dim histograms with bins with variables; hyper-volumes.; Auxiliary classes are provided like the node classes or the data point class, which can exists also with a compile timed fixed dimension; for better performances. . Fitter classes. Provide support for weighted likelihood unbinned fits; Provide support for extended likelihood unbinned fits; Provide support for not-extended binned likelihood fits (i.e. multinomial distribution instead of Poisson for bin; contents); In case of binned likelihood fit build a Poisson or (Multinomial) likelihood ratio with the saturated model. So a; constant term is subtracted to the likelihood. The formulae described in the Baker and Cousins; paper (N.I.M. 221 (1984) 437) are now used. The obtained negative likelihood ratio value from the fit and multiplied; by a factor 2 is now asymptotically distributed as a chi square. ",MatchSource.DOCS,math/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html:1036,Modifiability,extend,extended,1036,". Math Libraries; MathCore; TMath. Add a new function TMath::Power(double, int) impelmented using std::pow(double,int) which is 100% faster than the; double version. KDTree. New KDTree class from C. Gumpert. which has different splitting rules using the data population. The splitting can; is based on the basket population, but any function of the data can be used. For example, in case of weighted data one can split according to; the basket total weight or the effective entries in the basket. In this way the class can support weighted data; sets. The splitting of the TKDTree class is instead fixed and based on the basket number of entries.; The tree can also be frozen to fix the splitting and behaving like a multi-dim histograms with bins with variables; hyper-volumes.; Auxiliary classes are provided like the node classes or the data point class, which can exists also with a compile timed fixed dimension; for better performances. . Fitter classes. Provide support for weighted likelihood unbinned fits; Provide support for extended likelihood unbinned fits; Provide support for not-extended binned likelihood fits (i.e. multinomial distribution instead of Poisson for bin; contents); In case of binned likelihood fit build a Poisson or (Multinomial) likelihood ratio with the saturated model. So a; constant term is subtracted to the likelihood. The formulae described in the Baker and Cousins; paper (N.I.M. 221 (1984) 437) are now used. The obtained negative likelihood ratio value from the fit and multiplied; by a factor 2 is now asymptotically distributed as a chi square. ",MatchSource.DOCS,math/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html:1095,Modifiability,extend,extended,1095,". Math Libraries; MathCore; TMath. Add a new function TMath::Power(double, int) impelmented using std::pow(double,int) which is 100% faster than the; double version. KDTree. New KDTree class from C. Gumpert. which has different splitting rules using the data population. The splitting can; is based on the basket population, but any function of the data can be used. For example, in case of weighted data one can split according to; the basket total weight or the effective entries in the basket. In this way the class can support weighted data; sets. The splitting of the TKDTree class is instead fixed and based on the basket number of entries.; The tree can also be frozen to fix the splitting and behaving like a multi-dim histograms with bins with variables; hyper-volumes.; Auxiliary classes are provided like the node classes or the data point class, which can exists also with a compile timed fixed dimension; for better performances. . Fitter classes. Provide support for weighted likelihood unbinned fits; Provide support for extended likelihood unbinned fits; Provide support for not-extended binned likelihood fits (i.e. multinomial distribution instead of Poisson for bin; contents); In case of binned likelihood fit build a Poisson or (Multinomial) likelihood ratio with the saturated model. So a; constant term is subtracted to the likelihood. The formulae described in the Baker and Cousins; paper (N.I.M. 221 (1984) 437) are now used. The obtained negative likelihood ratio value from the fit and multiplied; by a factor 2 is now asymptotically distributed as a chi square. ",MatchSource.DOCS,math/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html:929,Performance,perform,performances,929,". Math Libraries; MathCore; TMath. Add a new function TMath::Power(double, int) impelmented using std::pow(double,int) which is 100% faster than the; double version. KDTree. New KDTree class from C. Gumpert. which has different splitting rules using the data population. The splitting can; is based on the basket population, but any function of the data can be used. For example, in case of weighted data one can split according to; the basket total weight or the effective entries in the basket. In this way the class can support weighted data; sets. The splitting of the TKDTree class is instead fixed and based on the basket number of entries.; The tree can also be frozen to fix the splitting and behaving like a multi-dim histograms with bins with variables; hyper-volumes.; Auxiliary classes are provided like the node classes or the data point class, which can exists also with a compile timed fixed dimension; for better performances. . Fitter classes. Provide support for weighted likelihood unbinned fits; Provide support for extended likelihood unbinned fits; Provide support for not-extended binned likelihood fits (i.e. multinomial distribution instead of Poisson for bin; contents); In case of binned likelihood fit build a Poisson or (Multinomial) likelihood ratio with the saturated model. So a; constant term is subtracted to the likelihood. The formulae described in the Baker and Cousins; paper (N.I.M. 221 (1984) 437) are now used. The obtained negative likelihood ratio value from the fit and multiplied; by a factor 2 is now asymptotically distributed as a chi square. ",MatchSource.DOCS,math/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1578,Availability,down,downloaded,1578,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:2238,Availability,Error,Errors,2238,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1071,Deployability,integrat,integrate,1071," Minuit2. The Minuit2 library is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.; These new version provides basically all the functionality present in the old Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Refer",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1071,Integrability,integrat,integrate,1071," Minuit2. The Minuit2 library is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.; These new version provides basically all the functionality present in the old Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Refer",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1200,Integrability,interface,interface,1200,"mization package.; These new version provides basically all the functionality present in the old Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1398,Integrability,interface,interface,1398,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1630,Integrability,interface,interface,1630,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1292,Modifiability,plug-in,plug-in,1292,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1735,Modifiability,config,configure,1735,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:347,Performance,perform,performances,347,"// top doc Doxygen page for minuit2. /**. \page Minuit2Page Minuit2. The Minuit2 library is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.; These new version provides basically all the functionality present in the old Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:501,Performance,optimiz,optimized,501,"// top doc Doxygen page for minuit2. /**. \page Minuit2Page Minuit2. The Minuit2 library is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.; These new version provides basically all the functionality present in the old Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:539,Testability,log,log,539,"// top doc Doxygen page for minuit2. /**. \page Minuit2Page Minuit2. The Minuit2 library is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.; These new version provides basically all the functionality present in the old Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1485,Testability,test,test,1485,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1498,Testability,test,testMinimize,1498,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1775,Testability,test,tests,1775,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1811,Testability,test,test,1811,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1826,Testability,test,test,1826,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1712,Usability,simpl,simply,1712,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1910,Usability,Guid,Guide,1910,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:2123,Usability,Guid,Guide,2123,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,math/minuit2/doc/Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v520/index.html:182,Integrability,depend,dependencies,182,. Misc; A new directory minicern has been introduced. This directory contains; the zebra and hbook files required to build the h2root and g2root utilities.; These small files remove dependencies on the old CERNLIB files.; h2root and g2root as well as the library libHbook are; automatically built when configuring ROOT and a Fortran compiler found in the system.; ,MatchSource.DOCS,misc/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v520/index.html:302,Modifiability,config,configuring,302,. Misc; A new directory minicern has been introduced. This directory contains; the zebra and hbook files required to build the h2root and g2root utilities.; These small files remove dependencies on the old CERNLIB files.; h2root and g2root as well as the library libHbook are; automatically built when configuring ROOT and a Fortran compiler found in the system.; ,MatchSource.DOCS,misc/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:136,Availability,avail,available,136,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1522,Availability,avail,available,1522,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:718,Deployability,install,install,718,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1192,Deployability,Configurat,Configuration,1192,"on 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode an",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1218,Deployability,Release,Release,1218,"on 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode an",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1267,Deployability,Release,Release,1267,"ypes; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulti",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1743,Deployability,install,install,1743,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:2216,Deployability,Configurat,Configuration,2216,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:2242,Deployability,Release,Release,2242,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:2291,Deployability,Release,Release,2291,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:562,Integrability,depend,depends,562,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:19,Modifiability,plugin,plugin,19,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:54,Modifiability,plugin,plugin,54,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:665,Modifiability,plugin,plugin,665,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:730,Modifiability,plugin,plugin,730,". Misc; Quick Look plugin for MacOS X. New Quick Look plugin that allows quick inspection of the content; of a ROOT file. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1192,Modifiability,Config,Configuration,1192,"on 10.5 (Leopard). To use QL; select an file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode an",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1249,Modifiability,plugin,plugin,1249,"ypes; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulti",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1321,Modifiability,plugin,plugin,1321,"file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook d",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1361,Modifiability,plugin,plugin,1361,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1690,Modifiability,plugin,plugin,1690,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:1755,Modifiability,plugin,plugin,1755,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:2216,Modifiability,Config,Configuration,2216,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html:2273,Modifiability,plugin,plugin,2273,"t, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern.ch/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTQL.qlgenerator to /Library/QuickLook (global, i.e. for all users on a; system) or to ~/Library/QuickLook (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootql rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory. SpotLight plugin for MacOS X. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search text. Get the binary for the ROOTSL plugin from:. ftp://root.cern.ch/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just drag the bundle; ROOTSL.mdimporter to /Library/Spotlight (global, i.e. for all users on a; system) or to ~/Library/Spotlight (local, this user only) directory.; You may need to create that folder if it doesn't already exist. To build from source, get it from svn using:. svn co http://root.cern.ch/svn/root/trunk/misc/rootsl rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set the ""Release""). Copy the resulting; plugin from build/Release to the desired QuickLook directory.; ",MatchSource.DOCS,misc/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html:68,Integrability,Interface,Interface,68,. MonteCarlo; The new montecarlo directory groups the packages. eg: Interface to event generators; g4root: Interface to the Geant4 system; pythia6: Interface to pythia6; pythia8: Interface to pythia8; vmc: The Virtual MonteCarlo. ,MatchSource.DOCS,montecarlo/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html:107,Integrability,Interface,Interface,107,. MonteCarlo; The new montecarlo directory groups the packages. eg: Interface to event generators; g4root: Interface to the Geant4 system; pythia6: Interface to pythia6; pythia8: Interface to pythia8; vmc: The Virtual MonteCarlo. ,MatchSource.DOCS,montecarlo/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html:148,Integrability,Interface,Interface,148,. MonteCarlo; The new montecarlo directory groups the packages. eg: Interface to event generators; g4root: Interface to the Geant4 system; pythia6: Interface to pythia6; pythia8: Interface to pythia8; vmc: The Virtual MonteCarlo. ,MatchSource.DOCS,montecarlo/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html:179,Integrability,Interface,Interface,179,. MonteCarlo; The new montecarlo directory groups the packages. eg: Interface to event generators; g4root: Interface to the Geant4 system; pythia6: Interface to pythia6; pythia8: Interface to pythia8; vmc: The Virtual MonteCarlo. ,MatchSource.DOCS,montecarlo/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v528/index.html:424,Integrability,interface,interface,424,". MonteCarlo; TDatabasePDG; The method ReadPDGTable of TDatabasePDG was setting the stable flags for; all particles regardless of their width. TParticlePDG; The value reported in the fLifetime variable of TParticlePDG is in seconds; while in the documentation is was indicated in nanoseconds. pdg_table.txt; Particles with a width greater than 1e-10 have now the stable flag set to 1. TVirtualMC; New functions added in the interface:. For activation of collecting TGeo tracks:; virtual void SetCollectTracks(Bool_t collectTracks);; virtual Bool_t IsCollectTracks() const;. For accessing the normal vector of the crossing volume surface; on the geometry boundary:; virtual Bool_t CurrentBoundaryNormal(Double_t &x, Double_t &y, Double_t &z) const;. ",MatchSource.DOCS,montecarlo/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v528/index.html:193,Modifiability,variab,variable,193,". MonteCarlo; TDatabasePDG; The method ReadPDGTable of TDatabasePDG was setting the stable flags for; all particles regardless of their width. TParticlePDG; The value reported in the fLifetime variable of TParticlePDG is in seconds; while in the documentation is was indicated in nanoseconds. pdg_table.txt; Particles with a width greater than 1e-10 have now the stable flag set to 1. TVirtualMC; New functions added in the interface:. For activation of collecting TGeo tracks:; virtual void SetCollectTracks(Bool_t collectTracks);; virtual Bool_t IsCollectTracks() const;. For accessing the normal vector of the crossing volume surface; on the geometry boundary:; virtual Bool_t CurrentBoundaryNormal(Double_t &x, Double_t &y, Double_t &z) const;. ",MatchSource.DOCS,montecarlo/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v528/index.html:578,Security,access,accessing,578,". MonteCarlo; TDatabasePDG; The method ReadPDGTable of TDatabasePDG was setting the stable flags for; all particles regardless of their width. TParticlePDG; The value reported in the fLifetime variable of TParticlePDG is in seconds; while in the documentation is was indicated in nanoseconds. pdg_table.txt; Particles with a width greater than 1e-10 have now the stable flag set to 1. TVirtualMC; New functions added in the interface:. For activation of collecting TGeo tracks:; virtual void SetCollectTracks(Bool_t collectTracks);; virtual Bool_t IsCollectTracks() const;. For accessing the normal vector of the crossing volume surface; on the geometry boundary:; virtual Bool_t CurrentBoundaryNormal(Double_t &x, Double_t &y, Double_t &z) const;. ",MatchSource.DOCS,montecarlo/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html:29,Deployability,Update,Update,29,". MonteCarlo Libraries; VMC. Update of the VMC interfaces for multi-threading:; TVirtualMC and TVirtualMCApplication instances are now declared thread local.; Added new functions in TVirtualMC and TVirtualMCApplication for multi-threading; applications with default implementation. ; In TVirtualMC:. virtual Bool_t IsMT() const { return kFALSE; }. In TVirtualMCApplication:. virtual TVirtualMCApplication* CloneForWorker() const { return 0;}; virtual void InitForWorker() const {}; virtual void BeginWorkerRun() const {}; virtual void FinishWorkerRun() const {}; virtual void Merge(TVirtualMCApplication* /*localMCApplication*/) {}. Removed default implementation of newly added functions in TVirtualMC:. virtual Bool_t IsRootGeometrySupported() const = 0;; virtual Bool_t GetMaterial(Int_t imat, TString& name,...) = 0;; virtual Bool_t CurrentBoundaryNormal(..) = 0;. Removed deprecated functions from TVirtualMC:. // Return parameters for material specified by material number imat; // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Float_t &a, Float_t &z,; Float_t &dens, Float_t &radl, Float_t &absl,; Float_t *ubuf, Int_t &nbuf) = 0;. // Return parameters for material specified by material number imat; // (in double precision); // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Double_t &a, Double_t &z,; Double_t &dens, Double_t &radl, Double_t &absl,; Double_t *ubuf, Int_t &nbuf) = 0;. // Check the parameters of a tracking medium; // Deprecated; virtual void Gckmat(Int_t imed, char *name) = 0;. ",MatchSource.DOCS,montecarlo/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html:47,Integrability,interface,interfaces,47,". MonteCarlo Libraries; VMC. Update of the VMC interfaces for multi-threading:; TVirtualMC and TVirtualMCApplication instances are now declared thread local.; Added new functions in TVirtualMC and TVirtualMCApplication for multi-threading; applications with default implementation. ; In TVirtualMC:. virtual Bool_t IsMT() const { return kFALSE; }. In TVirtualMCApplication:. virtual TVirtualMCApplication* CloneForWorker() const { return 0;}; virtual void InitForWorker() const {}; virtual void BeginWorkerRun() const {}; virtual void FinishWorkerRun() const {}; virtual void Merge(TVirtualMCApplication* /*localMCApplication*/) {}. Removed default implementation of newly added functions in TVirtualMC:. virtual Bool_t IsRootGeometrySupported() const = 0;; virtual Bool_t GetMaterial(Int_t imat, TString& name,...) = 0;; virtual Bool_t CurrentBoundaryNormal(..) = 0;. Removed deprecated functions from TVirtualMC:. // Return parameters for material specified by material number imat; // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Float_t &a, Float_t &z,; Float_t &dens, Float_t &radl, Float_t &absl,; Float_t *ubuf, Int_t &nbuf) = 0;. // Return parameters for material specified by material number imat; // (in double precision); // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Double_t &a, Double_t &z,; Double_t &dens, Double_t &radl, Double_t &absl,; Double_t *ubuf, Int_t &nbuf) = 0;. // Check the parameters of a tracking medium; // Deprecated; virtual void Gckmat(Int_t imed, char *name) = 0;. ",MatchSource.DOCS,montecarlo/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html:62,Performance,multi-thread,multi-threading,62,". MonteCarlo Libraries; VMC. Update of the VMC interfaces for multi-threading:; TVirtualMC and TVirtualMCApplication instances are now declared thread local.; Added new functions in TVirtualMC and TVirtualMCApplication for multi-threading; applications with default implementation. ; In TVirtualMC:. virtual Bool_t IsMT() const { return kFALSE; }. In TVirtualMCApplication:. virtual TVirtualMCApplication* CloneForWorker() const { return 0;}; virtual void InitForWorker() const {}; virtual void BeginWorkerRun() const {}; virtual void FinishWorkerRun() const {}; virtual void Merge(TVirtualMCApplication* /*localMCApplication*/) {}. Removed default implementation of newly added functions in TVirtualMC:. virtual Bool_t IsRootGeometrySupported() const = 0;; virtual Bool_t GetMaterial(Int_t imat, TString& name,...) = 0;; virtual Bool_t CurrentBoundaryNormal(..) = 0;. Removed deprecated functions from TVirtualMC:. // Return parameters for material specified by material number imat; // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Float_t &a, Float_t &z,; Float_t &dens, Float_t &radl, Float_t &absl,; Float_t *ubuf, Int_t &nbuf) = 0;. // Return parameters for material specified by material number imat; // (in double precision); // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Double_t &a, Double_t &z,; Double_t &dens, Double_t &radl, Double_t &absl,; Double_t *ubuf, Int_t &nbuf) = 0;. // Check the parameters of a tracking medium; // Deprecated; virtual void Gckmat(Int_t imed, char *name) = 0;. ",MatchSource.DOCS,montecarlo/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html:223,Performance,multi-thread,multi-threading,223,". MonteCarlo Libraries; VMC. Update of the VMC interfaces for multi-threading:; TVirtualMC and TVirtualMCApplication instances are now declared thread local.; Added new functions in TVirtualMC and TVirtualMCApplication for multi-threading; applications with default implementation. ; In TVirtualMC:. virtual Bool_t IsMT() const { return kFALSE; }. In TVirtualMCApplication:. virtual TVirtualMCApplication* CloneForWorker() const { return 0;}; virtual void InitForWorker() const {}; virtual void BeginWorkerRun() const {}; virtual void FinishWorkerRun() const {}; virtual void Merge(TVirtualMCApplication* /*localMCApplication*/) {}. Removed default implementation of newly added functions in TVirtualMC:. virtual Bool_t IsRootGeometrySupported() const = 0;; virtual Bool_t GetMaterial(Int_t imat, TString& name,...) = 0;; virtual Bool_t CurrentBoundaryNormal(..) = 0;. Removed deprecated functions from TVirtualMC:. // Return parameters for material specified by material number imat; // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Float_t &a, Float_t &z,; Float_t &dens, Float_t &radl, Float_t &absl,; Float_t *ubuf, Int_t &nbuf) = 0;. // Return parameters for material specified by material number imat; // (in double precision); // Deprecated - replaced with GetMaterial(); virtual void Gfmate(Int_t imat, char *name, Double_t &a, Double_t &z,; Double_t &dens, Double_t &radl, Double_t &absl,; Double_t *ubuf, Int_t &nbuf) = 0;. // Check the parameters of a tracking medium; // Deprecated; virtual void Gckmat(Int_t imed, char *name) = 0;. ",MatchSource.DOCS,montecarlo/doc/v534/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/doc/v534/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3852,Deployability,configurat,configuration,3852,"c triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~mana",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3009,Energy Efficiency,monitor,monitoring,3009,"so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting G",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:120,Integrability,message,messages,120,". Networking. TMessage now has schema evolution and TRef (i.e. ProcessID) support. To; enable; schema evolution for all messages call; TMessage::EnableSchemaEvolutionForAll(kTRUE).; To enable it only for a specific message call; mess->EnableSchemaEvolution(kTRUE).; The default for schema evolution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:215,Integrability,message,message,215,". Networking. TMessage now has schema evolution and TRef (i.e. ProcessID) support. To; enable; schema evolution for all messages call; TMessage::EnableSchemaEvolutionForAll(kTRUE).; To enable it only for a specific message call; mess->EnableSchemaEvolution(kTRUE).; The default for schema evolution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1478,Integrability,synchroniz,synchronization,1478," are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; me",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3054,Integrability,interface,interface,3054," Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/s",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3137,Integrability,interface,interface,3137,"le throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the jo",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1185,Modifiability,plug-in,plug-in,1185,"olution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3072,Modifiability,plug-in,plug-in,3072,"le throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the jo",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3089,Modifiability,plug-in,plug-in,3089,"le throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the jo",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3852,Modifiability,config,configuration,3852,"c triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~mana",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3953,Modifiability,plug-in,plug-in,3953,"of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~manafov/D-Grid/docz/; ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:4373,Modifiability,plug-in,plug-in,4373,"of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~manafov/D-Grid/docz/; ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:808,Performance,perform,performances,808,". Networking. TMessage now has schema evolution and TRef (i.e. ProcessID) support. To; enable; schema evolution for all messages call; TMessage::EnableSchemaEvolutionForAll(kTRUE).; To enable it only for a specific message call; mess->EnableSchemaEvolution(kTRUE).; The default for schema evolution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1057,Performance,Optimiz,Optimized,1057,"i.e. ProcessID) support. To; enable; schema evolution for all messages call; TMessage::EnableSchemaEvolutionForAll(kTRUE).; To enable it only for a specific message call; mess->EnableSchemaEvolution(kTRUE).; The default for schema evolution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1103,Performance,cache,cache,1103,"i.e. ProcessID) support. To; enable; schema evolution for all messages call; TMessage::EnableSchemaEvolutionForAll(kTRUE).; To enable it only for a specific message call; mess->EnableSchemaEvolution(kTRUE).; The default for schema evolution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1467,Performance,cache,cache,1467," are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; me",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1532,Performance,cache,cache,1532," are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; me",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1582,Performance,cache,cache,1582," are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; me",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1647,Performance,cache,cache,1647," are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; me",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1666,Performance,perform,performances,1666," are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; me",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:2165,Performance,throughput,throughput,2165,"ate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite mid",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:2604,Performance,latency,latency,2604,"or RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/L",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:2933,Performance,perform,performance,2933," mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema.",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:2997,Performance,perform,performance,2997,"so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting G",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3189,Performance,perform,perform,3189,"le throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened to trigger an activity in the right moment.; Now TMonaLisaWriter keeps internally track of every; activity; and regularly sends summaries valid for all the files which had; activity in the last time interval.; Additionally, it's now finalized the infrastructure able to; measure; and keep track of the file Open latency. A packet is sent for each; successful Open, sending the measures of the latencies for the; various phases of the open. Currently exploited fully by TAlienFile; and TXNetFile. Easy to report from other TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the jo",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3938,Performance,load,loading,3938,"of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~manafov/D-Grid/docz/; ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:4358,Performance,load,loading,4358,"of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~manafov/D-Grid/docz/; ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:1227,Security,certificate,certificate,1227,"olution is off. The streamer and process id; information are send only once per socket (and is supported for all; types of; sockets, TSocket, TPSocket and TXSocket). If you communicate between; two; ROOT based applications, check the version numbers on both sides. If; they; are not the same enable the schema evolution support (in case ROOT; objects; are transferred). . XROOTD. New version 20080621-0000 containing several improvements and fixes; Server:. New daemon 'cmsd' supposed to replace 'olbd' with improved performances; Improved polling strategy; Fix problem with handling writev creating unjustified disconnections ; Fix problem with setrlimit on MacOsX Leopard. Client:; ; Fix a nasty memory leak in XrdClientCacheRead affecting; processing via TChain; Optimized file closing recipe; Fix; potential cache thrashing problem with big blocks requests. Fixes / improvements in the GSI plug-in:; ; support for large (> 32 bits) certificate serial; numbers in CRL handling; support for an external function for DN-to-username; mapping function; provide example for an LDAP based search; fixed a few problem with return code checking. netx. TXNetFile:; . Enable dynamic cache size synchronization; ; Enable per-instance control of the cache parameters; also for RAW files; by; default cache is OFF for these files, but there maybe cases in which the cache can; improve performances.; Remove call to XrdClient::Sync in SysStat. Correctly honor the create/recreate options coming from TFile::Open(); Allow the size of the (written) file to be retrieved after the Close (solves several reported file size mismatches).; . TXNetSystem:; ; Fix problem with GetDirEntry: the entry object was; going out-of-scope so; that the returned string was meaningless.; Reset; the list if dir entries in FreeDirectory.; Fix problem affecting repeated calls. The implementation of TFile throughput and info sending was; just sending 'regular' samples about the activity of the single TFile; instance that happened ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3814,Testability,log,logging,3814,"er TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/doc",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:4048,Usability,simpl,simple,4048,"of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/docz/RGLite/html/. and; http://www-linux.gsi.de/~manafov/D-Grid/docz/; ",MatchSource.DOCS,net/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v522/index.html:6,Deployability,release,release,6,. NET release notes. XROOTD. Fixes:; . Fix race condition that would disable connections; . ,MatchSource.DOCS,net/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v522/index.html:43,Performance,race condition,race condition,43,. NET release notes. XROOTD. Fixes:; . Fix race condition that would disable connections; . ,MatchSource.DOCS,net/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:1144,Availability,down,downloaded,1144,"iptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, incl",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2642,Availability,error,errorsGeneralFix,2642,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3104,Availability,failure,failure,3104,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3377,Availability,avail,available,3377,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3387,Deployability,release,releases,3387,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3666,Deployability,install,install,3666,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3782,Deployability,install,installOpenSSL,3782,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3800,Deployability,install,install,3800,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3916,Deployability,install,installOpenAFS,3916,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2051,Integrability,protocol,protocols,2051,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2076,Integrability,protocol,protocols,2076,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:152,Modifiability,variab,variable,152,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:881,Modifiability,config,configuring,881,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2416,Modifiability,flexible,flexible,2416,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:959,Performance,load,loading,959,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2164,Performance,race condition,race condition,2164,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2253,Performance,cache,cache,2253,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2477,Performance,cache,cache,2477,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2558,Performance,cache,cache,2558,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2592,Performance,cache,cache,2592,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2824,Performance,race condition,race conditions,2824,") infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verio",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3197,Performance,cache,cache,3197,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2618,Safety,detect,detection,2618,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:239,Security,authenticat,authentication,239,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:298,Security,password,password,298,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:539,Security,checksum,checksum,539,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:928,Security,authenticat,authentication,928,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:1066,Security,certificate,certificate,1066,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:1100,Security,hash,hash,1100,". Networking. Class TWebFile now supports proxies. Set the proxy URL either via; static method:; TWebFile::SetProxy(const char *url);; or via the shell variable http_proxy, like is used for e.g. wget. Class TWebFile now supports the basic authentication (AuthType Basic) scheme.; The user name and password can be specified in the URL like this:; http://username:mypasswd@pcsalo.cern.ch/files/aap.root. XROOTDNew version 20090610-0430ImprovementsAdd the possibility of using the xrd command line from; batch scriptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2042,Security,secur,security,2042,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2433,Security,authenticat,authenticationFix,2433,"loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to cr",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:2790,Security,authenticat,authenticated,2790,") infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verio",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3167,Security,certificate,certificateFix,3167,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3263,Security,password,password,3263,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3480,Security,authenticat,authentication,3480,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:3635,Security,certificate,certificate,3635,"urity protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, including a rare but fatal bug in; determining the cache holes list and the end of a cache lookupMore complete detection of async read errorsGeneralFix problem in handling the return code; of X509_REQ_verify; in XrdCryptosslX509Req.ccAvoid SEGV when doing an lsd admin command with; authenticated xrootd clientsClose race conditions that allowed a supervisor/manager; to subscribe without declaring a data port. Initialize nostage state in; XrdCmsState to prevent erroneous state declaration during; initialization.Fix a problem with the subject name of proxies of level; > 1; this was creating a failure when a Globus application was; trying to use the proxy certificateFix a problem with cache refreshing in XrdSutCache; affecting automatic reloading of password filesFor now, turn off IPV6 processing as it seems to create; several problems.Fix a few issues with the available releases of gcc 4.4Fix a few issues with the 'icc' compilerFix several issues in GSI and PWD authentication modulesNew featuresNew File Residency Manager (frm), replacement for the MPS scriptsScripts are now provided toautomatically donwload a CRL certificate; (utils/getCRLcert)install the recommended verion of OpenSSL and build it; with the options optimal for usage in XROOTD/SCALLA; (utils/installOpenSSL.sh)install the recommended verion of OpenAFS and build it; with the options optimal for usage in; XROOTD/SCALLA (utils/installOpenAFS.sh)MiscellaneaTokenAuthz and CS2 modules are no longer part of the main; built; they have to be built externally. ",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:1723,Testability,log,login,1723,"iptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, incl",MatchSource.DOCS,net/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:554,Availability,avail,available,554,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:963,Deployability,install,install,963,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1950,Deployability,install,install,1950,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1070,Energy Efficiency,reduce,reduced,1070,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1093,Energy Efficiency,consumption,consumption,1093,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1018,Modifiability,config,configure,1018,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1415,Modifiability,portab,portability,1415,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1569,Modifiability,config,configuring,1569,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:77,Performance,perform,performance,77,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:287,Performance,optimiz,optimization,287,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:646,Performance,cache,cache,646,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:698,Performance,cache,cache,698,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:747,Performance,optimiz,optimizations,747,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1118,Performance,optimiz,optimizations,1118,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1155,Performance,cache,cache,1155,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1254,Performance,optimiz,optimizations,1254,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1286,Performance,perform,performance,1286,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:217,Safety,avoid,avoiding,217,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:1497,Safety,detect,detection,1497,"mproving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem with the xrootd build when running make via 'sudo' (issue #47644). ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html:442,Security,Access,AccessPathName,442,". ; Networking. NET; ; TWebFile. Several pptimizations in TWebFile improving performance especially for TTree::Map() by about 35%. This has been achieved with a better caching strategy for request strings (especially avoiding to recalculate the auth base64 encoding), and with a drastic optimization in reading the response headers.; Fixes in the counting of the bytes read. TWebSystem. New implementation of TSystem allowing to use TSystem::AccessPathName() and GetPathInfo() to check if a web file exists and to get its size. Directory browsing is not available yet. NETX; ; TXNetFile. Several fixes and optimisations, mainly in the use of the cache; Fix an offset issue affecting the use of the cache with files in archives. TXNetSystem. A few optimizations in the use of retry mechanism, path locality checks, file online checks. XROOTD. Import a new version of XROOTD (20091202-0509); ; Fixes in bulk prepare and sync readv operations; Add support for 'make install' / 'make uninstall' and; other improvements in configure.classic; Several improvements / fixes:; ; reduced memory and CPU consumption;; extreme cp optimizations;; windows porting; new cache policies on the client side; new listing features implemented recently in the 'cns' module.; optimizations in cmsd and cnsd (performance improvements); support for openssl 1.0.0 (required by Fedora 12). Support for if/else if/else/fi constructs; Several portability fixes; ; Support 32-bit builds with icc on 64-bit platforms; Improved detection of libreadline and lib(n)curses. Increase the flexibility for configuring with an external xrootd; ; Add standard switches to disentangle lib and inc dirs;       --with-xrootd-incdir=<path_to dir_containing_XrdVersion.hh>;       --with-xrootd-libdir=<path_to_dir_containing_xrootd_plugins_and_libs>; ; When; passing a global xrootd dir with --with-xrootd, check both; src/XrdVersion.hh and include/xrootd/XrdVersion.hh so that both build; and install distributions are supported. Fix a problem ",MatchSource.DOCS,net/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v528/index.html:156,Integrability,interface,interface,156,. Networking. Xrootd; ; New version 20100913-0630; including several consolidation fixes (many due to Coverity reports); and includes the new Bonjour/Avahi interface used for worker; autodiscovery in PROOF. TMessage and TSocket; . TMessage now relies on the new interface TBuffer::TagStreamerInfo instead of TBuffer::IncrementLevel which had the disadvantage of being called not only; during writing but also during reading (where there is no need to keep track of the TStreamerInfo used).This change allows to keep the calls to IncrementLevel/DecrementLevel only in the case the buffer is a TBufferXML. The implementation of TSocket::RecvStreamerInfos has been fixed to properly handle the case where there are abstract classes (in this case GetStreamerInfo() can not be called on the abstract class until it has; been called during the processing of one of the concrete derived classes) and the case of STL containers. ,MatchSource.DOCS,net/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v528/index.html:262,Integrability,interface,interface,262,. Networking. Xrootd; ; New version 20100913-0630; including several consolidation fixes (many due to Coverity reports); and includes the new Bonjour/Avahi interface used for worker; autodiscovery in PROOF. TMessage and TSocket; . TMessage now relies on the new interface TBuffer::TagStreamerInfo instead of TBuffer::IncrementLevel which had the disadvantage of being called not only; during writing but also during reading (where there is no need to keep track of the TStreamerInfo used).This change allows to keep the calls to IncrementLevel/DecrementLevel only in the case the buffer is a TBufferXML. The implementation of TSocket::RecvStreamerInfos has been fixed to properly handle the case where there are abstract classes (in this case GetStreamerInfo() can not be called on the abstract class until it has; been called during the processing of one of the concrete derived classes) and the case of STL containers. ,MatchSource.DOCS,net/doc/v528/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v528/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:532,Availability,down,downloaded,532,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:574,Deployability,install,installation,574,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:635,Deployability,install,installation,635,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:683,Deployability,install,installxrootd,683,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:71,Integrability,wrap,wraps,71,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:234,Integrability,protocol,protocol,234,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html:96,Security,encrypt,encryption,96,". Networking Libraries; New TSSLSocket class; The new TSSLSocket class wraps a TSocket with SSL encryption. This class; is used to provide support for reading TWebFiles over https. New TUDPSocket class; The new TUDPSocket uses UDP as protocol where TSocket uses TCP. This class; can be used to talk to UDP servers. XROOTD; Starting with this version (5.32/00) Xrootd is no longer distributed with ROOT.; The package is still needed to build the modules 'netx', 'proofx' and 'proofd' and must be; provided as external. Xrootd can be downloaded from the main web site and its installation; is straightforward. A script to automatize the installation process is provided at; build/unix/installxrootd.sh ; scripts to set-up the environment at; bin/setxrd.sh and bin/setxrd.csh .; Note that the Xrootd team has dropped support for Windows,; so the Xrootd-related components of ROOT will only be built on Unices (Linux, Solaris, MacOsX).; ",MatchSource.DOCS,net/doc/v532/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v532/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:1583,Energy Efficiency,adapt,adaptive,1583,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2197,Energy Efficiency,Adapt,Adapt,2197,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:98,Integrability,interface,interface,98,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:932,Integrability,Interface,Interface,932,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:478,Modifiability,plugin,plugin,478,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:561,Modifiability,sandbox,sandbox,561,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:863,Modifiability,config,config,863,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:1583,Modifiability,adapt,adaptive,1583,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:1732,Modifiability,config,config,1732,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2185,Modifiability,plug-in,plug-in,2185,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2197,Modifiability,Adapt,Adapt,2197,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2296,Modifiability,plug-in,plug-in,2296,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2406,Modifiability,plug-in,plug-in,2406,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2442,Modifiability,config,config,2442,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:285,Performance,load,load,285,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:705,Performance,load,load,705,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:2372,Performance,load,load,2372,"n instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSlavesPerNode"",;  ""PROOF_ForceLocal"" and;  ""PROOF_PacketAsAFraction"" parameters has been changed from; Long_t to Int_t. ; TProofCondor plug-in:; ; Adapt the signatures of the main constructors of; TProofCondor and TProofPEAC; (and of the related plug-in handlers) to the one of TProof.; Add the possibility to trigger the load of a generic; TProof-derived plug-in via; a directive the xrootd config file 'xpd.proofplugin', e.g.; 'xpd.proofplugin condor:'. ",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:561,Testability,sandbox,sandbox,561,". PROOF. New functionality. ; Dataset management. ; New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the in",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:1020,Testability,log,logbox,1020," New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSl",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html:1079,Testability,log,logs,1079," New class TProofDataSetManager definining the interface; of PROOF to dataset metainfo database; New class TProofDataSetManagerFile implementating; TProofDataSetManager using the file system as back-end;  the; separation is needed to load dataset menagers using different backends;; for example ATLAS foresees to have a MySQL-based implementation.; The instance of the appropriate TProofDataSetManager is; instantiated via the plugin manager; by default an instance; of TProofDataSetManagerFile; managing the <sandbox>/datasets; area is created. The directive 'Proof.DataSetManager' can be used to; modify the settings for TProofDataSetManagerFile or to load a; different dataset manager; for example, to '/pool/datasets' as area for; the dataset information, the following directive can be added to the; xrootd config file; xpd.putrc Proof.DataSetManager file dir:/pool/datasets. Interface to TProofMgr::GetSessionLogs() in the dialog; box. The graphics layout of the logbox has been re-designed, with new; buttons to grep the logs and to save them to a file. It is also; possible to choose the range of lines to be displayed and the subset of; nodes.; ; Support for connection control base on the UNIX group; (new directive 'xpd.allowedgroups; <grp1>,<grp2>, ...'). Improvements:. ; In the case of mismatch between the expected and actual; number of processed events, send back to the client the list of failed; packets.; Implement the classic strategy of the TPacketizer in; TPacketizerAdaptive; the strategy can be changed from adaptive; (default) to TPacketizer with: ""PROOF_PacketizerStrategy"" parameter to; PROOF; The max workers per node can now be also set in the; xrootd config file with.        xpd.putrc ; Packetizer.MaxWorkersPerNode: <desired number>. Make fCacheDir and fPackageDir controllable via directive; . Fixes. ; Two memory leaks in TProofServ affecting repeated runs; withing the same session. Fix a problem cleaning-up the input list on the workers; ; The type of ""PROOF_MaxSl",MatchSource.DOCS,proof/doc/v520/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v520/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1613,Availability,fault,fault-tolerant,1613,"; Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::AddProcessed(TSlave *sl,; TProofProgressStatus *st, TList **) and TPacketizerAdaptive::ReassignPacket. ; Memory controlAdd; the possibility to display the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (master). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlogfreq)';Add; the possibility to set upper limits on the virtual memory used by; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:3322,Availability,avail,available,3322,"r). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlogfreq)';Add; the possibility to set upper limits on the virtual memory used by; processes; the session gets firts a warning when it reaches 80% of; the limit, and then processing is stopped whenit exceeds 95% of the; limit, sending back the results. Also, the memory footprint is notified; when the session is terminated. The limit in MBs is set by the; environment variable ""ROOTPROOFASSOFT"". An hard limit can be set via the; env ""ROOTPROOFASHARD"" (also in MBs): the process is automatically; killed by the system if it reaches this limit. Envs variables for the; PROOF processes can be set using the directive 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4653,Availability,error,error,4653," TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4947,Availability,error,error,4947," tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5233,Availability,avail,available,5233,"wo only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few pro",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5430,Availability,failure,failure,5430,". Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6435,Availability,failure,failure,6435,"displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6799,Availability,error,error,6799,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:8,Deployability,release,release,8,". PROOF release notes. PROOF. New functionality. PROOF-Lite2-tier; realization of PROOF intended for multi-core machines; the client; starts directly the workers; no daemon is required. To start a session; just use TProof::Open("""") or TProof::Open(""lite""). From there on; everything should be as in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new meth",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1032,Energy Efficiency,schedul,scheduling,1032,"F. New functionality. PROOF-Lite2-tier; realization of PROOF intended for multi-core machines; the client; starts directly the workers; no daemon is required. To start a session; just use TProof::Open("""") or TProof::Open(""lite""). From there on; everything should be as in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::Ad",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1334,Energy Efficiency,schedul,scheduler,1334," in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::AddProcessed(TSlave *sl,; TProofProgressStatus *st, TList **) and TPacketizerAdaptive::ReassignPacket. ; Memory controlAdd; the possibility to display the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (mast",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1003,Integrability,message,message,1003,". PROOF release notes. PROOF. New functionality. PROOF-Lite2-tier; realization of PROOF intended for multi-core machines; the client; starts directly the workers; no daemon is required. To start a session; just use TProof::Open("""") or TProof::Open(""lite""). From there on; everything should be as in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new meth",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4581,Integrability,message,messages,4581," TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4608,Integrability,message,messages,4608," TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4659,Integrability,message,messages,4659," TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5382,Integrability,message,message,5382,". Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5873,Integrability,message,messages,5873,"any text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6137,Integrability,message,messages,6137,"displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:482,Modifiability,plug-in,plug-in,482,". PROOF release notes. PROOF. New functionality. PROOF-Lite2-tier; realization of PROOF intended for multi-core machines; the client; starts directly the workers; no daemon is required. To start a session; just use TProof::Open("""") or TProof::Open(""lite""). From there on; everything should be as in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new meth",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:553,Modifiability,config,config,553,". PROOF release notes. PROOF. New functionality. PROOF-Lite2-tier; realization of PROOF intended for multi-core machines; the client; starts directly the workers; no daemon is required. To start a session; just use TProof::Open("""") or TProof::Open(""lite""). From there on; everything should be as in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new meth",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1178,Modifiability,config,config,1178,"daemon is required. To start a session; just use TProof::Open("""") or TProof::Open(""lite""). From there on; everything should be as in normal PROOF, though some functionality may; not have been ported yet. To start a standard PROOF; session (i.e. via daemons) on the localhost use; TProof::Open(""localhost"").XrdProofd plug-in. Possibility to define the list worker directly in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::AddProcessed(TSlave *sl,; TProofProgressStatus *st, TList **) and TPacketizerAdaptive::ReassignPacket. ; Memory controlAdd; the possibility t",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1600,Modifiability,Flexible,Flexible,1600,"; Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::AddProcessed(TSlave *sl,; TProofProgressStatus *st, TList **) and TPacketizerAdaptive::ReassignPacket. ; Memory controlAdd; the possibility to display the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (master). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlogfreq)';Add; the possibility to set upper limits on the virtual memory used by; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:2904,Modifiability,variab,variable,2904,"; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::AddProcessed(TSlave *sl,; TProofProgressStatus *st, TList **) and TPacketizerAdaptive::ReassignPacket. ; Memory controlAdd; the possibility to display the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (master). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlogfreq)';Add; the possibility to set upper limits on the virtual memory used by; processes; the session gets firts a warning when it reaches 80% of; the limit, and then processing is stopped whenit exceeds 95% of the; limit, sending back the results. Also, the memory footprint is notified; when the session is terminated. The limit in MBs is set by the; environment variable ""ROOTPROOFASSOFT"". An hard limit can be set via the; env ""ROOTPROOFASHARD"" (also in MBs): the process is automatically; killed by the system if it reaches this limit. Envs variables for the; PROOF processes can be set using the directive 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Im",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:3085,Modifiability,variab,variables,3085,"ignPacket. ; Memory controlAdd; the possibility to display the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (master). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlogfreq)';Add; the possibility to set upper limits on the virtual memory used by; processes; the session gets firts a warning when it reaches 80% of; the limit, and then processing is stopped whenit exceeds 95% of the; limit, sending back the results. Also, the memory footprint is notified; when the session is terminated. The limit in MBs is set by the; environment variable ""ROOTPROOFASSOFT"". An hard limit can be set via the; env ""ROOTPROOFASHARD"" (also in MBs): the process is automatically; killed by the system if it reaches this limit. Envs variables for the; PROOF processes can be set using the directive 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:3179,Modifiability,config,config,3179,"ay the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (master). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlogfreq)';Add; the possibility to set upper limits on the virtual memory used by; processes; the session gets firts a warning when it reaches 80% of; the limit, and then processing is stopped whenit exceeds 95% of the; limit, sending back the results. Also, the memory footprint is notified; when the session is terminated. The limit in MBs is set by the; environment variable ""ROOTPROOFASSOFT"". An hard limit can be set via the; env ""ROOTPROOFASHARD"" (also in MBs): the process is automatically; killed by the system if it reaches this limit. Envs variables for the; PROOF processes can be set using the directive 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset direc",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4093,Modifiability,variab,variable,4093,"ve 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; ins",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4122,Modifiability,sandbox,sandbox,4122,"ve 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; ins",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4223,Modifiability,variab,variable,4223,"ve 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; ins",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4249,Modifiability,Sandbox,Sandbox,4249," that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4350,Modifiability,sandbox,sandbox,4350,"ich are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: client",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4472,Modifiability,plug-in,plug-in,4472,"en distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more info",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4489,Modifiability,refactor,refactorization,4489," TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:1578,Performance,load,loaded,1578,"in the; xrootd config file (new directive xpd.worker, see Wiki reference pages); Support for automatic reconnections in the case xrootd; is restarted; Dedicated admin area (under <xrd.admin>/.xproofd.<port>) to; keep information about active and terminated sessions, and active; clients. This is used to reguraly check the client and session; activity, to cleanup orphalin sessions and to shutdown inactive client; connections. ; domain + level control of printout message. Dynamic ""per-query"" scheduling. Dynamic worker startup. It can be enabled by the cluster; administrator with the 'xpd.putrc Proof.DynamicStartup 1' directive; in the config file. The effect is that a session starts only on; the master. When a query is submitted (call to TProof::Process),; the session master contacts the scheduler.; In response it receives a list of workers and starts the worker; processes. The environment is copied from the master to the workers.; It consist of: the include and library paths, the set of enabled; packages as well as the macros loaded by the user. . Flexible and fault-tolerant workers. A packet resubmitting mechanism. When a worker dies all the; packets that it processed are resubmitted.; Added the possibility to handle dynamically removed workers and partly processed; packets (when a worker is stopped while processing a packet it finishes; the current event and the rest of the packet is reassigned to another workers).; It's done by a new method TPacketizerAdaptive::AddProcessed(TSlave *sl,; TProofProgressStatus *st, TList **) and TPacketizerAdaptive::ReassignPacket. ; Memory controlAdd; the possibility to display the memory footprint on workers and master as a; function of the entry processed (workers) or of the merging step; (master). A new button has been added to the PROOF dialog box to; retrieve and display the memory usage. On the workers about 100; measurements are recorded by default; this number can be changed with 'proof->SetParameter(""PROOF_MemLogFreq"", memlo",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4151,Performance,cache,cache,4151,"ve 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; ins",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4288,Performance,Cache,CacheDir,4288," the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; inste",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6245,Performance,Load,Load,6245,"displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6597,Performance,race condition,race condition,6597,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:7016,Performance,Load,Load,7016,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:7021,Performance,load,loading,7021,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4407,Safety,avoid,avoid,4407," objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4823,Safety,avoid,avoid,4823," AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is a",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6382,Safety,avoid,avoids,6382,"displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6663,Safety,Avoid,Avoid,6663,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:3930,Testability,test,tests,3930,"An hard limit can be set via the; env ""ROOTPROOFASHARD"" (also in MBs): the process is automatically; killed by the system if it reaches this limit. Envs variables for the; PROOF processes can be set using the directive 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:3939,Testability,test,test,3939,"An hard limit can be set via the; env ""ROOTPROOFASHARD"" (also in MBs): the process is automatically; killed by the system if it reaches this limit. Envs variables for the; PROOF processes can be set using the directive 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4122,Testability,sandbox,sandbox,4122,"ve 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; ins",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4249,Testability,Sandbox,Sandbox,4249," that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4350,Testability,sandbox,sandbox,4350,"ich are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: client",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4735,Testability,log,log,4735," TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4748,Testability,Log,Log,4748," set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4792,Testability,log,logs,4792," AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is a",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4876,Testability,log,log,4876," AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is a",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4881,Testability,Log,Logs,4881," tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5001,Testability,log,logs,5001,", e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; dire",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5063,Testability,Log,Log,5063,"l on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:5639,Testability,log,logged,5639,". Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6422,Testability,log,logs,6422,"displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6467,Testability,log,log,6467,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6688,Testability,log,logs,6688,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6707,Testability,log,log,6707,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:7138,Usability,Clear,ClearPackage,7138,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,proof/doc/v522/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3396,Availability,failure,failure,3396,"tives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session l",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3643,Availability,failure,failures,3643,"asks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information abo",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4093,Availability,avail,available,4093,"aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4128,Availability,avail,available,4128,"es via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to o",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4738,Availability,avail,available,4738,"he second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibil",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5396,Availability,avail,availability,5396,""") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd c",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5665,Availability,redundant,redundant,5665,"sion being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the wa",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9684,Availability,error,error,9684,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1823,Deployability,configurat,configuration,1823,"ere is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:2488,Deployability,configurat,configuration,2488,"e XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:6330,Deployability,configurat,configuration,6330,"e executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; worker",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:206,Energy Efficiency,schedul,scheduler,206,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1712,Integrability,protocol,protocol,1712,"ly 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1871,Integrability,protocol,protocol,1871,"e max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5547,Integrability,depend,dependency,5547,"different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registra",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7121,Integrability,message,messages,7121," when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full hands",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7985,Integrability,protocol,protocol,7985,"end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.;",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8058,Integrability,protocol,protocol,8058,"st of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; th",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9691,Integrability,message,message,9691,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10329,Integrability,message,message,10329,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1308,Modifiability,variab,variable,1308,"e is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1823,Modifiability,config,configuration,1823,"ere is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:2488,Modifiability,config,configuration,2488,"e XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5118,Modifiability,Extend,Extend,5118,"n the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This impro",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5901,Modifiability,config,config,5901,"emove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:6330,Modifiability,config,configuration,6330,"e executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; worker",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9381,Modifiability,sandbox,sandbox,9381,"ng of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in messag",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9609,Modifiability,config,configuring,9609,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10024,Modifiability,sandbox,sandbox,10024,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10154,Modifiability,plug-in,plug-in,10154,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:292,Performance,concurren,concurrently,292,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:349,Performance,queue,queue,349,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:616,Performance,queue,queue,616,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:637,Performance,concurren,concurrently,637,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:691,Performance,queue,queued,691,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:821,Performance,queue,queued,821,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:854,Performance,load,load-based,854,". ; PROOF. Warning. The; classes; TProofDataSetManager; and TProofDataSetManagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' direct",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5447,Performance,Load,Load,5447,"of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:6625,Performance,Optimiz,Optimize,6625,"liminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at t",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7033,Performance,perform,performance,7033,"rashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication pr",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8329,Performance,load,loading,8329,"s' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFil",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8749,Performance,cache,cache,8749," temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file ret",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9777,Performance,cache,cache,9777,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1018,Safety,avoid,avoid,1018,"anagerFile have been renamed; TDataSetManager; and TDataSetManagerFile. New; functionality. Add support for session; queuing in the scheduler. This; allows to control the number of sessions allowed to process queries; concurrently. The feature is enabled by a new parameter 'queue:fifo' in; the 'xpd.schedparam'; directive. In case of static worker assignment; (default, random,; round-robin) the max number of running sessions can be limited by; another new parameter 'mxrun';; for; example;            ;     xpd.schedparam default; mxrun:3 queue:fifo; will run concurrently only 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:2089,Safety,avoid,avoids,2089,"pd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to def",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:2631,Safety,avoid,avoid,2631,"e specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF ses",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3085,Safety,abort,aborting,3085,"d support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5665,Safety,redund,redundant,5665,"sion being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the wa",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7528,Safety,timeout,timeout,7528,"o fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynam",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7859,Safety,avoid,avoid,7859,"B; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the;",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8158,Safety,avoid,avoid,8158,"till 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causin",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3334,Security,validat,validation,3334,"rl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3631,Security,validat,validation,3631,"asks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information abo",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7970,Security,authenticat,authentication,7970,"end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.;",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8444,Security,validat,validation,8444,"s ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9439,Security,validat,validation,9439,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:2683,Testability,test,test,2683,"e specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF ses",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3307,Testability,log,logs,3307,"rl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3345,Testability,test,tests,3345,"rl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3373,Testability,test,test,3373,"rl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3440,Testability,log,log,3440,"tives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session l",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3514,Testability,log,log,3514,"ow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a differen",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4119,Testability,log,logs,4119,"es via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to o",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4180,Testability,log,log,4180,"es via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to o",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4388,Testability,Log,LogViewer,4388,"ag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given datas",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4445,Testability,log,logs,4445,"ag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given datas",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4502,Testability,log,log,4502,"ld; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server v",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5804,Testability,test,tested,5804,"proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:6115,Testability,log,logs,6115," 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to comp",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:6213,Testability,log,log,6213,"server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7490,Testability,assert,asserts,7490,"o fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynam",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8136,Testability,test,test,8136,"ntrolled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing c",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8629,Testability,log,log,8629,"reate directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configu",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9381,Testability,sandbox,sandbox,9381,"ng of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in messag",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10024,Testability,sandbox,sandbox,10024,"as de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creati",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10087,Testability,log,log,10087,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10101,Testability,log,log,10101,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10459,Testability,log,log,10459,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10667,Testability,log,logs,10667,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:1591,Usability,simpl,simplifies,1591,"ly 3 sessions. Additional requests are queued; and run as soon as one of the running; sessions goes idle. The current policy is FIFO, so that there is a; rotation among queued; sessions. In the case of load-based worker assignment, the max number; of running; queries is determined dynamically.; Add support for repeat functionality in the xrd.worker; directive. To avoid repeating the same line N times; one can just add; 'repeat=N'; in the line; for; example;            ;     xpd.worker worker; proofwrks:2093 repeat=4; will define 4 workers on port 2093 of machine 'proofwrks'.; Add support for port specification via the directive; 'xpd.port'; Enable variable; substitution in 'xpd.' directives using the standard; Scalla mechanism described in; http://xrootd.slac.stanford.edu/doc/dev/Syntax_config.htm .; Build also a binary named 'xproofd' which runs; a xrootd; daemon with only the XrdProofdProtocol (i.e. no data serving).; This simplifies setups when data serving is not needed and also allows; to better disantagle problems related to one specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5599,Usability,simpl,simplification,5599,"sion being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the wa",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9247,Usability,feedback,feedback,9247,"d possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local",MatchSource.DOCS,proof/doc/v524/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:157,Availability,down,download,157,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:689,Availability,avail,available,689,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6246,Availability,error,error,6246,"sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. com",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:1190,Deployability,toggle,toggle,1190,"; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-me",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5818,Deployability,update,updated,5818,"etter; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey op",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:9094,Deployability,integrat,integration,9094,"e end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present and valid. TProofPlayerSlave. In; Process, fix a problem with cache directory locking while building; the selector;  the net effect was that each worker process was; re-buidling its own selector binary. . TProofServ; Fix; the order in which the log file is sent in asynchronous processing; the; wrong order was screwing up an immediate synchronous query submission; after an asynchronous run; this case occured, for example, in; 'stressProof' . ",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:4626,Energy Efficiency,monitor,monitoring,4626,"t from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/act",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5033,Energy Efficiency,monitor,monitor,5033,"e definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and t",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5375,Energy Efficiency,monitor,monitoring,5375,"ied as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to mas",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5515,Energy Efficiency,monitor,monitoring,5515,"ied as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to mas",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6043,Energy Efficiency,adapt,adapting,6043,"che; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeate",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6144,Integrability,synchroniz,synchronization,6144,"sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. com",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6269,Integrability,message,messages,6269,"sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. com",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:8306,Integrability,wrap,wrapper,8306,"utputFile. Fix a problem with the determination of the fDir member; affecting mostly PROOF-Lite; Fix a serious issue whose net effect was to delete the; outputfile just after having open it. XrdProofd plugin. Make sure that the limit on the number of old; sessions is applied whenever a new session is started and not only when; the daemon is started.; Fix the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valg",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:9094,Integrability,integrat,integration,9094,"e end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present and valid. TProofPlayerSlave. In; Process, fix a problem with cache directory locking while building; the selector;  the net effect was that each worker process was; re-buidling its own selector binary. . TProofServ; Fix; the order in which the log file is sent in asynchronous processing; the; wrong order was screwing up an immediate synchronous query submission; after an asynchronous run; this case occured, for example, in; 'stressProof' . ",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:87,Modifiability,sandbox,sandbox,87,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:122,Modifiability,sandbox,sandbox,122,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:3378,Modifiability,variab,variable,3378,". An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetParameter(""PROOF_UseMergers"", 0). To force S sub-mergers (regardless of the optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; T",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:4061,Modifiability,plugin,plugin,4061,"roof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the c",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6043,Modifiability,adapt,adapting,6043,"che; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeate",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6127,Modifiability,plug-in,plug-in,6127,"che; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeate",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:7145,Modifiability,sandbox,sandbox,7145,"ache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. compiled selectors in PROOF-Lite. TProofOutputFile. Fix a problem with the determination of the fDir member; affecting mostly PROOF-Lite; Fix a serious issue whose net effect was to delete the; outputfile just after having open it. XrdProofd plugin. Make sure that the limit on the number of old; sessions is applied whenever a new session is started and not only when; the daemon is started.; Fix the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; I",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:7446,Modifiability,plugin,plugin,7446,"r if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. compiled selectors in PROOF-Lite. TProofOutputFile. Fix a problem with the determination of the fDir member; affecting mostly PROOF-Lite; Fix a serious issue whose net effect was to delete the; outputfile just after having open it. XrdProofd plugin. Make sure that the limit on the number of old; sessions is applied whenever a new session is started and not only when; the daemon is started.; Fix the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the def",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:9034,Modifiability,variab,variable,9034,"e end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present and valid. TProofPlayerSlave. In; Process, fix a problem with cache directory locking while building; the selector;  the net effect was that each worker process was; re-buidling its own selector binary. . TProofServ; Fix; the order in which the log file is sent in asynchronous processing; the; wrong order was screwing up an immediate synchronous query submission; after an asynchronous run; this case occured, for example, in; 'stressProof' . ",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:617,Performance,cache,cache,617,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:773,Performance,cache,cache,773,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:828,Performance,Cache,Cache,828,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:907,Performance,cache,cache,907,"; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-me",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:1041,Performance,cache,cache,1041,"; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-me",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:2349,Performance,perform,performance,2349,"     ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-merger has merged its sub-set of workers, it sends its result to; the master, which merges the partial results into the final; set of results.; The determination of the sub-mergers is always done dynamically, based; on the recent performance of workers. An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetParameter(""PROOF_UseMergers"", 0). To force S sub-mergers (regardless of the optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to c",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:3659,Performance,optimiz,optimization,3659," optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of t",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:4614,Performance,perform,performance,4614,"t from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/act",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:4698,Performance,Perform,Performance,4698,"t from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/act",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5058,Performance,cache,cache,5058,"e definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and t",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5224,Performance,concurren,concurrently,5224," the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of the processing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve err",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5795,Performance,queue,queued,5795,"rocessing time:. Instantaneous processing rate, which is now better; estimated by a better estimation of the normalizing times; Average read chunck size, defined as; TFile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak whe",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6014,Performance,cache,cache,6014,"che; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeate",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6081,Performance,cache,cache,6081,"che; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeate",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6199,Performance,Optimiz,Optimize,6199,"sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. com",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:7884,Performance,Optimiz,Optimize,7884,"; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. compiled selectors in PROOF-Lite. TProofOutputFile. Fix a problem with the determination of the fDir member; affecting mostly PROOF-Lite; Fix a serious issue whose net effect was to delete the; outputfile just after having open it. XrdProofd plugin. Make sure that the limit on the number of old; sessions is applied whenever a new session is started and not only when; the daemon is started.; Fix the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; n",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:8402,Performance,cache,cache,8402,"having open it. XrdProofd plugin. Make sure that the limit on the number of old; sessions is applied whenever a new session is started and not only when; the daemon is started.; Fix the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; al",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:9390,Performance,Load,Load,9390,"e end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present and valid. TProofPlayerSlave. In; Process, fix a problem with cache directory locking while building; the selector;  the net effect was that each worker process was; re-buidling its own selector binary. . TProofServ; Fix; the order in which the log file is sent in asynchronous processing; the; wrong order was screwing up an immediate synchronous query submission; after an asynchronous run; this case occured, for example, in; 'stressProof' . ",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:9664,Performance,cache,cache,9664,"e end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present and valid. TProofPlayerSlave. In; Process, fix a problem with cache directory locking while building; the selector;  the net effect was that each worker process was; re-buidling its own selector binary. . TProofServ; Fix; the order in which the log file is sent in asynchronous processing; the; wrong order was screwing up an immediate synchronous query submission; after an asynchronous run; this case occured, for example, in; 'stressProof' . ",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:6463,Safety,abort,aborted,6463,"monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. compiled selectors in PROOF-Lite. TProofOutputFile. Fix a problem with the determination of the fDir member; affecting mostly PROOF-Lite; Fix a serious issue whose net effe",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:3679,Security,hash,hashing,3679," optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround for the wrong TTreeCache initialization at the; transition between local and remote files fixed in 5.24/00 . Enable mass storage domain settings when working with; TChain's; in multi-master mode. The Mass Storage Domain must be specified as; option in the URL.              ; chain.AddFile(""root:// .....?msd=CERN"").  and the string must match the value specified in defining the; submaster node.; Improved performance monitoring: the 'Rate plot' button; in the dialog box has been renamed 'Performance Plot' and now shows up; to 4 plots as a function of t",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:5966,Security,access,access,5966,"ile::GetFileBytesRead() / TFile::GetFileReadCalls() during the last; unit of time; this allows to monitor the usage of the cache; this plot; is present only if some I/O is done, i.e. not for pure CPU tasks.; The number of active workers; The number of total and effecive sessions running; concurrently on the cluster (started by the same daemon); this plot is; present only is the number is at least onec different from 1. If enabled, send monitoring information from the master; at each GetNextPacket (at each call of TPerfStat::PacketEvent) to allow; extrnal real-time progress monitoring.; Save the status of a 'proofserv' session into a new file; in the 'activesessions' area. The full path of the new file is;          ; <admin_path>/.xproofd.<port>/activesessions/<user>.<group>.<pid>.status. The status indicates whether the session is idle, running or queued.; The status is updated every 'checkfq' secs (see xpd.proofservmgr;; default 30 s). The status is dumped by the reader thread of TXProofServ; and therefore its r/w access is protected. Enable the use of the tree cache also for local files,; adapting the default settings for the cache to the recent changes; In the XrdProofd plug-in. Improve synchronization between parent and child during; fork; Optimize loops over directory entries; Improve error and notification messages. Improved handling of Ctrl-C; this follows from a fix in; TMonitor and an improved handling of non-finished query state in the; workers (results are not send to master if the query was aborted) . Fixes. TFileMerger. Fix a problem preventing correct transmission of all; non-mergeable objects (fixes bug #52886); Remove the argument isdir from the function; MergeRecursive; Do not remove the first file in the list when returning; from MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; ",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:7713,Security,password,password,7713," MergeRecursive (fixes bug #54591); Fix a major leak when merging files with collections; written using kSingleKey option.  The merger was reading each; key in memory and deleted the object at the end, but the container is; not owner by default, so all objects inside leaked. PROOF-Lite. Fix a couple of memory leaks showing up when running; repeated queries; Fix a problem in TProofServ::CopyFromCache affecting; the case where the sandbox dir has a '.' and the macro name has no '.',; e.g. compiled selectors in PROOF-Lite. TProofOutputFile. Fix a problem with the determination of the fDir member; affecting mostly PROOF-Lite; Fix a serious issue whose net effect was to delete the; outputfile just after having open it. XrdProofd plugin. Make sure that the limit on the number of old; sessions is applied whenever a new session is started and not only when; the daemon is started.; Fix the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacke",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:8619,Security,validat,validation,8619," the behaviour of the xpd.allowedusers directive: if; at least one of these directives is present, users in the password file; are not allowed by default but must be explicitly appear in one; xpd.allowedusers directive  ; Fix a source for memory leak in; XrdProofdProtocol::SendMsg; Optimize the usage of strings in a few places. DataSet manager. Correctly classify as TTree all TTree derived classes; (e.g. TNtuple's); Fix a problem in saving the end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:87,Testability,sandbox,sandbox,87,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:122,Testability,sandbox,sandbox,122,". ; Proof. New functionality. TProofMgr. Add support for the following functionality:. sandbox file listing and browsing; sandbox file removal; file upload, download. TProofDraw. Allow to set a color, size, size, width for lines,; area, markers; the attributes are transmitted via the input list and; automatically derived from the ones of the chain. Support automatic creation of a dataset out of files; created on the worker nodes by worker processes. The implementation is; an extension of the functionality of the class TProofOutputFile used; for merging via file.; Add the possibility to enable/disable the tree cache and; to change its size on per-query base; two new parameters are available:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the e",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:1705,Testability,test,tests,1705,"ilable:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-merger has merged its sub-set of workers, it sends its result to; the master, which merges the partial results into the final; set of results.; The determination of the sub-mergers is always done dynamically, based; on the recent performance of workers. An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetPara",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:2879,Testability,test,tested,2879,"oof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-merger has merged its sub-set of workers, it sends its result to; the master, which merges the partial results into the final; set of results.; The determination of the sub-mergers is always done dynamically, based; on the recent performance of workers. An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetParameter(""PROOF_UseMergers"", 0). To force S sub-mergers (regardless of the optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutpu",MatchSource.DOCS,proof/doc/v526/index.html,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html
