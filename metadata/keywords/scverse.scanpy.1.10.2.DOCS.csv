quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Availability,avail,available,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",MatchSource.DOCS,CONTRIBUTING.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md
Testability,log,logging,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",MatchSource.DOCS,CONTRIBUTING.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md
Usability,guid,guide,"Contributing; ============. Contributions to Scanpy are highly welcome!. Before filing an issue; ----------------------; * Search the repository (also google) to see if someone has already reported the same issue.; This allows contributors to spend less time responding to issues, and more time adding new features!; * Please provide a minimal complete verifiable example for any bug.; If you're not sure what this means, check out; [this blog post](https://matthewrocklin.com/minimal-bug-reports); by Matthew Rocklin or [this definition](https://stackoverflow.com/help/mcve) from StackOverflow.; * Let us know about your environment. Environment information is available via: `sc.logging.print_versions()`. Contributing code; -----------------. We love code contributions!; If you're interested in contributing code, please take a look over the [contribution guide](https://scanpy.readthedocs.io/en/latest/dev/index.html) in the main documentation.; ",MatchSource.DOCS,CONTRIBUTING.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/CONTRIBUTING.md
Energy Efficiency,power,powered,"b/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://n",MatchSource.DOCS,README.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md
Performance,scalab,scalable,"roject/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""cent",MatchSource.DOCS,README.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md
Testability,log,logo,"[![Stars](https://img.shields.io/github/stars/scverse/scanpy?style=flat&logo=GitHub&color=yellow)](https://github.com/scverse/scanpy/stargazers); [![PyPI](https://img.shields.io/pypi/v/scanpy?logo=PyPI)](https://pypi.org/project/scanpy); [![Downloads](https://static.pepy.tech/badge/scanpy)](https://pepy.tech/project/scanpy); [![Conda](https://img.shields.io/conda/dn/conda-forge/scanpy?logo=Anaconda)](https://anaconda.org/conda-forge/scanpy); [![Docs](https://readthedocs.com/projects/icb-scanpy/badge/?version=latest)](https://scanpy.readthedocs.io); [![Build Status](https://dev.azure.com/scverse/scanpy/_apis/build/status/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fisca",MatchSource.DOCS,README.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md
Usability,guid,guide,"atus/scverse.scanpy?branchName=main)](https://dev.azure.com/scverse/scanpy/_build); [![Discourse topics](https://img.shields.io/discourse/posts?color=yellow&logo=discourse&server=https%3A%2F%2Fdiscourse.scverse.org)](https://discourse.scverse.org/); [![Chat](https://img.shields.io/badge/zulip-join_chat-%2367b08f.svg)](https://scverse.zulipchat.com); [![Powered by NumFOCUS](https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A)](https://numfocus.org/). # Scanpy – Single-Cell Analysis in Python. Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with [anndata][]. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells. Discuss usage on the scverse [Discourse][]. Read the [documentation][].; If you'd like to contribute by opening an issue or creating a pull request, please take a look at our [contribution guide][]. [anndata]: https://anndata.readthedocs.io; [discourse]: https://discourse.scverse.org/; [documentation]: https://scanpy.readthedocs.io. [//]: # (numfocus-fiscal-sponsor-attribution). scanpy is part of the scverse project ([website](https://scverse.org), [governance](https://scverse.org/about/roles)) and is fiscally sponsored by [NumFOCUS](https://numfocus.org/).; If you like scverse and want to support our mission, please consider making a [donation](https://numfocus.org/donate-to-scverse) to support our efforts. <div align=""center"">; <a href=""https://numfocus.org/project/scverse"">; <img; src=""https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png""; width=""200""; >; </a>; </div>. ## Citation. If you use `scanpy` in your work, please cite the `scanpy` publication as follows:. > **SCANPY: large-scale single-cell gene expression data analysis**; >; > F. Alexander Wolf, Philipp Angerer, Fabian J. T",MatchSource.DOCS,README.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/README.md
Deployability,release,release,<!--; Thanks for opening a PR to scanpy!; Please be sure to follow the guidelines in our contribution guide (https://scanpy.readthedocs.io/en/latest/dev/index.html) to familiarize yourself with our workflow and speed up review.; -->. <!-- Please check (“- [x]”) and fill in the following boxes -->; - [ ] Closes #; - [ ] Tests included or not required because:; <!-- Only check the following box if you did not include release notes -->; - [ ] Release notes not necessary because:; ,MatchSource.DOCS,.github/pull_request_template.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.github/pull_request_template.md
Usability,guid,guidelines,<!--; Thanks for opening a PR to scanpy!; Please be sure to follow the guidelines in our contribution guide (https://scanpy.readthedocs.io/en/latest/dev/index.html) to familiarize yourself with our workflow and speed up review.; -->. <!-- Please check (“- [x]”) and fill in the following boxes -->; - [ ] Closes #; - [ ] Tests included or not required because:; <!-- Only check the following box if you did not include release notes -->; - [ ] Release notes not necessary because:; ,MatchSource.DOCS,.github/pull_request_template.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.github/pull_request_template.md
Testability,benchmark,benchmarking,# Scanpy Benchmarks. This directory contains code for benchmarking Scanpy using [asv][]. The functionality is checked using the [`benchmark.yml`][] workflow.; Benchmarks are run using the [benchmark bot][]. [asv]: https://asv.readthedocs.io/; [`benchmark.yml`]: ../.github/workflows/benchmark.yml; [benchmark bot]: https://github.com/apps/scverse-benchmark; ,MatchSource.DOCS,benchmarks/README.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/benchmarks/README.md
Usability,guid,guidance,"# Contributors. [anndata graph](https://github.com/scverse/anndata/graphs/contributors>) | [scanpy graph](https://github.com/scverse/scanpy/graphs/contributors)| ☀ = maintainer; ## Current developers. - [Isaac Virshup](https://github.com/ivirshup), lead developer since 2019 ☀; - [Gökcen Eraslan](https://twitter.com/gokcen), developer, diverse contributions ☀; - [Sergei Rybakov](https://github.com/Koncopd), developer, diverse contributions ☀; - [Fidel Ramirez](https://github.com/fidelram) developer, plotting ☀; - [Giovanni Palla](https://twitter.com/g_palla1), developer, spatial data; - [Malte Luecken](https://twitter.com/MDLuecken), developer, community & forum; - [Lukas Heumos](https://twitter.com/LukasHeumos), developer, diverse contributions; - [Philipp Angerer](https://github.com/flying-sheep), developer, software quality, initial anndata conception ☀. ## Other roles. - [Alex Wolf](https://twitter.com/falexwolf): lead developer 2016-2019, initial anndata & scanpy conception; - [Fabian Theis](https://twitter.com/fabian_theis) & lab: enabling guidance, support and environment. ## Former developers. - Tom White: developer 2018-2019, distributed computing; ",MatchSource.DOCS,docs/contributors.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/contributors.md
Deployability,integrat,integrate,"oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U",MatchSource.DOCS,docs/ecosystem.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md
Integrability,integrat,integrate,"oject` {small}`Harvard Med`; - [vitessce](https://github.com/vitessce/vitessce#readme) for purely browser based viewing of zarr formatted AnnData files {smaller}`Harvard Med`. ## Portals. - the [Gene Expression Analysis Resource](https://umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`U",MatchSource.DOCS,docs/ecosystem.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md
Modifiability,flexible,flexible,"### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {small}`UC Irvine`. > Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`",MatchSource.DOCS,docs/ecosystem.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md
Performance,perform,performing,"//umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {sma",MatchSource.DOCS,docs/ecosystem.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md
Security,access,accessible,"//umgear.org/) {small}`U Maryland`; - the [Galaxy Project](https://humancellatlas.usegalaxy.eu) for the Human Cell Atlas [\[tweet\]](https://twitter.com/ExpressionAtlas/status/1151797848469626881) {small}`U Freiburg`; - the [Expression Atlas](https://www.ebi.ac.uk/gxa/sc/help.html) {small}`EMBL-EBI`. ## Modalities. ### RNA velocity. - [scVelo](https://scvelo.org) {small}`Helmholtz Munich`. ### Spatial Transcriptomics Tools. - [squidpy](https://squidpy.readthedocs.io/en/stable/) {small}`Helmholtz Munich`. > Squidpy is a comprehensive toolkit for working with spatial single cell omics data. - [PASTE](https://github.com/raphael-group/paste) {small}`Princeton`. > PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. - [bento](https://bento-tools.readthedocs.io/en/latest/) 🍱 {small}`UC San Diego`. > Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. ### Multimodal integration. - [MUON](https://muon.readthedocs.io/en/latest/) and [MuData](https://mudata.readthedocs.io/en/latest/) {small}`EMBL/ DKFZ`. > MUON, and it's associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; > MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. ### Adaptive immune receptor repertoire (AIRR). - [scirpy](https://github.com/icbi-lab/scirpy) {small}`Medical University of Innsbruck`. > scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. - [dandelion](https://github.com/zktuong/dandelion) {small}`University of Cambridge`. > dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. ### Long reads. - [Swan](https://freese.gitbook.io/swan/tutorials/data_processing) {sma",MatchSource.DOCS,docs/ecosystem.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md
Usability,learn,learns,"zation of transcriptomes, especially with long-read transcriptomes in mind.; > Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. ## Analysis methods. ### scvi-tools. - [scvi-tools](https://github.com/YosefLab/scvi-tools) {small}`Berkeley`. > scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; > omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. ### Fate mapping. - [CellRank](https://cellrank.org) {small}`Helmholtz Munich`. > CellRank is a framework to uncover cellular dynamics based on single-cell data.; > It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. ### Differential expression. - [diffxpy](https://github.com/theislab/diffxpy) {small}`Helmholtz Munich`. ### Data integration. - [scanaroma](https://github.com/brianhie/scanorama) {small}`MIT`. ### Modeling perturbations. - [scGen](https://github.com/theislab/scgen) / [trVAE](https://github.com/theislab/trvae) {small}`Helmholtz Munich`. ### Feature selection. - [triku 🦔](https://gitlab.com/alexmascension/triku) {small}`Biodonostia Health Research Institute`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) {small}`Helmholtz Munich`. > CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. ### Annotation/ Enrichment Analysis. Analyses using curated prior knowledge. - [decoupler](https://github.com/saezlab/decoupler-py) is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. {small}`Institute for Computational Biomedicine, Heidelberg University`; - [Cubé](https://github.com/connerlambden/Cube) {small}`Harvard University`. > Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns.; ",MatchSource.DOCS,docs/ecosystem.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/ecosystem.md
Deployability,install,installation,```{include} ../README.md; :end-before: '## Citation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; ,MatchSource.DOCS,docs/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md
Usability,guid,guide,```{include} ../README.md; :end-before: '## Citation'; ```. ```{eval-rst}; .. role:: small; ```. ```{eval-rst}; .. role:: smaller; ```. ::::{grid} 1 2 3 3; :gutter: 2. :::{grid-item-card} Installation {octicon}`plug;1em;`; :link: installation; :link-type: doc. New to *scanpy*? Check out the installation guide.; :::. :::{grid-item-card} Tutorials {octicon}`play;1em;`; :link: tutorials/index; :link-type: doc. The tutorials walk you through real-world applications of scanpy.; :::. :::{grid-item-card} API reference {octicon}`book;1em;`; :link: api/index; :link-type: doc. The API reference contains a detailed description of; the scanpy API.; :::. :::{grid-item-card} Discussion {octicon}`megaphone;1em;`; :link: https://discourse.scverse.org. Need help? Reach out on our forum to get your questions answered!; :::. :::{grid-item-card} GitHub {octicon}`mark-github;1em;`; :link: https://github.com/scverse/scanpy. Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments.; :::; ::::. **Other resources**. * Follow changes in the {ref}`release notes <release-notes>`.; * Find tools that harmonize well with anndata & Scanpy at [scverse.org/packages/](https://scverse.org/packages/); * Check out our {ref}`contribution guide <contribution-guide>` for development practices.; * Consider citing [Genome Biology (2018)] along with original {doc}`references <references>`. ## News. ```{include} news.md; :start-after: '<!-- marker: after prelude -->'; :end-before: '<!-- marker: before old news -->'; ```. {ref}`(past news) <News>`. % put references first so all references are resolved. % NO! there is a particular meaning to this sequence. ```{toctree}; :hidden: true; :maxdepth: 1. installation; tutorials/index; usage-principles; how-to/index; api/index; external/index; ecosystem; release-notes/index; community; news; dev/index; contributors; references; ```. [contribution guide]: dev/index.md; [genome biology (2018)]: https://doi.org/10.1186/s13059-017-1382-0; ,MatchSource.DOCS,docs/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/index.md
Availability,error,error,"iden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a un",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Deployability,install,installation,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Integrability,depend,dependencies," Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/b",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Modifiability,variab,variables,"y; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled packages on Christoph Gohlke’s [unofficial binaries].; Download those and install them using `pip install ./path/to/file.whl`. (conda)=. ## Installing Miniconda. After downloading [Miniconda], in a unix shell (Linux, Mac), run. ```shell; cd DOWNLOAD_DIR; chmod +x Miniconda3-latest-VERSION.sh; ./Miniconda3-latest-VERSION.sh; ```. and accept all suggestions.; Either reopen a new terminal or `source ~/.bashrc` on Linux/ `source ~/.bash_profile` on Mac.; The whole process takes just a couple of minutes. [bioconda]: https://bioconda.github.io/; [compiling igraph]: https://stackov",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Security,access,access,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Testability,test,test,"# Installation. ## Anaconda. If you do not have a working installation of Python 3.6 (or later), consider; installing [Miniconda] (see [Installing Miniconda]). Then run:. ```shell; conda install -c conda-forge scanpy python-igraph leidenalg; ```. Pull Scanpy from [PyPI](https://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/C",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Usability,guid,guide,"tps://pypi.org/project/scanpy) (consider using `pip3` to access Python 3):. ```shell; pip install scanpy; ```. ## PyPI only. If you prefer to exclusively use PyPI run:. ```shell; pip install 'scanpy[leiden]'; ```. The extra `[leiden]` installs two packages that are needed for popular; parts of scanpy but aren't requirements: [igraph] {cite:p}`Csardi2006` and [leiden] {cite:p}`Traag2019`. (dev-install-instructions)=. ## Development Version. To work with the latest version [on GitHub]: clone the repository and `cd` into its root directory. ```shell; gh repo clone scverse/scanpy; cd scanpy; ```. If you are using `pip>=21.3`, an editable install can be made:. ```shell; pip install -e '.[dev,test]'; ```. If you want to let [conda] handle the installations of dependencies, do:. ```shell; pipx install beni; beni pyproject.toml > environment.yml; conda env create -f environment.yml; conda activate scanpy; pip install -e '.[dev,doc,test]'; ```. For instructions on how to work with the code, see the {ref}`contribution guide <contribution-guide>`. ## Docker. If you're using [Docker], you can use e.g. the image [gcfntnu/scanpy] from Docker Hub. ## Troubleshooting. If you get a `Permission denied` error, never use `sudo pip`. Instead, use virtual environments or:. ```shell; pip install --user scanpy; ```. **On MacOS**, if **not** using `conda`, you might need to install the C core of igraph via homebrew first. - `brew install igraph`. - If igraph still fails to install, see the question on [compiling igraph].; Alternatively consider installing gcc via `brew install gcc --without-multilib`; and exporting the required variables:. ```shell; export CC=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; export CXX=""/usr/local/Cellar/gcc/X.x.x/bin/gcc-X""; ```. where `X` and `x` refers to the version of `gcc`;; in my case, the path reads `/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6`. **On Windows**, there also often problems installing compiled packages such as `igraph`,; but you can find precompiled ",MatchSource.DOCS,docs/installation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/installation.md
Availability,avail,available,"(News)=. ## News. ```{eval-rst}; .. role:: small. ```. <!-- marker: after prelude -->. ### `rapids-singlecell` brings scanpy to the GPU! {small}`2024-03-18`. {doc}`rapids-singlecell <rapids_singlecell:index>` by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. ### Scanpy hits 100 contributors! {small}`2022-03-31`. [100 people have contributed to Scanpy's source code!](https://github.com/scverse/scanpy/graphs/contributors). Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it's helped them accomplish. Thanks to all our contributors for making this project possible!. ### New community channels {small}`2022-03-31`. We've moved our forums and have a new publicly available chat!. * Our discourse forum has migrated to a joint scverse forum ([discourse.scverse.org](https://discourse.scverse.org)).; * Our private developer Slack has been replaced by a public Zulip chat ([scverse.zulipchat.com](https://scverse.zulipchat.com)). ### Toolkit for spatial (squidpy) and multimodal (muon) published {small}`2022-02-01`. Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. * [Muon](https://muon.readthedocs.io/), a framework for multimodal has been published in [Genome Biology](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02577-8).; * [Squidpy](https://squidpy.readthedocs.io/) a toolkit for working with spatial single cell data has been published in [Nature Methods](https://www.nature.com/articles/s41592-021-01358-2). <!-- marker: before old news -->. ### scVelo on the cover of Nature Biotechnology {small}`2020-12-01`. Scanpy's counterpart for RNA velocity, [scVelo](https://scvelo.org/), made it on the cover of [Nature Biotechnology](https://www.nature.com/nbt/volumes/38/issu",MatchSource.DOCS,docs/news.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md
Modifiability,extend,extending,"ts 100 contributors! {small}`2022-03-31`. [100 people have contributed to Scanpy's source code!](https://github.com/scverse/scanpy/graphs/contributors). Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it's helped them accomplish. Thanks to all our contributors for making this project possible!. ### New community channels {small}`2022-03-31`. We've moved our forums and have a new publicly available chat!. * Our discourse forum has migrated to a joint scverse forum ([discourse.scverse.org](https://discourse.scverse.org)).; * Our private developer Slack has been replaced by a public Zulip chat ([scverse.zulipchat.com](https://scverse.zulipchat.com)). ### Toolkit for spatial (squidpy) and multimodal (muon) published {small}`2022-02-01`. Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. * [Muon](https://muon.readthedocs.io/), a framework for multimodal has been published in [Genome Biology](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02577-8).; * [Squidpy](https://squidpy.readthedocs.io/) a toolkit for working with spatial single cell data has been published in [Nature Methods](https://www.nature.com/articles/s41592-021-01358-2). <!-- marker: before old news -->. ### scVelo on the cover of Nature Biotechnology {small}`2020-12-01`. Scanpy's counterpart for RNA velocity, [scVelo](https://scvelo.org/), made it on the cover of [Nature Biotechnology](https://www.nature.com/nbt/volumes/38/issues/12) \[[tweet](https://twitter.com/NatureBiotech/status/1334647540030070792)\]. ### Scanpy selected among 20 papers for 20 years of Genome Biology {small}`2020-08-01`. [Genome Biology: Celebrating 20 Years of Genome Biology](https://genomebiology.biomedcentral.com/20years) selected the initial Scanpy paper for",MatchSource.DOCS,docs/news.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md
Usability,learn,learn,", and the CZI distribute datasets related to COVID-19 via anndata's `h5ad` files: [covid19cellatlas.org](https://www.covid19cellatlas.org/). It wasn't anticipated that the [initial idea](https://falexwolf.de/blog/2017-12-23-anndata-indexing-views-HDF5-backing/) of sharing and backing an on-disk representation of `AnnData` would become so widely adopted. Curious? Read up more on the [format](https://anndata.readthedocs.io/en/latest/fileformat-prose.html). ### Scanpy featured in Nature Biotechnoloogy {small}`2020-02-01`. [Single-cell RNA-seq analysis software providers scramble to offer solutions](https://www.nature.com/articles/s41587-020-0449-8) mentions Scanpy along with Seurat as the two major open source software packages for single-cell analysis \[[pdf](https://rdcu.be/b2M5l)\]. ### Scanpy has been selected an ""Essential open source software for science"" by CZI {small}`2019-11-14`. Scanpy has been selected an [essential open source software for science] by; CZI among [32 projects], along with giants such as Scipy, Numpy, Pandas,; Matplotlib, scikit-learn, scikit-image/plotly, pip, jupyterhub/binder,; Bioconda, Seurat, Bioconductor, and others. ### Nature Biotechnology: A comparison of single-cell trajectory inference methods {small}`2019-04-01`. [Nature Biotechnology](https://www.nature.com/articles/s41587-019-0071-9) reviews more than 70 TI tools and ranks PAGA as the best graph-based trajectory inference method, and overall, among the top 3. ### Science “Breakthrough of the Year 2018” {small}`2018-12-01`. The Science “Breakthrough of the Year 2018”, [Development cell by cell](https://vis.sciencemag.org/breakthrough2018/finalists/#cell-development), mentions the first application of PAGA {cite:p}`Plass2018` among 5 papers. [32 projects]: https://chanzuckerberg.com/eoss/proposals/; [essential open source software for science]: https://chanzuckerberg.com/newsroom/chan-zuckerberg-initiative-awards-5-million-for-open-source-software-projects-essential-to-science/; ",MatchSource.DOCS,docs/news.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/news.md
Deployability,configurat,configuration,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",MatchSource.DOCS,docs/usage-principles.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md
Energy Efficiency,efficient,efficient,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",MatchSource.DOCS,docs/usage-principles.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md
Modifiability,variab,variables,"# Usage Principles. Import Scanpy as:. ```; import scanpy as sc; ```. ## Workflow. The typical workflow consists of subsequent calls of data analysis tools; in `sc.tl`, e.g.:. ```; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP; ```. where `adata` is an {class}`~anndata.AnnData` object.; Each of these calls adds annotation to an expression matrix *X*,; which stores *n_obs* observations (cells) of *n_vars* variables (genes).; For each tool, there typically is an associated plotting function in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import ",MatchSource.DOCS,docs/usage-principles.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md
Security,access,accessed," in `sc.pl`:. ```; sc.pl.umap(adata, **plotting_params); ```. If you pass `show=False`, a {class}`~matplotlib.axes.Axes` instance is returned; and you have all of matplotlib's detailed configuration possibilities. To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate *inplace* on `adata` and return `None` –; this also allows to easily transition to [out-of-memory pipelines].; If you want to return a copy of the {class}`~anndata.AnnData` object; and leave the passed `adata` unchanged, pass `copy=True` or `inplace=False`. ## AnnData. Scanpy is based on {mod}`anndata`, which provides the {class}`~anndata.AnnData` class. ```{image} https://falexwolf.de/img/scanpy/anndata.svg; :width: 300px; ```. At the most basic level, an {class}`~anndata.AnnData` object `adata` stores; a data matrix `adata.X`, annotation of observations; `adata.obs` and variables `adata.var` as `pd.DataFrame` and unstructured; annotation `adata.uns` as `dict`. Names of observations and; variables can be accessed via `adata.obs_names` and `adata.var_names`,; respectively. {class}`~anndata.AnnData` objects can be sliced like; dataframes, for example, `adata_subset = adata[:, list_of_gene_names]`.; For more, see this [blog post]. To read a data file to an {class}`~anndata.AnnData` object, call:. ```; adata = sc.read(filename); ```. to initialize an {class}`~anndata.AnnData` object. Possibly add further annotation using, e.g., `pd.read_csv`:. ```; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_groups'] = anno['cell_groups'] # categorical annotation of type pandas.Categorical; adata.obs['time'] = anno['time'] # numerical annotation of type float; # alternatively, you could also set the whole dataframe; # adata.obs = anno; ```. To write, use:. ```; adata.write(filename); adata.write_csvs(filename); adata.write_loom(filename); ```. [blog post]: https://falexwolf.de/blog/171223_AnnData_indexing_views_HDF5-backing/; [matplotlib]: https://matplo",MatchSource.DOCS,docs/usage-principles.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/usage-principles.md
Deployability,toggle,toggleswitch,## Datasets. ```{eval-rst}; .. module:: scanpy.datasets; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. datasets.blobs; datasets.ebi_expression_atlas; datasets.krumsiek11; datasets.moignard15; datasets.pbmc3k; datasets.pbmc3k_processed; datasets.pbmc68k_reduced; datasets.paul15; datasets.toggleswitch; datasets.visium_sge. ```; ,MatchSource.DOCS,docs/api/datasets.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/datasets.md
Deployability,integrat,integrated,. ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; ,MatchSource.DOCS,docs/api/experimental.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md
Integrability,integrat,integrated,. ## Experimental. ```{eval-rst}; .. module:: scanpy.experimental; .. currentmodule:: scanpy; ```. New methods that are in early development which are not (yet); integrated in Scanpy core. ```{eval-rst}; .. module:: scanpy.experimental.pp; .. currentmodule:: scanpy; ```. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. experimental.pp.normalize_pearson_residuals; experimental.pp.normalize_pearson_residuals_pca; experimental.pp.highly_variable_genes; experimental.pp.recipe_pearson_residuals; ```; ,MatchSource.DOCS,docs/api/experimental.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/experimental.md
Availability,avail,available,"# API. Import Scanpy as:. ```; import scanpy as sc; ```. ```{note}; Additional functionality is available in the broader {doc}`ecosystem <../ecosystem>`, with some tools being wrapped in the {mod}`scanpy.external` module.; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; reading; get; queries; metrics; experimental; classes; settings; datasets; deprecated; ```; ",MatchSource.DOCS,docs/api/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/index.md
Integrability,wrap,wrapped,"# API. Import Scanpy as:. ```; import scanpy as sc; ```. ```{note}; Additional functionality is available in the broader {doc}`ecosystem <../ecosystem>`, with some tools being wrapped in the {mod}`scanpy.external` module.; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; reading; get; queries; metrics; experimental; classes; settings; datasets; deprecated; ```; ",MatchSource.DOCS,docs/api/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/index.md
Deployability,configurat,configurations,"## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}",MatchSource.DOCS,docs/api/plotting.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md
Modifiability,config,configurations,"## Plotting: `pl`. ```{eval-rst}; .. module:: scanpy.pl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. The plotting module {mod}`scanpy.pl` largely parallels the `tl.*` and a few of the `pp.*` functions.; For most tools and for some preprocessing functions, you'll find a plotting function with the same name. See {doc}`/tutorials/plotting/core` for an overview of how to use these functions. ```{note}; See the {ref}`settings` section for all important plotting configurations.; ```. (pl-generic)=. ### Generic. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pl.scatter; pl.heatmap; pl.dotplot; pl.tracksplot; pl.violin; pl.stacked_violin; pl.matrixplot; pl.clustermap; pl.ranking; pl.dendrogram. ```. ### Classes. These classes allow fine tuning of visual parameters. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/classes. pl.DotPlot; pl.MatrixPlot; pl.StackedViolin. ```. ### Preprocessing. Methods for visualizing quality control and results of preprocessing functions. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.highest_expr_genes; pl.filter_genes_dispersion; pl.highly_variable_genes; pl.scrublet_score_distribution. ```. ### Tools. Methods that extract and visualize tool-specific annotation in an; {class}`~anndata.AnnData` object. For any method in module `tl`, there is; a method with the same name in `pl`. #### PCA. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.pca; pl.pca_loadings; pl.pca_variance_ratio; pl.pca_overview; ```. #### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.tsne; pl.umap; pl.diffmap; pl.draw_graph; pl.spatial; pl.embedding; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pl.embedding_density; ```. #### Branching trajectories and pseudotime, clustering. Visualize clusters using one of the embedding methods passing `color='louvain'`. ```{eval-rst}",MatchSource.DOCS,docs/api/plotting.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/plotting.md
Availability,avail,available,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Deployability,integrat,integration,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Integrability,integrat,integration,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Modifiability,variab,variable,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Performance,perform,perform,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Safety,detect,detection,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Usability,simpl,simple,"## Preprocessing: `pp`. ```{eval-rst}; .. module:: scanpy.pp; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes. Any transformation of the data matrix that is not a *tool*. Other than *tools*, preprocessing steps usually don't return an easily interpretable annotation, but perform a basic transformation on the data matrix. ### Basic Preprocessing. For visual quality control, see {func}`~scanpy.pl.highest_expr_genes` and; {func}`~scanpy.pl.filter_genes_dispersion` in {mod}`scanpy.pl`. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.calculate_qc_metrics; pp.filter_cells; pp.filter_genes; pp.highly_variable_genes; pp.log1p; pp.pca; pp.normalize_total; pp.regress_out; pp.scale; pp.subsample; pp.downsample_counts; ```. ### Recipes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.recipe_zheng17; pp.recipe_weinreb17; pp.recipe_seurat; ```. ### Batch effect correction. Also see [Data integration]. Note that a simple batch correction method is available via {func}`pp.regress_out`. Checkout {mod}`scanpy.external` for more. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.combat; ```. ### Doublet detection. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.scrublet; pp.scrublet_simulate_doublets; ```. ### Neighbors. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: generated/. pp.neighbors. ```; ",MatchSource.DOCS,docs/api/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/preprocessing.md
Availability,avail,available,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",MatchSource.DOCS,docs/api/settings.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md
Modifiability,config,configuring,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",MatchSource.DOCS,docs/api/settings.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md
Performance,cache,cachedir,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",MatchSource.DOCS,docs/api/settings.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md
Testability,log,logging,"(settings)=. ## Settings. ```{eval-rst}; .. currentmodule:: scanpy; ```. A convenience function for setting some default {obj}`matplotlib.rcParams` and a; high-resolution jupyter display backend useful for use in notebooks. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. set_figure_params; ```. An instance of the {class}`~scanpy._settings.ScanpyConfig` is available as `scanpy.settings` and allows configuring Scanpy. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. _settings.ScanpyConfig; ```. Some selected settings are discussed in the following. Influence the global behavior of plotting functions. In non-interactive scripts,; you'd usually want to set `settings.autoshow` to `False`. % no :toctree: here because they are linked under the class. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.autoshow; ~_settings.ScanpyConfig.autosave; ```. The default directories for saving figures, caching files and storing datasets. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.figdir; ~_settings.ScanpyConfig.cachedir; ~_settings.ScanpyConfig.datasetdir; ```. The verbosity of logging output, where verbosity levels have the following; meaning: 0='error', 1='warning', 2='info', 3='hint', 4=more details, 5=even more; details, etc. ```{eval-rst}; .. autosummary::; :nosignatures:. ~_settings.ScanpyConfig.verbosity; ```. Print versions of packages that might influence numerical results. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. logging.print_header; logging.print_versions. ```; ",MatchSource.DOCS,docs/api/settings.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/settings.md
Deployability,integrat,integration,"## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; ",MatchSource.DOCS,docs/api/tools.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md
Integrability,integrat,integration,"## Tools: `tl`. ```{eval-rst}; .. module:: scanpy.tl; ```. ```{eval-rst}; .. currentmodule:: scanpy; ```. Any transformation of the data matrix that is not *preprocessing*. In contrast to a *preprocessing* function, a *tool* usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. ### Embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. pp.pca; tl.tsne; tl.umap; tl.draw_graph; tl.diffmap; ```. Compute densities on embeddings. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.embedding_density; ```. ### Clustering and trajectory inference. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.leiden; tl.louvain; tl.dendrogram; tl.dpt; tl.paga; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.ingest; ```. ### Marker genes. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.rank_genes_groups; tl.filter_rank_genes_groups; tl.marker_gene_overlap; ```. ### Gene scores, Cell cycle. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.score_genes; tl.score_genes_cell_cycle; ```. ### Simulations. ```{eval-rst}; .. autosummary::; :nosignatures:; :toctree: ../generated/. tl.sim. ```; ",MatchSource.DOCS,docs/api/tools.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/api/tools.md
Availability,down,download,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",MatchSource.DOCS,docs/dev/ci.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md
Deployability,pipeline,pipelines,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",MatchSource.DOCS,docs/dev/ci.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md
Testability,test,tests,"# CI. ## Plotting tests. A frequent frustration in testing is the reproducibility of the plots and `matplotlib`'s behaviour in different environments.; We have some tooling to help with this. ### Viewing plots from failed tests on Azure pipelines. The fixtures `check_same_image` and `image_comparer` upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. ```{image} ../_static/img/ci_plot-view_tests-tab.png; :width: 750px; ```. Select your failing test. ```{image} ../_static/img/ci_plot-view_select-test.png; :width: 750px; ```. And open the attachments tab. ```{image} ../_static/img/ci_plot-view_attachment-tab.png; :width: 750px; ```. From here you can view and download the images which were compared, as well as a diff between them. ### Misc. {func}`matplotlib.testing.setup` tries to establish a consistent environment for creating plots. Make sure it's active!; ",MatchSource.DOCS,docs/dev/ci.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/ci.md
Testability,test,tests,"# Contributing code. ## Development workflow. 1. {ref}`Fork the Scanpy repository <forking-and-cloning>` to your own GitHub account; 2. Create a {ref}`development environment <dev-environments>`; 3. {ref}`Create a new branch <creating-a-branch>` for your PR; 4. Add your feature or bugfix to the codebase; 5. {ref}`Make sure all tests are passing <tests>`; 6. {ref}`Build and visually check any changed documentation <building-the-docs>`; 7. {ref}`Open a PR back to the main repository <open-a-pr>`. ## Code style. New code should follow; [Black](https://black.readthedocs.io/en/stable/the_black_code_style.html); and; [flake8](https://flake8.pycqa.org).; We ignore a couple of flake8 checks which are documented in the .flake8 file in the root of this repository.; To learn how to ignore checks per line please read; [flake8 violations](https://flake8.pycqa.org/en/latest/user/violations.html).; Additionally, we use Scanpy’s; [EditorConfig](https://github.com/scverse/scanpy/blob/main/.editorconfig),; so using an editor/IDE with support for both is helpful.; ",MatchSource.DOCS,docs/dev/code.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/code.md
Usability,learn,learn,"# Contributing code. ## Development workflow. 1. {ref}`Fork the Scanpy repository <forking-and-cloning>` to your own GitHub account; 2. Create a {ref}`development environment <dev-environments>`; 3. {ref}`Create a new branch <creating-a-branch>` for your PR; 4. Add your feature or bugfix to the codebase; 5. {ref}`Make sure all tests are passing <tests>`; 6. {ref}`Build and visually check any changed documentation <building-the-docs>`; 7. {ref}`Open a PR back to the main repository <open-a-pr>`. ## Code style. New code should follow; [Black](https://black.readthedocs.io/en/stable/the_black_code_style.html); and; [flake8](https://flake8.pycqa.org).; We ignore a couple of flake8 checks which are documented in the .flake8 file in the root of this repository.; To learn how to ignore checks per line please read; [flake8 violations](https://flake8.pycqa.org/en/latest/user/violations.html).; Additionally, we use Scanpy’s; [EditorConfig](https://github.com/scverse/scanpy/blob/main/.editorconfig),; so using an editor/IDE with support for both is helpful.; ",MatchSource.DOCS,docs/dev/code.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/code.md
Availability,down,downloaded,"l.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for si",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Deployability,install,installed,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Energy Efficiency,reduce,reduces,"l.louvain](https://github.com/scverse/scanpy/blob/a811fee0ef44fcaecbde0cad6336336bce649484/scanpy/tools/_louvain.py#L22-L90) as an example for everything mentioned here. ### Plots in docstrings. One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We're able to include the plots produced by these snippets in the rendered docs using [matplotlib's plot directive](https://matplotlib.org/devel/plot_directive.html).; For examples of this, see the `Examples` sections of {func}`~scanpy.pl.dotplot` or {func}`~scanpy.pp.calculate_qc_metrics`. Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. - If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; - Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. ### `Params` section. The `Params` abbreviation is a legit replacement for `Parameters`. To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built. Use the python standard library types (defined in [collections.abc](https://docs.python.org/3/library/collections.abc.html) and [typing](https://docs.python.org/3/library/typing.html) modules) for containers, e.g. `Sequence`s (like `list`), `Iterable`s (like `set`), and `Mapping`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for si",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Integrability,depend,depending,", 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); ",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Modifiability,layers,layers,"g`s (like `dict`).; Always specify what these contain, e.g. `{'a': (1, 2)}` → `Mapping[str, Tuple[int, int]]`.; If you can’t use one of those, use a concrete class like `AnnData`.; If your parameter only accepts an enumeration of strings, specify them like so: `Literal['elem-1', 'elem-2']`. ### `Returns` section. There are three types of return sections – prose, tuple, and a mix of both. 1. Prose is for simple cases.; 2. Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and *not* by its type. Provide type annotation in the function header.; 3. Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you *added something as annotation to an \`AnnData\` object*. #### Examples. For simple cases, use prose as in; {func}`~scanpy.pp.normalize_total`. ```rst; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`.; ```. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in {func}`~scanpy.pp.calculate_qc_metrics`.; Do not add types in the docstring, but specify them in the function signature:. ```python; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ...; ```. Many functions also just modify parts of the passed AnnData object, like e.g. {func}`~scanpy.tl.dpt`.; You can then combine prose and lists to best describe what happens. ```rst; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; d",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Performance,cache,cache,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Usability,clear,clear,"# Documentation. (building-the-docs)=. ## Building the docs. Dependencies for building the documentation for scanpy can be installed with `pip install -e ""scanpy[doc]""`. To build the docs, enter the `docs` directory and run `make html`. After this process completes you can take a look at the docs by opening `scanpy/docs/_build/html/index.html`. Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you've updated the docs.; If docs are not updating the way you expect, first try ""force reloading"" your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache and try building them again (`make clean` from `docs` directory). ```{note}; If you've cloned the repository pre 1.8.0, you may need to be more thorough in cleaning.; If you run into warnings try removing all untracked files in the docs directory.; ```. ## Adding to the docs. For any user-visible changes, please make sure a note has been added to the release notes for the relevant version so we can credit you!; These files are found in the `docs/release-notes/` directory.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts. Once you've added a new function to the documentation, you'll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to `docs/api.md` under a relevant heading. For tutorials and more in depth examples, consider adding a notebook to [scanpy-tutorials](https://github.com/scverse/scanpy-tutorials/). The tutorials are tied to this repository via a submodule. To update the submodule, run `git submodule update --remote` from the root of the repository. Subsequently, commit and push the changes in a PR. This should be done before each release to ensure the tutorials are up to date. ## docstrings format. We use the numpydoc style for writing docstrings.; We'd primarily suggest lookin",MatchSource.DOCS,docs/dev/documentation.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/documentation.md
Deployability,install,install," very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git where; git push --set-upstream origin {your-branch-nam",MatchSource.DOCS,docs/dev/getting-set-up.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md
Integrability,interface,interface,"# Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru",MatchSource.DOCS,docs/dev/getting-set-up.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md
Testability,test,test,"clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to run the hooks on each commit, you can run them manually with `pre-commit run --files={your files}`. (creating-a-branch)=. ### Creating a branch for your feature. All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the `main` branch.; You can create a branch with:. ```shell; git checkout main # Starting from the main branch; git pull # Syncing with the repo; git checkout -b {your-branch-name} # Making and changing to the new branch; ```. (open-a-pr)=. ### Open a pull request. When you're ready to have your code reviewed, push your changes up to your fork:. ```shell; # The first time you push the branch, you'll need to tell git wher",MatchSource.DOCS,docs/dev/getting-set-up.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md
Usability,guid,guides,"# Getting set up. ## Working with `git`. This section of the docs covers our practices for working with `git` on our codebase. For more in-depth guides, we can recommend a few sources:. For a more complete git tutorials we recommend checking out:. - [Atlassian's git tutorial](https://www.atlassian.com/git/tutorials) -- Beginner friendly introductions to the git command line interface; - [Setting up git for GitHub](https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/set-up-git) -- Configuring git to work with your GitHub user account. (forking-and-cloning)=. ### Forking and cloning. To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine. This is very straight forward if you're using [GitHub's CLI](https://cli.github.com):. ```shell; $ gh repo fork scverse/scanpy --clone --remote; ```. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the `main` development branch to track our repository. To do this manually, first make a fork of the repository by clicking the ""fork"" button on our main github package. Then, on your machine, run:. ```shell; # Clone your fork of the repository (substitute in your username); git clone https://github.com/{your-username}/scanpy.git; # Enter the cloned repository; cd scanpy; # Add our repository as a remote; git remote add upstream https://github.com/scverse/scanpy.git; # git branch --set-upstream-to ""upstream/main""; ```. ### `pre-commit`. We use [precommit](https://pre-commit.com) to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!. You can install pre-commit with:. ```shell; pip install pre-commit; ```. You can then install it to run while developing here with:. ```shell; pre-commit install; ```. From the root of the repo. If you choose not to ru",MatchSource.DOCS,docs/dev/getting-set-up.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/getting-set-up.md
Deployability,release,release,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,MatchSource.DOCS,docs/dev/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md
Energy Efficiency,adapt,adapted,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,MatchSource.DOCS,docs/dev/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md
Modifiability,adapt,adapted,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,MatchSource.DOCS,docs/dev/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md
Testability,test,testing,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,MatchSource.DOCS,docs/dev/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md
Usability,guid,guide,(contribution-guide)=. # Contributing. Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. ```{toctree}; code; getting-set-up; testing; documentation; ci; versioning; release; ```. Parts of the guidelines have been adapted from the [pandas](https://pandas.pydata.org/pandas-docs/stable/development/index.html) and [MDAnalysis](https://userguide.mdanalysis.org/stable/contributing.html) guides.; These are both excellent guides and we highly recommend checking them out.; ,MatchSource.DOCS,docs/dev/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/index.md
Deployability,release,release,"# Making a release. First, check out {doc}`versioning` to see which kind of release you want to make.; That page also explains concepts like *pre-releases* and applications thereof. ## Actually making the release. 1. Go to GitHub’s [releases][] page; 2. Click “Draft a new release”; 3. Click “Choose a tag” and type the version of the tag you want to release, such as `1.9.6`; 4. Click “**+ Create new tag: 1.\<minor>.\<patch>** on publish”; 5. If the version is a *pre-release* version, such as `1.7.0rc1` or `1.10.0a1`, tick the “Set as a pre-release” checkbox. [releases]: https://github.com/scverse/scanpy/releases. ## After making a release. After *any* release has been made:. - Create a new release notes file for the next bugfix release.; This should be included in both dev and stable branches.; - Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm ",MatchSource.DOCS,docs/dev/release.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md
Modifiability,config,configuration,"a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml;",MatchSource.DOCS,docs/dev/release.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md
Testability,test,test," bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have `on-merge: backport to 0.<minor>.x`,; so the [meeseeksdev][] bot will create a backport PR. See {doc}`versioning` for more info.; - Clear out and close the milestone you just made a release for. After a *major* or *minor* release has been made:. - Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; - Create a new release notes file for the next minor release. This should only be added to the dev branch.; - Tag the development branch. If you just released `1.7.0`, this would be `1.8.0.dev0`.; - Create a new branch for this release series, like `1.7.x`. This should get a new release notes file. [meeseeksdev]: https://meeseeksbox.github.io. ## Debugging the build process. If you changed something about the build process (e.g. [Hatchling’s build configuration][hatch-build]),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:. ```shell; # Clear out old distributions; rm -r dist. # Build source distribution and wheel both; python -m build. # Now check those build artifacts; twine check dist/*. # List the wheel archive’s contents; bsdtar -tf dist/*.whl. ```. You can also upload the package to <test.pypi.org> ([tutorial][testpypi tutorial]). [testpypi tutorial]: https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives. ```; twine upload --repository testpypi dist/*; ```. The above approximates what the [publish workflow][] does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). [hatch-build]: https://hatch.pypa.io/latest/config/build/; [publish workflow]: https://github.com/scverse/scanpy/tree/main/.github/workflows/publish.yml; ",MatchSource.DOCS,docs/dev/release.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/release.md
Availability,down,down,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Deployability,release,release,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Integrability,depend,dependencies,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Modifiability,parameteriz,parameterizing,"sts in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogo",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Performance,optimiz,optimizing,"suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Are there input values which should cause your function to error?; - Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; - Can you place bounds on the values returned by your function?; - Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; - Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; - Are you optimizing a method? Check that it's results are the same as a gold standard implementation. ### Performance. It's more important that you're accurately testing the code works than it is that test suite runs quickly.; That said, it's nice when the test suite runs fast. You can check how long tests take to run by passing `--durations=0` argument to `pytest`.; Hopefully your new tests won't show up on top!; Some approaches to this include:. - Is there a common setup/ computation happening in each test? Consider caching these in a [scoped test fixture](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data).; - Is the behaviour you're testing for dependent on the size of the data? If not, consider reducing it. ### Plotting tests. While computational functions will return arrays and values, it can be harder to work with the output of plotting functions. To make this easier, we use the `image_comparer` fixture for comparing plotting results (search the test suite for example usage).; This is used to check that generated",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Testability,test,tests,"(tests)=. # Tests. Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. ## Running the tests. We use [pytest](https://docs.pytest.org/en/stable/) to test scanpy.; To run the tests first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ###",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Usability,guid,guide,"s first make sure you have the required dependencies (`pip install -e "".[test,dev]""`), then run `pytest` from the root of the repository. It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. 1. Only run a subset of the tests. This can be done with the `-k` argument from pytest (e.g. `pytest -k test_plotting.py` or `pytest -k ""test_umap*""`; 2. Run the tests in parallel. If you install the pytest extension [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) you can run tests in parallel with the `--numprocesses` argument to pytest (e.g. `pytest -n 8`). ### Miscellaneous tips. - A lot of warnings can be thrown while running the test suite. It's often easier to read the test results with them hidden via the `--disable-pytest-warnings` argument. ## Writing tests. You can refer to the [existing test suite](https://github.com/scverse/scanpy/tree/main/scanpy/tests) for examples.; If you haven't written tests before, Software Carpentry has an [in-depth guide](https://katyhuff.github.io/2016-07-11-scipy/testing/01-basics.html) on the topic. We highly recommend using [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development) when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function. Consider parameterizing your tests using the `pytest.mark.parameterize` and `pytest.fixture` decorators.; Documentation on these can be found [here](https://docs.pytest.org/en/stable/fixture.html), but we'd also recommend searching our test suite for existing usage. ### What to test. If you're not sure what to tests about your function, some ideas include:. - Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see `pytest.raises` [in the pytest docs](https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions).; - Ar",MatchSource.DOCS,docs/dev/testing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/testing.md
Availability,down,down,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",MatchSource.DOCS,docs/dev/versioning.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md
Deployability,release,release,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",MatchSource.DOCS,docs/dev/versioning.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md
Security,hash,hash,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",MatchSource.DOCS,docs/dev/versioning.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md
Testability,test,test,"# Versioning. ```{note}; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate.; ```. ## Semantic versioning. We try to follow [semantic versioning](https://semver.org) with our versioning scheme.; This scheme breaks down a version number into `{major.minor.point}` sections.; At a `point` release, there should be no changes beyond bug fixes.; `minor` releases can include new features.; `major` releases can break old APIs. ### Version numbers. Valid version numbers are described in [PEP 440](https://peps.python.org/pep-0440/). [Pre-releases](https://peps.python.org/pep-0440/#pre-releases); : should have versions like `1.7.0rc1` or `1.7.0rc2`.; [Development versions](https://peps.python.org/pep-0440/#developmental-releases); : should look like `1.8.0.dev0`, with a commit hash optionally appended as a local version identifier (e.g. `1.8.0.dev2+g00ad77b`). ## Tooling. To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. `1.7.x` for the `1.7` release series). For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs must be labelled as such.; After approval, a developer will notify the [meeseeks bot](https://meeseeksbox.github.io) to open a backport PR onto the release branch via a comment saying:. > @Meeseeksdev backport \<branch>. Where ""\<branch>"" is the most recent release branch. The bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures.; ",MatchSource.DOCS,docs/dev/versioning.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/dev/versioning.md
Deployability,integrat,integrate,"# External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; ",MatchSource.DOCS,docs/external/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md
Integrability,integrat,integrate,"# External API. ```{eval-rst}; .. module:: scanpy.external; ```. ```{warning}; We are no longer accepting new tools into `scanpy.external`.; Instead, please submit your tool to the [scverse ecosystem package listing](https://scverse.org/packages/#ecosystem).; ```. ```{note}; For tools that integrate well with scanpy and anndata, see:; * The [scverse ecosystem](https://scverse.org/packages/#ecosystem); * Scanpy's ecosystem {doc}`ecosystem page <../ecosystem>`; ```. Import Scanpy's wrappers to external tools as:. ```; import scanpy.external as sce; ```. ```{toctree}; :maxdepth: 2. preprocessing; tools; plotting; exporting; ```; ",MatchSource.DOCS,docs/external/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/index.md
Deployability,integrat,integration,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,MatchSource.DOCS,docs/external/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md
Integrability,integrat,integration,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,MatchSource.DOCS,docs/external/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md
Security,hash,hashsolo,## Preprocessing: PP. ```{eval-rst}; .. module:: scanpy.external.pp; .. currentmodule:: scanpy.external; ```. ### Data integration. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.bbknn; pp.harmony_integrate; pp.mnn_correct; pp.scanorama_integrate. ```. ### Sample demultiplexing. ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.hashsolo; ```. ### Imputation. Note that the fundamental limitations of imputation are still under [debate](https://github.com/scverse/scanpy/issues/189). ```{eval-rst}; .. autosummary::; :toctree: ../generated/. pp.dca; pp.magic. ```; ,MatchSource.DOCS,docs/external/preprocessing.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/external/preprocessing.md
Performance,perform,perform,# How to. This section contains short examples on how to perform specific tasks with scanpy. ```{toctree}; knn-transformers; plotting-with-marsilea; ```; ,MatchSource.DOCS,docs/how-to/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/how-to/index.md
Energy Efficiency,efficient,efficiently,"### 0.2.1 {small}`2017-07-24`. Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with [datasets of more; than one million cells](https://github.com/scverse/scanpy_usage/tree/master/170522_visualizing_one_million_cells). {smaller}`A Wolf, P Angerer`; ",MatchSource.DOCS,docs/release-notes/0.2.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.1.md
Testability,test,testing,"### 0.2.1 {small}`2017-07-24`. Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with [datasets of more; than one million cells](https://github.com/scverse/scanpy_usage/tree/master/170522_visualizing_one_million_cells). {smaller}`A Wolf, P Angerer`; ",MatchSource.DOCS,docs/release-notes/0.2.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.1.md
Deployability,release,release,"### 0.2.9 {small}`2017-10-25`. ```{rubric} Initial release of the new trajectory inference method [PAGA](https://github.com/theislab/paga); ```. - {func}`~scanpy.tl.paga` computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_compare` plot this graph next an embedding {smaller}`A Wolf`; - {func}`~scanpy.pl.paga_path` plots a heatmap through a node sequence in the PAGA graph {smaller}`A Wolf`; ",MatchSource.DOCS,docs/release-notes/0.2.9.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.2.9.md
Availability,avail,available,"### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; ",MatchSource.DOCS,docs/release-notes/0.3.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md
Usability,simpl,simplified,"### 0.3.0 {small}`2017-11-16`. - {class}`~anndata.AnnData` gains method {meth}`~anndata.AnnData.concatenate` {smaller}`A Wolf`; - {class}`~anndata.AnnData` is available as the separate [anndata] package {smaller}`P Angerer, A Wolf`; - results of [PAGA](https://github.com/theislab/paga) simplified {smaller}`A Wolf`. [anndata]: https://pypi.org/project/anndata/; ",MatchSource.DOCS,docs/release-notes/0.3.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/0.3.0.md
Availability,down,downsampling,"the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; ",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Deployability,update,updates,"### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Energy Efficiency,efficient,efficient,"### 1.0.0 {small}`2018-03-30`. ```{rubric} Major updates; ```. - Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in [6h], 130K cells in [14min], and 68K cells in [3min] {smaller}`A Wolf`; - the API gained a preprocessing function {func}`~scanpy.pp.neighbors` and a; class {func}`~scanpy.Neighbors` to which all basic graph computations are; delegated {smaller}`A Wolf`. ```{warning}; ```{rubric} Upgrading to 1.0 isn’t fully backwards compatible in the following changes; ```. - the graph-based tools {func}`~scanpy.tl.louvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors`",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Performance,cache,cache,"serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Safety,avoid,avoided,"the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/logfile_130K.txt; [3min]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170503_zheng17/zheng17.ipynb; [6h]: https://github.com/scverse/scanpy_usage/blob/master/170522_visualizing_one_million_cells/; [paul15]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170502_paul15/paul15.ipynb; [seurat]: https://nbviewer.jupyter.org/github/scverse/scanpy_usage/blob/master/170505_seurat/seurat.ipynb; ",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Testability,log,logistic," occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a better implementation for; reclustering via `restrict_to` {smaller}`A Wolf`; - scanpy no longer modifies rcParams upon import, call; `settings.set_figure_params` to set the 'scanpy style' {smaller}`A Wolf`; - default cache directory is `./cache/`, set `settings.cachedir` to change; this; nested directories in this are avoided {smaller}`A Wolf`; - show edges in scatter plots based on graph visualization; {func}`~scanpy.tl.draw_graph` and {func}`~scanpy.tl.umap` by passing `edges=True` {smaller}`A Wolf`; - {func}`~scanpy.pp.downsample_counts` for downsampling counts {smaller}`MD Luecken`; - default `'louvain_groups'` are called `'louvain'` {smaller}`A Wolf`; - `'X_diffmap'` contains the zero component, plotting remains unchanged {smaller}`A Wolf`. [14min]: https://github.com/scverse/scanpy_usage/blob/master/170",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Usability,learn,learn,"uvain`; {func}`~scanpy.tl.dpt` {func}`~scanpy.tl.draw_graph`; {func}`~scanpy.tl.umap` {func}`~scanpy.tl.diffmap`; {func}`~scanpy.tl.paga` require prior computation of the graph:; `sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata)` instead of; previously `sc.tl.louvain(adata, n_neighbors=5)`; - install `numba` via `conda install numba`, which replaces cython; - the default connectivity measure (dpt will look different using default; settings) changed. setting `method='gauss'` in `sc.pp.neighbors` uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example [paul15].; - namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; - replace occurances of `group_by` with `groupby` (consistency with; `pandas`); - it is worth checking out the notebook examples to see changes, e.g.; the [seurat] example.; - upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different; ```. ```{rubric} Further updates; ```. - UMAP {cite:p}`McInnes2018` can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see {func}`~scanpy.pp.neighbors` {smaller}`A Wolf`; - graph abstraction: AGA is renamed to [PAGA](https://github.com/theislab/paga): {func}`~scanpy.tl.paga`; now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.dpt`, the; connectivity measure has been improved {smaller}`A Wolf`; - logistic regression for finding marker genes; {func}`~scanpy.tl.rank_genes_groups` with parameter `method='logreg'` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` provides a ",MatchSource.DOCS,docs/release-notes/1.0.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.0.0.md
Modifiability,variab,variables,"### 1.1.0 {small}`2018-06-01`. - {func}`~scanpy.set_figure_params` by default passes `vector_friendly=True` and allows you to produce reasonablly sized pdfs by rasterizing large scatter plots {smaller}`A Wolf`; - {func}`~scanpy.tl.draw_graph` defaults to the ForceAtlas2 layout {cite:p}`Jacomy2014,Chippada2018`, which is often more visually appealing and whose computation is much faster {smaller}`S Wollock`; - {func}`~scanpy.pl.scatter` also plots along variables axis {smaller}`MD Luecken`; - {func}`~scanpy.pp.pca` and {func}`~scanpy.pp.log1p` support chunk processing {smaller}`S Rybakov`; - {func}`~scanpy.pp.regress_out` is back to multiprocessing {smaller}`F Ramirez`; - {func}`~scanpy.read` reads compressed text files {smaller}`G Eraslan`; - {func}`~scanpy.queries.mitochondrial_genes` for querying mito genes {smaller}`FG Brundu`; - {func}`~scanpy.external.pp.mnn_correct` for batch correction {cite:p}`Haghverdi2018,Kang2018`; - {func}`~scanpy.external.tl.phate` for low-dimensional embedding {cite:p}`Moon2019` {smaller}`S Gigante`; - {func}`~scanpy.external.tl.sandbag`, {func}`~scanpy.external.tl.cyclone` for scoring genes {cite:p}`Scialdone2015,Fechtner2018`; ",MatchSource.DOCS,docs/release-notes/1.1.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.1.0.md
Availability,mask,mask,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Deployability,update,updated,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Integrability,depend,dependencies,"mproved docs for `percent_top` argument of {func}`~scanpy.pp.calculate_qc_metrics` {pr}`2849` {smaller}`I Virshup`; * New basic clustering tutorial ({doc}`/tutorials/basics/clustering`), based on one from [scverse-tutorials](https://scverse-tutorials.readthedocs.io/en/latest/notebooks/basic-scrna-tutorial.html) {pr}`2901` {smaller}`I Virshup`; * Overhauled {doc}`/tutorials/index` page, and added new {doc}`/how-to/index` section to docs {pr}`2901` {smaller}`I Virshup`; * Added a new tutorial on working with dask ({doc}`/tutorials/experimental/dask`) {pr}`2901` {smaller}`I Gold` {smaller}`I Virshup`. ```{rubric} Bug fixes; ```. * Updated {func}`~scanpy.read_visium` such that it can read spaceranger 2.0 files {smaller}`L Lehner`; * Fix {func}`~scanpy.pp.normalize_total` for dask {pr}`2466` {smaller}`P Angerer`; * Fix setting `sc.settings.verbosity` in some cases {pr}`2605` {smaller}`P Angerer`; * Fix all remaining pandas warnings {pr}`2789` {smaller}`P Angerer`; * Fix some annoying plotting warnings around violin plots {pr}`2844` {smaller}`P Angerer`; * Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of `pandas`, `anndata`, `numpy`, and `matplotlib` were fixed. {pr}`2816` {smaller}`I Virshup`; * Fix warnings caused by internal usage of `pandas.DataFrame.stack` with `pandas>=2.1` {pr}`2864`{smaller}`I Virshup`; * {func}`scanpy.get.aggregate` now always returns {class}`numpy.ndarray` {pr}`2893` {smaller}`S Dicks`; * Removes self from array of neighbors for `use_approx_neighbors = True` in {func}`~scanpy.pp.scrublet` {pr}`2896`{smaller}`S Dicks`; * Compatibility with scipy 1.13 {pr}`2943` {smaller}`I Virshup`; * Fix use of {func}`~scanpy.tl.dendrogram` on highly correlated low precision data {pr}`2928` {smaller}`P Angerer`; * Fix pytest deprecation warning {pr}`2879` {smaller}`P Angerer`. ```{rubric} Development; ```. * Scanpy is now tested against py",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Modifiability,variab,variables,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Performance,perform,performance,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Testability,test,test,"er}`S Dicks & P Angerer`; * {func}`scanpy.tl.leiden` now offers `igraph`'s implementation of the leiden algorithm via via `flavor` when set to `igraph`. `leidenalg`'s implementation is still default, but discouraged. {pr}`2815` {smaller}`I Gold`; * {func}`scanpy.pp.highly_variable_genes` has new flavor `seurat_v3_paper` that is in its implementation consistent with the paper description in Stuart et al 2018. {pr}`2792` {smaller}`E Roellin`; * {func}`scanpy.datasets.blobs` now accepts a `random_state` argument {pr}`2683` {smaller}`E Roellin`; * {func}`scanpy.pp.pca` and {func}`scanpy.pp.regress_out` now accept a layer argument {pr}`2588` {smaller}`S Dicks`; * {func}`scanpy.pp.subsample` with `copy=True` can now be called in backed mode {pr}`2624` {smaller}`E Roellin`; * {func}`scanpy.external.pp.harmony_integrate` now runs with 64 bit floats improving reproducibility {pr}`2655` {smaller}`S Dicks`; * {func}`scanpy.tl.rank_genes_groups` no longer warns that it's default was changed from t-test_overestim_var to t-test {pr}`2798` {smaller}`L Heumos`; * `scanpy.pp.calculate_qc_metrics` now allows `qc_vars` to be passed as a string {pr}`2859` {smaller}`N Teyssier`; * {func}`scanpy.tl.leiden` and {func}`scanpy.tl.louvain` now store clustering parameters in the key provided by the `key_added` parameter instead of always writing to (or overwriting) a default key {pr}`2864` {smaller}`J Fan`; * {func}`scanpy.pp.scale` now clips `np.ndarray` also at `- max_value` for zero-centering {pr}`2913` {smaller}`S Dicks`; * Support sparse chunks in dask {func}`~scanpy.pp.scale`, {func}`~scanpy.pp.normalize_total` and {func}`~scanpy.pp.highly_variable_genes` (`seurat` and `cell-ranger` tested) {pr}`2856` {smaller}`ilan-gold`. ```{rubric} Docs; ```. * Doc style overhaul {pr}`2220` {smaller}`A Gayoso`; * Re-add search-as-you-type, this time via `readthedocs-sphinx-search` {pr}`2805` {smaller}`P Angerer`; * Fixed a lot of broken usage examples {pr}`2605` {smaller}`P Angerer`; * Improved harmon",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Usability,guid,guide,"### 1.10.0 {small}`2024-03-26`. `scanpy` 1.10 brings a large amount of new features, performance improvements, and improved documentation. Some highlights:. * Improved support for out-of-core workflows via `dask`. See new tutorial: {doc}`/tutorials/experimental/dask` demonstrating counts-to-clusters for 1.4 million cells in <10 min.; * A new {doc}`basic clustering tutorial </tutorials/basics/clustering>` demonstrating an updated workflow.; * Opt-in increased performance for neighbor search and clustering ({doc}`how to guide </how-to/knn-transformers>`).; * Ability to `mask` observations or variables from a number of methods (see {doc}`/tutorials/plotting/advanced` for an example with plotting embeddings); * A new function {func}`~scanpy.get.aggregate` for computing aggregations of your data, very useful for pseudo bulking!. ```{rubric} Features; ```. * {func}`~scanpy.pp.scrublet` and {func}`~scanpy.pp.scrublet_simulate_doublets` were moved from {mod}`scanpy.external.pp` to {mod}`scanpy.pp`. The `scrublet` implementation is now maintained as part of scanpy {pr}`2703` {smaller}`P Angerer`; * {func}`scanpy.pp.pca`, {func}`scanpy.pp.scale`, {func}`scanpy.pl.embedding`, and {func}`scanpy.experimental.pp.normalize_pearson_residuals_pca` now support a `mask` parameter {pr}`2272` {smaller}`C Bright, T Marcella, & P Angerer`; * Enhanced dask support for some internal utilities, paving the way for more extensive dask support {pr}`2696` {smaller}`P Angerer`; * {func}`scanpy.pp.highly_variable_genes` supports dask for the default `seurat` and `cell_ranger` flavors {pr}`2809` {smaller}`P Angerer`; * New function {func}`scanpy.get.aggregate` which allows grouped aggregations over your data. Useful for pseudobulking! {pr}`2590` {smaller}`Isaac Virshup` {smaller}`Ilan Gold` {smaller}`Jon Bloom`; * {func}`scanpy.pp.neighbors` now has a `transformer` argument allowing the use of different ANN/ KNN libraries {pr}`2536` {smaller}`P Angerer`; * {func}`scanpy.experimental.pp.highly_variab",MatchSource.DOCS,docs/release-notes/1.10.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.0.md
Availability,error,errors,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",MatchSource.DOCS,docs/release-notes/1.10.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md
Performance,perform,performance,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",MatchSource.DOCS,docs/release-notes/1.10.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md
Testability,benchmark,benchmarking,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",MatchSource.DOCS,docs/release-notes/1.10.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md
Usability,clear,clear,"### 1.10.2 {small}`2024-06-25`. ```{rubric} Development features; ```. * Add performance benchmarking {pr}`2977` {smaller}`R Shrestha`, {smaller}`P Angerer`. ```{rubric} Docs; ```. * Document several missing parameters in docstring {pr}`2888` {smaller}`S Cheney`; * Fixed incorrect instructions in ""testing"" dev docs {pr}`2994` {smaller}`I Virshup`; * Update marsilea tutorial to use `group_` methods {pr}`3001` {smaller}`I Virshup`; * Fixed citations {pr}`3032` {smaller}`P Angerer`; * Improve dataset documentation {pr}`3060` {smaller}`P Angerer`. ```{rubric} Bug fixes; ```. * Compatibility with `matplotlib` 3.9 {pr}`2999` {smaller}`I Virshup`; * Add clear errors where `backed` mode-like matrices (i.e., from `sparse_dataset`) are not supported {pr}`3048` {smaller}`I gold`; * Write out full pca results when `_choose_representation` is called i.e., {func}`~scanpy.pp.neighbors` without {func}`~scanpy.pp.pca` {pr}`3079` {smaller}`I gold`; * Fix deprecated use of `.A` with sparse matrices {pr}`3084` {smaller}`P Angerer`; * Fix zappy support {pr}`3089` {smaller}`P Angerer`; * Fix dotplot group order with {mod}`pandas` 1.x {pr}`3101` {smaller}`P Angerer`. ```{rubric} Performance; ```. * `sparse_mean_variance_axis` now uses all cores for the calculations {pr}`3015` {smaller}`S Dicks`; * `pp.highly_variable_genes` with `flavor=seurat_v3` now uses a numba kernel {pr}`3017` {smaller}`S Dicks`; * Speed up {func}`~scanpy.pp.scrublet` {pr}`3044` {smaller}`S Dicks` and {pr}`3056` {smaller}`P Angerer`; * Speed up clipping of array in {func}`~scanpy.pp.scale` {pr}`3100` {smaller}`P Ashish & S Dicks`; ",MatchSource.DOCS,docs/release-notes/1.10.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.10.2.md
Modifiability,layers,layers,"### 1.3.1 {small}`2018-09-03`. ```{rubric} RNA velocity in single cells {cite:p}`LaManno2018`; ```. - Scanpy and AnnData support loom’s layers so that computations for single-cell RNA velocity {cite:p}`LaManno2018` become feasible {smaller}`S Rybakov and V Bergen`; - [scvelo] harmonizes with Scanpy and is able to process loom files with splicing information produced by Velocyto {cite:p}`LaManno2018`, it runs a lot faster than the count matrix analysis of Velocyto and provides several conceptual developments. ~~~{rubric} Plotting ({ref}`pl-generic`); ~~~. - {func}`~scanpy.pl.dotplot` for visualizing genes across conditions and clusters, see [here](https://gist.github.com/fidelram/2289b7a8d6da055fb058ac9a79ed485c) {pr}`199` {smaller}`F Ramirez`; - {func}`~scanpy.pl.heatmap` for pretty heatmaps {pr}`175` {smaller}`F Ramirez`; - {func}`~scanpy.pl.violin` produces very compact overview figures with many panels {pr}`175` {smaller}`F Ramirez`. ~~~{rubric} There now is a section on imputation in {doc}`external <../external/index>`:; ~~~. - {func}`~scanpy.external.pp.magic` for imputation using data diffusion {cite:p}`vanDijk2018` {pr}`187` {smaller}`S Gigante`; - {func}`~scanpy.external.pp.dca` for imputation and latent space construction using an autoencoder {cite:p}`Eraslan2019` {pr}`186` {smaller}`G Eraslan`. [scvelo]: https://github.com/theislab/scvelo; ",MatchSource.DOCS,docs/release-notes/1.3.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.1.md
Deployability,update,updates,"### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; ",MatchSource.DOCS,docs/release-notes/1.3.3.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md
Performance,perform,performance,"### 1.3.3 {small}`2018-11-05`. ```{rubric} Major updates; ```. - a fully distributed preprocessing backend {smaller}`T White and the Laserson Lab`. ```{rubric} Code design; ```. - {func}`~scanpy.read_10x_h5` and {func}`~scanpy.read_10x_mtx` read Cell Ranger 3.0 outputs {pr}`334` {smaller}`Q Gong`. ```{note}; ```{rubric} Also see changes in anndata 0.6.; ```. - changed default compression to `None` in {meth}`~anndata.AnnData.write_h5ad` to speed up read and write, disk space use is usually less critical; - performance gains in {meth}`~anndata.AnnData.write_h5ad` due to better handling of strings and categories {smaller}`S Rybakov`; ```; ",MatchSource.DOCS,docs/release-notes/1.3.3.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.3.md
Integrability,wrap,wraps,"### 1.3.4 {small}`2018-11-24`. - {func}`~scanpy.tl.leiden` wraps the recent graph clustering package by {cite:t}`Traag2019` {smaller}`K Polanski`; - {func}`~scanpy.external.pp.bbknn` wraps the recent batch correction package {cite:p}`Polanski2019` {smaller}`K Polanski`; - {func}`~scanpy.pp.calculate_qc_metrics` caculates a number of quality control metrics, similar to `calculateQCMetrics` from *Scater* {cite:p}`McCarthy2017` {smaller}`I Virshup`; ",MatchSource.DOCS,docs/release-notes/1.3.4.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.4.md
Deployability,update,updates,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",MatchSource.DOCS,docs/release-notes/1.3.6.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md
Integrability,integrat,integrated,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",MatchSource.DOCS,docs/release-notes/1.3.6.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md
Testability,log,logarithmized,"### 1.3.6 {small}`2018-12-11`. ```{rubric} Major updates; ```. - a new plotting gallery for `visualizing-marker-genes` {smaller}`F Ramirez`; - tutorials are integrated on ReadTheDocs, `pbmc3k` and `paga-paul15` {smaller}`A Wolf`. ```{rubric} Interactive exploration of analysis results through *manifold viewers*; ```. - CZI’s [cellxgene] directly reads `.h5ad` files {smaller}`the cellxgene developers`; - the [UCSC Single Cell Browser] requires exporting via {func}`~scanpy.external.exporting.cellbrowser` {smaller}`M Haeussler`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.highly_variable_genes` supersedes {func}`~scanpy.pp.filter_genes_dispersion`, it gives the same results but, by default, expects logarithmized data and doesn’t subset {smaller}`A Wolf`. [cellxgene]: https://github.com/chanzuckerberg/cellxgene; [ucsc single cell browser]: https://github.com/maximilianh/cellBrowser; ",MatchSource.DOCS,docs/release-notes/1.3.6.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.3.6.md
Availability,down,download,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",MatchSource.DOCS,docs/release-notes/1.4.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md
Energy Efficiency,efficient,efficient,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",MatchSource.DOCS,docs/release-notes/1.4.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md
Integrability,interface,interface,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",MatchSource.DOCS,docs/release-notes/1.4.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md
Modifiability,layers,layers,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",MatchSource.DOCS,docs/release-notes/1.4.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md
Testability,log,logarithmization,"### 1.4.1 {small}`2019-04-26`. ```{rubric} New functionality; ```. - Scanpy has a command line interface again. Invoking it with `scanpy somecommand [args]` calls `scanpy-somecommand [args]`, except for builtin commands (currently `scanpy settings`) {pr}`604` {smaller}`P Angerer`; - {func}`~scanpy.datasets.ebi_expression_atlas` allows convenient download of EBI expression atlas {smaller}`I Virshup`; - {func}`~scanpy.tl.marker_gene_overlap` computes overlaps of marker genes {smaller}`M Luecken`; - {func}`~scanpy.tl.filter_rank_genes_groups` filters out genes based on fold change and fraction of cells expressing genes {smaller}`F Ramirez`; - {func}`~scanpy.pp.normalize_total` replaces {func}`~scanpy.pp.normalize_per_cell`, is more efficient and provides a parameter to only normalize using a fraction of expressed genes {smaller}`S Rybakov`; - {func}`~scanpy.pp.downsample_counts` has been sped up, changed default value of `replace` parameter to `False` {pr}`474` {smaller}`I Virshup`; - {func}`~scanpy.tl.embedding_density` computes densities on embeddings {pr}`543` {smaller}`M Luecken`; - {func}`~scanpy.external.tl.palantir` interfaces Palantir {cite:p}`Setty2019` {pr}`493` {smaller}`A Mousa`. ```{rubric} Code design; ```. - `.layers` support of scatter plots {smaller}`F Ramirez`; - fix double-logarithmization in compute of log fold change in {func}`~scanpy.tl.rank_genes_groups` {smaller}`A Muñoz-Rojas`; - fix return sections of docs {smaller}`P Angerer`; ",MatchSource.DOCS,docs/release-notes/1.4.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.1.md
Integrability,depend,dependency,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",MatchSource.DOCS,docs/release-notes/1.4.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md
Modifiability,variab,variables,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",MatchSource.DOCS,docs/release-notes/1.4.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md
Performance,perform,performs,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",MatchSource.DOCS,docs/release-notes/1.4.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md
Safety,avoid,avoid,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",MatchSource.DOCS,docs/release-notes/1.4.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md
Testability,test,test,"### 1.4.2 {small}`2019-05-06`. ```{rubric} New functionality; ```. - {func}`~scanpy.pp.combat` supports additional covariates which may include adjustment variables or biological condition {pr}`618` {smaller}`G Eraslan`; - {func}`~scanpy.pp.highly_variable_genes` has a `batch_key` option which performs HVG selection in each batch separately to avoid selecting genes that vary strongly across batches {pr}`622` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.rank_genes_groups` t-test implementation doesn't return NaN when variance is 0, also changed to scipy's implementation {pr}`621` {smaller}`I Virshup`; - {func}`~scanpy.tl.umap` with `init_pos='paga'` detects correct `dtype` {smaller}`A Wolf`; - {func}`~scanpy.tl.louvain` and {func}`~scanpy.tl.leiden` auto-generate `key_added=louvain_R` upon passing `restrict_to`, which was temporarily changed in `1.4.1` {smaller}`A Wolf`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap` got rid of UMAP legacy code and introduced UMAP as a dependency {pr}`576` {smaller}`S Rybakov`; ",MatchSource.DOCS,docs/release-notes/1.4.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.2.md
Performance,cache,cached,"### 1.4.3 {small}`2019-05-14`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.neighbors` correctly infers `n_neighbors` again from `params`, which was temporarily broken in `v1.4.2` {smaller}`I Virshup`. ```{rubric} Code design; ```. - {func}`~scanpy.pp.calculate_qc_metrics` is single threaded by default for datasets under 300,000 cells -- allowing cached compilation {pr}`615` {smaller}`I Virshup`; ",MatchSource.DOCS,docs/release-notes/1.4.3.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.3.md
Deployability,install,install,"### 1.4.5 {small}`2019-12-30`. Please install `scanpy==1.4.5.post3` instead of `scanpy==1.4.5`. ```{rubric} New functionality; ```. - {func}`~scanpy.tl.ingest` maps labels and embeddings of reference data to new data {doc}`/tutorials/basics/integrating-data-using-ingest` {pr}`651` {smaller}`S Rybakov, A Wolf`; - {mod}`~scanpy.queries` recieved many updates including enrichment through [gprofiler] and more advanced biomart queries {pr}`467` {smaller}`I Virshup`; - {func}`~scanpy.set_figure_params` allows setting `figsize` and accepts `facecolor='white'`, useful for working in dark mode {smaller}`A Wolf`. ```{rubric} Code design; ```. - {mod}`~scanpy.pp.downsample_counts` now always preserves the dtype of it's input, instead of converting floats to ints {pr}`865` {smaller}`I Virshup`; - allow specifying a base for {func}`~scanpy.pp.log1p` {pr}`931` {smaller}`G Eraslan`; - run neighbors on a GPU using rapids {pr}`830` {smaller}`T White`; - param docs from typed params {smaller}`P Angerer`; - {func}`~scanpy.tl.embedding_density` now only takes one positional argument; similar for {func}`~scanpy.pl.embedding_density`, which gains a param `groupby` {pr}`965` {smaller}`A Wolf`; - webpage overhaul, ecosystem page, release notes, tutorials overhaul {pr}`960` {pr}`966` {smaller}`A Wolf`. ```{warning}; - changed default `solver` in {func}`~scanpy.pp.pca` from `auto` to `arpack`; - changed default `use_raw` in {func}`~scanpy.tl.score_genes` from `False` to `None`; ```. [gprofiler]: https://biit.cs.ut.ee/gprofiler/; ",MatchSource.DOCS,docs/release-notes/1.4.5.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.5.md
Integrability,integrat,integrating-data-using-ingest,"### 1.4.5 {small}`2019-12-30`. Please install `scanpy==1.4.5.post3` instead of `scanpy==1.4.5`. ```{rubric} New functionality; ```. - {func}`~scanpy.tl.ingest` maps labels and embeddings of reference data to new data {doc}`/tutorials/basics/integrating-data-using-ingest` {pr}`651` {smaller}`S Rybakov, A Wolf`; - {mod}`~scanpy.queries` recieved many updates including enrichment through [gprofiler] and more advanced biomart queries {pr}`467` {smaller}`I Virshup`; - {func}`~scanpy.set_figure_params` allows setting `figsize` and accepts `facecolor='white'`, useful for working in dark mode {smaller}`A Wolf`. ```{rubric} Code design; ```. - {mod}`~scanpy.pp.downsample_counts` now always preserves the dtype of it's input, instead of converting floats to ints {pr}`865` {smaller}`I Virshup`; - allow specifying a base for {func}`~scanpy.pp.log1p` {pr}`931` {smaller}`G Eraslan`; - run neighbors on a GPU using rapids {pr}`830` {smaller}`T White`; - param docs from typed params {smaller}`P Angerer`; - {func}`~scanpy.tl.embedding_density` now only takes one positional argument; similar for {func}`~scanpy.pl.embedding_density`, which gains a param `groupby` {pr}`965` {smaller}`A Wolf`; - webpage overhaul, ecosystem page, release notes, tutorials overhaul {pr}`960` {pr}`966` {smaller}`A Wolf`. ```{warning}; - changed default `solver` in {func}`~scanpy.pp.pca` from `auto` to `arpack`; - changed default `use_raw` in {func}`~scanpy.tl.score_genes` from `False` to `None`; ```. [gprofiler]: https://biit.cs.ut.ee/gprofiler/; ",MatchSource.DOCS,docs/release-notes/1.4.5.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.5.md
Energy Efficiency,adapt,adapt,"### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; ",MatchSource.DOCS,docs/release-notes/1.4.6.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md
Modifiability,adapt,adapt,"### 1.4.6 {small}`2020-03-17`. ~~~{rubric} Functionality in `external`; ~~~. - {func}`~scanpy.external.tl.sam` self-assembling manifolds {cite:p}`Tarashansky2019` {pr}`903` {smaller}`A Tarashansky`; - {func}`~scanpy.external.tl.harmony_timeseries` for trajectory inference on discrete time points {pr}`994` {smaller}`A Mousa`; - {func}`~scanpy.external.tl.wishbone` for trajectory inference (bifurcations) {pr}`1063` {smaller}`A Mousa`. ```{rubric} Code design; ```. - {mod}`~scanpy.pl.violin` now reads `.uns['colors_...']` {pr}`1029` {smaller}`michalk8`. ```{rubric} Bug fixes; ```. - adapt {func}`~scanpy.tl.ingest` for UMAP 0.4 {pr}`1038` {pr}`1106` {smaller}`S Rybakov`; - compat with matplotlib 3.1 and 3.2 {pr}`1090` {smaller}`I Virshup, P Angerer`; - fix PAGA for new igraph {pr}`1037` {smaller}`P Angerer`; - fix rapids compat of louvain {pr}`1079` {smaller}`LouisFaure`; ",MatchSource.DOCS,docs/release-notes/1.4.6.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.4.6.md
Availability,error,errored,icient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {smaller}`simonwm`; - {func}`~scanpy.pp.normalize_total` errored if the passed object was a view {pr}`1200` {smaller}`I Virshup`; - {func}`~scanpy.pp.neighbors` sometimes ignored the `n_pcs` param {pr}`1124` {smaller}`V Bergen`; - {func}`~scanpy.datasets.ebi_expression_atlas` which contained some out-of-date URLs {pr}`1102` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` for UMAP `0.4` {pr}`1165` {smaller}`S Rybakov`; - {func}`~scanpy.tl.louvain` for Louvain `0.6` {pr}`1197` {smaller}`I Virshup`; - {func}`~scanpy.pp.highly_variable_genes` which could lead to incorrect results when the `batch_key` argument was used {pr}`1180` {smaller}`G Eraslan`; - {func}`~scanpy.tl.ingest` where an inconsistent number of neighbors was used {pr}`1111` {smaller}`S Rybakov`; ,MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Deployability,release,release,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Energy Efficiency,efficient,efficient," Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` ",MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Integrability,interface,interface,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Modifiability,layers,layers,"release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Erasl",MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Performance,load,load,"### 1.5.0 {small}`2020-05-15`. The `1.5.0` release adds a lot of new functionality, much of which takes advantage of {mod}`anndata` updates `0.7.0 - 0.7.2`. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. ```{rubric} Spatial data support; ```. - Basic analysis {doc}`/tutorials/spatial/basic-analysis` and integration with single cell data {doc}`/tutorials/spatial/integration-scanorama` {smaller}`G Palla`; - {func}`~scanpy.read_visium` read 10x Visium data {pr}`1034` {smaller}`G Palla, P Angerer, I Virshup`; - {func}`~scanpy.datasets.visium_sge` load Visium data directly from 10x Genomics {pr}`1013` {smaller}`M Mirkazemi, G Palla, P Angerer`; - {func}`~scanpy.pl.spatial` plot spatial data {pr}`1012` {smaller}`G Palla, P Angerer`. ```{rubric} New functionality; ```. - Many functions, like {func}`~scanpy.pp.neighbors` and {func}`~scanpy.tl.umap`, now store cell-by-cell graphs in {attr}`~anndata.AnnData.obsp` {pr}`1118` {smaller}`S Rybakov`; - {func}`~scanpy.pp.scale` and {func}`~scanpy.pp.log1p` can be used on any element in {attr}`~anndata.AnnData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {f",MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Testability,log,logging,nData.layers` or {attr}`~anndata.AnnData.obsm` {pr}`1173` {smaller}`I Virshup`. ```{rubric} External tools; ```. - `scanpy.external.pp.scvi` for preprocessing with scVI {pr}`1085` {smaller}`G Xing`; - Guide for using `Scanpy in R` {pr}`1186` {smaller}`L Zappia`. ```{rubric} Performance; ```. - {func}`~scanpy.pp.pca` now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets {pr}`1066` {smaller}`A Tarashansky`; - {func}`~scanpy.tl.score_genes` now has an efficient implementation for sparse matrices with missing values {pr}`1196` {smaller}`redst4r`. ```{warning}; The new {func}`~scanpy.pp.pca` implementation can result in slightly different results for sparse matrices. See the pr ({pr}`1066`) and documentation for more info.; ```. ```{rubric} Code design; ```. - {func}`~scanpy.pl.stacked_violin` can now be used as a subplot {pr}`1084` {smaller}`P Angerer`; - {func}`~scanpy.tl.score_genes` has improved logging {pr}`1119` {smaller}`G Eraslan`; - {func}`~scanpy.pp.scale` now saves mean and standard deviation in the {attr}`~anndata.AnnData.var` {pr}`1173` {smaller}`A Wolf`; - {func}`~scanpy.external.tl.harmony_timeseries` {pr}`1091` {smaller}`A Mousa`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.combat` now works when `obs_names` aren't unique. {pr}`1215` {smaller}`I Virshup`; - {func}`~scanpy.pp.scale` can now be used on dense arrays without centering {pr}`1160` {smaller}`simonwm`; - {func}`~scanpy.pp.regress_out` now works when some features are constant {pr}`1194` {smaller}`simonwm`; - {func}`~scanpy.pp.normalize_total` errored if the passed object was a view {pr}`1200` {smaller}`I Virshup`; - {func}`~scanpy.pp.neighbors` sometimes ignored the `n_pcs` param {pr}`1124` {smaller}`V Bergen`; - {func}`~scanpy.datasets.ebi_expression_atlas` which contained some out-of-date URLs {pr}`1102` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` for UMAP `0.4` {pr}`1165` {smaller}`S Rybakov`; - {func}`~scanp,MatchSource.DOCS,docs/release-notes/1.5.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.5.0.md
Deployability,release,release,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",MatchSource.DOCS,docs/release-notes/1.6.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md
Modifiability,variab,variable,"le` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like in matrixplots). - {func}`~scanpy.pl.stacked_violin` changes:. > - Violin colors can be colored based on average gene expression as in dotplots.; > - The linewidth of the violin plots is thinner.; > - Removed the tics for the y-axis as they tend to overlap with each other. Using the style method they can be displayed if needed. ```{rubric} Additions; ```. - {func}`~anndata.concat` is now exported from scanpy, see {doc}`anndata:concatenation` for more info. {pr}`1338` {smaller}`I Virshup`; - Added highly variable gene selection strategy from Seurat v3 {pr}`1204` {smaller}`A Gayoso`; - Added [CellRank](https://github.com/theislab/cellrank/) to scanpy ecosystem {pr}`1304` {smaller}`giovp`; - Added `backup_url` param to {func}`~scanpy.read_10x_h5` {pr}`1296` {smaller}`A Gayoso`; - Allow prefix for {func}`~scanpy.read_10x_mtx` {pr}`1250` {smaller}`G Sturm`; - Optional tie correction for the `'wilcoxon'` method in {func}`~scanpy.tl.rank_genes_groups` {pr}`1330` {smaller}`S Rybakov`; - Use `sinfo` for {func}`~scanpy.logging.print_versions` and add {func}`~scanpy.logging.print_header` to do what it previously did. {pr}`1338` {smaller}`I Virshup` {pr}`1373`. ```{rubric} Bug fixes; ```. - Avoid warning in {func}`~scanpy.tl.rank_genes_groups` if 't-test' is passed {pr}`1303` {smaller}`A Wolf`; - Restrict sphinx version to \<3.1, >3.0 {pr}`1297` {smaller}`I Virshup`; - Clean up `_ranks` and fix `dendrogram` for scipy 1.5 {pr}`1290` {smaller}`S Rybakov`; - Use `.raw` to translate gene symbols if applicable {pr}`1278` {smaller}`E ",MatchSource.DOCS,docs/release-notes/1.6.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md
Security,access,accessed,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",MatchSource.DOCS,docs/release-notes/1.6.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md
Testability,log,log,"### 1.6.0 {small}`2020-08-15`. This release includes an overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` ({pr}`1210` {smaller}`F Ramirez`), and of the internals of {func}`~scanpy.tl.rank_genes_groups` ({pr}`1156` {smaller}`S Rybakov`). ~~~{rubric} Overhaul of {func}`~scanpy.pl.dotplot`, {func}`~scanpy.pl.matrixplot`, and {func}`~scanpy.pl.stacked_violin` {pr}`1210` {smaller}`F Ramirez`; ~~~. - An overhauled tutorial {doc}`/tutorials/plotting/core`. - New plotting classes can be accessed directly (e.g., {class}`~scanpy.pl.DotPlot`) or using the `return_fig` param. - It is possible to plot log fold change and p-values in the {func}`~scanpy.pl.rank_genes_groups_dotplot` family of functions. - Added `ax` parameter which allows embedding the plot in other images. - Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category. - Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals. - Legends can be removed. - The `groupby` param can take a list of categories, e.g., `groupby=[‘tissue’, ‘cell type’]`. - Added padding parameter to `dotplot` and `stacked_violin`. {pr}`1270`. - Added title for colorbar and positioned as in dotplot for {func}`~scanpy.pl.matrixplot`. - {func}`~scanpy.pl.dotplot` changes:. > - Improved the colorbar and size legend for dotplots. Now the colorbar and size have titles, which can be modified using the `colorbar_title` and `size_title` params. They also align at the bottom of the image and do not shrink if the dotplot image is smaller.; > - Allow plotting genes in rows and categories in columns (`swap_axes`).; > - Using {class}`~scanpy.pl.DotPlot`, the `dot_edge_color` and line width can be modified, a grid can be added, and other modifications are enabled.; > - A new style was added in which the dots are replaced by an empty circle and the square behind the circle is colored (like",MatchSource.DOCS,docs/release-notes/1.6.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.6.0.md
Availability,down,download,"### 1.7.0 {small}`2021-02-03`. ```{rubric} Features; ```. - Add new 10x Visium datasets to {func}`~scanpy.datasets.visium_sge` {pr}`1473` {smaller}`G Palla`; - Enable download of source image for 10x visium datasets in {func}`~scanpy.datasets.visium_sge` {pr}`1506` {smaller}`H Spitzer`; - Refactor of {func}`scanpy.pl.spatial`. Better support for plotting without an image, as well as directly providing images {pr}`1512` {smaller}`G Palla`; - Dict input for {func}`scanpy.queries.enrich` {pr}`1488` {smaller}`G Eraslan`; - {func}`~scanpy.get.rank_genes_groups_df` can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo`",MatchSource.DOCS,docs/release-notes/1.7.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md
Deployability,integrat,integration," gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext",MatchSource.DOCS,docs/release-notes/1.7.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md
Integrability,integrat,integration," gene, and allows retrieving values for multiple groups at once {pr}`1388` {smaller}`G Eraslan`; - Color annotations for gene sets in {func}`~scanpy.pl.heatmap` are now matched to color for cluster {pr}`1511` {smaller}`L Sikkema`; - PCA plots can now annotate axes with variance explained {pr}`1470` {smaller}`bfurtwa`; - Plots with `groupby` arguments can now group by values in the index by passing the index's name (like `pd.DataFrame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.ext",MatchSource.DOCS,docs/release-notes/1.7.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md
Modifiability,refactor,refactoring,"old-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to {func}`~scanpy.tl.dendrogram` {pr}`1465` {smaller}`M Varma`; - Fixed download path of `pbmc3k_processed` {pr}`1472` {smaller}`D Strobl`; - Better error message when computing DE with a group of size 1 {pr}`1490` {smaller}`J Manning`; - Update cugraph API usage for v0.16 {pr}`1494` {smaller}`R Ilango`; - Fixed `marker_gene_overlap` default value for `top_n_markers` {pr}`1464` {smaller}`MD Luecken`; - Pass `random_state` to RAPIDs UMAP {pr}`1474` {smaller}`C Nolet`; - Fixed `anndata` version requirement for {func}`~anndata.concat` (re-exported from scanpy as `sc.concat`) {pr}`1491` {smaller}`I Virshup`; - Fixed the width of the progress bar when downloading data {pr}`1507` {smaller}`M Klein`; - Updated link for `moignard15` dataset {pr}`1542` {smaller}`I Virshup`; - Fixed bug where calling `set_figure_params` could block if IPython was installed, but not used. {pr}`1547` {smaller}`I Virshup`; - {func}`~scanpy.pl.violin` no longer fails if `.raw` not present {pr}`1548` {smaller}`I Virshup`; - {func}`~scanpy.pl.spatial` refactoring and better handling of spatial data {pr}`1512` {smaller}`G Palla`; - {func}`~scanpy.pp.pca` works with `chunked=True` again {pr}`1592` {smaller}`I Virshup`; - {func}`~scanpy.tl.ingest` now works with umap-learn 0.5.0 {pr}`1601` {smaller}`S Rybakov`; ",MatchSource.DOCS,docs/release-notes/1.7.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md
Security,hash,hashsolo,"Frame.groupby`). {pr}`1583` {smaller}`F Ramirez`; - Added `na_color` and `na_in_legend` keyword arguments to {func}`~scanpy.pl.embedding` plots. Allows specifying color for missing or filtered values in plots like {func}`~scanpy.pl.umap` or {func}`~scanpy.pl.spatial` {pr}`1356` {smaller}`I Virshup`; - {func}`~scanpy.pl.embedding` plots now support passing `dict` of `{cluster_name: cluster_color, ...}` for palette argument {pr}`1392` {smaller}`I Virshup`. ```{rubric} External tools (new); ```. - Add [Scanorama](https://github.com/brianhie/scanorama) integration to scanpy external API ({func}`~scanpy.external.pp.scanorama_integrate`, {cite:t}`Hie2019`) {pr}`1332` {smaller}`B Hie`; - Scrublet {cite:p}`Wolock2019` integration: {func}`~scanpy.pp.scrublet`, {func}`~scanpy.pp.scrublet_simulate_doublets`, and plotting method {func}`~scanpy.pl.scrublet_score_distribution` {pr}`1476` {smaller}`J Manning`; - {func}`~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{r",MatchSource.DOCS,docs/release-notes/1.7.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md
Usability,guid,guide,"~scanpy.external.pp.hashsolo` for HTO demultiplexing {cite:p}`Bernstein2020` {pr}`1432` {smaller}`NJ Bernstein`; - Added [scirpy](https://github.com/icbi-lab/scirpy) (sc-AIRR analysis) to ecosystem page {pr}`1453` {smaller}`G Sturm`; - Added [scvi-tools](https://scvi-tools.org) to ecosystem page {pr}`1421` {smaller}`A Gayoso`. ```{rubric} External tools (changes); ```. - Updates for {func}`~scanpy.external.tl.palantir` and {func}`~scanpy.external.tl.palantir_results` {pr}`1245` {smaller}`A Mousa`; - Fixes to {func}`~scanpy.external.tl.harmony_timeseries` docs {pr}`1248` {smaller}`A Mousa`; - Support for `leiden` clustering by {func}`scanpy.external.tl.phenograph` {pr}`1080` {smaller}`A Mousa`; - Deprecate `scanpy.external.pp.scvi` {pr}`1554` {smaller}`G Xing`; - Updated default params of {func}`~scanpy.external.tl.sam` to work with larger data {pr}`1540` {smaller}`A Tarashansky`. ```{rubric} Documentation; ```. - {ref}`New contribution guide <contribution-guide>` {pr}`1544` {smaller}`I Virshup`; - `zsh` installation instructions {pr}`1444` {smaller}`P Angerer`. ```{rubric} Performance; ```. - Speed up {func}`~scanpy.read_10x_h5` {pr}`1402` {smaller}`P Weiler`; - Speed ups for {func}`~scanpy.get.obs_df` {pr}`1499` {smaller}`F Ramirez`. ```{rubric} Bugfixes; ```. - Consistent fold-change, fractions calculation for filter_rank_genes_groups {pr}`1391` {smaller}`S Rybakov`; - Fixed bug where `score_genes` would error if one gene was passed {pr}`1398` {smaller}`I Virshup`; - Fixed `log1p` inplace on integer dense arrays {pr}`1400` {smaller}`I Virshup`; - Fix docstring formatting for {func}`~scanpy.tl.rank_genes_groups` {pr}`1417` {smaller}`P Weiler`; - Removed `` PendingDeprecationWarning`s from use of `np.matrix `` {pr}`1424` {smaller}`P Weiler`; - Fixed indexing byg in `~scanpy.pp.highly_variable_genes` {pr}`1456` {smaller}`V Bergen`; - Fix default number of genes for marker_genes_overlap {pr}`1464` {smaller}`MD Luecken`; - Fixed passing `groupby` and `dendrogram_key` to",MatchSource.DOCS,docs/release-notes/1.7.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.0.md
Availability,error,erroring,### 1.7.1 {small}`2021-02-24`. ```{rubric} Documentation; ```. - More twitter handles for core devs {pr}`1676` {smaller}`G Eraslan`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.tl.dendrogram` use `1 - correlation` as distance matrix to compute the dendrogram {pr}`1614` {smaller}`F Ramirez`; - Fixed {func}`~scanpy.get.obs_df`/ {func}`~scanpy.get.var_df` erroring when `keys` not passed {pr}`1637` {smaller}`I Virshup`; - Fixed argument handling for {func}`scanpy.pp.scrublet` {smaller}`J Manning`; - Fixed passing of `kwargs` to {func}`scanpy.pl.violin` when `stripplot` was also used {pr}`1655` {smaller}`M van den Beek`; - Fixed colorbar creation in `scanpy.pl.timeseries_as_heatmap` {pr}`1654` {smaller}`M van den Beek`; ,MatchSource.DOCS,docs/release-notes/1.7.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.1.md
Availability,error,error,"### 1.7.2 {small}`2021-04-07`. ```{rubric} Bug fixes; ```. - {func}`scanpy.logging.print_versions` now works when `python<3.8` {pr}`1691` {smaller}`I Virshup`; - {func}`scanpy.pp.regress_out` now uses `joblib` as the parallel backend, and should stop oversubscribing threads {pr}`1694` {smaller}`I Virshup`; - {func}`scanpy.pp.highly_variable_genes` with `flavor=""seurat_v3""` now returns correct gene means and -variances when used with `batch_key` {pr}`1732` {smaller}`J Lause`; - {func}`scanpy.pp.highly_variable_genes` now throws a warning instead of an error when non-integer values are passed for method `""seurat_v3""`. The check can be skipped by passing `check_values=False`. {pr}`1679` {smaller}`G Palla`. ```{rubric} Ecosystem; ```. - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`; ",MatchSource.DOCS,docs/release-notes/1.7.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.2.md
Testability,log,logging,"### 1.7.2 {small}`2021-04-07`. ```{rubric} Bug fixes; ```. - {func}`scanpy.logging.print_versions` now works when `python<3.8` {pr}`1691` {smaller}`I Virshup`; - {func}`scanpy.pp.regress_out` now uses `joblib` as the parallel backend, and should stop oversubscribing threads {pr}`1694` {smaller}`I Virshup`; - {func}`scanpy.pp.highly_variable_genes` with `flavor=""seurat_v3""` now returns correct gene means and -variances when used with `batch_key` {pr}`1732` {smaller}`J Lause`; - {func}`scanpy.pp.highly_variable_genes` now throws a warning instead of an error when non-integer values are passed for method `""seurat_v3""`. The check can be skipped by passing `check_values=False`. {pr}`1679` {smaller}`G Palla`. ```{rubric} Ecosystem; ```. - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`; ",MatchSource.DOCS,docs/release-notes/1.7.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.7.2.md
Availability,avail,available,"### 1.8.0 {small}`2021-06-28`. ```{rubric} Metrics module; ```. - Added {mod}`scanpy.metrics` module!. > - Added {func}`scanpy.metrics.gearys_c` for spatial autocorrelation {pr}`915` {smaller}`I Virshup`; > - Added {func}`scanpy.metrics.morans_i` for global spatial autocorrelation {pr}`1740` {smaller}`I Virshup, G Palla`; > - Added {func}`scanpy.metrics.confusion_matrix` for comparing labellings {pr}`915` {smaller}`I Virshup`. ```{rubric} Features; ```. - Added `layer` and `copy` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Added `vcenter` and `norm` arguments to the plotting functions {pr}`1551` {smaller}`G Eraslan`; - Standardized and expanded available arguments to the `sc.pl.rank_genes_groups*` family of functions. {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; \- See examples sections of {func}`~scanpy.pl.rank_genes_groups_dotplot` and {func}`~scanpy.pl.rank_genes_groups_matrixplot` for demonstrations.; - {func}`scanpy.tl.tsne` now supports the metric argument and records the passed parameters {pr}`1854` {smaller}`I Virshup`; - {func}`scanpy.pl.scrublet_score_distribution` now uses same API as other scanpy functions for saving/ showing plots {pr}`1741` {smaller}`J Manning`. ```{rubric} Ecosystem; ```. - Added [Cubé](https://github.com/connerlambden/Cube) to ecosystem page {pr}`1878` {smaller}`C Lambden`; - Added `triku` a feature selection method to the ecosystem page {pr}`1722` {smaller}`AM Ascensión`; - Added `dorothea` and `progeny` to the ecosystem page {pr}`1767` {smaller}`P Badia-i-Mompel`. ```{rubric} Documentation; ```. - Added {doc}`/community` page to docs {pr}`1856` {smaller}`I Virshup`; - Added rendered examples to many plotting functions {issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you",MatchSource.DOCS,docs/release-notes/1.8.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md
Deployability,deploy,deploying,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",MatchSource.DOCS,docs/release-notes/1.8.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md
Integrability,interface,interface,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",MatchSource.DOCS,docs/release-notes/1.8.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md
Modifiability,layers,layers,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",MatchSource.DOCS,docs/release-notes/1.8.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md
Safety,detect,detection,"{issue}`1664` {smaller}`A Schaar` {smaller}`L Zappia` {smaller}`bio-la` {smaller}`L Hetzel` {smaller}`L Dony` {smaller}`M Buttner` {smaller}`K Hrovatin` {smaller}`F Ramirez` {smaller}`I Virshup` {smaller}`LouisK92` {smaller}`mayarali`; - Integrated [DocSearch], a find-as-you-type documentation index search. {pr}`1754` {smaller}`P Angerer`; - - Reorganized reference docs {pr}`1753` {smaller}`I Virshup`; - Clarified docs issues for {func}`~scanpy.pp.neighbors`,; {func}`~scanpy.tl.diffmap`, {func}`~scanpy.pp.calculate_qc_metrics` {pr}`1680` {smaller}`G Palla`; - Fixed typos in grouped plot doc-strings {pr}`1877` {smaller}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smalle",MatchSource.DOCS,docs/release-notes/1.8.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md
Usability,simpl,simple,"er}`C Rands`; - Extended examples for differential expression plotting. {pr}`1529` {smaller}`F Ramirez`; \- See {func}`~scanpy.pl.rank_genes_groups_dotplot` or {func}`~scanpy.pl.rank_genes_groups_matrixplot` for examples. ```{rubric} Bug fixes; ```. - Fix {func}`scanpy.pl.paga_path` `TypeError` with recent versions of anndata {pr}`1047` {smaller}`P Angerer`; - Fix detection of whether IPython is running {pr}`1844` {smaller}`I Virshup`; - Fixed reproducibility of {func}`scanpy.tl.diffmap` (added random_state) {pr}`1858` {smaller}`I Kucinski`; - Fixed errors and warnings from embedding plots with small numbers of categories after `sns.set_palette` was called {pr}`1886` {smaller}`I Virshup`; - Fixed handling of `gene_symbols` argument in a number of `sc.pl.rank_genes_groups*` functions {pr}`1529` {smaller}`F Ramirez` {smaller}`I Virshup`; - Fixed handling of `use_raw` for `sc.tl.rank_genes_groups` when no `.raw` is present {pr}`1895` {smaller}`I Virshup`; - {func}`scanpy.pl.rank_genes_groups_violin` now works for `raw=False` {pr}`1669` {smaller}`M van den Beek`; - {func}`scanpy.pl.dotplot` now uses `smallest_dot` argument correctly {pr}`1771` {smaller}`S Flemming`. ```{rubric} Development processes; ```. - Switched to [flit] for building and deploying the package, a simple tool with an easy to understand command line interface and metadata {pr}`1527` {smaller}`P Angerer`; - Use [pre-commit](https://pre-commit.com) for style checks {pr}`1684` {pr}`1848` {smaller}`L Heumos` {smaller}`I Virshup`. ```{rubric} Deprecations; ```. - Dropped support for Python 3.6. [More details here](https://numpy.org/neps/nep-0029-deprecation_policy.html). {pr}`1897` {smaller}`I Virshup`; - Deprecated `layers` and `layers_norm` kwargs to {func}`~scanpy.pp.normalize_total` {pr}`1667` {smaller}`I Virshup`; - Deprecated `MulticoreTSNE` backend for {func}`scanpy.tl.tsne` {pr}`1854` {smaller}`I Virshup`. [docsearch]: https://docsearch.algolia.com/; [flit]: https://flit.readthedocs.io/en/latest/; ",MatchSource.DOCS,docs/release-notes/1.8.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.0.md
Deployability,install,installation,### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; ,MatchSource.DOCS,docs/release-notes/1.8.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md
Integrability,integrat,integrate,### 1.8.2 {small}`2021-11-3`. ```{rubric} Docs; ```. - Update conda installation instructions {pr}`1974` {smaller}`L Heumos`. ```{rubric} Bug fixes; ```. - Fix plotting after {func}`scanpy.tl.filter_rank_genes_groups` {pr}`1942` {smaller}`S Rybakov`; - Fix `use_raw=None` using {attr}`anndata.AnnData.var_names` if {attr}`anndata.AnnData.raw`; is present in {func}`scanpy.tl.score_genes` {pr}`1999` {smaller}`M Klein`; - Fix compatibility with UMAP 0.5.2 {pr}`2028` {smaller}`L Mcinnes`; - Fixed non-determinism in {func}`scanpy.pl.paga` node positions {pr}`1922` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. - Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem.; ,MatchSource.DOCS,docs/release-notes/1.8.2.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.8.2.md
Availability,error,errors,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",MatchSource.DOCS,docs/release-notes/1.9.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md
Deployability,install,installation,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",MatchSource.DOCS,docs/release-notes/1.9.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md
Integrability,depend,dependency,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",MatchSource.DOCS,docs/release-notes/1.9.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md
Modifiability,variab,variables,"- {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric",MatchSource.DOCS,docs/release-notes/1.9.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md
Security,hash,hashsolo,"y the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plots now have a `dimensions` argument, which lets users select which dimensions of their embedding to plot and uses the same broadcasting rules as other arguments {pr}`1538` {smaller}`I Virshup`; - {func}`~scanpy.logging.print_versions` now uses `session_info` {pr}`2089` {smaller}`P Angerer` {smaller}`I Virshup`. ```{rubric} Ecosystem; ```. Multiple packages have been added to our ecosystem page, including:. - [decoupler](https://github.com/saezlab/decoupler-py) a for footprint analysis and pathway enrichement {pr}`2186` {smaller}`PB Mompel`; - [dandelion](https://github.com/zktuong/dandelion) for B-cell receptor analysis {pr}`1953` {smaller}`Z Tuong`; - [CIARA](https://github.com/ScialdoneLab/CIARA_python) a feature selection tools for identifying rare cell types {pr}`2175` {smaller}`M Stock`. ```{rubric} Bug fixes; ```. - Fixed finding variables with `use_raw=True` and `basis=None` in {func}`scanpy.pl.scatter` {pr}`2027` {smaller}`E Rice`; - Fixed {func}`scanpy.pp.scrublet` to address {issue}`1957` {smaller}`FlMai` and ensure raw counts are used for simulation; - Functions in {mod}`scanpy.datasets` no longer throw `OldFormatWarnings` when using `anndata` `0.8` {pr}`2096` {smaller}`I Virshup`; - Fixed use of {func}`scanpy.pp.neighbors` with `method='rapids'`: RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. {pr}`1828` {smaller}`M Zaslavsky`; - Removed `pytables` dependency by implementing `read_10x_h5` with `h5py` due to installation errors on Windows {pr}`2064`; - Fixed bug in {func}`scanpy.external.pp.hashsolo` where default value was set improperly {pr}`2190` {smaller}`B Reiz`; - Fixed bug in {func}`scanpy.pl.embedding` functions where an error could be raised when there were missing values and large numbers of categories {pr}`2187` {smaller}`I Virshup`; ",MatchSource.DOCS,docs/release-notes/1.9.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md
Testability,log,log,"ist=PL4rcQcNPLZxWQQH7LlRBMkAo5NWuHX1e3) for Scanpy workshops by Maren Büttner. ```{rubric} Experimental module; ```. - Added {mod}`scanpy.experimental` module! Currently contains functionality related to pearson residuals in {mod}`scanpy.experimental.pp` {pr}`1715` {smaller}`J Lause, G Palla, I Virshup`. This includes:. - {func}`~scanpy.experimental.pp.normalize_pearson_residuals` for Pearson Residuals normalization; - {func}`~scanpy.experimental.pp.highly_variable_genes` for HVG selection with Pearson Residuals; - {func}`~scanpy.experimental.pp.normalize_pearson_residuals_pca` for Pearson Residuals normalization and dimensionality reduction with PCA; - {func}`~scanpy.experimental.pp.recipe_pearson_residuals` for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. ```{rubric} Features; ```. - {func}`~scanpy.tl.filter_rank_genes_groups` now allows to filter with absolute values of log fold change {pr}`1649` {smaller}`S Rybakov`; - `_choose_representation` now subsets the provided representation to n_pcs, regardless of the name of the provided representation (should affect mostly {func}`~scanpy.pp.neighbors`) {pr}`2179` {smaller}`I Virshup` {smaller}`PG Majev`; - {func}`scanpy.pp.scrublet` (and related functions) can now be used on `AnnData` objects containing multiple batches {pr}`1965` {smaller}`J Manning`; - Number of variables plotted with {func}`~scanpy.pl.pca_loadings` can now be controlled with `n_points` argument. Additionally, variables are no longer repeated if the anndata has less than 30 variables {pr}`2075` {smaller}`Yves33`; - Dask arrays now work with {func}`scanpy.pp.normalize_total` {pr}`1663` {smaller}`G Buckley, I Virshup`; - {func}`~scanpy.pl.embedding_density` now allows more than 10 groups {pr}`1936` {smaller}`A Wolf`; - Embedding plots can now pass `colorbar_loc` to specify the location of colorbar legend, or pass `None` to not show a colorbar {pr}`1821` {smaller}`A Schaar` {smaller}`I Virshup`; - Embedding plot",MatchSource.DOCS,docs/release-notes/1.9.0.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.0.md
Deployability,install,installed,### 1.9.1 {small}`2022-04-05`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.normalize_total` works when Dask is not installed {pr}`2209` {smaller}`R Cannoodt`; - Fix embedding plots by bumping matplotlib dependency to version 3.4 {pr}`2212` {smaller}`I Virshup`; ,MatchSource.DOCS,docs/release-notes/1.9.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.1.md
Integrability,depend,dependency,### 1.9.1 {small}`2022-04-05`. ```{rubric} Bug fixes; ```. - {func}`~scanpy.pp.normalize_total` works when Dask is not installed {pr}`2209` {smaller}`R Cannoodt`; - Fix embedding plots by bumping matplotlib dependency to version 3.4 {pr}`2212` {smaller}`I Virshup`; ,MatchSource.DOCS,docs/release-notes/1.9.1.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.1.md
Testability,log,logreg,"### 1.9.4 {small}`2023-08-24`. ```{rubric} Bug fixes; ```. * Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`; * Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`; * Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`; * {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`; * {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=""logreg""` {pr}`2601` {smaller}`S Dicks`; * `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`; ",MatchSource.DOCS,docs/release-notes/1.9.4.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.4.md
Usability,learn,learn,"### 1.9.4 {small}`2023-08-24`. ```{rubric} Bug fixes; ```. * Support scikit-learn 1.3 {pr}`2515` {smaller}`P Angerer`; * Deal with `None` value vanishing from things like `.uns['log1p']` {pr}`2546` {smaller}`SP Shen`; * Depend on `igraph` instead of `python-igraph` {pr}`2566` {smaller}`P Angerer`; * {func}`~scanpy.tl.rank_genes_groups` now handles unsorted groups as intended {pr}`2589` {smaller}`S Dicks`; * {func}`~scanpy.get.rank_genes_groups_df` now works for {func}`~scanpy.tl.rank_genes_groups` with `method=""logreg""` {pr}`2601` {smaller}`S Dicks`; * `scanpy.tl._utils._choose_representation` now works with `n_pcs` if bigger than `settings.N_PCS` {pr}`2610` {smaller}`S Dicks`; ",MatchSource.DOCS,docs/release-notes/1.9.4.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.4.md
Integrability,depend,dependency,### 1.9.7 {small}`2024-01-25`. ```{rubric} Bug fixes; ```; - Fix handling of numpy array palettes (e.g. after write-read cycle) {pr}`2734` {smaller}`P Angerer`; - Specify correct version of `matplotlib` dependency {pr}`2733` {smaller}`P Fisher`; - Fix {func}`scanpy.pl.violin` usage of `seaborn.catplot` {pr}`2739` {smaller}`E Roellin`; - Fix {func}`scanpy.pp.highly_variable_genes` to handle the combinations of `inplace` and `subset` consistently {pr}`2757` {smaller}`E Roellin`; - Replace usage of various deprecated functionality from {mod}`anndata` and {mod}`pandas` {pr}`2678` {pr}`2779` {smaller}`P Angerer`; - Allow to use default `n_top_genes` when using {func}`scanpy.pp.highly_variable_genes` flavor `'seurat_v3'` {pr}`2782` {smaller}`P Angerer`; - Fix {func}`scanpy.read_10x_mtx`’s `gex_only=True` mode {pr}`2801` {smaller}`P Angerer`; ,MatchSource.DOCS,docs/release-notes/1.9.7.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/1.9.7.md
Deployability,release,release-notes,(release-notes)=. # Release notes. ## Version 1.10. ```{include} /release-notes/1.10.3.md; ```. ```{include} /release-notes/1.10.2.md; ```. ```{include} /release-notes/1.10.1.md; ```. ```{include} /release-notes/1.10.0.md; ```. ## Version 1.9. ```{include} /release-notes/1.9.8.md; ```. ```{include} /release-notes/1.9.7.md; ```. ```{include} /release-notes/1.9.6.md; ```. ```{include} /release-notes/1.9.5.md; ```. ```{include} /release-notes/1.9.4.md; ```. ```{include} /release-notes/1.9.3.md; ```. ```{include} /release-notes/1.9.2.md; ```. ```{include} /release-notes/1.9.1.md; ```. ```{include} /release-notes/1.9.0.md; ```. ## Version 1.8. ```{include} /release-notes/1.8.2.md; ```. ```{include} /release-notes/1.8.1.md; ```. ```{include} /release-notes/1.8.0.md; ```. ## Version 1.7. ```{include} /release-notes/1.7.2.md; ```. ```{include} /release-notes/1.7.1.md; ```. ```{include} /release-notes/1.7.0.md; ```. ## Version 1.6. ```{include} 1.6.0.md; ```. ## Version 1.5. ```{include} 1.5.1.md; ```. ```{include} 1.5.0.md; ```. ## Version 1.4. ```{include} 1.4.6.md; ```. ```{include} 1.4.5.md; ```. ```{include} 1.4.4.md; ```. ```{include} 1.4.3.md; ```. ```{include} 1.4.2.md; ```. ```{include} 1.4.1.md; ```. ## Version 1.3. ```{include} 1.3.8.md; ```. ```{include} 1.3.7.md; ```. ```{include} 1.3.6.md; ```. ```{include} 1.3.5.md; ```. ```{include} 1.3.4.md; ```. ```{include} 1.3.3.md; ```. ```{include} 1.3.1.md; ```. ## Version 1.2. ```{include} 1.2.1.md; ```. ```{include} 1.2.0.md; ```. ## Version 1.1. ```{include} 1.1.0.md; ```. ## Version 1.0. ```{include} 1.0.0.md; ```. ## Version 0.4. ```{include} 0.4.4.md; ```. ```{include} 0.4.3.md; ```. ```{include} 0.4.2.md; ```. ```{include} 0.4.0.md; ```. ## Version 0.3. ```{include} 0.3.2.md; ```. ```{include} 0.3.0.md; ```. ## Version 0.2. ```{include} 0.2.9.md; ```. ```{include} 0.2.1.md; ```. ## Version 0.1. ```{include} 0.1.0.md; ```; ,MatchSource.DOCS,docs/release-notes/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/release-notes/index.md
Deployability,release,release,"# Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; ",MatchSource.DOCS,docs/tutorials/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md
Energy Efficiency,power,powerful,"# Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; ",MatchSource.DOCS,docs/tutorials/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md
Usability,learn,learn,"# Tutorials. :::{seealso}; For more tutorials featureing scanpy and other [scverse](https://scverse.org) ecosystem tools, check out the curated set of tutorials at [scverse.org/learn](https://scverse.org/learn); :::. ## Basic workflows. ```{toctree}; :maxdepth: 2. basics/index; ```. ## Visualization. ```{toctree}; :maxdepth: 2. plotting/index; ```. ## Trajectory inference. ```{seealso}; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. * [CellRank](https://cellrank.readthedocs.io); * [Dynamo](https://dynamo-release.readthedocs.io/en/latest/); ```. ```{toctree}; :maxdepth: 2. trajectories/index; ```. ## Spatial data. ```{seealso}; For more up-to-date tutorials on working with spatial data, see:. * [SquidPy tutorials](https://squidpy.readthedocs.io/en/stable/notebooks/tutorials/index.html); * [SpatialData tutorials](https://spatialdata.scverse.org/en/latest/tutorials/notebooks/notebooks.html); * [Scverse ecosystem spatial tutorials](https://scverse.org/learn/); ```. ```{toctree}; :maxdepth: 2. spatial/index; ```. ## Experimental. ```{toctree}; :maxdepth: 2. experimental/index; ```. ## Older tutorials. A number of older tutorials can be found at:. * The [`scanpy_usage`](https://github.com/scverse/scanpy_usage) repository; ",MatchSource.DOCS,docs/tutorials/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/index.md
Deployability,integrat,integrating-data-using-ingest,# Basics. ```{toctree}; :maxdepth: 1. clustering; clustering-2017; integrating-data-using-ingest; ```; ,MatchSource.DOCS,docs/tutorials/basics/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/basics/index.md
Integrability,integrat,integrating-data-using-ingest,# Basics. ```{toctree}; :maxdepth: 1. clustering; clustering-2017; integrating-data-using-ingest; ```; ,MatchSource.DOCS,docs/tutorials/basics/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/basics/index.md
Deployability,integrat,integration-scanorama,## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; ,MatchSource.DOCS,docs/tutorials/spatial/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md
Integrability,integrat,integration-scanorama,## Spatial. ```{toctree}; :maxdepth: 1. basic-analysis; integration-scanorama; ```; ,MatchSource.DOCS,docs/tutorials/spatial/index.md,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/docs/tutorials/spatial/index.md
Deployability,update,update,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",MatchSource.DOCS,src/scanpy/sim_models/krumsiek11.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt
Modifiability,variab,variable,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",MatchSource.DOCS,src/scanpy/sim_models/krumsiek11.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt
Testability,log,logical,"# See Table 1 in Krumsiek et al. (2011), p. 3 or; # Table 1, in Suppl. Mat. of Moignard et al. (2015), p. 28.; #; # For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.02; #; # boolean update rules:; Gata2 = Gata2 and not (Gata1 and Fog1) and not Pu.1; Gata1 = (Gata1 or Gata2 or Fli1) and not Pu.1; Fog1 = Gata1; EKLF = Gata1 and not Fli1; Fli1 = Gata1 and not EKLF; SCL = Gata1 and not Pu.1; Cebpa = Cebpa and not (Gata1 and Fog1 and SCL); Pu.1 = (Cebpa or Pu.1) and not (Gata1 or Gata2); cJun = Pu.1 and not Gfi1; EgrNab = (Pu.1 and cJun) and not Gfi1; Gfi1 = Cebpa and not EgrNab; # coupling list:; Gata2 Gata2 1.0; Gata2 Gata1 -0.1; Gata2 Fog1 -1.0; Gata2 Pu.1 -1.15; Gata1 Gata2 1.0; Gata1 Gata1 0.1; Gata1 Fli1 1.0; Gata1 Pu.1 -1.21; Fog1 Gata1 0.1; EKLF Gata1 0.2; EKLF Fli1 -1.0; Fli1 Gata1 0.2; Fli1 EKLF -1.0; SCL Gata1 1.0; SCL Pu.1 -1.0; Cebpa Gata1 -1.0; Cebpa Fog1 -1.0; Cebpa SCL -1.0; Cebpa Cebpa 10.0; Pu.1 Gata2 -1.0; Pu.1 Gata1 -1.0; Pu.1 Cebpa 10.0; Pu.1 Pu.1 10.0; cJun Pu.1 1.0; cJun Gfi1 -1.0; EgrNab Pu.1 1.0; EgrNab cJun 1.0; EgrNab Gfi1 -1.3; Gfi1 Cebpa 1.0; Gfi1 EgrNab -5.0; ",MatchSource.DOCS,src/scanpy/sim_models/krumsiek11.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/krumsiek11.txt
Deployability,update,update,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",MatchSource.DOCS,src/scanpy/sim_models/toggleswitch.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt
Modifiability,variab,variable,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",MatchSource.DOCS,src/scanpy/sim_models/toggleswitch.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt
Testability,log,logical,"# For each ""variable = "", there must be a right hand side:; # either an empty string or a python-style logical expression; # involving variable names, ""or"", ""and"", ""("", "")"".; # The order of equations matters!; #; # modelType = hill; # invTimeStep = 0.1; #; # boolean update rules:; 0 = 0 and not 1; 1 = 1 and not 0; # coupling list:; 0 0 1.0; 0 1 -1.0; 1 1 1.0; 1 0 -1.0; ",MatchSource.DOCS,src/scanpy/sim_models/toggleswitch.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch.txt
Deployability,toggle,toggleswitch,model = SCANPY_PATH/sim_models/toggleswitch.txt; tmax = 100; branching = True; nrRealizations = 2; noiseObs = 0.01; noiseDyn = 0.001; step = 1; seed = 0; ,MatchSource.DOCS,src/scanpy/sim_models/toggleswitch_params.txt,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/src/scanpy/sim_models/toggleswitch_params.txt
